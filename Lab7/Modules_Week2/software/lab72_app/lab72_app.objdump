
lab72_app.elf:     file format elf32-littlenios2
lab72_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000e53c memsz 0x0000e53c flags r-x
    LOAD off    0x0000f55c vaddr 0x0800e55c paddr 0x080104a0 align 2**12
         filesz 0x00001f44 memsz 0x00001f44 flags rw-
    LOAD off    0x000123e4 vaddr 0x080123e4 paddr 0x080123e4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dfe4  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000348  0800e214  0800e214  0000f214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f44  0800e55c  080104a0  0000f55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  080123e4  080123e4  000123e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000114a0  2**0
                  CONTENTS
  7 .sdram        00000000  08012544  08012544  000114a0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000114a0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ba0  00000000  00000000  000114c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000168d7  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006490  00000000  00000000  0002893f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008532  00000000  00000000  0002edcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001898  00000000  00000000  00037304  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000032f9  00000000  00000000  00038b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015095  00000000  00000000  0003be95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00050f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001408  00000000  00000000  00050f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00054e86  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00054e89  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00054e95  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00054e96  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00054e97  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00054e9b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00054e9f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00054ea3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00054eac  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00054eb5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00054ebe  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002a  00000000  00000000  00054ec6  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e6f  00000000  00000000  00054ef0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00090e9b  00000000  00000000  00059d5f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0800e214 l    d  .rodata	00000000 .rodata
0800e55c l    d  .rwdata	00000000 .rwdata
080123e4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08012544 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/University/Y3/ECE385/Lab7/Modules_Week2/software/lab72_app_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08010458 l     O .rwdata	00000004 vga_ctrl
0800e55c l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 palette_test.c
0801045c l     O .rwdata	00000004 vga_ctrl
0800e6cc l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
08010460 l     O .rwdata	00000004 vga_ctrl
0800e83c l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e2aa l     O .rodata	00000010 zeroes.4389
0800e2ba l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
08003060 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
0800e9ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800edf0 l     O .rwdata	00000020 lc_ctype_charset
0800edd0 l     O .rwdata	00000020 lc_message_charset
0800ee10 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0800e2ec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800e410 l     O .rodata	00000010 zeroes.4333
0800e420 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0800be58 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08010478 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800c0e8 l     F .text	00000034 alt_dev_reg
0800f250 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800c3dc l     F .text	0000020c altera_avalon_jtag_uart_irq
0800c5e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800cc20 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0800cf98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0800d0cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800d0f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800d558 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800d6b8 l     F .text	0000003c alt_get_errno
0800d6f4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08012418 g     O .bss	00000004 alt_instruction_exception_handler
08006364 g     F .text	00000074 _mprec_log10
08006450 g     F .text	0000008c __any_on
0800e2f8 g     O .rodata	00000028 __mprec_tinytens
0800bf44 g     F .text	0000007c alt_main
08012444 g     O .bss	00000100 alt_irq
080104a0 g       *ABS*	00000000 __flash_rwdata_start
0800a830 g     F .text	00000088 .hidden __eqdf2
08012544 g       *ABS*	00000000 __alt_heap_start
08004910 g     F .text	0000007c _setlocale_r
0800bfe4 g     F .text	00000024 __malloc_unlock
08000784 g     F .text	0000026c textVGAColorScreenSaver
08008100 g     F .text	0000015c memmove
08005424 g     F .text	000000a8 _Balloc
0800a8b8 g     F .text	000000dc .hidden __gtdf2
0800db64 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080123fc g     O .bss	00000004 errno
08006850 g     F .text	000013a0 ___svfiprintf_internal_r
08012404 g     O .bss	00000004 alt_argv
08018458 g       *ABS*	00000000 _gp
0800c0b8 g     F .text	00000030 usleep
0800044c g     F .text	00000050 textVGAColorClr
080102d8 g     O .rwdata	00000180 alt_fd_list
0800db88 g     F .text	00000090 alt_find_dev
080052dc g     F .text	00000148 memcpy
0800bc70 g     F .text	000000dc .hidden __floatsidf
0800d63c g     F .text	0000007c alt_io_redirect
0800a994 g     F .text	000000f4 .hidden __ltdf2
0800e214 g       *ABS*	00000000 __DTOR_END__
0800dde4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080064dc g     F .text	00000074 __fpclassifyd
080062c0 g     F .text	000000a4 __ratio
0800c7e0 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08000ae8 g     F .text	00000064 .hidden __udivsi3
0800e348 g     O .rodata	000000c8 __mprec_tens
0800498c g     F .text	0000000c __locale_charset
080123f8 g     O .bss	00000004 __malloc_top_pad
0801046c g     O .rwdata	00000004 __mb_cur_max
080049bc g     F .text	0000000c _localeconv_r
08005858 g     F .text	0000003c __i2b
08006550 g     F .text	00000054 _sbrk_r
0801048c g     O .rwdata	00000004 alt_max_fd
080123f4 g     O .bss	00000004 __malloc_max_sbrked_mem
080095b4 g     F .text	000008ac .hidden __adddf3
08006068 g     F .text	0000010c __b2d
08008ff0 g     F .text	000005c4 .hidden __umoddi3
08010464 g     O .rwdata	00000004 _global_impure_ptr
08008384 g     F .text	00000564 _realloc_r
08012544 g       *ABS*	00000000 __bss_end
0800d468 g     F .text	000000f0 alt_iic_isr_register
0800da5c g     F .text	00000108 alt_tick
080089f4 g     F .text	000005fc .hidden __udivdi3
0800e320 g     O .rodata	00000028 __mprec_bigtens
0800563c g     F .text	00000104 __s2b
0800bd4c g     F .text	000000a8 .hidden __floatunsidf
08005da8 g     F .text	00000060 __mcmp
0800d41c g     F .text	0000004c alt_ic_irq_enabled
0800d9c0 g     F .text	0000009c alt_alarm_stop
0801240c g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
080102b0 g     O .rwdata	00000028 alt_dev_null
0800d0ac g     F .text	00000020 alt_dcache_flush_all
08005740 g     F .text	00000068 __hi0bits
0800bbf0 g     F .text	00000080 .hidden __fixdfsi
080104a0 g       *ABS*	00000000 __ram_rwdata_end
08010484 g     O .rwdata	00000008 alt_dev_list
0800e55c g       *ABS*	00000000 __ram_rodata_end
0800a994 g     F .text	000000f4 .hidden __ledf2
08005b20 g     F .text	00000140 __pow5mult
080123ec g     O .bss	00000004 __nlocale_changed
08000b4c g     F .text	00000058 .hidden __umodsi3
08012544 g       *ABS*	00000000 end
0800c31c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0800e214 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800cc98 g     F .text	0000007c alt_avalon_timer_sc_init
0800bdf4 g     F .text	00000064 .hidden __clzsi2
0800c9fc g     F .text	00000224 altera_avalon_jtag_uart_write
080051f8 g     F .text	000000e4 memchr
08000c48 g     F .text	00000058 _sprintf_r
08007df0 g     F .text	00000310 _free_r
08004998 g     F .text	00000010 __locale_mb_cur_max
0800e060 g     F .text	00000180 __call_exitprocs
080123e8 g     O .bss	00000004 __mlocale_changed
08010470 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08012410 g     O .bss	00000004 _alt_tick_rate
08000be4 g     F .text	00000064 rand
08005c60 g     F .text	00000148 __lshift
08012414 g     O .bss	00000004 _alt_nticks
0800c154 g     F .text	00000064 alt_sys_init
08006680 g     F .text	000001d0 __ssprint_r
0800df48 g     F .text	00000118 __register_exitproc
08005894 g     F .text	0000028c __multiply
0800c688 g     F .text	00000068 altera_avalon_jtag_uart_close
08000ba4 g     F .text	00000028 .hidden __mulsi3
0800e55c g       *ABS*	00000000 __ram_rwdata_start
0800e214 g       *ABS*	00000000 __ram_rodata_start
0801241c g     O .bss	00000028 __malloc_current_mallinfo
08006174 g     F .text	0000014c __d2b
0800c1b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800dd20 g     F .text	000000c4 alt_get_fd
0800ce40 g     F .text	00000158 alt_busy_sleep
0800decc g     F .text	0000007c memcmp
0800c278 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08012544 g       *ABS*	00000000 __alt_stack_base
0800c2c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08009e60 g     F .text	000009d0 .hidden __divdf3
080063d8 g     F .text	00000078 __copybits
0800ee48 g     O .rwdata	00000408 __malloc_av_
0800aa88 g     F .text	0000086c .hidden __muldf3
0800dc18 g     F .text	00000108 alt_find_file
0800d134 g     F .text	000000a4 alt_dev_llist_insert
0800bfc0 g     F .text	00000024 __malloc_lock
0800c008 g     F .text	000000b0 sbrk
08000da4 g     F .text	000022bc ___svfprintf_internal_r
08007bf0 g     F .text	000000dc _calloc_r
080123e4 g       *ABS*	00000000 __bss_start
0800825c g     F .text	00000128 memset
0800026c g     F .text	0000002c main
08012408 g     O .bss	00000004 alt_envp
080123f0 g     O .bss	00000004 __malloc_max_total_mem
0800c218 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08000bcc g     F .text	00000018 srand
0c000000 g       *ABS*	00000000 __alt_heap_limit
08003288 g     F .text	00001688 _dtoa_r
080049ec g     F .text	0000080c _malloc_r
08010490 g     O .rwdata	00000004 alt_errno
080009f0 g     F .text	00000084 .hidden __divsi3
080005ac g     F .text	000001d8 setColorPalette
08007ccc g     F .text	00000124 _malloc_trim_r
0800e214 g       *ABS*	00000000 __CTOR_END__
080065a4 g     F .text	000000dc strcmp
0800e214 g       *ABS*	00000000 __flash_rodata_start
0800e214 g       *ABS*	00000000 __DTOR_LIST__
0800a830 g     F .text	00000088 .hidden __nedf2
0800c11c g     F .text	00000038 alt_irq_init
0800d93c g     F .text	00000084 alt_release_fd
08000ca0 g     F .text	0000006c sprintf
0800e430 g     O .rodata	00000100 .hidden __clz_tab
080123e4 g     O .bss	00000004 _PathLocale
0800de80 g     F .text	00000014 atexit
080049c8 g     F .text	00000018 setlocale
08010468 g     O .rwdata	00000004 _impure_ptr
08012400 g     O .bss	00000004 alt_argc
0800d238 g     F .text	00000060 _do_dtors
080049b4 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08006004 g     F .text	00000064 __ulp
0801047c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
080049e0 g     F .text	0000000c localeconv
0800d2b8 g     F .text	00000050 alt_ic_isr_register
080104a0 g       *ABS*	00000000 _edata
08012544 g       *ABS*	00000000 _end
08000230 g       *ABS*	00000000 __ram_exceptions_end
0800c6f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0800049c g     F .text	00000110 textVGADrawColorText
0800d390 g     F .text	0000008c alt_ic_irq_disable
08010474 g     O .rwdata	00000004 __malloc_trim_threshold
080049a8 g     F .text	0000000c __locale_msgcharset
0800de94 g     F .text	00000038 exit
08005e08 g     F .text	000001fc __mdiff
08000a74 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800e1e0 g     F .text	00000034 _exit
0800cd14 g     F .text	0000012c alt_alarm_start
080088e8 g     F .text	0000010c .hidden __muldi3
08000d0c g     F .text	00000098 strlen
0800d7e0 g     F .text	0000015c open
0800a8b8 g     F .text	000000dc .hidden __gedf2
0800d298 g     F .text	00000020 alt_icache_flush_all
08010494 g     O .rwdata	00000004 alt_priority_mask
0800d308 g     F .text	00000088 alt_ic_irq_enable
0800b2f4 g     F .text	000008fc .hidden __subdf3
080057a8 g     F .text	000000b0 __lo0bits
08010498 g     O .rwdata	00000008 alt_alarm_list
0800d1d8 g     F .text	00000060 _do_ctors
0800cfd4 g     F .text	000000d8 close
08000298 g     F .text	000001b4 paletteTest
0800bec0 g     F .text	00000084 alt_load
080054f4 g     F .text	00000148 __multadd
080054cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10891104 	addi	r2,r2,9284
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10891104 	addi	r2,r2,9284
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a7f017 	ldw	r2,-24640(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a7f017 	ldw	r2,-24640(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6a11614 	ori	gp,gp,33880
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	1088f914 	ori	r2,r2,9188

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18c95114 	ori	r3,r3,9540

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800bec00 	call	800bec0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800bf440 	call	800bf44 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <main>:
#include "text_mode_vga_color.h"
#include "palette_test.h"

int main(){
 800026c:	defffe04 	addi	sp,sp,-8
 8000270:	dfc00115 	stw	ra,4(sp)
 8000274:	df000015 	stw	fp,0(sp)
 8000278:	d839883a 	mov	fp,sp
	paletteTest();
 800027c:	80002980 	call	8000298 <paletteTest>
//	textVGAColorScreenSaver();
	return 0;
 8000280:	0005883a 	mov	r2,zero
}
 8000284:	e037883a 	mov	sp,fp
 8000288:	dfc00117 	ldw	ra,4(sp)
 800028c:	df000017 	ldw	fp,0(sp)
 8000290:	dec00204 	addi	sp,sp,8
 8000294:	f800283a 	ret

08000298 <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
 8000298:	defffa04 	addi	sp,sp,-24
 800029c:	dfc00515 	stw	ra,20(sp)
 80002a0:	df000415 	stw	fp,16(sp)
 80002a4:	dc400315 	stw	r17,12(sp)
 80002a8:	dc000215 	stw	r16,8(sp)
 80002ac:	df000404 	addi	fp,sp,16
	textVGAColorClr();
 80002b0:	800044c0 	call	800044c <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
 80002b4:	00800044 	movi	r2,1
 80002b8:	d8800015 	stw	r2,0(sp)
 80002bc:	000f883a 	mov	r7,zero
 80002c0:	000d883a 	mov	r6,zero
 80002c4:	000b883a 	mov	r5,zero
 80002c8:	01020074 	movhi	r4,2049
 80002cc:	21388504 	addi	r4,r4,-7660
 80002d0:	800049c0 	call	800049c <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
 80002d4:	e03ffd15 	stw	zero,-12(fp)
 80002d8:	00005106 	br	8000420 <paletteTest+0x188>
	{
		usleep (20000);
 80002dc:	01138804 	movi	r4,20000
 80002e0:	800c0b80 	call	800c0b8 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
 80002e4:	8000be40 	call	8000be4 <rand>
 80002e8:	1007883a 	mov	r3,r2
 80002ec:	00a00034 	movhi	r2,32768
 80002f0:	108003c4 	addi	r2,r2,15
 80002f4:	1884703a 	and	r2,r3,r2
 80002f8:	1000040e 	bge	r2,zero,800030c <paletteTest+0x74>
 80002fc:	10bfffc4 	addi	r2,r2,-1
 8000300:	00fffc04 	movi	r3,-16
 8000304:	10c4b03a 	or	r2,r2,r3
 8000308:	10800044 	addi	r2,r2,1
 800030c:	14003fcc 	andi	r16,r2,255
 8000310:	8000be40 	call	8000be4 <rand>
 8000314:	1007883a 	mov	r3,r2
 8000318:	00a00034 	movhi	r2,32768
 800031c:	108003c4 	addi	r2,r2,15
 8000320:	1884703a 	and	r2,r3,r2
 8000324:	1000040e 	bge	r2,zero,8000338 <paletteTest+0xa0>
 8000328:	10bfffc4 	addi	r2,r2,-1
 800032c:	00fffc04 	movi	r3,-16
 8000330:	10c4b03a 	or	r2,r2,r3
 8000334:	10800044 	addi	r2,r2,1
 8000338:	14403fcc 	andi	r17,r2,255
 800033c:	8000be40 	call	8000be4 <rand>
 8000340:	1007883a 	mov	r3,r2
 8000344:	00a00034 	movhi	r2,32768
 8000348:	108003c4 	addi	r2,r2,15
 800034c:	1884703a 	and	r2,r3,r2
 8000350:	1000040e 	bge	r2,zero,8000364 <paletteTest+0xcc>
 8000354:	10bfffc4 	addi	r2,r2,-1
 8000358:	00fffc04 	movi	r3,-16
 800035c:	10c4b03a 	or	r2,r2,r3
 8000360:	10800044 	addi	r2,r2,1
 8000364:	10803fcc 	andi	r2,r2,255
 8000368:	100f883a 	mov	r7,r2
 800036c:	880d883a 	mov	r6,r17
 8000370:	800b883a 	mov	r5,r16
 8000374:	0009883a 	mov	r4,zero
 8000378:	80005ac0 	call	80005ac <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
 800037c:	8000be40 	call	8000be4 <rand>
 8000380:	1007883a 	mov	r3,r2
 8000384:	00a00034 	movhi	r2,32768
 8000388:	108003c4 	addi	r2,r2,15
 800038c:	1884703a 	and	r2,r3,r2
 8000390:	1000040e 	bge	r2,zero,80003a4 <paletteTest+0x10c>
 8000394:	10bfffc4 	addi	r2,r2,-1
 8000398:	00fffc04 	movi	r3,-16
 800039c:	10c4b03a 	or	r2,r2,r3
 80003a0:	10800044 	addi	r2,r2,1
 80003a4:	14003fcc 	andi	r16,r2,255
 80003a8:	8000be40 	call	8000be4 <rand>
 80003ac:	1007883a 	mov	r3,r2
 80003b0:	00a00034 	movhi	r2,32768
 80003b4:	108003c4 	addi	r2,r2,15
 80003b8:	1884703a 	and	r2,r3,r2
 80003bc:	1000040e 	bge	r2,zero,80003d0 <paletteTest+0x138>
 80003c0:	10bfffc4 	addi	r2,r2,-1
 80003c4:	00fffc04 	movi	r3,-16
 80003c8:	10c4b03a 	or	r2,r2,r3
 80003cc:	10800044 	addi	r2,r2,1
 80003d0:	14403fcc 	andi	r17,r2,255
 80003d4:	8000be40 	call	8000be4 <rand>
 80003d8:	1007883a 	mov	r3,r2
 80003dc:	00a00034 	movhi	r2,32768
 80003e0:	108003c4 	addi	r2,r2,15
 80003e4:	1884703a 	and	r2,r3,r2
 80003e8:	1000040e 	bge	r2,zero,80003fc <paletteTest+0x164>
 80003ec:	10bfffc4 	addi	r2,r2,-1
 80003f0:	00fffc04 	movi	r3,-16
 80003f4:	10c4b03a 	or	r2,r2,r3
 80003f8:	10800044 	addi	r2,r2,1
 80003fc:	10803fcc 	andi	r2,r2,255
 8000400:	100f883a 	mov	r7,r2
 8000404:	880d883a 	mov	r6,r17
 8000408:	800b883a 	mov	r5,r16
 800040c:	01000044 	movi	r4,1
 8000410:	80005ac0 	call	80005ac <setColorPalette>
void paletteTest()
{
	textVGAColorClr();
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);

	for (int i = 0; i < 100; i ++)
 8000414:	e0bffd17 	ldw	r2,-12(fp)
 8000418:	10800044 	addi	r2,r2,1
 800041c:	e0bffd15 	stw	r2,-12(fp)
 8000420:	e0bffd17 	ldw	r2,-12(fp)
 8000424:	10801910 	cmplti	r2,r2,100
 8000428:	103fac1e 	bne	r2,zero,80002dc <__alt_data_end+0xfc0002dc>
		usleep (20000);
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
	}

}
 800042c:	0001883a 	nop
 8000430:	e6fffe04 	addi	sp,fp,-8
 8000434:	dfc00317 	ldw	ra,12(sp)
 8000438:	df000217 	ldw	fp,8(sp)
 800043c:	dc400117 	ldw	r17,4(sp)
 8000440:	dc000017 	ldw	r16,0(sp)
 8000444:	dec00404 	addi	sp,sp,16
 8000448:	f800283a 	ret

0800044c <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
 800044c:	defffe04 	addi	sp,sp,-8
 8000450:	df000115 	stw	fp,4(sp)
 8000454:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 8000458:	e03fff15 	stw	zero,-4(fp)
 800045c:	00000706 	br	800047c <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 8000460:	d0e00217 	ldw	r3,-32760(gp)
 8000464:	e0bfff17 	ldw	r2,-4(fp)
 8000468:	1885883a 	add	r2,r3,r2
 800046c:	10000005 	stb	zero,0(r2)
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 8000470:	e0bfff17 	ldw	r2,-4(fp)
 8000474:	10800044 	addi	r2,r2,1
 8000478:	e0bfff15 	stw	r2,-4(fp)
 800047c:	e0bfff17 	ldw	r2,-4(fp)
 8000480:	1084b010 	cmplti	r2,r2,4800
 8000484:	103ff61e 	bne	r2,zero,8000460 <__alt_data_end+0xfc000460>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 8000488:	0001883a 	nop
 800048c:	e037883a 	mov	sp,fp
 8000490:	df000017 	ldw	fp,0(sp)
 8000494:	dec00104 	addi	sp,sp,4
 8000498:	f800283a 	ret

0800049c <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 800049c:	defff704 	addi	sp,sp,-36
 80004a0:	dfc00815 	stw	ra,32(sp)
 80004a4:	df000715 	stw	fp,28(sp)
 80004a8:	dc000615 	stw	r16,24(sp)
 80004ac:	df000704 	addi	fp,sp,28
 80004b0:	e13ffa15 	stw	r4,-24(fp)
 80004b4:	e17ffb15 	stw	r5,-20(fp)
 80004b8:	e1bffc15 	stw	r6,-16(fp)
 80004bc:	3807883a 	mov	r3,r7
 80004c0:	e0800217 	ldw	r2,8(fp)
 80004c4:	e0fffd05 	stb	r3,-12(fp)
 80004c8:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 80004cc:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 80004d0:	00002706 	br	8000570 <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 80004d4:	d4200217 	ldw	r16,-32760(gp)
 80004d8:	01401404 	movi	r5,80
 80004dc:	e13ffc17 	ldw	r4,-16(fp)
 80004e0:	8000ba40 	call	8000ba4 <__mulsi3>
 80004e4:	1007883a 	mov	r3,r2
 80004e8:	e0bffb17 	ldw	r2,-20(fp)
 80004ec:	1887883a 	add	r3,r3,r2
 80004f0:	e0bff917 	ldw	r2,-28(fp)
 80004f4:	1885883a 	add	r2,r3,r2
 80004f8:	1085883a 	add	r2,r2,r2
 80004fc:	1009883a 	mov	r4,r2
 8000500:	e0bffe03 	ldbu	r2,-8(fp)
 8000504:	1004913a 	slli	r2,r2,4
 8000508:	1007883a 	mov	r3,r2
 800050c:	e0bffd03 	ldbu	r2,-12(fp)
 8000510:	1884b03a 	or	r2,r3,r2
 8000514:	1007883a 	mov	r3,r2
 8000518:	8105883a 	add	r2,r16,r4
 800051c:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 8000520:	d4200217 	ldw	r16,-32760(gp)
 8000524:	01401404 	movi	r5,80
 8000528:	e13ffc17 	ldw	r4,-16(fp)
 800052c:	8000ba40 	call	8000ba4 <__mulsi3>
 8000530:	1007883a 	mov	r3,r2
 8000534:	e0bffb17 	ldw	r2,-20(fp)
 8000538:	1887883a 	add	r3,r3,r2
 800053c:	e0bff917 	ldw	r2,-28(fp)
 8000540:	1885883a 	add	r2,r3,r2
 8000544:	1085883a 	add	r2,r2,r2
 8000548:	10800044 	addi	r2,r2,1
 800054c:	e0fff917 	ldw	r3,-28(fp)
 8000550:	e13ffa17 	ldw	r4,-24(fp)
 8000554:	20c7883a 	add	r3,r4,r3
 8000558:	18c00003 	ldbu	r3,0(r3)
 800055c:	8085883a 	add	r2,r16,r2
 8000560:	10c00005 	stb	r3,0(r2)
		i++;
 8000564:	e0bff917 	ldw	r2,-28(fp)
 8000568:	10800044 	addi	r2,r2,1
 800056c:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 8000570:	e0bff917 	ldw	r2,-28(fp)
 8000574:	e0fffa17 	ldw	r3,-24(fp)
 8000578:	1885883a 	add	r2,r3,r2
 800057c:	10800003 	ldbu	r2,0(r2)
 8000580:	10803fcc 	andi	r2,r2,255
 8000584:	1080201c 	xori	r2,r2,128
 8000588:	10bfe004 	addi	r2,r2,-128
 800058c:	103fd11e 	bne	r2,zero,80004d4 <__alt_data_end+0xfc0004d4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 8000590:	0001883a 	nop
 8000594:	e6ffff04 	addi	sp,fp,-4
 8000598:	dfc00217 	ldw	ra,8(sp)
 800059c:	df000117 	ldw	fp,4(sp)
 80005a0:	dc000017 	ldw	r16,0(sp)
 80005a4:	dec00304 	addi	sp,sp,12
 80005a8:	f800283a 	ret

080005ac <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 80005ac:	defff604 	addi	sp,sp,-40
 80005b0:	df000915 	stw	fp,36(sp)
 80005b4:	df000904 	addi	fp,sp,36
 80005b8:	2011883a 	mov	r8,r4
 80005bc:	2809883a 	mov	r4,r5
 80005c0:	3007883a 	mov	r3,r6
 80005c4:	3805883a 	mov	r2,r7
 80005c8:	e23ffc05 	stb	r8,-16(fp)
 80005cc:	e13ffd05 	stb	r4,-12(fp)
 80005d0:	e0fffe05 	stb	r3,-8(fp)
 80005d4:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
//    alt_u32* palette = vga_ctrl-> ctrl;
    alt_u16 value = ((alt_u16)red << 9) | ((alt_u16)green << 5) | ((alt_u16)blue << 1);
 80005d8:	e0bffd03 	ldbu	r2,-12(fp)
 80005dc:	1004927a 	slli	r2,r2,9
 80005e0:	1007883a 	mov	r3,r2
 80005e4:	e0bffe03 	ldbu	r2,-8(fp)
 80005e8:	1004917a 	slli	r2,r2,5
 80005ec:	1884b03a 	or	r2,r3,r2
 80005f0:	1007883a 	mov	r3,r2
 80005f4:	e0bfff03 	ldbu	r2,-4(fp)
 80005f8:	1085883a 	add	r2,r2,r2
 80005fc:	1884b03a 	or	r2,r3,r2
 8000600:	e0bff70d 	sth	r2,-36(fp)
    if (color % 2){
 8000604:	e0bffc03 	ldbu	r2,-16(fp)
 8000608:	1080004c 	andi	r2,r2,1
 800060c:	10803fcc 	andi	r2,r2,255
 8000610:	10002f26 	beq	r2,zero,80006d0 <setColorPalette+0x124>
    	alt_u32 mask_top = 0xfe007fff;
 8000614:	00bf8034 	movhi	r2,65024
 8000618:	109fffc4 	addi	r2,r2,32767
 800061c:	e0bff815 	stw	r2,-32(fp)
    	alt_u32 value_32 = ((alt_u32)value<<12) ;
 8000620:	e0bff70b 	ldhu	r2,-36(fp)
 8000624:	1004933a 	slli	r2,r2,12
 8000628:	e0bff915 	stw	r2,-28(fp)
    	vga_ctrl->palette[(color-1)/2] &= mask_top;
 800062c:	d1600217 	ldw	r5,-32760(gp)
 8000630:	e0bffc03 	ldbu	r2,-16(fp)
 8000634:	10bfffc4 	addi	r2,r2,-1
 8000638:	1006d7fa 	srli	r3,r2,31
 800063c:	1885883a 	add	r2,r3,r2
 8000640:	1005d07a 	srai	r2,r2,1
 8000644:	1007883a 	mov	r3,r2
 8000648:	d1200217 	ldw	r4,-32760(gp)
 800064c:	18820004 	addi	r2,r3,2048
 8000650:	1085883a 	add	r2,r2,r2
 8000654:	1085883a 	add	r2,r2,r2
 8000658:	2085883a 	add	r2,r4,r2
 800065c:	11000017 	ldw	r4,0(r2)
 8000660:	e0bff817 	ldw	r2,-32(fp)
 8000664:	2088703a 	and	r4,r4,r2
 8000668:	18820004 	addi	r2,r3,2048
 800066c:	1085883a 	add	r2,r2,r2
 8000670:	1085883a 	add	r2,r2,r2
 8000674:	2885883a 	add	r2,r5,r2
 8000678:	11000015 	stw	r4,0(r2)
    	vga_ctrl->palette[(color-1)/2] |= value_32;
 800067c:	d1600217 	ldw	r5,-32760(gp)
 8000680:	e0bffc03 	ldbu	r2,-16(fp)
 8000684:	10bfffc4 	addi	r2,r2,-1
 8000688:	1006d7fa 	srli	r3,r2,31
 800068c:	1885883a 	add	r2,r3,r2
 8000690:	1005d07a 	srai	r2,r2,1
 8000694:	1007883a 	mov	r3,r2
 8000698:	d1200217 	ldw	r4,-32760(gp)
 800069c:	18820004 	addi	r2,r3,2048
 80006a0:	1085883a 	add	r2,r2,r2
 80006a4:	1085883a 	add	r2,r2,r2
 80006a8:	2085883a 	add	r2,r4,r2
 80006ac:	11000017 	ldw	r4,0(r2)
 80006b0:	e0bff917 	ldw	r2,-28(fp)
 80006b4:	2088b03a 	or	r4,r4,r2
 80006b8:	18820004 	addi	r2,r3,2048
 80006bc:	1085883a 	add	r2,r2,r2
 80006c0:	1085883a 	add	r2,r2,r2
 80006c4:	2885883a 	add	r2,r5,r2
 80006c8:	11000015 	stw	r4,0(r2)
    	alt_u32 mask_bottom = 0xffffe001;
    	alt_u32 value_32 = (alt_u32)value;
    	vga_ctrl->palette[(color)/2] &= mask_bottom;
    	vga_ctrl->palette[(color)/2] |= value_32;
    }
}
 80006cc:	00002806 	br	8000770 <setColorPalette+0x1c4>
    	alt_u32 value_32 = ((alt_u32)value<<12) ;
    	vga_ctrl->palette[(color-1)/2] &= mask_top;
    	vga_ctrl->palette[(color-1)/2] |= value_32;
    }
    else {
    	alt_u32 mask_bottom = 0xffffe001;
 80006d0:	00b80044 	movi	r2,-8191
 80006d4:	e0bffa15 	stw	r2,-24(fp)
    	alt_u32 value_32 = (alt_u32)value;
 80006d8:	e0bff70b 	ldhu	r2,-36(fp)
 80006dc:	e0bffb15 	stw	r2,-20(fp)
    	vga_ctrl->palette[(color)/2] &= mask_bottom;
 80006e0:	d1200217 	ldw	r4,-32760(gp)
 80006e4:	e0bffc03 	ldbu	r2,-16(fp)
 80006e8:	1004d07a 	srli	r2,r2,1
 80006ec:	11403fcc 	andi	r5,r2,255
 80006f0:	d0e00217 	ldw	r3,-32760(gp)
 80006f4:	10803fcc 	andi	r2,r2,255
 80006f8:	10820004 	addi	r2,r2,2048
 80006fc:	1085883a 	add	r2,r2,r2
 8000700:	1085883a 	add	r2,r2,r2
 8000704:	1885883a 	add	r2,r3,r2
 8000708:	10c00017 	ldw	r3,0(r2)
 800070c:	e0bffa17 	ldw	r2,-24(fp)
 8000710:	1886703a 	and	r3,r3,r2
 8000714:	28820004 	addi	r2,r5,2048
 8000718:	1085883a 	add	r2,r2,r2
 800071c:	1085883a 	add	r2,r2,r2
 8000720:	2085883a 	add	r2,r4,r2
 8000724:	10c00015 	stw	r3,0(r2)
    	vga_ctrl->palette[(color)/2] |= value_32;
 8000728:	d1200217 	ldw	r4,-32760(gp)
 800072c:	e0bffc03 	ldbu	r2,-16(fp)
 8000730:	1004d07a 	srli	r2,r2,1
 8000734:	11403fcc 	andi	r5,r2,255
 8000738:	d0e00217 	ldw	r3,-32760(gp)
 800073c:	10803fcc 	andi	r2,r2,255
 8000740:	10820004 	addi	r2,r2,2048
 8000744:	1085883a 	add	r2,r2,r2
 8000748:	1085883a 	add	r2,r2,r2
 800074c:	1885883a 	add	r2,r3,r2
 8000750:	10c00017 	ldw	r3,0(r2)
 8000754:	e0bffb17 	ldw	r2,-20(fp)
 8000758:	1886b03a 	or	r3,r3,r2
 800075c:	28820004 	addi	r2,r5,2048
 8000760:	1085883a 	add	r2,r2,r2
 8000764:	1085883a 	add	r2,r2,r2
 8000768:	2085883a 	add	r2,r4,r2
 800076c:	10c00015 	stw	r3,0(r2)
    }
}
 8000770:	0001883a 	nop
 8000774:	e037883a 	mov	sp,fp
 8000778:	df000017 	ldw	fp,0(sp)
 800077c:	dec00104 	addi	sp,sp,4
 8000780:	f800283a 	ret

08000784 <textVGAColorScreenSaver>:

void textVGAColorScreenSaver()
{
 8000784:	deffe004 	addi	sp,sp,-128
 8000788:	dfc01f15 	stw	ra,124(sp)
 800078c:	df001e15 	stw	fp,120(sp)
 8000790:	dcc01d15 	stw	r19,116(sp)
 8000794:	dc801c15 	stw	r18,112(sp)
 8000798:	dc401b15 	stw	r17,108(sp)
 800079c:	dc001a15 	stw	r16,104(sp)
 80007a0:	df001e04 	addi	fp,sp,120
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 80007a4:	800044c0 	call	800044c <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 80007a8:	e03fe515 	stw	zero,-108(fp)
 80007ac:	00002806 	br	8000850 <textVGAColorScreenSaver+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 80007b0:	e0bfe517 	ldw	r2,-108(fp)
 80007b4:	14403fcc 	andi	r17,r2,255
 80007b8:	04020074 	movhi	r16,2049
 80007bc:	843a0f04 	addi	r16,r16,-6084
 80007c0:	e0bfe517 	ldw	r2,-108(fp)
 80007c4:	014005c4 	movi	r5,23
 80007c8:	1009883a 	mov	r4,r2
 80007cc:	8000ba40 	call	8000ba4 <__mulsi3>
 80007d0:	8085883a 	add	r2,r16,r2
 80007d4:	10800504 	addi	r2,r2,20
 80007d8:	10800003 	ldbu	r2,0(r2)
 80007dc:	14803fcc 	andi	r18,r2,255
 80007e0:	04020074 	movhi	r16,2049
 80007e4:	843a0f04 	addi	r16,r16,-6084
 80007e8:	e0bfe517 	ldw	r2,-108(fp)
 80007ec:	014005c4 	movi	r5,23
 80007f0:	1009883a 	mov	r4,r2
 80007f4:	8000ba40 	call	8000ba4 <__mulsi3>
 80007f8:	8085883a 	add	r2,r16,r2
 80007fc:	10800544 	addi	r2,r2,21
 8000800:	10800003 	ldbu	r2,0(r2)
 8000804:	14c03fcc 	andi	r19,r2,255
 8000808:	04020074 	movhi	r16,2049
 800080c:	843a0f04 	addi	r16,r16,-6084
 8000810:	e0bfe517 	ldw	r2,-108(fp)
 8000814:	014005c4 	movi	r5,23
 8000818:	1009883a 	mov	r4,r2
 800081c:	8000ba40 	call	8000ba4 <__mulsi3>
 8000820:	8085883a 	add	r2,r16,r2
 8000824:	10800584 	addi	r2,r2,22
 8000828:	10800003 	ldbu	r2,0(r2)
 800082c:	10803fcc 	andi	r2,r2,255
 8000830:	100f883a 	mov	r7,r2
 8000834:	980d883a 	mov	r6,r19
 8000838:	900b883a 	mov	r5,r18
 800083c:	8809883a 	mov	r4,r17
 8000840:	80005ac0 	call	80005ac <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
 8000844:	e0bfe517 	ldw	r2,-108(fp)
 8000848:	10800044 	addi	r2,r2,1
 800084c:	e0bfe515 	stw	r2,-108(fp)
 8000850:	e0bfe517 	ldw	r2,-108(fp)
 8000854:	10800410 	cmplti	r2,r2,16
 8000858:	103fd51e 	bne	r2,zero,80007b0 <__alt_data_end+0xfc0007b0>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	while (1)
	{
		fg = rand() % 16;
 800085c:	8000be40 	call	8000be4 <rand>
 8000860:	1007883a 	mov	r3,r2
 8000864:	00a00034 	movhi	r2,32768
 8000868:	108003c4 	addi	r2,r2,15
 800086c:	1884703a 	and	r2,r3,r2
 8000870:	1000040e 	bge	r2,zero,8000884 <textVGAColorScreenSaver+0x100>
 8000874:	10bfffc4 	addi	r2,r2,-1
 8000878:	00fffc04 	movi	r3,-16
 800087c:	10c4b03a 	or	r2,r2,r3
 8000880:	10800044 	addi	r2,r2,1
 8000884:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
 8000888:	8000be40 	call	8000be4 <rand>
 800088c:	1007883a 	mov	r3,r2
 8000890:	00a00034 	movhi	r2,32768
 8000894:	108003c4 	addi	r2,r2,15
 8000898:	1884703a 	and	r2,r3,r2
 800089c:	1000040e 	bge	r2,zero,80008b0 <textVGAColorScreenSaver+0x12c>
 80008a0:	10bfffc4 	addi	r2,r2,-1
 80008a4:	00fffc04 	movi	r3,-16
 80008a8:	10c4b03a 	or	r2,r2,r3
 80008ac:	10800044 	addi	r2,r2,1
 80008b0:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
 80008b4:	00001606 	br	8000910 <textVGAColorScreenSaver+0x18c>
		{
			fg = rand() % 16;
 80008b8:	8000be40 	call	8000be4 <rand>
 80008bc:	1007883a 	mov	r3,r2
 80008c0:	00a00034 	movhi	r2,32768
 80008c4:	108003c4 	addi	r2,r2,15
 80008c8:	1884703a 	and	r2,r3,r2
 80008cc:	1000040e 	bge	r2,zero,80008e0 <textVGAColorScreenSaver+0x15c>
 80008d0:	10bfffc4 	addi	r2,r2,-1
 80008d4:	00fffc04 	movi	r3,-16
 80008d8:	10c4b03a 	or	r2,r2,r3
 80008dc:	10800044 	addi	r2,r2,1
 80008e0:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
 80008e4:	8000be40 	call	8000be4 <rand>
 80008e8:	1007883a 	mov	r3,r2
 80008ec:	00a00034 	movhi	r2,32768
 80008f0:	108003c4 	addi	r2,r2,15
 80008f4:	1884703a 	and	r2,r3,r2
 80008f8:	1000040e 	bge	r2,zero,800090c <textVGAColorScreenSaver+0x188>
 80008fc:	10bfffc4 	addi	r2,r2,-1
 8000900:	00fffc04 	movi	r3,-16
 8000904:	10c4b03a 	or	r2,r2,r3
 8000908:	10800044 	addi	r2,r2,1
 800090c:	e0bfe415 	stw	r2,-112(fp)
	}
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
 8000910:	e0ffe317 	ldw	r3,-116(fp)
 8000914:	e0bfe417 	ldw	r2,-112(fp)
 8000918:	18bfe726 	beq	r3,r2,80008b8 <__alt_data_end+0xfc0008b8>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 800091c:	014005c4 	movi	r5,23
 8000920:	e13fe317 	ldw	r4,-116(fp)
 8000924:	8000ba40 	call	8000ba4 <__mulsi3>
 8000928:	1007883a 	mov	r3,r2
 800092c:	00820074 	movhi	r2,2049
 8000930:	10ba0f04 	addi	r2,r2,-6084
 8000934:	18a1883a 	add	r16,r3,r2
 8000938:	014005c4 	movi	r5,23
 800093c:	e13fe417 	ldw	r4,-112(fp)
 8000940:	8000ba40 	call	8000ba4 <__mulsi3>
 8000944:	1007883a 	mov	r3,r2
 8000948:	00820074 	movhi	r2,2049
 800094c:	10ba0f04 	addi	r2,r2,-6084
 8000950:	1887883a 	add	r3,r3,r2
 8000954:	e0bfe804 	addi	r2,fp,-96
 8000958:	180f883a 	mov	r7,r3
 800095c:	800d883a 	mov	r6,r16
 8000960:	01420074 	movhi	r5,2049
 8000964:	29789104 	addi	r5,r5,-7612
 8000968:	1009883a 	mov	r4,r2
 800096c:	8000ca00 	call	8000ca0 <sprintf>
		x = rand() % (80-strlen(color_string));
 8000970:	8000be40 	call	8000be4 <rand>
 8000974:	1021883a 	mov	r16,r2
 8000978:	e0bfe804 	addi	r2,fp,-96
 800097c:	1009883a 	mov	r4,r2
 8000980:	8000d0c0 	call	8000d0c <strlen>
 8000984:	1007883a 	mov	r3,r2
 8000988:	00801404 	movi	r2,80
 800098c:	10c5c83a 	sub	r2,r2,r3
 8000990:	100b883a 	mov	r5,r2
 8000994:	8009883a 	mov	r4,r16
 8000998:	8000b4c0 	call	8000b4c <__umodsi3>
 800099c:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
 80009a0:	8000be40 	call	8000be4 <rand>
 80009a4:	01400784 	movi	r5,30
 80009a8:	1009883a 	mov	r4,r2
 80009ac:	8000a740 	call	8000a74 <__modsi3>
 80009b0:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
 80009b4:	e0bfe417 	ldw	r2,-112(fp)
 80009b8:	11003fcc 	andi	r4,r2,255
 80009bc:	e0bfe317 	ldw	r2,-116(fp)
 80009c0:	10803fcc 	andi	r2,r2,255
 80009c4:	e0ffe804 	addi	r3,fp,-96
 80009c8:	d8800015 	stw	r2,0(sp)
 80009cc:	200f883a 	mov	r7,r4
 80009d0:	e1bfe717 	ldw	r6,-100(fp)
 80009d4:	e17fe617 	ldw	r5,-104(fp)
 80009d8:	1809883a 	mov	r4,r3
 80009dc:	800049c0 	call	800049c <textVGADrawColorText>
		usleep (100000);
 80009e0:	010000b4 	movhi	r4,2
 80009e4:	2121a804 	addi	r4,r4,-31072
 80009e8:	800c0b80 	call	800c0b8 <usleep>
	}
 80009ec:	003f9b06 	br	800085c <__alt_data_end+0xfc00085c>

080009f0 <__divsi3>:
 80009f0:	20001b16 	blt	r4,zero,8000a60 <__divsi3+0x70>
 80009f4:	000f883a 	mov	r7,zero
 80009f8:	28001616 	blt	r5,zero,8000a54 <__divsi3+0x64>
 80009fc:	200d883a 	mov	r6,r4
 8000a00:	29001a2e 	bgeu	r5,r4,8000a6c <__divsi3+0x7c>
 8000a04:	00800804 	movi	r2,32
 8000a08:	00c00044 	movi	r3,1
 8000a0c:	00000106 	br	8000a14 <__divsi3+0x24>
 8000a10:	10000d26 	beq	r2,zero,8000a48 <__divsi3+0x58>
 8000a14:	294b883a 	add	r5,r5,r5
 8000a18:	10bfffc4 	addi	r2,r2,-1
 8000a1c:	18c7883a 	add	r3,r3,r3
 8000a20:	293ffb36 	bltu	r5,r4,8000a10 <__alt_data_end+0xfc000a10>
 8000a24:	0005883a 	mov	r2,zero
 8000a28:	18000726 	beq	r3,zero,8000a48 <__divsi3+0x58>
 8000a2c:	0005883a 	mov	r2,zero
 8000a30:	31400236 	bltu	r6,r5,8000a3c <__divsi3+0x4c>
 8000a34:	314dc83a 	sub	r6,r6,r5
 8000a38:	10c4b03a 	or	r2,r2,r3
 8000a3c:	1806d07a 	srli	r3,r3,1
 8000a40:	280ad07a 	srli	r5,r5,1
 8000a44:	183ffa1e 	bne	r3,zero,8000a30 <__alt_data_end+0xfc000a30>
 8000a48:	38000126 	beq	r7,zero,8000a50 <__divsi3+0x60>
 8000a4c:	0085c83a 	sub	r2,zero,r2
 8000a50:	f800283a 	ret
 8000a54:	014bc83a 	sub	r5,zero,r5
 8000a58:	39c0005c 	xori	r7,r7,1
 8000a5c:	003fe706 	br	80009fc <__alt_data_end+0xfc0009fc>
 8000a60:	0109c83a 	sub	r4,zero,r4
 8000a64:	01c00044 	movi	r7,1
 8000a68:	003fe306 	br	80009f8 <__alt_data_end+0xfc0009f8>
 8000a6c:	00c00044 	movi	r3,1
 8000a70:	003fee06 	br	8000a2c <__alt_data_end+0xfc000a2c>

08000a74 <__modsi3>:
 8000a74:	20001716 	blt	r4,zero,8000ad4 <__modsi3+0x60>
 8000a78:	000f883a 	mov	r7,zero
 8000a7c:	2005883a 	mov	r2,r4
 8000a80:	28001216 	blt	r5,zero,8000acc <__modsi3+0x58>
 8000a84:	2900162e 	bgeu	r5,r4,8000ae0 <__modsi3+0x6c>
 8000a88:	01800804 	movi	r6,32
 8000a8c:	00c00044 	movi	r3,1
 8000a90:	00000106 	br	8000a98 <__modsi3+0x24>
 8000a94:	30000a26 	beq	r6,zero,8000ac0 <__modsi3+0x4c>
 8000a98:	294b883a 	add	r5,r5,r5
 8000a9c:	31bfffc4 	addi	r6,r6,-1
 8000aa0:	18c7883a 	add	r3,r3,r3
 8000aa4:	293ffb36 	bltu	r5,r4,8000a94 <__alt_data_end+0xfc000a94>
 8000aa8:	18000526 	beq	r3,zero,8000ac0 <__modsi3+0x4c>
 8000aac:	1806d07a 	srli	r3,r3,1
 8000ab0:	11400136 	bltu	r2,r5,8000ab8 <__modsi3+0x44>
 8000ab4:	1145c83a 	sub	r2,r2,r5
 8000ab8:	280ad07a 	srli	r5,r5,1
 8000abc:	183ffb1e 	bne	r3,zero,8000aac <__alt_data_end+0xfc000aac>
 8000ac0:	38000126 	beq	r7,zero,8000ac8 <__modsi3+0x54>
 8000ac4:	0085c83a 	sub	r2,zero,r2
 8000ac8:	f800283a 	ret
 8000acc:	014bc83a 	sub	r5,zero,r5
 8000ad0:	003fec06 	br	8000a84 <__alt_data_end+0xfc000a84>
 8000ad4:	0109c83a 	sub	r4,zero,r4
 8000ad8:	01c00044 	movi	r7,1
 8000adc:	003fe706 	br	8000a7c <__alt_data_end+0xfc000a7c>
 8000ae0:	00c00044 	movi	r3,1
 8000ae4:	003ff106 	br	8000aac <__alt_data_end+0xfc000aac>

08000ae8 <__udivsi3>:
 8000ae8:	200d883a 	mov	r6,r4
 8000aec:	2900152e 	bgeu	r5,r4,8000b44 <__udivsi3+0x5c>
 8000af0:	28001416 	blt	r5,zero,8000b44 <__udivsi3+0x5c>
 8000af4:	00800804 	movi	r2,32
 8000af8:	00c00044 	movi	r3,1
 8000afc:	00000206 	br	8000b08 <__udivsi3+0x20>
 8000b00:	10000e26 	beq	r2,zero,8000b3c <__udivsi3+0x54>
 8000b04:	28000516 	blt	r5,zero,8000b1c <__udivsi3+0x34>
 8000b08:	294b883a 	add	r5,r5,r5
 8000b0c:	10bfffc4 	addi	r2,r2,-1
 8000b10:	18c7883a 	add	r3,r3,r3
 8000b14:	293ffa36 	bltu	r5,r4,8000b00 <__alt_data_end+0xfc000b00>
 8000b18:	18000826 	beq	r3,zero,8000b3c <__udivsi3+0x54>
 8000b1c:	0005883a 	mov	r2,zero
 8000b20:	31400236 	bltu	r6,r5,8000b2c <__udivsi3+0x44>
 8000b24:	314dc83a 	sub	r6,r6,r5
 8000b28:	10c4b03a 	or	r2,r2,r3
 8000b2c:	1806d07a 	srli	r3,r3,1
 8000b30:	280ad07a 	srli	r5,r5,1
 8000b34:	183ffa1e 	bne	r3,zero,8000b20 <__alt_data_end+0xfc000b20>
 8000b38:	f800283a 	ret
 8000b3c:	0005883a 	mov	r2,zero
 8000b40:	f800283a 	ret
 8000b44:	00c00044 	movi	r3,1
 8000b48:	003ff406 	br	8000b1c <__alt_data_end+0xfc000b1c>

08000b4c <__umodsi3>:
 8000b4c:	2005883a 	mov	r2,r4
 8000b50:	2900122e 	bgeu	r5,r4,8000b9c <__umodsi3+0x50>
 8000b54:	28001116 	blt	r5,zero,8000b9c <__umodsi3+0x50>
 8000b58:	01800804 	movi	r6,32
 8000b5c:	00c00044 	movi	r3,1
 8000b60:	00000206 	br	8000b6c <__umodsi3+0x20>
 8000b64:	30000c26 	beq	r6,zero,8000b98 <__umodsi3+0x4c>
 8000b68:	28000516 	blt	r5,zero,8000b80 <__umodsi3+0x34>
 8000b6c:	294b883a 	add	r5,r5,r5
 8000b70:	31bfffc4 	addi	r6,r6,-1
 8000b74:	18c7883a 	add	r3,r3,r3
 8000b78:	293ffa36 	bltu	r5,r4,8000b64 <__alt_data_end+0xfc000b64>
 8000b7c:	18000626 	beq	r3,zero,8000b98 <__umodsi3+0x4c>
 8000b80:	1806d07a 	srli	r3,r3,1
 8000b84:	11400136 	bltu	r2,r5,8000b8c <__umodsi3+0x40>
 8000b88:	1145c83a 	sub	r2,r2,r5
 8000b8c:	280ad07a 	srli	r5,r5,1
 8000b90:	183ffb1e 	bne	r3,zero,8000b80 <__alt_data_end+0xfc000b80>
 8000b94:	f800283a 	ret
 8000b98:	f800283a 	ret
 8000b9c:	00c00044 	movi	r3,1
 8000ba0:	003ff706 	br	8000b80 <__alt_data_end+0xfc000b80>

08000ba4 <__mulsi3>:
 8000ba4:	0005883a 	mov	r2,zero
 8000ba8:	20000726 	beq	r4,zero,8000bc8 <__mulsi3+0x24>
 8000bac:	20c0004c 	andi	r3,r4,1
 8000bb0:	2008d07a 	srli	r4,r4,1
 8000bb4:	18000126 	beq	r3,zero,8000bbc <__mulsi3+0x18>
 8000bb8:	1145883a 	add	r2,r2,r5
 8000bbc:	294b883a 	add	r5,r5,r5
 8000bc0:	203ffa1e 	bne	r4,zero,8000bac <__alt_data_end+0xfc000bac>
 8000bc4:	f800283a 	ret
 8000bc8:	f800283a 	ret

08000bcc <srand>:
 8000bcc:	00820074 	movhi	r2,2049
 8000bd0:	10811a04 	addi	r2,r2,1128
 8000bd4:	10800017 	ldw	r2,0(r2)
 8000bd8:	11002915 	stw	r4,164(r2)
 8000bdc:	10002a15 	stw	zero,168(r2)
 8000be0:	f800283a 	ret

08000be4 <rand>:
 8000be4:	00820074 	movhi	r2,2049
 8000be8:	defffe04 	addi	sp,sp,-8
 8000bec:	10811a04 	addi	r2,r2,1128
 8000bf0:	dc000015 	stw	r16,0(sp)
 8000bf4:	14000017 	ldw	r16,0(r2)
 8000bf8:	dfc00115 	stw	ra,4(sp)
 8000bfc:	01932574 	movhi	r6,19605
 8000c00:	81002917 	ldw	r4,164(r16)
 8000c04:	81402a17 	ldw	r5,168(r16)
 8000c08:	01d614b4 	movhi	r7,22610
 8000c0c:	319fcb44 	addi	r6,r6,32557
 8000c10:	39fd0b44 	addi	r7,r7,-3027
 8000c14:	80088e80 	call	80088e8 <__muldi3>
 8000c18:	11000044 	addi	r4,r2,1
 8000c1c:	2085803a 	cmpltu	r2,r4,r2
 8000c20:	10c7883a 	add	r3,r2,r3
 8000c24:	00a00034 	movhi	r2,32768
 8000c28:	10bfffc4 	addi	r2,r2,-1
 8000c2c:	1884703a 	and	r2,r3,r2
 8000c30:	81002915 	stw	r4,164(r16)
 8000c34:	80c02a15 	stw	r3,168(r16)
 8000c38:	dfc00117 	ldw	ra,4(sp)
 8000c3c:	dc000017 	ldw	r16,0(sp)
 8000c40:	dec00204 	addi	sp,sp,8
 8000c44:	f800283a 	ret

08000c48 <_sprintf_r>:
 8000c48:	deffe404 	addi	sp,sp,-112
 8000c4c:	2807883a 	mov	r3,r5
 8000c50:	dfc01a15 	stw	ra,104(sp)
 8000c54:	d9c01b15 	stw	r7,108(sp)
 8000c58:	00a00034 	movhi	r2,32768
 8000c5c:	10bfffc4 	addi	r2,r2,-1
 8000c60:	02008204 	movi	r8,520
 8000c64:	d8800215 	stw	r2,8(sp)
 8000c68:	d8800515 	stw	r2,20(sp)
 8000c6c:	d9c01b04 	addi	r7,sp,108
 8000c70:	d80b883a 	mov	r5,sp
 8000c74:	00bfffc4 	movi	r2,-1
 8000c78:	d8c00015 	stw	r3,0(sp)
 8000c7c:	d8c00415 	stw	r3,16(sp)
 8000c80:	da00030d 	sth	r8,12(sp)
 8000c84:	d880038d 	sth	r2,14(sp)
 8000c88:	8000da40 	call	8000da4 <___svfprintf_internal_r>
 8000c8c:	d8c00017 	ldw	r3,0(sp)
 8000c90:	18000005 	stb	zero,0(r3)
 8000c94:	dfc01a17 	ldw	ra,104(sp)
 8000c98:	dec01c04 	addi	sp,sp,112
 8000c9c:	f800283a 	ret

08000ca0 <sprintf>:
 8000ca0:	deffe304 	addi	sp,sp,-116
 8000ca4:	2007883a 	mov	r3,r4
 8000ca8:	dfc01a15 	stw	ra,104(sp)
 8000cac:	d9801b15 	stw	r6,108(sp)
 8000cb0:	d9c01c15 	stw	r7,112(sp)
 8000cb4:	01020074 	movhi	r4,2049
 8000cb8:	21011a04 	addi	r4,r4,1128
 8000cbc:	21000017 	ldw	r4,0(r4)
 8000cc0:	00a00034 	movhi	r2,32768
 8000cc4:	10bfffc4 	addi	r2,r2,-1
 8000cc8:	280d883a 	mov	r6,r5
 8000ccc:	02008204 	movi	r8,520
 8000cd0:	d8800215 	stw	r2,8(sp)
 8000cd4:	d8800515 	stw	r2,20(sp)
 8000cd8:	d9c01b04 	addi	r7,sp,108
 8000cdc:	d80b883a 	mov	r5,sp
 8000ce0:	00bfffc4 	movi	r2,-1
 8000ce4:	d8c00015 	stw	r3,0(sp)
 8000ce8:	d8c00415 	stw	r3,16(sp)
 8000cec:	da00030d 	sth	r8,12(sp)
 8000cf0:	d880038d 	sth	r2,14(sp)
 8000cf4:	8000da40 	call	8000da4 <___svfprintf_internal_r>
 8000cf8:	d8c00017 	ldw	r3,0(sp)
 8000cfc:	18000005 	stb	zero,0(r3)
 8000d00:	dfc01a17 	ldw	ra,104(sp)
 8000d04:	dec01d04 	addi	sp,sp,116
 8000d08:	f800283a 	ret

08000d0c <strlen>:
 8000d0c:	208000cc 	andi	r2,r4,3
 8000d10:	10002026 	beq	r2,zero,8000d94 <strlen+0x88>
 8000d14:	20800007 	ldb	r2,0(r4)
 8000d18:	10002026 	beq	r2,zero,8000d9c <strlen+0x90>
 8000d1c:	2005883a 	mov	r2,r4
 8000d20:	00000206 	br	8000d2c <strlen+0x20>
 8000d24:	10c00007 	ldb	r3,0(r2)
 8000d28:	18001826 	beq	r3,zero,8000d8c <strlen+0x80>
 8000d2c:	10800044 	addi	r2,r2,1
 8000d30:	10c000cc 	andi	r3,r2,3
 8000d34:	183ffb1e 	bne	r3,zero,8000d24 <__alt_data_end+0xfc000d24>
 8000d38:	10c00017 	ldw	r3,0(r2)
 8000d3c:	01ffbff4 	movhi	r7,65279
 8000d40:	39ffbfc4 	addi	r7,r7,-257
 8000d44:	00ca303a 	nor	r5,zero,r3
 8000d48:	01a02074 	movhi	r6,32897
 8000d4c:	19c7883a 	add	r3,r3,r7
 8000d50:	31a02004 	addi	r6,r6,-32640
 8000d54:	1946703a 	and	r3,r3,r5
 8000d58:	1986703a 	and	r3,r3,r6
 8000d5c:	1800091e 	bne	r3,zero,8000d84 <strlen+0x78>
 8000d60:	10800104 	addi	r2,r2,4
 8000d64:	10c00017 	ldw	r3,0(r2)
 8000d68:	19cb883a 	add	r5,r3,r7
 8000d6c:	00c6303a 	nor	r3,zero,r3
 8000d70:	28c6703a 	and	r3,r5,r3
 8000d74:	1986703a 	and	r3,r3,r6
 8000d78:	183ff926 	beq	r3,zero,8000d60 <__alt_data_end+0xfc000d60>
 8000d7c:	00000106 	br	8000d84 <strlen+0x78>
 8000d80:	10800044 	addi	r2,r2,1
 8000d84:	10c00007 	ldb	r3,0(r2)
 8000d88:	183ffd1e 	bne	r3,zero,8000d80 <__alt_data_end+0xfc000d80>
 8000d8c:	1105c83a 	sub	r2,r2,r4
 8000d90:	f800283a 	ret
 8000d94:	2005883a 	mov	r2,r4
 8000d98:	003fe706 	br	8000d38 <__alt_data_end+0xfc000d38>
 8000d9c:	0005883a 	mov	r2,zero
 8000da0:	f800283a 	ret

08000da4 <___svfprintf_internal_r>:
 8000da4:	deffb704 	addi	sp,sp,-292
 8000da8:	dfc04815 	stw	ra,288(sp)
 8000dac:	ddc04615 	stw	r23,280(sp)
 8000db0:	d9402d15 	stw	r5,180(sp)
 8000db4:	d9003915 	stw	r4,228(sp)
 8000db8:	302f883a 	mov	r23,r6
 8000dbc:	d9c02e15 	stw	r7,184(sp)
 8000dc0:	df004715 	stw	fp,284(sp)
 8000dc4:	dd804515 	stw	r22,276(sp)
 8000dc8:	dd404415 	stw	r21,272(sp)
 8000dcc:	dd004315 	stw	r20,268(sp)
 8000dd0:	dcc04215 	stw	r19,264(sp)
 8000dd4:	dc804115 	stw	r18,260(sp)
 8000dd8:	dc404015 	stw	r17,256(sp)
 8000ddc:	dc003f15 	stw	r16,252(sp)
 8000de0:	80049bc0 	call	80049bc <_localeconv_r>
 8000de4:	10800017 	ldw	r2,0(r2)
 8000de8:	1009883a 	mov	r4,r2
 8000dec:	d8803415 	stw	r2,208(sp)
 8000df0:	8000d0c0 	call	8000d0c <strlen>
 8000df4:	d8c02d17 	ldw	r3,180(sp)
 8000df8:	d8803815 	stw	r2,224(sp)
 8000dfc:	1880030b 	ldhu	r2,12(r3)
 8000e00:	1080200c 	andi	r2,r2,128
 8000e04:	10000226 	beq	r2,zero,8000e10 <___svfprintf_internal_r+0x6c>
 8000e08:	18800417 	ldw	r2,16(r3)
 8000e0c:	1006b126 	beq	r2,zero,80028d4 <___svfprintf_internal_r+0x1b30>
 8000e10:	dcc03917 	ldw	r19,228(sp)
 8000e14:	d8c00404 	addi	r3,sp,16
 8000e18:	05420074 	movhi	r21,2049
 8000e1c:	d9001e04 	addi	r4,sp,120
 8000e20:	ad78aa84 	addi	r21,r21,-7510
 8000e24:	d8c01e15 	stw	r3,120(sp)
 8000e28:	d8002015 	stw	zero,128(sp)
 8000e2c:	d8001f15 	stw	zero,124(sp)
 8000e30:	d8003315 	stw	zero,204(sp)
 8000e34:	d8003615 	stw	zero,216(sp)
 8000e38:	d8003715 	stw	zero,220(sp)
 8000e3c:	1811883a 	mov	r8,r3
 8000e40:	d8003a15 	stw	zero,232(sp)
 8000e44:	d8003b15 	stw	zero,236(sp)
 8000e48:	d8002f15 	stw	zero,188(sp)
 8000e4c:	d9002815 	stw	r4,160(sp)
 8000e50:	b8800007 	ldb	r2,0(r23)
 8000e54:	10027726 	beq	r2,zero,8001834 <___svfprintf_internal_r+0xa90>
 8000e58:	00c00944 	movi	r3,37
 8000e5c:	b823883a 	mov	r17,r23
 8000e60:	10c0021e 	bne	r2,r3,8000e6c <___svfprintf_internal_r+0xc8>
 8000e64:	00001406 	br	8000eb8 <___svfprintf_internal_r+0x114>
 8000e68:	10c00326 	beq	r2,r3,8000e78 <___svfprintf_internal_r+0xd4>
 8000e6c:	8c400044 	addi	r17,r17,1
 8000e70:	88800007 	ldb	r2,0(r17)
 8000e74:	103ffc1e 	bne	r2,zero,8000e68 <__alt_data_end+0xfc000e68>
 8000e78:	8de1c83a 	sub	r16,r17,r23
 8000e7c:	80000e26 	beq	r16,zero,8000eb8 <___svfprintf_internal_r+0x114>
 8000e80:	d8c02017 	ldw	r3,128(sp)
 8000e84:	d8801f17 	ldw	r2,124(sp)
 8000e88:	45c00015 	stw	r23,0(r8)
 8000e8c:	1c07883a 	add	r3,r3,r16
 8000e90:	10800044 	addi	r2,r2,1
 8000e94:	d8c02015 	stw	r3,128(sp)
 8000e98:	44000115 	stw	r16,4(r8)
 8000e9c:	d8801f15 	stw	r2,124(sp)
 8000ea0:	00c001c4 	movi	r3,7
 8000ea4:	18809916 	blt	r3,r2,800110c <___svfprintf_internal_r+0x368>
 8000ea8:	42000204 	addi	r8,r8,8
 8000eac:	d9402f17 	ldw	r5,188(sp)
 8000eb0:	2c0b883a 	add	r5,r5,r16
 8000eb4:	d9402f15 	stw	r5,188(sp)
 8000eb8:	88800007 	ldb	r2,0(r17)
 8000ebc:	10009a26 	beq	r2,zero,8001128 <___svfprintf_internal_r+0x384>
 8000ec0:	8dc00044 	addi	r23,r17,1
 8000ec4:	8c400047 	ldb	r17,1(r17)
 8000ec8:	0021883a 	mov	r16,zero
 8000ecc:	00bfffc4 	movi	r2,-1
 8000ed0:	0025883a 	mov	r18,zero
 8000ed4:	dc002905 	stb	r16,164(sp)
 8000ed8:	d8002785 	stb	zero,158(sp)
 8000edc:	d8002b05 	stb	zero,172(sp)
 8000ee0:	d8802a15 	stw	r2,168(sp)
 8000ee4:	d8003115 	stw	zero,196(sp)
 8000ee8:	05001604 	movi	r20,88
 8000eec:	05800244 	movi	r22,9
 8000ef0:	4039883a 	mov	fp,r8
 8000ef4:	9021883a 	mov	r16,r18
 8000ef8:	bdc00044 	addi	r23,r23,1
 8000efc:	88bff804 	addi	r2,r17,-32
 8000f00:	a0831e36 	bltu	r20,r2,8001b7c <___svfprintf_internal_r+0xdd8>
 8000f04:	100490ba 	slli	r2,r2,2
 8000f08:	00c20034 	movhi	r3,2048
 8000f0c:	18c3c704 	addi	r3,r3,3868
 8000f10:	10c5883a 	add	r2,r2,r3
 8000f14:	10800017 	ldw	r2,0(r2)
 8000f18:	1000683a 	jmp	r2
 8000f1c:	08001ac4 	addi	zero,at,107
 8000f20:	08001b7c 	xorhi	zero,at,109
 8000f24:	08001b7c 	xorhi	zero,at,109
 8000f28:	08001ab8 	rdprs	zero,at,106
 8000f2c:	08001b7c 	xorhi	zero,at,109
 8000f30:	08001b7c 	xorhi	zero,at,109
 8000f34:	08001b7c 	xorhi	zero,at,109
 8000f38:	08001b7c 	xorhi	zero,at,109
 8000f3c:	08001b7c 	xorhi	zero,at,109
 8000f40:	08001b7c 	xorhi	zero,at,109
 8000f44:	08001184 	addi	zero,at,70
 8000f48:	080019c8 	cmpgei	zero,at,103
 8000f4c:	08001b7c 	xorhi	zero,at,109
 8000f50:	08001090 	cmplti	zero,at,66
 8000f54:	080011a8 	cmpgeui	zero,at,70
 8000f58:	08001b7c 	xorhi	zero,at,109
 8000f5c:	08001234 	orhi	zero,at,72
 8000f60:	080011f8 	rdprs	zero,at,71
 8000f64:	080011f8 	rdprs	zero,at,71
 8000f68:	080011f8 	rdprs	zero,at,71
 8000f6c:	080011f8 	rdprs	zero,at,71
 8000f70:	080011f8 	rdprs	zero,at,71
 8000f74:	080011f8 	rdprs	zero,at,71
 8000f78:	080011f8 	rdprs	zero,at,71
 8000f7c:	080011f8 	rdprs	zero,at,71
 8000f80:	080011f8 	rdprs	zero,at,71
 8000f84:	08001b7c 	xorhi	zero,at,109
 8000f88:	08001b7c 	xorhi	zero,at,109
 8000f8c:	08001b7c 	xorhi	zero,at,109
 8000f90:	08001b7c 	xorhi	zero,at,109
 8000f94:	08001b7c 	xorhi	zero,at,109
 8000f98:	08001b7c 	xorhi	zero,at,109
 8000f9c:	08001b7c 	xorhi	zero,at,109
 8000fa0:	08001b7c 	xorhi	zero,at,109
 8000fa4:	08001b7c 	xorhi	zero,at,109
 8000fa8:	08001b7c 	xorhi	zero,at,109
 8000fac:	080012f8 	rdprs	zero,at,75
 8000fb0:	08001240 	call	800124 <__alt_mem_onchip_memory2_0+0x800124>
 8000fb4:	08001b7c 	xorhi	zero,at,109
 8000fb8:	08001240 	call	800124 <__alt_mem_onchip_memory2_0+0x800124>
 8000fbc:	08001b7c 	xorhi	zero,at,109
 8000fc0:	08001b7c 	xorhi	zero,at,109
 8000fc4:	08001b7c 	xorhi	zero,at,109
 8000fc8:	08001b7c 	xorhi	zero,at,109
 8000fcc:	080012ec 	andhi	zero,at,75
 8000fd0:	08001b7c 	xorhi	zero,at,109
 8000fd4:	08001b7c 	xorhi	zero,at,109
 8000fd8:	080013c0 	call	80013c <__alt_mem_onchip_memory2_0+0x80013c>
 8000fdc:	08001b7c 	xorhi	zero,at,109
 8000fe0:	08001b7c 	xorhi	zero,at,109
 8000fe4:	08001b7c 	xorhi	zero,at,109
 8000fe8:	08001b7c 	xorhi	zero,at,109
 8000fec:	08001b7c 	xorhi	zero,at,109
 8000ff0:	0800183c 	xorhi	zero,at,96
 8000ff4:	08001b7c 	xorhi	zero,at,109
 8000ff8:	08001b7c 	xorhi	zero,at,109
 8000ffc:	080018a8 	cmpgeui	zero,at,98
 8001000:	08001b7c 	xorhi	zero,at,109
 8001004:	08001b7c 	xorhi	zero,at,109
 8001008:	08001b7c 	xorhi	zero,at,109
 800100c:	08001b7c 	xorhi	zero,at,109
 8001010:	08001b7c 	xorhi	zero,at,109
 8001014:	08001b7c 	xorhi	zero,at,109
 8001018:	08001b7c 	xorhi	zero,at,109
 800101c:	08001b7c 	xorhi	zero,at,109
 8001020:	08001b7c 	xorhi	zero,at,109
 8001024:	08001b7c 	xorhi	zero,at,109
 8001028:	08001964 	muli	zero,at,101
 800102c:	08001ae4 	muli	zero,at,107
 8001030:	08001240 	call	800124 <__alt_mem_onchip_memory2_0+0x800124>
 8001034:	08001240 	call	800124 <__alt_mem_onchip_memory2_0+0x800124>
 8001038:	08001240 	call	800124 <__alt_mem_onchip_memory2_0+0x800124>
 800103c:	08001b58 	cmpnei	zero,at,109
 8001040:	08001ae4 	muli	zero,at,107
 8001044:	08001b7c 	xorhi	zero,at,109
 8001048:	08001b7c 	xorhi	zero,at,109
 800104c:	08001b04 	addi	zero,at,108
 8001050:	08001b7c 	xorhi	zero,at,109
 8001054:	08001b18 	cmpnei	zero,at,108
 8001058:	080019a8 	cmpgeui	zero,at,102
 800105c:	0800109c 	xori	zero,at,66
 8001060:	080019e0 	cmpeqi	zero,at,103
 8001064:	08001b7c 	xorhi	zero,at,109
 8001068:	080019ec 	andhi	zero,at,103
 800106c:	08001b7c 	xorhi	zero,at,109
 8001070:	08001a50 	cmplti	zero,at,105
 8001074:	08001b7c 	xorhi	zero,at,109
 8001078:	08001b7c 	xorhi	zero,at,109
 800107c:	08001a70 	cmpltui	zero,at,105
 8001080:	d8c03117 	ldw	r3,196(sp)
 8001084:	d8802e15 	stw	r2,184(sp)
 8001088:	00c7c83a 	sub	r3,zero,r3
 800108c:	d8c03115 	stw	r3,196(sp)
 8001090:	84000114 	ori	r16,r16,4
 8001094:	bc400007 	ldb	r17,0(r23)
 8001098:	003f9706 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 800109c:	00800c04 	movi	r2,48
 80010a0:	d8802705 	stb	r2,156(sp)
 80010a4:	00801e04 	movi	r2,120
 80010a8:	d8802745 	stb	r2,157(sp)
 80010ac:	d9002a17 	ldw	r4,168(sp)
 80010b0:	d8802e17 	ldw	r2,184(sp)
 80010b4:	d8002785 	stb	zero,158(sp)
 80010b8:	e011883a 	mov	r8,fp
 80010bc:	10c00104 	addi	r3,r2,4
 80010c0:	15000017 	ldw	r20,0(r2)
 80010c4:	002d883a 	mov	r22,zero
 80010c8:	80800094 	ori	r2,r16,2
 80010cc:	2002b616 	blt	r4,zero,8001ba8 <___svfprintf_internal_r+0xe04>
 80010d0:	00bfdfc4 	movi	r2,-129
 80010d4:	80a4703a 	and	r18,r16,r2
 80010d8:	d8c02e15 	stw	r3,184(sp)
 80010dc:	94800094 	ori	r18,r18,2
 80010e0:	a002a01e 	bne	r20,zero,8001b64 <___svfprintf_internal_r+0xdc0>
 80010e4:	01420074 	movhi	r5,2049
 80010e8:	2978a304 	addi	r5,r5,-7540
 80010ec:	d9403a15 	stw	r5,232(sp)
 80010f0:	04401e04 	movi	r17,120
 80010f4:	d8c02a17 	ldw	r3,168(sp)
 80010f8:	0039883a 	mov	fp,zero
 80010fc:	1801e626 	beq	r3,zero,8001898 <___svfprintf_internal_r+0xaf4>
 8001100:	0029883a 	mov	r20,zero
 8001104:	002d883a 	mov	r22,zero
 8001108:	00020506 	br	8001920 <___svfprintf_internal_r+0xb7c>
 800110c:	d9402d17 	ldw	r5,180(sp)
 8001110:	d9801e04 	addi	r6,sp,120
 8001114:	9809883a 	mov	r4,r19
 8001118:	80066800 	call	8006680 <__ssprint_r>
 800111c:	1000081e 	bne	r2,zero,8001140 <___svfprintf_internal_r+0x39c>
 8001120:	da000404 	addi	r8,sp,16
 8001124:	003f6106 	br	8000eac <__alt_data_end+0xfc000eac>
 8001128:	d8802017 	ldw	r2,128(sp)
 800112c:	10000426 	beq	r2,zero,8001140 <___svfprintf_internal_r+0x39c>
 8001130:	d9402d17 	ldw	r5,180(sp)
 8001134:	d9003917 	ldw	r4,228(sp)
 8001138:	d9801e04 	addi	r6,sp,120
 800113c:	80066800 	call	8006680 <__ssprint_r>
 8001140:	d8802d17 	ldw	r2,180(sp)
 8001144:	10c0030b 	ldhu	r3,12(r2)
 8001148:	d8802f17 	ldw	r2,188(sp)
 800114c:	18c0100c 	andi	r3,r3,64
 8001150:	1806251e 	bne	r3,zero,80029e8 <___svfprintf_internal_r+0x1c44>
 8001154:	dfc04817 	ldw	ra,288(sp)
 8001158:	df004717 	ldw	fp,284(sp)
 800115c:	ddc04617 	ldw	r23,280(sp)
 8001160:	dd804517 	ldw	r22,276(sp)
 8001164:	dd404417 	ldw	r21,272(sp)
 8001168:	dd004317 	ldw	r20,268(sp)
 800116c:	dcc04217 	ldw	r19,264(sp)
 8001170:	dc804117 	ldw	r18,260(sp)
 8001174:	dc404017 	ldw	r17,256(sp)
 8001178:	dc003f17 	ldw	r16,252(sp)
 800117c:	dec04904 	addi	sp,sp,292
 8001180:	f800283a 	ret
 8001184:	d9002e17 	ldw	r4,184(sp)
 8001188:	d9402e17 	ldw	r5,184(sp)
 800118c:	21000017 	ldw	r4,0(r4)
 8001190:	28800104 	addi	r2,r5,4
 8001194:	d9003115 	stw	r4,196(sp)
 8001198:	203fb916 	blt	r4,zero,8001080 <__alt_data_end+0xfc001080>
 800119c:	d8802e15 	stw	r2,184(sp)
 80011a0:	bc400007 	ldb	r17,0(r23)
 80011a4:	003f5406 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 80011a8:	bc400007 	ldb	r17,0(r23)
 80011ac:	01000a84 	movi	r4,42
 80011b0:	b8c00044 	addi	r3,r23,1
 80011b4:	89076926 	beq	r17,r4,8002f5c <___svfprintf_internal_r+0x21b8>
 80011b8:	8cbff404 	addi	r18,r17,-48
 80011bc:	b486b936 	bltu	r22,r18,8002ca4 <___svfprintf_internal_r+0x1f00>
 80011c0:	0009883a 	mov	r4,zero
 80011c4:	1823883a 	mov	r17,r3
 80011c8:	01400284 	movi	r5,10
 80011cc:	8000ba40 	call	8000ba4 <__mulsi3>
 80011d0:	88c00007 	ldb	r3,0(r17)
 80011d4:	1489883a 	add	r4,r2,r18
 80011d8:	8dc00044 	addi	r23,r17,1
 80011dc:	1cbff404 	addi	r18,r3,-48
 80011e0:	b823883a 	mov	r17,r23
 80011e4:	b4bff82e 	bgeu	r22,r18,80011c8 <__alt_data_end+0xfc0011c8>
 80011e8:	1823883a 	mov	r17,r3
 80011ec:	20060416 	blt	r4,zero,8002a00 <___svfprintf_internal_r+0x1c5c>
 80011f0:	d9002a15 	stw	r4,168(sp)
 80011f4:	003f4106 	br	8000efc <__alt_data_end+0xfc000efc>
 80011f8:	8cbff404 	addi	r18,r17,-48
 80011fc:	d8003115 	stw	zero,196(sp)
 8001200:	0009883a 	mov	r4,zero
 8001204:	b823883a 	mov	r17,r23
 8001208:	01400284 	movi	r5,10
 800120c:	8000ba40 	call	8000ba4 <__mulsi3>
 8001210:	88c00007 	ldb	r3,0(r17)
 8001214:	9089883a 	add	r4,r18,r2
 8001218:	bdc00044 	addi	r23,r23,1
 800121c:	1cbff404 	addi	r18,r3,-48
 8001220:	b823883a 	mov	r17,r23
 8001224:	b4bff82e 	bgeu	r22,r18,8001208 <__alt_data_end+0xfc001208>
 8001228:	1823883a 	mov	r17,r3
 800122c:	d9003115 	stw	r4,196(sp)
 8001230:	003f3206 	br	8000efc <__alt_data_end+0xfc000efc>
 8001234:	84002014 	ori	r16,r16,128
 8001238:	bc400007 	ldb	r17,0(r23)
 800123c:	003f2e06 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 8001240:	8025883a 	mov	r18,r16
 8001244:	dc002903 	ldbu	r16,164(sp)
 8001248:	e011883a 	mov	r8,fp
 800124c:	84003fcc 	andi	r16,r16,255
 8001250:	8007721e 	bne	r16,zero,800301c <___svfprintf_internal_r+0x2278>
 8001254:	9080020c 	andi	r2,r18,8
 8001258:	1004a526 	beq	r2,zero,80024f0 <___svfprintf_internal_r+0x174c>
 800125c:	d9002e17 	ldw	r4,184(sp)
 8001260:	d9402e17 	ldw	r5,184(sp)
 8001264:	d8802e17 	ldw	r2,184(sp)
 8001268:	21000017 	ldw	r4,0(r4)
 800126c:	29400117 	ldw	r5,4(r5)
 8001270:	10800204 	addi	r2,r2,8
 8001274:	d9003615 	stw	r4,216(sp)
 8001278:	d9403715 	stw	r5,220(sp)
 800127c:	d8802e15 	stw	r2,184(sp)
 8001280:	d9003617 	ldw	r4,216(sp)
 8001284:	d9403717 	ldw	r5,220(sp)
 8001288:	da003e15 	stw	r8,248(sp)
 800128c:	04000044 	movi	r16,1
 8001290:	80064dc0 	call	80064dc <__fpclassifyd>
 8001294:	da003e17 	ldw	r8,248(sp)
 8001298:	1404731e 	bne	r2,r16,8002468 <___svfprintf_internal_r+0x16c4>
 800129c:	d9003617 	ldw	r4,216(sp)
 80012a0:	d9403717 	ldw	r5,220(sp)
 80012a4:	000d883a 	mov	r6,zero
 80012a8:	000f883a 	mov	r7,zero
 80012ac:	800a9940 	call	800a994 <__ledf2>
 80012b0:	da003e17 	ldw	r8,248(sp)
 80012b4:	10061b16 	blt	r2,zero,8002b24 <___svfprintf_internal_r+0x1d80>
 80012b8:	df002783 	ldbu	fp,158(sp)
 80012bc:	008011c4 	movi	r2,71
 80012c0:	1445810e 	bge	r2,r17,80028c8 <___svfprintf_internal_r+0x1b24>
 80012c4:	04020074 	movhi	r16,2049
 80012c8:	84389b04 	addi	r16,r16,-7572
 80012cc:	00c000c4 	movi	r3,3
 80012d0:	00bfdfc4 	movi	r2,-129
 80012d4:	d8c02915 	stw	r3,164(sp)
 80012d8:	90a4703a 	and	r18,r18,r2
 80012dc:	d8c02b15 	stw	r3,172(sp)
 80012e0:	d8002a15 	stw	zero,168(sp)
 80012e4:	d8003215 	stw	zero,200(sp)
 80012e8:	00006c06 	br	800149c <___svfprintf_internal_r+0x6f8>
 80012ec:	84000214 	ori	r16,r16,8
 80012f0:	bc400007 	ldb	r17,0(r23)
 80012f4:	003f0006 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 80012f8:	8025883a 	mov	r18,r16
 80012fc:	dc002903 	ldbu	r16,164(sp)
 8001300:	e011883a 	mov	r8,fp
 8001304:	84003fcc 	andi	r16,r16,255
 8001308:	80073f1e 	bne	r16,zero,8003008 <___svfprintf_internal_r+0x2264>
 800130c:	94800414 	ori	r18,r18,16
 8001310:	9080080c 	andi	r2,r18,32
 8001314:	1003bb26 	beq	r2,zero,8002204 <___svfprintf_internal_r+0x1460>
 8001318:	d9002e17 	ldw	r4,184(sp)
 800131c:	20800117 	ldw	r2,4(r4)
 8001320:	25000017 	ldw	r20,0(r4)
 8001324:	21000204 	addi	r4,r4,8
 8001328:	d9002e15 	stw	r4,184(sp)
 800132c:	102d883a 	mov	r22,r2
 8001330:	1003bd16 	blt	r2,zero,8002228 <___svfprintf_internal_r+0x1484>
 8001334:	d9002a17 	ldw	r4,168(sp)
 8001338:	df002783 	ldbu	fp,158(sp)
 800133c:	2003d016 	blt	r4,zero,8002280 <___svfprintf_internal_r+0x14dc>
 8001340:	00ffdfc4 	movi	r3,-129
 8001344:	a584b03a 	or	r2,r20,r22
 8001348:	90e4703a 	and	r18,r18,r3
 800134c:	10015026 	beq	r2,zero,8001890 <___svfprintf_internal_r+0xaec>
 8001350:	b0037026 	beq	r22,zero,8002114 <___svfprintf_internal_r+0x1370>
 8001354:	dc402915 	stw	r17,164(sp)
 8001358:	dc001e04 	addi	r16,sp,120
 800135c:	b023883a 	mov	r17,r22
 8001360:	402d883a 	mov	r22,r8
 8001364:	a009883a 	mov	r4,r20
 8001368:	880b883a 	mov	r5,r17
 800136c:	01800284 	movi	r6,10
 8001370:	000f883a 	mov	r7,zero
 8001374:	8008ff00 	call	8008ff0 <__umoddi3>
 8001378:	10800c04 	addi	r2,r2,48
 800137c:	843fffc4 	addi	r16,r16,-1
 8001380:	a009883a 	mov	r4,r20
 8001384:	880b883a 	mov	r5,r17
 8001388:	80800005 	stb	r2,0(r16)
 800138c:	01800284 	movi	r6,10
 8001390:	000f883a 	mov	r7,zero
 8001394:	80089f40 	call	80089f4 <__udivdi3>
 8001398:	1029883a 	mov	r20,r2
 800139c:	10c4b03a 	or	r2,r2,r3
 80013a0:	1823883a 	mov	r17,r3
 80013a4:	103fef1e 	bne	r2,zero,8001364 <__alt_data_end+0xfc001364>
 80013a8:	d8c02817 	ldw	r3,160(sp)
 80013ac:	dc402917 	ldw	r17,164(sp)
 80013b0:	b011883a 	mov	r8,r22
 80013b4:	1c07c83a 	sub	r3,r3,r16
 80013b8:	d8c02b15 	stw	r3,172(sp)
 80013bc:	00003106 	br	8001484 <___svfprintf_internal_r+0x6e0>
 80013c0:	8025883a 	mov	r18,r16
 80013c4:	dc002903 	ldbu	r16,164(sp)
 80013c8:	e011883a 	mov	r8,fp
 80013cc:	84003fcc 	andi	r16,r16,255
 80013d0:	80070a1e 	bne	r16,zero,8002ffc <___svfprintf_internal_r+0x2258>
 80013d4:	94800414 	ori	r18,r18,16
 80013d8:	9080080c 	andi	r2,r18,32
 80013dc:	1002f626 	beq	r2,zero,8001fb8 <___svfprintf_internal_r+0x1214>
 80013e0:	d9002e17 	ldw	r4,184(sp)
 80013e4:	d9402a17 	ldw	r5,168(sp)
 80013e8:	d8002785 	stb	zero,158(sp)
 80013ec:	20800204 	addi	r2,r4,8
 80013f0:	25000017 	ldw	r20,0(r4)
 80013f4:	25800117 	ldw	r22,4(r4)
 80013f8:	28043716 	blt	r5,zero,80024d8 <___svfprintf_internal_r+0x1734>
 80013fc:	013fdfc4 	movi	r4,-129
 8001400:	a586b03a 	or	r3,r20,r22
 8001404:	d8802e15 	stw	r2,184(sp)
 8001408:	9124703a 	and	r18,r18,r4
 800140c:	1802f71e 	bne	r3,zero,8001fec <___svfprintf_internal_r+0x1248>
 8001410:	d9402a17 	ldw	r5,168(sp)
 8001414:	0039883a 	mov	fp,zero
 8001418:	2806df26 	beq	r5,zero,8002f98 <___svfprintf_internal_r+0x21f4>
 800141c:	0029883a 	mov	r20,zero
 8001420:	002d883a 	mov	r22,zero
 8001424:	dc001e04 	addi	r16,sp,120
 8001428:	a006d0fa 	srli	r3,r20,3
 800142c:	b008977a 	slli	r4,r22,29
 8001430:	b02cd0fa 	srli	r22,r22,3
 8001434:	a50001cc 	andi	r20,r20,7
 8001438:	a0800c04 	addi	r2,r20,48
 800143c:	843fffc4 	addi	r16,r16,-1
 8001440:	20e8b03a 	or	r20,r4,r3
 8001444:	80800005 	stb	r2,0(r16)
 8001448:	a586b03a 	or	r3,r20,r22
 800144c:	183ff61e 	bne	r3,zero,8001428 <__alt_data_end+0xfc001428>
 8001450:	90c0004c 	andi	r3,r18,1
 8001454:	18013f26 	beq	r3,zero,8001954 <___svfprintf_internal_r+0xbb0>
 8001458:	10803fcc 	andi	r2,r2,255
 800145c:	1080201c 	xori	r2,r2,128
 8001460:	10bfe004 	addi	r2,r2,-128
 8001464:	00c00c04 	movi	r3,48
 8001468:	10c13a26 	beq	r2,r3,8001954 <___svfprintf_internal_r+0xbb0>
 800146c:	80ffffc5 	stb	r3,-1(r16)
 8001470:	d8c02817 	ldw	r3,160(sp)
 8001474:	80bfffc4 	addi	r2,r16,-1
 8001478:	1021883a 	mov	r16,r2
 800147c:	1887c83a 	sub	r3,r3,r2
 8001480:	d8c02b15 	stw	r3,172(sp)
 8001484:	d8802b17 	ldw	r2,172(sp)
 8001488:	d9002a17 	ldw	r4,168(sp)
 800148c:	1100010e 	bge	r2,r4,8001494 <___svfprintf_internal_r+0x6f0>
 8001490:	2005883a 	mov	r2,r4
 8001494:	d8802915 	stw	r2,164(sp)
 8001498:	d8003215 	stw	zero,200(sp)
 800149c:	e7003fcc 	andi	fp,fp,255
 80014a0:	e700201c 	xori	fp,fp,128
 80014a4:	e73fe004 	addi	fp,fp,-128
 80014a8:	e0000326 	beq	fp,zero,80014b8 <___svfprintf_internal_r+0x714>
 80014ac:	d8c02917 	ldw	r3,164(sp)
 80014b0:	18c00044 	addi	r3,r3,1
 80014b4:	d8c02915 	stw	r3,164(sp)
 80014b8:	90c0008c 	andi	r3,r18,2
 80014bc:	d8c02c15 	stw	r3,176(sp)
 80014c0:	18000326 	beq	r3,zero,80014d0 <___svfprintf_internal_r+0x72c>
 80014c4:	d8c02917 	ldw	r3,164(sp)
 80014c8:	18c00084 	addi	r3,r3,2
 80014cc:	d8c02915 	stw	r3,164(sp)
 80014d0:	90c0210c 	andi	r3,r18,132
 80014d4:	d8c03015 	stw	r3,192(sp)
 80014d8:	1801c31e 	bne	r3,zero,8001be8 <___svfprintf_internal_r+0xe44>
 80014dc:	d9003117 	ldw	r4,196(sp)
 80014e0:	d8c02917 	ldw	r3,164(sp)
 80014e4:	20e9c83a 	sub	r20,r4,r3
 80014e8:	0501bf0e 	bge	zero,r20,8001be8 <___svfprintf_internal_r+0xe44>
 80014ec:	02400404 	movi	r9,16
 80014f0:	d8c02017 	ldw	r3,128(sp)
 80014f4:	d8801f17 	ldw	r2,124(sp)
 80014f8:	4d053d0e 	bge	r9,r20,80029f0 <___svfprintf_internal_r+0x1c4c>
 80014fc:	01420074 	movhi	r5,2049
 8001500:	2978ae84 	addi	r5,r5,-7494
 8001504:	dc403c15 	stw	r17,240(sp)
 8001508:	d9403515 	stw	r5,212(sp)
 800150c:	a023883a 	mov	r17,r20
 8001510:	482d883a 	mov	r22,r9
 8001514:	9029883a 	mov	r20,r18
 8001518:	070001c4 	movi	fp,7
 800151c:	8025883a 	mov	r18,r16
 8001520:	dc002d17 	ldw	r16,180(sp)
 8001524:	00000306 	br	8001534 <___svfprintf_internal_r+0x790>
 8001528:	8c7ffc04 	addi	r17,r17,-16
 800152c:	42000204 	addi	r8,r8,8
 8001530:	b440130e 	bge	r22,r17,8001580 <___svfprintf_internal_r+0x7dc>
 8001534:	01020074 	movhi	r4,2049
 8001538:	18c00404 	addi	r3,r3,16
 800153c:	10800044 	addi	r2,r2,1
 8001540:	2138ae84 	addi	r4,r4,-7494
 8001544:	41000015 	stw	r4,0(r8)
 8001548:	45800115 	stw	r22,4(r8)
 800154c:	d8c02015 	stw	r3,128(sp)
 8001550:	d8801f15 	stw	r2,124(sp)
 8001554:	e0bff40e 	bge	fp,r2,8001528 <__alt_data_end+0xfc001528>
 8001558:	d9801e04 	addi	r6,sp,120
 800155c:	800b883a 	mov	r5,r16
 8001560:	9809883a 	mov	r4,r19
 8001564:	80066800 	call	8006680 <__ssprint_r>
 8001568:	103ef51e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 800156c:	8c7ffc04 	addi	r17,r17,-16
 8001570:	d8c02017 	ldw	r3,128(sp)
 8001574:	d8801f17 	ldw	r2,124(sp)
 8001578:	da000404 	addi	r8,sp,16
 800157c:	b47fed16 	blt	r22,r17,8001534 <__alt_data_end+0xfc001534>
 8001580:	9021883a 	mov	r16,r18
 8001584:	a025883a 	mov	r18,r20
 8001588:	8829883a 	mov	r20,r17
 800158c:	dc403c17 	ldw	r17,240(sp)
 8001590:	d9403517 	ldw	r5,212(sp)
 8001594:	a0c7883a 	add	r3,r20,r3
 8001598:	10800044 	addi	r2,r2,1
 800159c:	41400015 	stw	r5,0(r8)
 80015a0:	45000115 	stw	r20,4(r8)
 80015a4:	d8c02015 	stw	r3,128(sp)
 80015a8:	d8801f15 	stw	r2,124(sp)
 80015ac:	010001c4 	movi	r4,7
 80015b0:	2082c116 	blt	r4,r2,80020b8 <___svfprintf_internal_r+0x1314>
 80015b4:	df002787 	ldb	fp,158(sp)
 80015b8:	42000204 	addi	r8,r8,8
 80015bc:	e0000c26 	beq	fp,zero,80015f0 <___svfprintf_internal_r+0x84c>
 80015c0:	d8801f17 	ldw	r2,124(sp)
 80015c4:	d9002784 	addi	r4,sp,158
 80015c8:	18c00044 	addi	r3,r3,1
 80015cc:	10800044 	addi	r2,r2,1
 80015d0:	41000015 	stw	r4,0(r8)
 80015d4:	01000044 	movi	r4,1
 80015d8:	41000115 	stw	r4,4(r8)
 80015dc:	d8c02015 	stw	r3,128(sp)
 80015e0:	d8801f15 	stw	r2,124(sp)
 80015e4:	010001c4 	movi	r4,7
 80015e8:	20825a16 	blt	r4,r2,8001f54 <___svfprintf_internal_r+0x11b0>
 80015ec:	42000204 	addi	r8,r8,8
 80015f0:	d8802c17 	ldw	r2,176(sp)
 80015f4:	10000c26 	beq	r2,zero,8001628 <___svfprintf_internal_r+0x884>
 80015f8:	d8801f17 	ldw	r2,124(sp)
 80015fc:	d9002704 	addi	r4,sp,156
 8001600:	18c00084 	addi	r3,r3,2
 8001604:	10800044 	addi	r2,r2,1
 8001608:	41000015 	stw	r4,0(r8)
 800160c:	01000084 	movi	r4,2
 8001610:	41000115 	stw	r4,4(r8)
 8001614:	d8c02015 	stw	r3,128(sp)
 8001618:	d8801f15 	stw	r2,124(sp)
 800161c:	010001c4 	movi	r4,7
 8001620:	20825416 	blt	r4,r2,8001f74 <___svfprintf_internal_r+0x11d0>
 8001624:	42000204 	addi	r8,r8,8
 8001628:	d9003017 	ldw	r4,192(sp)
 800162c:	00802004 	movi	r2,128
 8001630:	2081b926 	beq	r4,r2,8001d18 <___svfprintf_internal_r+0xf74>
 8001634:	d9402a17 	ldw	r5,168(sp)
 8001638:	d8802b17 	ldw	r2,172(sp)
 800163c:	28adc83a 	sub	r22,r5,r2
 8001640:	05802f0e 	bge	zero,r22,8001700 <___svfprintf_internal_r+0x95c>
 8001644:	07000404 	movi	fp,16
 8001648:	d8801f17 	ldw	r2,124(sp)
 800164c:	e583e20e 	bge	fp,r22,80025d8 <___svfprintf_internal_r+0x1834>
 8001650:	01420074 	movhi	r5,2049
 8001654:	2978aa84 	addi	r5,r5,-7510
 8001658:	dc402a15 	stw	r17,168(sp)
 800165c:	d9402c15 	stw	r5,176(sp)
 8001660:	b023883a 	mov	r17,r22
 8001664:	050001c4 	movi	r20,7
 8001668:	902d883a 	mov	r22,r18
 800166c:	8025883a 	mov	r18,r16
 8001670:	dc002d17 	ldw	r16,180(sp)
 8001674:	00000306 	br	8001684 <___svfprintf_internal_r+0x8e0>
 8001678:	8c7ffc04 	addi	r17,r17,-16
 800167c:	42000204 	addi	r8,r8,8
 8001680:	e440110e 	bge	fp,r17,80016c8 <___svfprintf_internal_r+0x924>
 8001684:	18c00404 	addi	r3,r3,16
 8001688:	10800044 	addi	r2,r2,1
 800168c:	45400015 	stw	r21,0(r8)
 8001690:	47000115 	stw	fp,4(r8)
 8001694:	d8c02015 	stw	r3,128(sp)
 8001698:	d8801f15 	stw	r2,124(sp)
 800169c:	a0bff60e 	bge	r20,r2,8001678 <__alt_data_end+0xfc001678>
 80016a0:	d9801e04 	addi	r6,sp,120
 80016a4:	800b883a 	mov	r5,r16
 80016a8:	9809883a 	mov	r4,r19
 80016ac:	80066800 	call	8006680 <__ssprint_r>
 80016b0:	103ea31e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80016b4:	8c7ffc04 	addi	r17,r17,-16
 80016b8:	d8c02017 	ldw	r3,128(sp)
 80016bc:	d8801f17 	ldw	r2,124(sp)
 80016c0:	da000404 	addi	r8,sp,16
 80016c4:	e47fef16 	blt	fp,r17,8001684 <__alt_data_end+0xfc001684>
 80016c8:	9021883a 	mov	r16,r18
 80016cc:	b025883a 	mov	r18,r22
 80016d0:	882d883a 	mov	r22,r17
 80016d4:	dc402a17 	ldw	r17,168(sp)
 80016d8:	d9002c17 	ldw	r4,176(sp)
 80016dc:	1d87883a 	add	r3,r3,r22
 80016e0:	10800044 	addi	r2,r2,1
 80016e4:	41000015 	stw	r4,0(r8)
 80016e8:	45800115 	stw	r22,4(r8)
 80016ec:	d8c02015 	stw	r3,128(sp)
 80016f0:	d8801f15 	stw	r2,124(sp)
 80016f4:	010001c4 	movi	r4,7
 80016f8:	20820e16 	blt	r4,r2,8001f34 <___svfprintf_internal_r+0x1190>
 80016fc:	42000204 	addi	r8,r8,8
 8001700:	9080400c 	andi	r2,r18,256
 8001704:	10013a1e 	bne	r2,zero,8001bf0 <___svfprintf_internal_r+0xe4c>
 8001708:	d9402b17 	ldw	r5,172(sp)
 800170c:	d8801f17 	ldw	r2,124(sp)
 8001710:	44000015 	stw	r16,0(r8)
 8001714:	1947883a 	add	r3,r3,r5
 8001718:	10800044 	addi	r2,r2,1
 800171c:	41400115 	stw	r5,4(r8)
 8001720:	d8c02015 	stw	r3,128(sp)
 8001724:	d8801f15 	stw	r2,124(sp)
 8001728:	010001c4 	movi	r4,7
 800172c:	2081f316 	blt	r4,r2,8001efc <___svfprintf_internal_r+0x1158>
 8001730:	42000204 	addi	r8,r8,8
 8001734:	9480010c 	andi	r18,r18,4
 8001738:	90003226 	beq	r18,zero,8001804 <___svfprintf_internal_r+0xa60>
 800173c:	d9403117 	ldw	r5,196(sp)
 8001740:	d8802917 	ldw	r2,164(sp)
 8001744:	28a1c83a 	sub	r16,r5,r2
 8001748:	04002e0e 	bge	zero,r16,8001804 <___svfprintf_internal_r+0xa60>
 800174c:	04400404 	movi	r17,16
 8001750:	d8801f17 	ldw	r2,124(sp)
 8001754:	8c04db0e 	bge	r17,r16,8002ac4 <___svfprintf_internal_r+0x1d20>
 8001758:	01420074 	movhi	r5,2049
 800175c:	2978ae84 	addi	r5,r5,-7494
 8001760:	d9403515 	stw	r5,212(sp)
 8001764:	048001c4 	movi	r18,7
 8001768:	dd002d17 	ldw	r20,180(sp)
 800176c:	00000306 	br	800177c <___svfprintf_internal_r+0x9d8>
 8001770:	843ffc04 	addi	r16,r16,-16
 8001774:	42000204 	addi	r8,r8,8
 8001778:	8c00130e 	bge	r17,r16,80017c8 <___svfprintf_internal_r+0xa24>
 800177c:	01020074 	movhi	r4,2049
 8001780:	18c00404 	addi	r3,r3,16
 8001784:	10800044 	addi	r2,r2,1
 8001788:	2138ae84 	addi	r4,r4,-7494
 800178c:	41000015 	stw	r4,0(r8)
 8001790:	44400115 	stw	r17,4(r8)
 8001794:	d8c02015 	stw	r3,128(sp)
 8001798:	d8801f15 	stw	r2,124(sp)
 800179c:	90bff40e 	bge	r18,r2,8001770 <__alt_data_end+0xfc001770>
 80017a0:	d9801e04 	addi	r6,sp,120
 80017a4:	a00b883a 	mov	r5,r20
 80017a8:	9809883a 	mov	r4,r19
 80017ac:	80066800 	call	8006680 <__ssprint_r>
 80017b0:	103e631e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80017b4:	843ffc04 	addi	r16,r16,-16
 80017b8:	d8c02017 	ldw	r3,128(sp)
 80017bc:	d8801f17 	ldw	r2,124(sp)
 80017c0:	da000404 	addi	r8,sp,16
 80017c4:	8c3fed16 	blt	r17,r16,800177c <__alt_data_end+0xfc00177c>
 80017c8:	d9403517 	ldw	r5,212(sp)
 80017cc:	1c07883a 	add	r3,r3,r16
 80017d0:	10800044 	addi	r2,r2,1
 80017d4:	41400015 	stw	r5,0(r8)
 80017d8:	44000115 	stw	r16,4(r8)
 80017dc:	d8c02015 	stw	r3,128(sp)
 80017e0:	d8801f15 	stw	r2,124(sp)
 80017e4:	010001c4 	movi	r4,7
 80017e8:	2080060e 	bge	r4,r2,8001804 <___svfprintf_internal_r+0xa60>
 80017ec:	d9402d17 	ldw	r5,180(sp)
 80017f0:	d9801e04 	addi	r6,sp,120
 80017f4:	9809883a 	mov	r4,r19
 80017f8:	80066800 	call	8006680 <__ssprint_r>
 80017fc:	103e501e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8001800:	d8c02017 	ldw	r3,128(sp)
 8001804:	d8803117 	ldw	r2,196(sp)
 8001808:	d9002917 	ldw	r4,164(sp)
 800180c:	1100010e 	bge	r2,r4,8001814 <___svfprintf_internal_r+0xa70>
 8001810:	2005883a 	mov	r2,r4
 8001814:	d9402f17 	ldw	r5,188(sp)
 8001818:	288b883a 	add	r5,r5,r2
 800181c:	d9402f15 	stw	r5,188(sp)
 8001820:	1801be1e 	bne	r3,zero,8001f1c <___svfprintf_internal_r+0x1178>
 8001824:	b8800007 	ldb	r2,0(r23)
 8001828:	d8001f15 	stw	zero,124(sp)
 800182c:	da000404 	addi	r8,sp,16
 8001830:	103d891e 	bne	r2,zero,8000e58 <__alt_data_end+0xfc000e58>
 8001834:	b823883a 	mov	r17,r23
 8001838:	003d9f06 	br	8000eb8 <__alt_data_end+0xfc000eb8>
 800183c:	8025883a 	mov	r18,r16
 8001840:	dc002903 	ldbu	r16,164(sp)
 8001844:	e011883a 	mov	r8,fp
 8001848:	84003fcc 	andi	r16,r16,255
 800184c:	8005e61e 	bne	r16,zero,8002fe8 <___svfprintf_internal_r+0x2244>
 8001850:	94800414 	ori	r18,r18,16
 8001854:	9080080c 	andi	r2,r18,32
 8001858:	10022026 	beq	r2,zero,80020dc <___svfprintf_internal_r+0x1338>
 800185c:	d9002e17 	ldw	r4,184(sp)
 8001860:	d9402a17 	ldw	r5,168(sp)
 8001864:	d8002785 	stb	zero,158(sp)
 8001868:	20c00204 	addi	r3,r4,8
 800186c:	25000017 	ldw	r20,0(r4)
 8001870:	25800117 	ldw	r22,4(r4)
 8001874:	2803ad16 	blt	r5,zero,800272c <___svfprintf_internal_r+0x1988>
 8001878:	013fdfc4 	movi	r4,-129
 800187c:	a584b03a 	or	r2,r20,r22
 8001880:	d8c02e15 	stw	r3,184(sp)
 8001884:	9124703a 	and	r18,r18,r4
 8001888:	0039883a 	mov	fp,zero
 800188c:	103eb01e 	bne	r2,zero,8001350 <__alt_data_end+0xfc001350>
 8001890:	d8802a17 	ldw	r2,168(sp)
 8001894:	1002e71e 	bne	r2,zero,8002434 <___svfprintf_internal_r+0x1690>
 8001898:	d8002a15 	stw	zero,168(sp)
 800189c:	d8002b15 	stw	zero,172(sp)
 80018a0:	dc001e04 	addi	r16,sp,120
 80018a4:	003ef706 	br	8001484 <__alt_data_end+0xfc001484>
 80018a8:	8025883a 	mov	r18,r16
 80018ac:	dc002903 	ldbu	r16,164(sp)
 80018b0:	e011883a 	mov	r8,fp
 80018b4:	84003fcc 	andi	r16,r16,255
 80018b8:	8005c81e 	bne	r16,zero,8002fdc <___svfprintf_internal_r+0x2238>
 80018bc:	01020074 	movhi	r4,2049
 80018c0:	21389e04 	addi	r4,r4,-7560
 80018c4:	d9003a15 	stw	r4,232(sp)
 80018c8:	9080080c 	andi	r2,r18,32
 80018cc:	10007226 	beq	r2,zero,8001a98 <___svfprintf_internal_r+0xcf4>
 80018d0:	d9402e17 	ldw	r5,184(sp)
 80018d4:	2d000017 	ldw	r20,0(r5)
 80018d8:	2d800117 	ldw	r22,4(r5)
 80018dc:	29400204 	addi	r5,r5,8
 80018e0:	d9402e15 	stw	r5,184(sp)
 80018e4:	9080004c 	andi	r2,r18,1
 80018e8:	1001aa26 	beq	r2,zero,8001f94 <___svfprintf_internal_r+0x11f0>
 80018ec:	a584b03a 	or	r2,r20,r22
 80018f0:	10032526 	beq	r2,zero,8002588 <___svfprintf_internal_r+0x17e4>
 80018f4:	d8c02a17 	ldw	r3,168(sp)
 80018f8:	00800c04 	movi	r2,48
 80018fc:	d8802705 	stb	r2,156(sp)
 8001900:	dc402745 	stb	r17,157(sp)
 8001904:	d8002785 	stb	zero,158(sp)
 8001908:	90800094 	ori	r2,r18,2
 800190c:	1804a316 	blt	r3,zero,8002b9c <___svfprintf_internal_r+0x1df8>
 8001910:	00bfdfc4 	movi	r2,-129
 8001914:	90a4703a 	and	r18,r18,r2
 8001918:	94800094 	ori	r18,r18,2
 800191c:	0039883a 	mov	fp,zero
 8001920:	d9003a17 	ldw	r4,232(sp)
 8001924:	dc001e04 	addi	r16,sp,120
 8001928:	a08003cc 	andi	r2,r20,15
 800192c:	b006973a 	slli	r3,r22,28
 8001930:	2085883a 	add	r2,r4,r2
 8001934:	a028d13a 	srli	r20,r20,4
 8001938:	10800003 	ldbu	r2,0(r2)
 800193c:	b02cd13a 	srli	r22,r22,4
 8001940:	843fffc4 	addi	r16,r16,-1
 8001944:	1d28b03a 	or	r20,r3,r20
 8001948:	80800005 	stb	r2,0(r16)
 800194c:	a584b03a 	or	r2,r20,r22
 8001950:	103ff51e 	bne	r2,zero,8001928 <__alt_data_end+0xfc001928>
 8001954:	d8c02817 	ldw	r3,160(sp)
 8001958:	1c07c83a 	sub	r3,r3,r16
 800195c:	d8c02b15 	stw	r3,172(sp)
 8001960:	003ec806 	br	8001484 <__alt_data_end+0xfc001484>
 8001964:	d8c02e17 	ldw	r3,184(sp)
 8001968:	d9002e17 	ldw	r4,184(sp)
 800196c:	8025883a 	mov	r18,r16
 8001970:	18800017 	ldw	r2,0(r3)
 8001974:	21000104 	addi	r4,r4,4
 8001978:	00c00044 	movi	r3,1
 800197c:	e011883a 	mov	r8,fp
 8001980:	d8c02915 	stw	r3,164(sp)
 8001984:	d8002785 	stb	zero,158(sp)
 8001988:	d8801405 	stb	r2,80(sp)
 800198c:	d9002e15 	stw	r4,184(sp)
 8001990:	d8c02b15 	stw	r3,172(sp)
 8001994:	d8002a15 	stw	zero,168(sp)
 8001998:	d8003215 	stw	zero,200(sp)
 800199c:	dc001404 	addi	r16,sp,80
 80019a0:	0039883a 	mov	fp,zero
 80019a4:	003ec406 	br	80014b8 <__alt_data_end+0xfc0014b8>
 80019a8:	8025883a 	mov	r18,r16
 80019ac:	dc002903 	ldbu	r16,164(sp)
 80019b0:	e011883a 	mov	r8,fp
 80019b4:	84003fcc 	andi	r16,r16,255
 80019b8:	803e8726 	beq	r16,zero,80013d8 <__alt_data_end+0xfc0013d8>
 80019bc:	d8c02b03 	ldbu	r3,172(sp)
 80019c0:	d8c02785 	stb	r3,158(sp)
 80019c4:	003e8406 	br	80013d8 <__alt_data_end+0xfc0013d8>
 80019c8:	00c00044 	movi	r3,1
 80019cc:	d8c02905 	stb	r3,164(sp)
 80019d0:	00c00ac4 	movi	r3,43
 80019d4:	d8c02b05 	stb	r3,172(sp)
 80019d8:	bc400007 	ldb	r17,0(r23)
 80019dc:	003d4606 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 80019e0:	84000814 	ori	r16,r16,32
 80019e4:	bc400007 	ldb	r17,0(r23)
 80019e8:	003d4306 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 80019ec:	d8802e17 	ldw	r2,184(sp)
 80019f0:	8025883a 	mov	r18,r16
 80019f4:	d8002785 	stb	zero,158(sp)
 80019f8:	14000017 	ldw	r16,0(r2)
 80019fc:	e011883a 	mov	r8,fp
 8001a00:	15000104 	addi	r20,r2,4
 8001a04:	80042126 	beq	r16,zero,8002a8c <___svfprintf_internal_r+0x1ce8>
 8001a08:	d8c02a17 	ldw	r3,168(sp)
 8001a0c:	1803ee16 	blt	r3,zero,80029c8 <___svfprintf_internal_r+0x1c24>
 8001a10:	180d883a 	mov	r6,r3
 8001a14:	000b883a 	mov	r5,zero
 8001a18:	8009883a 	mov	r4,r16
 8001a1c:	df003e15 	stw	fp,248(sp)
 8001a20:	80051f80 	call	80051f8 <memchr>
 8001a24:	da003e17 	ldw	r8,248(sp)
 8001a28:	10046a26 	beq	r2,zero,8002bd4 <___svfprintf_internal_r+0x1e30>
 8001a2c:	1405c83a 	sub	r2,r2,r16
 8001a30:	d8802b15 	stw	r2,172(sp)
 8001a34:	1003ea16 	blt	r2,zero,80029e0 <___svfprintf_internal_r+0x1c3c>
 8001a38:	df002783 	ldbu	fp,158(sp)
 8001a3c:	d8802915 	stw	r2,164(sp)
 8001a40:	dd002e15 	stw	r20,184(sp)
 8001a44:	d8002a15 	stw	zero,168(sp)
 8001a48:	d8003215 	stw	zero,200(sp)
 8001a4c:	003e9306 	br	800149c <__alt_data_end+0xfc00149c>
 8001a50:	8025883a 	mov	r18,r16
 8001a54:	dc002903 	ldbu	r16,164(sp)
 8001a58:	e011883a 	mov	r8,fp
 8001a5c:	84003fcc 	andi	r16,r16,255
 8001a60:	803f7c26 	beq	r16,zero,8001854 <__alt_data_end+0xfc001854>
 8001a64:	d8c02b03 	ldbu	r3,172(sp)
 8001a68:	d8c02785 	stb	r3,158(sp)
 8001a6c:	003f7906 	br	8001854 <__alt_data_end+0xfc001854>
 8001a70:	8025883a 	mov	r18,r16
 8001a74:	dc002903 	ldbu	r16,164(sp)
 8001a78:	e011883a 	mov	r8,fp
 8001a7c:	84003fcc 	andi	r16,r16,255
 8001a80:	8005741e 	bne	r16,zero,8003054 <___svfprintf_internal_r+0x22b0>
 8001a84:	01020074 	movhi	r4,2049
 8001a88:	2138a304 	addi	r4,r4,-7540
 8001a8c:	d9003a15 	stw	r4,232(sp)
 8001a90:	9080080c 	andi	r2,r18,32
 8001a94:	103f8e1e 	bne	r2,zero,80018d0 <__alt_data_end+0xfc0018d0>
 8001a98:	9080040c 	andi	r2,r18,16
 8001a9c:	1002a726 	beq	r2,zero,800253c <___svfprintf_internal_r+0x1798>
 8001aa0:	d8802e17 	ldw	r2,184(sp)
 8001aa4:	002d883a 	mov	r22,zero
 8001aa8:	15000017 	ldw	r20,0(r2)
 8001aac:	10800104 	addi	r2,r2,4
 8001ab0:	d8802e15 	stw	r2,184(sp)
 8001ab4:	003f8b06 	br	80018e4 <__alt_data_end+0xfc0018e4>
 8001ab8:	84000054 	ori	r16,r16,1
 8001abc:	bc400007 	ldb	r17,0(r23)
 8001ac0:	003d0d06 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 8001ac4:	d8802b07 	ldb	r2,172(sp)
 8001ac8:	1002a41e 	bne	r2,zero,800255c <___svfprintf_internal_r+0x17b8>
 8001acc:	00c00044 	movi	r3,1
 8001ad0:	d8c02905 	stb	r3,164(sp)
 8001ad4:	00c00804 	movi	r3,32
 8001ad8:	d8c02b05 	stb	r3,172(sp)
 8001adc:	bc400007 	ldb	r17,0(r23)
 8001ae0:	003d0506 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 8001ae4:	8025883a 	mov	r18,r16
 8001ae8:	dc002903 	ldbu	r16,164(sp)
 8001aec:	e011883a 	mov	r8,fp
 8001af0:	84003fcc 	andi	r16,r16,255
 8001af4:	803e0626 	beq	r16,zero,8001310 <__alt_data_end+0xfc001310>
 8001af8:	d8c02b03 	ldbu	r3,172(sp)
 8001afc:	d8c02785 	stb	r3,158(sp)
 8001b00:	003e0306 	br	8001310 <__alt_data_end+0xfc001310>
 8001b04:	bc400007 	ldb	r17,0(r23)
 8001b08:	00801b04 	movi	r2,108
 8001b0c:	88830a26 	beq	r17,r2,8002738 <___svfprintf_internal_r+0x1994>
 8001b10:	84000414 	ori	r16,r16,16
 8001b14:	003cf806 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 8001b18:	8025883a 	mov	r18,r16
 8001b1c:	dc002903 	ldbu	r16,164(sp)
 8001b20:	e011883a 	mov	r8,fp
 8001b24:	84003fcc 	andi	r16,r16,255
 8001b28:	8005471e 	bne	r16,zero,8003048 <___svfprintf_internal_r+0x22a4>
 8001b2c:	9080080c 	andi	r2,r18,32
 8001b30:	10028c26 	beq	r2,zero,8002564 <___svfprintf_internal_r+0x17c0>
 8001b34:	d9002e17 	ldw	r4,184(sp)
 8001b38:	d9402f17 	ldw	r5,188(sp)
 8001b3c:	20800017 	ldw	r2,0(r4)
 8001b40:	2807d7fa 	srai	r3,r5,31
 8001b44:	21000104 	addi	r4,r4,4
 8001b48:	d9002e15 	stw	r4,184(sp)
 8001b4c:	11400015 	stw	r5,0(r2)
 8001b50:	10c00115 	stw	r3,4(r2)
 8001b54:	003cbe06 	br	8000e50 <__alt_data_end+0xfc000e50>
 8001b58:	84001014 	ori	r16,r16,64
 8001b5c:	bc400007 	ldb	r17,0(r23)
 8001b60:	003ce506 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 8001b64:	01020074 	movhi	r4,2049
 8001b68:	2138a304 	addi	r4,r4,-7540
 8001b6c:	0039883a 	mov	fp,zero
 8001b70:	d9003a15 	stw	r4,232(sp)
 8001b74:	04401e04 	movi	r17,120
 8001b78:	003f6906 	br	8001920 <__alt_data_end+0xfc001920>
 8001b7c:	8025883a 	mov	r18,r16
 8001b80:	dc002903 	ldbu	r16,164(sp)
 8001b84:	e011883a 	mov	r8,fp
 8001b88:	84003fcc 	andi	r16,r16,255
 8001b8c:	8005261e 	bne	r16,zero,8003028 <___svfprintf_internal_r+0x2284>
 8001b90:	883d6526 	beq	r17,zero,8001128 <__alt_data_end+0xfc001128>
 8001b94:	00c00044 	movi	r3,1
 8001b98:	d8c02915 	stw	r3,164(sp)
 8001b9c:	dc401405 	stb	r17,80(sp)
 8001ba0:	d8002785 	stb	zero,158(sp)
 8001ba4:	003f7a06 	br	8001990 <__alt_data_end+0xfc001990>
 8001ba8:	01020074 	movhi	r4,2049
 8001bac:	2138a304 	addi	r4,r4,-7540
 8001bb0:	d9003a15 	stw	r4,232(sp)
 8001bb4:	d8c02e15 	stw	r3,184(sp)
 8001bb8:	1025883a 	mov	r18,r2
 8001bbc:	04401e04 	movi	r17,120
 8001bc0:	a584b03a 	or	r2,r20,r22
 8001bc4:	1000fa1e 	bne	r2,zero,8001fb0 <___svfprintf_internal_r+0x120c>
 8001bc8:	0039883a 	mov	fp,zero
 8001bcc:	00800084 	movi	r2,2
 8001bd0:	10803fcc 	andi	r2,r2,255
 8001bd4:	00c00044 	movi	r3,1
 8001bd8:	10c21626 	beq	r2,r3,8002434 <___svfprintf_internal_r+0x1690>
 8001bdc:	00c00084 	movi	r3,2
 8001be0:	10fe0e1e 	bne	r2,r3,800141c <__alt_data_end+0xfc00141c>
 8001be4:	003d4606 	br	8001100 <__alt_data_end+0xfc001100>
 8001be8:	d8c02017 	ldw	r3,128(sp)
 8001bec:	003e7306 	br	80015bc <__alt_data_end+0xfc0015bc>
 8001bf0:	00801944 	movi	r2,101
 8001bf4:	14407c0e 	bge	r2,r17,8001de8 <___svfprintf_internal_r+0x1044>
 8001bf8:	d9003617 	ldw	r4,216(sp)
 8001bfc:	d9403717 	ldw	r5,220(sp)
 8001c00:	000d883a 	mov	r6,zero
 8001c04:	000f883a 	mov	r7,zero
 8001c08:	d8c03d15 	stw	r3,244(sp)
 8001c0c:	da003e15 	stw	r8,248(sp)
 8001c10:	800a8300 	call	800a830 <__eqdf2>
 8001c14:	d8c03d17 	ldw	r3,244(sp)
 8001c18:	da003e17 	ldw	r8,248(sp)
 8001c1c:	1000f51e 	bne	r2,zero,8001ff4 <___svfprintf_internal_r+0x1250>
 8001c20:	d8801f17 	ldw	r2,124(sp)
 8001c24:	01020074 	movhi	r4,2049
 8001c28:	2138aa04 	addi	r4,r4,-7512
 8001c2c:	18c00044 	addi	r3,r3,1
 8001c30:	10800044 	addi	r2,r2,1
 8001c34:	41000015 	stw	r4,0(r8)
 8001c38:	01000044 	movi	r4,1
 8001c3c:	41000115 	stw	r4,4(r8)
 8001c40:	d8c02015 	stw	r3,128(sp)
 8001c44:	d8801f15 	stw	r2,124(sp)
 8001c48:	010001c4 	movi	r4,7
 8001c4c:	20826616 	blt	r4,r2,80025e8 <___svfprintf_internal_r+0x1844>
 8001c50:	42000204 	addi	r8,r8,8
 8001c54:	d8802617 	ldw	r2,152(sp)
 8001c58:	d9403317 	ldw	r5,204(sp)
 8001c5c:	11400216 	blt	r2,r5,8001c68 <___svfprintf_internal_r+0xec4>
 8001c60:	9080004c 	andi	r2,r18,1
 8001c64:	103eb326 	beq	r2,zero,8001734 <__alt_data_end+0xfc001734>
 8001c68:	d8803817 	ldw	r2,224(sp)
 8001c6c:	d9003417 	ldw	r4,208(sp)
 8001c70:	d9403817 	ldw	r5,224(sp)
 8001c74:	1887883a 	add	r3,r3,r2
 8001c78:	d8801f17 	ldw	r2,124(sp)
 8001c7c:	41000015 	stw	r4,0(r8)
 8001c80:	41400115 	stw	r5,4(r8)
 8001c84:	10800044 	addi	r2,r2,1
 8001c88:	d8c02015 	stw	r3,128(sp)
 8001c8c:	d8801f15 	stw	r2,124(sp)
 8001c90:	010001c4 	movi	r4,7
 8001c94:	2082af16 	blt	r4,r2,8002754 <___svfprintf_internal_r+0x19b0>
 8001c98:	42000204 	addi	r8,r8,8
 8001c9c:	d8803317 	ldw	r2,204(sp)
 8001ca0:	143fffc4 	addi	r16,r2,-1
 8001ca4:	043ea30e 	bge	zero,r16,8001734 <__alt_data_end+0xfc001734>
 8001ca8:	04400404 	movi	r17,16
 8001cac:	d8801f17 	ldw	r2,124(sp)
 8001cb0:	8c00860e 	bge	r17,r16,8001ecc <___svfprintf_internal_r+0x1128>
 8001cb4:	01420074 	movhi	r5,2049
 8001cb8:	2978aa84 	addi	r5,r5,-7510
 8001cbc:	d9402c15 	stw	r5,176(sp)
 8001cc0:	058001c4 	movi	r22,7
 8001cc4:	dd002d17 	ldw	r20,180(sp)
 8001cc8:	00000306 	br	8001cd8 <___svfprintf_internal_r+0xf34>
 8001ccc:	42000204 	addi	r8,r8,8
 8001cd0:	843ffc04 	addi	r16,r16,-16
 8001cd4:	8c00800e 	bge	r17,r16,8001ed8 <___svfprintf_internal_r+0x1134>
 8001cd8:	18c00404 	addi	r3,r3,16
 8001cdc:	10800044 	addi	r2,r2,1
 8001ce0:	45400015 	stw	r21,0(r8)
 8001ce4:	44400115 	stw	r17,4(r8)
 8001ce8:	d8c02015 	stw	r3,128(sp)
 8001cec:	d8801f15 	stw	r2,124(sp)
 8001cf0:	b0bff60e 	bge	r22,r2,8001ccc <__alt_data_end+0xfc001ccc>
 8001cf4:	d9801e04 	addi	r6,sp,120
 8001cf8:	a00b883a 	mov	r5,r20
 8001cfc:	9809883a 	mov	r4,r19
 8001d00:	80066800 	call	8006680 <__ssprint_r>
 8001d04:	103d0e1e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8001d08:	d8c02017 	ldw	r3,128(sp)
 8001d0c:	d8801f17 	ldw	r2,124(sp)
 8001d10:	da000404 	addi	r8,sp,16
 8001d14:	003fee06 	br	8001cd0 <__alt_data_end+0xfc001cd0>
 8001d18:	d9403117 	ldw	r5,196(sp)
 8001d1c:	d8802917 	ldw	r2,164(sp)
 8001d20:	28adc83a 	sub	r22,r5,r2
 8001d24:	05be430e 	bge	zero,r22,8001634 <__alt_data_end+0xfc001634>
 8001d28:	07000404 	movi	fp,16
 8001d2c:	d8801f17 	ldw	r2,124(sp)
 8001d30:	e583a20e 	bge	fp,r22,8002bbc <___svfprintf_internal_r+0x1e18>
 8001d34:	01420074 	movhi	r5,2049
 8001d38:	2978aa84 	addi	r5,r5,-7510
 8001d3c:	dc403015 	stw	r17,192(sp)
 8001d40:	d9402c15 	stw	r5,176(sp)
 8001d44:	b023883a 	mov	r17,r22
 8001d48:	050001c4 	movi	r20,7
 8001d4c:	902d883a 	mov	r22,r18
 8001d50:	8025883a 	mov	r18,r16
 8001d54:	dc002d17 	ldw	r16,180(sp)
 8001d58:	00000306 	br	8001d68 <___svfprintf_internal_r+0xfc4>
 8001d5c:	8c7ffc04 	addi	r17,r17,-16
 8001d60:	42000204 	addi	r8,r8,8
 8001d64:	e440110e 	bge	fp,r17,8001dac <___svfprintf_internal_r+0x1008>
 8001d68:	18c00404 	addi	r3,r3,16
 8001d6c:	10800044 	addi	r2,r2,1
 8001d70:	45400015 	stw	r21,0(r8)
 8001d74:	47000115 	stw	fp,4(r8)
 8001d78:	d8c02015 	stw	r3,128(sp)
 8001d7c:	d8801f15 	stw	r2,124(sp)
 8001d80:	a0bff60e 	bge	r20,r2,8001d5c <__alt_data_end+0xfc001d5c>
 8001d84:	d9801e04 	addi	r6,sp,120
 8001d88:	800b883a 	mov	r5,r16
 8001d8c:	9809883a 	mov	r4,r19
 8001d90:	80066800 	call	8006680 <__ssprint_r>
 8001d94:	103cea1e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8001d98:	8c7ffc04 	addi	r17,r17,-16
 8001d9c:	d8c02017 	ldw	r3,128(sp)
 8001da0:	d8801f17 	ldw	r2,124(sp)
 8001da4:	da000404 	addi	r8,sp,16
 8001da8:	e47fef16 	blt	fp,r17,8001d68 <__alt_data_end+0xfc001d68>
 8001dac:	9021883a 	mov	r16,r18
 8001db0:	b025883a 	mov	r18,r22
 8001db4:	882d883a 	mov	r22,r17
 8001db8:	dc403017 	ldw	r17,192(sp)
 8001dbc:	d9002c17 	ldw	r4,176(sp)
 8001dc0:	1d87883a 	add	r3,r3,r22
 8001dc4:	10800044 	addi	r2,r2,1
 8001dc8:	41000015 	stw	r4,0(r8)
 8001dcc:	45800115 	stw	r22,4(r8)
 8001dd0:	d8c02015 	stw	r3,128(sp)
 8001dd4:	d8801f15 	stw	r2,124(sp)
 8001dd8:	010001c4 	movi	r4,7
 8001ddc:	20819a16 	blt	r4,r2,8002448 <___svfprintf_internal_r+0x16a4>
 8001de0:	42000204 	addi	r8,r8,8
 8001de4:	003e1306 	br	8001634 <__alt_data_end+0xfc001634>
 8001de8:	d9403317 	ldw	r5,204(sp)
 8001dec:	00800044 	movi	r2,1
 8001df0:	18c00044 	addi	r3,r3,1
 8001df4:	1141710e 	bge	r2,r5,80023bc <___svfprintf_internal_r+0x1618>
 8001df8:	dc401f17 	ldw	r17,124(sp)
 8001dfc:	00800044 	movi	r2,1
 8001e00:	40800115 	stw	r2,4(r8)
 8001e04:	8c400044 	addi	r17,r17,1
 8001e08:	44000015 	stw	r16,0(r8)
 8001e0c:	d8c02015 	stw	r3,128(sp)
 8001e10:	dc401f15 	stw	r17,124(sp)
 8001e14:	008001c4 	movi	r2,7
 8001e18:	14417416 	blt	r2,r17,80023ec <___svfprintf_internal_r+0x1648>
 8001e1c:	42000204 	addi	r8,r8,8
 8001e20:	d8803817 	ldw	r2,224(sp)
 8001e24:	d9003417 	ldw	r4,208(sp)
 8001e28:	8c400044 	addi	r17,r17,1
 8001e2c:	10c7883a 	add	r3,r2,r3
 8001e30:	40800115 	stw	r2,4(r8)
 8001e34:	41000015 	stw	r4,0(r8)
 8001e38:	d8c02015 	stw	r3,128(sp)
 8001e3c:	dc401f15 	stw	r17,124(sp)
 8001e40:	008001c4 	movi	r2,7
 8001e44:	14417216 	blt	r2,r17,8002410 <___svfprintf_internal_r+0x166c>
 8001e48:	45800204 	addi	r22,r8,8
 8001e4c:	d9003617 	ldw	r4,216(sp)
 8001e50:	d9403717 	ldw	r5,220(sp)
 8001e54:	000d883a 	mov	r6,zero
 8001e58:	000f883a 	mov	r7,zero
 8001e5c:	d8c03d15 	stw	r3,244(sp)
 8001e60:	800a8300 	call	800a830 <__eqdf2>
 8001e64:	d8c03d17 	ldw	r3,244(sp)
 8001e68:	1000b326 	beq	r2,zero,8002138 <___svfprintf_internal_r+0x1394>
 8001e6c:	d9403317 	ldw	r5,204(sp)
 8001e70:	84000044 	addi	r16,r16,1
 8001e74:	8c400044 	addi	r17,r17,1
 8001e78:	28bfffc4 	addi	r2,r5,-1
 8001e7c:	1887883a 	add	r3,r3,r2
 8001e80:	b0800115 	stw	r2,4(r22)
 8001e84:	b4000015 	stw	r16,0(r22)
 8001e88:	d8c02015 	stw	r3,128(sp)
 8001e8c:	dc401f15 	stw	r17,124(sp)
 8001e90:	008001c4 	movi	r2,7
 8001e94:	1440d216 	blt	r2,r17,80021e0 <___svfprintf_internal_r+0x143c>
 8001e98:	b5800204 	addi	r22,r22,8
 8001e9c:	d9003b17 	ldw	r4,236(sp)
 8001ea0:	df0022c4 	addi	fp,sp,139
 8001ea4:	8c400044 	addi	r17,r17,1
 8001ea8:	20c7883a 	add	r3,r4,r3
 8001eac:	b7000015 	stw	fp,0(r22)
 8001eb0:	b1000115 	stw	r4,4(r22)
 8001eb4:	d8c02015 	stw	r3,128(sp)
 8001eb8:	dc401f15 	stw	r17,124(sp)
 8001ebc:	008001c4 	movi	r2,7
 8001ec0:	14400e16 	blt	r2,r17,8001efc <___svfprintf_internal_r+0x1158>
 8001ec4:	b2000204 	addi	r8,r22,8
 8001ec8:	003e1a06 	br	8001734 <__alt_data_end+0xfc001734>
 8001ecc:	01020074 	movhi	r4,2049
 8001ed0:	2138aa84 	addi	r4,r4,-7510
 8001ed4:	d9002c15 	stw	r4,176(sp)
 8001ed8:	d9002c17 	ldw	r4,176(sp)
 8001edc:	1c07883a 	add	r3,r3,r16
 8001ee0:	44000115 	stw	r16,4(r8)
 8001ee4:	41000015 	stw	r4,0(r8)
 8001ee8:	10800044 	addi	r2,r2,1
 8001eec:	d8c02015 	stw	r3,128(sp)
 8001ef0:	d8801f15 	stw	r2,124(sp)
 8001ef4:	010001c4 	movi	r4,7
 8001ef8:	20be0d0e 	bge	r4,r2,8001730 <__alt_data_end+0xfc001730>
 8001efc:	d9402d17 	ldw	r5,180(sp)
 8001f00:	d9801e04 	addi	r6,sp,120
 8001f04:	9809883a 	mov	r4,r19
 8001f08:	80066800 	call	8006680 <__ssprint_r>
 8001f0c:	103c8c1e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8001f10:	d8c02017 	ldw	r3,128(sp)
 8001f14:	da000404 	addi	r8,sp,16
 8001f18:	003e0606 	br	8001734 <__alt_data_end+0xfc001734>
 8001f1c:	d9402d17 	ldw	r5,180(sp)
 8001f20:	d9801e04 	addi	r6,sp,120
 8001f24:	9809883a 	mov	r4,r19
 8001f28:	80066800 	call	8006680 <__ssprint_r>
 8001f2c:	103e3d26 	beq	r2,zero,8001824 <__alt_data_end+0xfc001824>
 8001f30:	003c8306 	br	8001140 <__alt_data_end+0xfc001140>
 8001f34:	d9402d17 	ldw	r5,180(sp)
 8001f38:	d9801e04 	addi	r6,sp,120
 8001f3c:	9809883a 	mov	r4,r19
 8001f40:	80066800 	call	8006680 <__ssprint_r>
 8001f44:	103c7e1e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8001f48:	d8c02017 	ldw	r3,128(sp)
 8001f4c:	da000404 	addi	r8,sp,16
 8001f50:	003deb06 	br	8001700 <__alt_data_end+0xfc001700>
 8001f54:	d9402d17 	ldw	r5,180(sp)
 8001f58:	d9801e04 	addi	r6,sp,120
 8001f5c:	9809883a 	mov	r4,r19
 8001f60:	80066800 	call	8006680 <__ssprint_r>
 8001f64:	103c761e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8001f68:	d8c02017 	ldw	r3,128(sp)
 8001f6c:	da000404 	addi	r8,sp,16
 8001f70:	003d9f06 	br	80015f0 <__alt_data_end+0xfc0015f0>
 8001f74:	d9402d17 	ldw	r5,180(sp)
 8001f78:	d9801e04 	addi	r6,sp,120
 8001f7c:	9809883a 	mov	r4,r19
 8001f80:	80066800 	call	8006680 <__ssprint_r>
 8001f84:	103c6e1e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8001f88:	d8c02017 	ldw	r3,128(sp)
 8001f8c:	da000404 	addi	r8,sp,16
 8001f90:	003da506 	br	8001628 <__alt_data_end+0xfc001628>
 8001f94:	d9402a17 	ldw	r5,168(sp)
 8001f98:	d8002785 	stb	zero,158(sp)
 8001f9c:	283f0816 	blt	r5,zero,8001bc0 <__alt_data_end+0xfc001bc0>
 8001fa0:	00ffdfc4 	movi	r3,-129
 8001fa4:	a584b03a 	or	r2,r20,r22
 8001fa8:	90e4703a 	and	r18,r18,r3
 8001fac:	103c5126 	beq	r2,zero,80010f4 <__alt_data_end+0xfc0010f4>
 8001fb0:	0039883a 	mov	fp,zero
 8001fb4:	003e5a06 	br	8001920 <__alt_data_end+0xfc001920>
 8001fb8:	9080040c 	andi	r2,r18,16
 8001fbc:	10013d26 	beq	r2,zero,80024b4 <___svfprintf_internal_r+0x1710>
 8001fc0:	d8c02e17 	ldw	r3,184(sp)
 8001fc4:	d9002a17 	ldw	r4,168(sp)
 8001fc8:	d8002785 	stb	zero,158(sp)
 8001fcc:	18800104 	addi	r2,r3,4
 8001fd0:	1d000017 	ldw	r20,0(r3)
 8001fd4:	002d883a 	mov	r22,zero
 8001fd8:	20013f16 	blt	r4,zero,80024d8 <___svfprintf_internal_r+0x1734>
 8001fdc:	00ffdfc4 	movi	r3,-129
 8001fe0:	d8802e15 	stw	r2,184(sp)
 8001fe4:	90e4703a 	and	r18,r18,r3
 8001fe8:	a03d0926 	beq	r20,zero,8001410 <__alt_data_end+0xfc001410>
 8001fec:	0039883a 	mov	fp,zero
 8001ff0:	003d0c06 	br	8001424 <__alt_data_end+0xfc001424>
 8001ff4:	dc402617 	ldw	r17,152(sp)
 8001ff8:	0441830e 	bge	zero,r17,8002608 <___svfprintf_internal_r+0x1864>
 8001ffc:	dc403217 	ldw	r17,200(sp)
 8002000:	d8803317 	ldw	r2,204(sp)
 8002004:	1440010e 	bge	r2,r17,800200c <___svfprintf_internal_r+0x1268>
 8002008:	1023883a 	mov	r17,r2
 800200c:	04400a0e 	bge	zero,r17,8002038 <___svfprintf_internal_r+0x1294>
 8002010:	d8801f17 	ldw	r2,124(sp)
 8002014:	1c47883a 	add	r3,r3,r17
 8002018:	44000015 	stw	r16,0(r8)
 800201c:	10800044 	addi	r2,r2,1
 8002020:	44400115 	stw	r17,4(r8)
 8002024:	d8c02015 	stw	r3,128(sp)
 8002028:	d8801f15 	stw	r2,124(sp)
 800202c:	010001c4 	movi	r4,7
 8002030:	20827516 	blt	r4,r2,8002a08 <___svfprintf_internal_r+0x1c64>
 8002034:	42000204 	addi	r8,r8,8
 8002038:	88027b16 	blt	r17,zero,8002a28 <___svfprintf_internal_r+0x1c84>
 800203c:	d9003217 	ldw	r4,200(sp)
 8002040:	2463c83a 	sub	r17,r4,r17
 8002044:	0440990e 	bge	zero,r17,80022ac <___svfprintf_internal_r+0x1508>
 8002048:	05800404 	movi	r22,16
 800204c:	d8801f17 	ldw	r2,124(sp)
 8002050:	b441530e 	bge	r22,r17,80025a0 <___svfprintf_internal_r+0x17fc>
 8002054:	01020074 	movhi	r4,2049
 8002058:	2138aa84 	addi	r4,r4,-7510
 800205c:	d9002c15 	stw	r4,176(sp)
 8002060:	070001c4 	movi	fp,7
 8002064:	dd002d17 	ldw	r20,180(sp)
 8002068:	00000306 	br	8002078 <___svfprintf_internal_r+0x12d4>
 800206c:	42000204 	addi	r8,r8,8
 8002070:	8c7ffc04 	addi	r17,r17,-16
 8002074:	b4414d0e 	bge	r22,r17,80025ac <___svfprintf_internal_r+0x1808>
 8002078:	18c00404 	addi	r3,r3,16
 800207c:	10800044 	addi	r2,r2,1
 8002080:	45400015 	stw	r21,0(r8)
 8002084:	45800115 	stw	r22,4(r8)
 8002088:	d8c02015 	stw	r3,128(sp)
 800208c:	d8801f15 	stw	r2,124(sp)
 8002090:	e0bff60e 	bge	fp,r2,800206c <__alt_data_end+0xfc00206c>
 8002094:	d9801e04 	addi	r6,sp,120
 8002098:	a00b883a 	mov	r5,r20
 800209c:	9809883a 	mov	r4,r19
 80020a0:	80066800 	call	8006680 <__ssprint_r>
 80020a4:	103c261e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80020a8:	d8c02017 	ldw	r3,128(sp)
 80020ac:	d8801f17 	ldw	r2,124(sp)
 80020b0:	da000404 	addi	r8,sp,16
 80020b4:	003fee06 	br	8002070 <__alt_data_end+0xfc002070>
 80020b8:	d9402d17 	ldw	r5,180(sp)
 80020bc:	d9801e04 	addi	r6,sp,120
 80020c0:	9809883a 	mov	r4,r19
 80020c4:	80066800 	call	8006680 <__ssprint_r>
 80020c8:	103c1d1e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80020cc:	d8c02017 	ldw	r3,128(sp)
 80020d0:	df002787 	ldb	fp,158(sp)
 80020d4:	da000404 	addi	r8,sp,16
 80020d8:	003d3806 	br	80015bc <__alt_data_end+0xfc0015bc>
 80020dc:	9080040c 	andi	r2,r18,16
 80020e0:	10005c26 	beq	r2,zero,8002254 <___svfprintf_internal_r+0x14b0>
 80020e4:	d8c02e17 	ldw	r3,184(sp)
 80020e8:	d9002a17 	ldw	r4,168(sp)
 80020ec:	d8002785 	stb	zero,158(sp)
 80020f0:	18800104 	addi	r2,r3,4
 80020f4:	1d000017 	ldw	r20,0(r3)
 80020f8:	002d883a 	mov	r22,zero
 80020fc:	20005e16 	blt	r4,zero,8002278 <___svfprintf_internal_r+0x14d4>
 8002100:	00ffdfc4 	movi	r3,-129
 8002104:	d8802e15 	stw	r2,184(sp)
 8002108:	90e4703a 	and	r18,r18,r3
 800210c:	0039883a 	mov	fp,zero
 8002110:	a03ddf26 	beq	r20,zero,8001890 <__alt_data_end+0xfc001890>
 8002114:	00800244 	movi	r2,9
 8002118:	153c8e36 	bltu	r2,r20,8001354 <__alt_data_end+0xfc001354>
 800211c:	a5000c04 	addi	r20,r20,48
 8002120:	dc001dc4 	addi	r16,sp,119
 8002124:	dd001dc5 	stb	r20,119(sp)
 8002128:	d8c02817 	ldw	r3,160(sp)
 800212c:	1c07c83a 	sub	r3,r3,r16
 8002130:	d8c02b15 	stw	r3,172(sp)
 8002134:	003cd306 	br	8001484 <__alt_data_end+0xfc001484>
 8002138:	d8803317 	ldw	r2,204(sp)
 800213c:	143fffc4 	addi	r16,r2,-1
 8002140:	043f560e 	bge	zero,r16,8001e9c <__alt_data_end+0xfc001e9c>
 8002144:	07000404 	movi	fp,16
 8002148:	e403530e 	bge	fp,r16,8002e98 <___svfprintf_internal_r+0x20f4>
 800214c:	01420074 	movhi	r5,2049
 8002150:	2978aa84 	addi	r5,r5,-7510
 8002154:	d9402c15 	stw	r5,176(sp)
 8002158:	01c001c4 	movi	r7,7
 800215c:	dd002d17 	ldw	r20,180(sp)
 8002160:	00000306 	br	8002170 <___svfprintf_internal_r+0x13cc>
 8002164:	843ffc04 	addi	r16,r16,-16
 8002168:	b5800204 	addi	r22,r22,8
 800216c:	e400130e 	bge	fp,r16,80021bc <___svfprintf_internal_r+0x1418>
 8002170:	18c00404 	addi	r3,r3,16
 8002174:	8c400044 	addi	r17,r17,1
 8002178:	b5400015 	stw	r21,0(r22)
 800217c:	b7000115 	stw	fp,4(r22)
 8002180:	d8c02015 	stw	r3,128(sp)
 8002184:	dc401f15 	stw	r17,124(sp)
 8002188:	3c7ff60e 	bge	r7,r17,8002164 <__alt_data_end+0xfc002164>
 800218c:	d9801e04 	addi	r6,sp,120
 8002190:	a00b883a 	mov	r5,r20
 8002194:	9809883a 	mov	r4,r19
 8002198:	d9c03d15 	stw	r7,244(sp)
 800219c:	80066800 	call	8006680 <__ssprint_r>
 80021a0:	d9c03d17 	ldw	r7,244(sp)
 80021a4:	103be61e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80021a8:	843ffc04 	addi	r16,r16,-16
 80021ac:	d8c02017 	ldw	r3,128(sp)
 80021b0:	dc401f17 	ldw	r17,124(sp)
 80021b4:	dd800404 	addi	r22,sp,16
 80021b8:	e43fed16 	blt	fp,r16,8002170 <__alt_data_end+0xfc002170>
 80021bc:	d8802c17 	ldw	r2,176(sp)
 80021c0:	1c07883a 	add	r3,r3,r16
 80021c4:	8c400044 	addi	r17,r17,1
 80021c8:	b0800015 	stw	r2,0(r22)
 80021cc:	b4000115 	stw	r16,4(r22)
 80021d0:	d8c02015 	stw	r3,128(sp)
 80021d4:	dc401f15 	stw	r17,124(sp)
 80021d8:	008001c4 	movi	r2,7
 80021dc:	147f2e0e 	bge	r2,r17,8001e98 <__alt_data_end+0xfc001e98>
 80021e0:	d9402d17 	ldw	r5,180(sp)
 80021e4:	d9801e04 	addi	r6,sp,120
 80021e8:	9809883a 	mov	r4,r19
 80021ec:	80066800 	call	8006680 <__ssprint_r>
 80021f0:	103bd31e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80021f4:	d8c02017 	ldw	r3,128(sp)
 80021f8:	dc401f17 	ldw	r17,124(sp)
 80021fc:	dd800404 	addi	r22,sp,16
 8002200:	003f2606 	br	8001e9c <__alt_data_end+0xfc001e9c>
 8002204:	9080040c 	andi	r2,r18,16
 8002208:	1000c326 	beq	r2,zero,8002518 <___svfprintf_internal_r+0x1774>
 800220c:	d9402e17 	ldw	r5,184(sp)
 8002210:	2d000017 	ldw	r20,0(r5)
 8002214:	29400104 	addi	r5,r5,4
 8002218:	d9402e15 	stw	r5,184(sp)
 800221c:	a02dd7fa 	srai	r22,r20,31
 8002220:	b005883a 	mov	r2,r22
 8002224:	103c430e 	bge	r2,zero,8001334 <__alt_data_end+0xfc001334>
 8002228:	d9402a17 	ldw	r5,168(sp)
 800222c:	0529c83a 	sub	r20,zero,r20
 8002230:	07000b44 	movi	fp,45
 8002234:	a004c03a 	cmpne	r2,r20,zero
 8002238:	05adc83a 	sub	r22,zero,r22
 800223c:	df002785 	stb	fp,158(sp)
 8002240:	b0adc83a 	sub	r22,r22,r2
 8002244:	28022e16 	blt	r5,zero,8002b00 <___svfprintf_internal_r+0x1d5c>
 8002248:	00bfdfc4 	movi	r2,-129
 800224c:	90a4703a 	and	r18,r18,r2
 8002250:	003c3f06 	br	8001350 <__alt_data_end+0xfc001350>
 8002254:	9080100c 	andi	r2,r18,64
 8002258:	d8002785 	stb	zero,158(sp)
 800225c:	10012526 	beq	r2,zero,80026f4 <___svfprintf_internal_r+0x1950>
 8002260:	d9402e17 	ldw	r5,184(sp)
 8002264:	d8c02a17 	ldw	r3,168(sp)
 8002268:	002d883a 	mov	r22,zero
 800226c:	28800104 	addi	r2,r5,4
 8002270:	2d00000b 	ldhu	r20,0(r5)
 8002274:	183fa20e 	bge	r3,zero,8002100 <__alt_data_end+0xfc002100>
 8002278:	d8802e15 	stw	r2,184(sp)
 800227c:	0039883a 	mov	fp,zero
 8002280:	a584b03a 	or	r2,r20,r22
 8002284:	103c321e 	bne	r2,zero,8001350 <__alt_data_end+0xfc001350>
 8002288:	00800044 	movi	r2,1
 800228c:	003e5006 	br	8001bd0 <__alt_data_end+0xfc001bd0>
 8002290:	d9402d17 	ldw	r5,180(sp)
 8002294:	d9801e04 	addi	r6,sp,120
 8002298:	9809883a 	mov	r4,r19
 800229c:	80066800 	call	8006680 <__ssprint_r>
 80022a0:	103ba71e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80022a4:	d8c02017 	ldw	r3,128(sp)
 80022a8:	da000404 	addi	r8,sp,16
 80022ac:	d9003217 	ldw	r4,200(sp)
 80022b0:	d8802617 	ldw	r2,152(sp)
 80022b4:	d9403317 	ldw	r5,204(sp)
 80022b8:	8123883a 	add	r17,r16,r4
 80022bc:	11400216 	blt	r2,r5,80022c8 <___svfprintf_internal_r+0x1524>
 80022c0:	9100004c 	andi	r4,r18,1
 80022c4:	20000d26 	beq	r4,zero,80022fc <___svfprintf_internal_r+0x1558>
 80022c8:	d9003817 	ldw	r4,224(sp)
 80022cc:	d9403417 	ldw	r5,208(sp)
 80022d0:	1907883a 	add	r3,r3,r4
 80022d4:	d9001f17 	ldw	r4,124(sp)
 80022d8:	41400015 	stw	r5,0(r8)
 80022dc:	d9403817 	ldw	r5,224(sp)
 80022e0:	21000044 	addi	r4,r4,1
 80022e4:	d8c02015 	stw	r3,128(sp)
 80022e8:	41400115 	stw	r5,4(r8)
 80022ec:	d9001f15 	stw	r4,124(sp)
 80022f0:	014001c4 	movi	r5,7
 80022f4:	2901dc16 	blt	r5,r4,8002a68 <___svfprintf_internal_r+0x1cc4>
 80022f8:	42000204 	addi	r8,r8,8
 80022fc:	d9003317 	ldw	r4,204(sp)
 8002300:	8121883a 	add	r16,r16,r4
 8002304:	2085c83a 	sub	r2,r4,r2
 8002308:	8461c83a 	sub	r16,r16,r17
 800230c:	1400010e 	bge	r2,r16,8002314 <___svfprintf_internal_r+0x1570>
 8002310:	1021883a 	mov	r16,r2
 8002314:	04000a0e 	bge	zero,r16,8002340 <___svfprintf_internal_r+0x159c>
 8002318:	d9001f17 	ldw	r4,124(sp)
 800231c:	1c07883a 	add	r3,r3,r16
 8002320:	44400015 	stw	r17,0(r8)
 8002324:	21000044 	addi	r4,r4,1
 8002328:	44000115 	stw	r16,4(r8)
 800232c:	d8c02015 	stw	r3,128(sp)
 8002330:	d9001f15 	stw	r4,124(sp)
 8002334:	014001c4 	movi	r5,7
 8002338:	2901e616 	blt	r5,r4,8002ad4 <___svfprintf_internal_r+0x1d30>
 800233c:	42000204 	addi	r8,r8,8
 8002340:	8001f616 	blt	r16,zero,8002b1c <___svfprintf_internal_r+0x1d78>
 8002344:	1421c83a 	sub	r16,r2,r16
 8002348:	043cfa0e 	bge	zero,r16,8001734 <__alt_data_end+0xfc001734>
 800234c:	04400404 	movi	r17,16
 8002350:	d8801f17 	ldw	r2,124(sp)
 8002354:	8c3edd0e 	bge	r17,r16,8001ecc <__alt_data_end+0xfc001ecc>
 8002358:	01420074 	movhi	r5,2049
 800235c:	2978aa84 	addi	r5,r5,-7510
 8002360:	d9402c15 	stw	r5,176(sp)
 8002364:	058001c4 	movi	r22,7
 8002368:	dd002d17 	ldw	r20,180(sp)
 800236c:	00000306 	br	800237c <___svfprintf_internal_r+0x15d8>
 8002370:	42000204 	addi	r8,r8,8
 8002374:	843ffc04 	addi	r16,r16,-16
 8002378:	8c3ed70e 	bge	r17,r16,8001ed8 <__alt_data_end+0xfc001ed8>
 800237c:	18c00404 	addi	r3,r3,16
 8002380:	10800044 	addi	r2,r2,1
 8002384:	45400015 	stw	r21,0(r8)
 8002388:	44400115 	stw	r17,4(r8)
 800238c:	d8c02015 	stw	r3,128(sp)
 8002390:	d8801f15 	stw	r2,124(sp)
 8002394:	b0bff60e 	bge	r22,r2,8002370 <__alt_data_end+0xfc002370>
 8002398:	d9801e04 	addi	r6,sp,120
 800239c:	a00b883a 	mov	r5,r20
 80023a0:	9809883a 	mov	r4,r19
 80023a4:	80066800 	call	8006680 <__ssprint_r>
 80023a8:	103b651e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80023ac:	d8c02017 	ldw	r3,128(sp)
 80023b0:	d8801f17 	ldw	r2,124(sp)
 80023b4:	da000404 	addi	r8,sp,16
 80023b8:	003fee06 	br	8002374 <__alt_data_end+0xfc002374>
 80023bc:	9088703a 	and	r4,r18,r2
 80023c0:	203e8d1e 	bne	r4,zero,8001df8 <__alt_data_end+0xfc001df8>
 80023c4:	dc401f17 	ldw	r17,124(sp)
 80023c8:	40800115 	stw	r2,4(r8)
 80023cc:	44000015 	stw	r16,0(r8)
 80023d0:	8c400044 	addi	r17,r17,1
 80023d4:	d8c02015 	stw	r3,128(sp)
 80023d8:	dc401f15 	stw	r17,124(sp)
 80023dc:	008001c4 	movi	r2,7
 80023e0:	147f7f16 	blt	r2,r17,80021e0 <__alt_data_end+0xfc0021e0>
 80023e4:	45800204 	addi	r22,r8,8
 80023e8:	003eac06 	br	8001e9c <__alt_data_end+0xfc001e9c>
 80023ec:	d9402d17 	ldw	r5,180(sp)
 80023f0:	d9801e04 	addi	r6,sp,120
 80023f4:	9809883a 	mov	r4,r19
 80023f8:	80066800 	call	8006680 <__ssprint_r>
 80023fc:	103b501e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8002400:	d8c02017 	ldw	r3,128(sp)
 8002404:	dc401f17 	ldw	r17,124(sp)
 8002408:	da000404 	addi	r8,sp,16
 800240c:	003e8406 	br	8001e20 <__alt_data_end+0xfc001e20>
 8002410:	d9402d17 	ldw	r5,180(sp)
 8002414:	d9801e04 	addi	r6,sp,120
 8002418:	9809883a 	mov	r4,r19
 800241c:	80066800 	call	8006680 <__ssprint_r>
 8002420:	103b471e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8002424:	d8c02017 	ldw	r3,128(sp)
 8002428:	dc401f17 	ldw	r17,124(sp)
 800242c:	dd800404 	addi	r22,sp,16
 8002430:	003e8606 	br	8001e4c <__alt_data_end+0xfc001e4c>
 8002434:	0029883a 	mov	r20,zero
 8002438:	a5000c04 	addi	r20,r20,48
 800243c:	dc001dc4 	addi	r16,sp,119
 8002440:	dd001dc5 	stb	r20,119(sp)
 8002444:	003f3806 	br	8002128 <__alt_data_end+0xfc002128>
 8002448:	d9402d17 	ldw	r5,180(sp)
 800244c:	d9801e04 	addi	r6,sp,120
 8002450:	9809883a 	mov	r4,r19
 8002454:	80066800 	call	8006680 <__ssprint_r>
 8002458:	103b391e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 800245c:	d8c02017 	ldw	r3,128(sp)
 8002460:	da000404 	addi	r8,sp,16
 8002464:	003c7306 	br	8001634 <__alt_data_end+0xfc001634>
 8002468:	d9003617 	ldw	r4,216(sp)
 800246c:	d9403717 	ldw	r5,220(sp)
 8002470:	da003e15 	stw	r8,248(sp)
 8002474:	80064dc0 	call	80064dc <__fpclassifyd>
 8002478:	da003e17 	ldw	r8,248(sp)
 800247c:	1000bd1e 	bne	r2,zero,8002774 <___svfprintf_internal_r+0x19d0>
 8002480:	008011c4 	movi	r2,71
 8002484:	14411e0e 	bge	r2,r17,8002900 <___svfprintf_internal_r+0x1b5c>
 8002488:	04020074 	movhi	r16,2049
 800248c:	84389d04 	addi	r16,r16,-7564
 8002490:	00c000c4 	movi	r3,3
 8002494:	00bfdfc4 	movi	r2,-129
 8002498:	d8c02915 	stw	r3,164(sp)
 800249c:	90a4703a 	and	r18,r18,r2
 80024a0:	df002783 	ldbu	fp,158(sp)
 80024a4:	d8c02b15 	stw	r3,172(sp)
 80024a8:	d8002a15 	stw	zero,168(sp)
 80024ac:	d8003215 	stw	zero,200(sp)
 80024b0:	003bfa06 	br	800149c <__alt_data_end+0xfc00149c>
 80024b4:	9080100c 	andi	r2,r18,64
 80024b8:	d8002785 	stb	zero,158(sp)
 80024bc:	10009426 	beq	r2,zero,8002710 <___svfprintf_internal_r+0x196c>
 80024c0:	d9402e17 	ldw	r5,184(sp)
 80024c4:	d8c02a17 	ldw	r3,168(sp)
 80024c8:	002d883a 	mov	r22,zero
 80024cc:	28800104 	addi	r2,r5,4
 80024d0:	2d00000b 	ldhu	r20,0(r5)
 80024d4:	183ec10e 	bge	r3,zero,8001fdc <__alt_data_end+0xfc001fdc>
 80024d8:	a586b03a 	or	r3,r20,r22
 80024dc:	d8802e15 	stw	r2,184(sp)
 80024e0:	183ec21e 	bne	r3,zero,8001fec <__alt_data_end+0xfc001fec>
 80024e4:	0039883a 	mov	fp,zero
 80024e8:	0005883a 	mov	r2,zero
 80024ec:	003db806 	br	8001bd0 <__alt_data_end+0xfc001bd0>
 80024f0:	d8c02e17 	ldw	r3,184(sp)
 80024f4:	d9002e17 	ldw	r4,184(sp)
 80024f8:	d9402e17 	ldw	r5,184(sp)
 80024fc:	18c00017 	ldw	r3,0(r3)
 8002500:	21000117 	ldw	r4,4(r4)
 8002504:	29400204 	addi	r5,r5,8
 8002508:	d8c03615 	stw	r3,216(sp)
 800250c:	d9003715 	stw	r4,220(sp)
 8002510:	d9402e15 	stw	r5,184(sp)
 8002514:	003b5a06 	br	8001280 <__alt_data_end+0xfc001280>
 8002518:	9080100c 	andi	r2,r18,64
 800251c:	10010726 	beq	r2,zero,800293c <___svfprintf_internal_r+0x1b98>
 8002520:	d8802e17 	ldw	r2,184(sp)
 8002524:	1500000f 	ldh	r20,0(r2)
 8002528:	10800104 	addi	r2,r2,4
 800252c:	d8802e15 	stw	r2,184(sp)
 8002530:	a02dd7fa 	srai	r22,r20,31
 8002534:	b005883a 	mov	r2,r22
 8002538:	003b7d06 	br	8001330 <__alt_data_end+0xfc001330>
 800253c:	9080100c 	andi	r2,r18,64
 8002540:	10010526 	beq	r2,zero,8002958 <___svfprintf_internal_r+0x1bb4>
 8002544:	d8c02e17 	ldw	r3,184(sp)
 8002548:	002d883a 	mov	r22,zero
 800254c:	1d00000b 	ldhu	r20,0(r3)
 8002550:	18c00104 	addi	r3,r3,4
 8002554:	d8c02e15 	stw	r3,184(sp)
 8002558:	003ce206 	br	80018e4 <__alt_data_end+0xfc0018e4>
 800255c:	bc400007 	ldb	r17,0(r23)
 8002560:	003a6506 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 8002564:	9080040c 	andi	r2,r18,16
 8002568:	10010126 	beq	r2,zero,8002970 <___svfprintf_internal_r+0x1bcc>
 800256c:	d8c02e17 	ldw	r3,184(sp)
 8002570:	d9002f17 	ldw	r4,188(sp)
 8002574:	18800017 	ldw	r2,0(r3)
 8002578:	18c00104 	addi	r3,r3,4
 800257c:	d8c02e15 	stw	r3,184(sp)
 8002580:	11000015 	stw	r4,0(r2)
 8002584:	003a3206 	br	8000e50 <__alt_data_end+0xfc000e50>
 8002588:	d9002a17 	ldw	r4,168(sp)
 800258c:	d8002785 	stb	zero,158(sp)
 8002590:	203d8d16 	blt	r4,zero,8001bc8 <__alt_data_end+0xfc001bc8>
 8002594:	00bfdfc4 	movi	r2,-129
 8002598:	90a4703a 	and	r18,r18,r2
 800259c:	003ad506 	br	80010f4 <__alt_data_end+0xfc0010f4>
 80025a0:	01420074 	movhi	r5,2049
 80025a4:	2978aa84 	addi	r5,r5,-7510
 80025a8:	d9402c15 	stw	r5,176(sp)
 80025ac:	d9402c17 	ldw	r5,176(sp)
 80025b0:	1c47883a 	add	r3,r3,r17
 80025b4:	10800044 	addi	r2,r2,1
 80025b8:	41400015 	stw	r5,0(r8)
 80025bc:	44400115 	stw	r17,4(r8)
 80025c0:	d8c02015 	stw	r3,128(sp)
 80025c4:	d8801f15 	stw	r2,124(sp)
 80025c8:	010001c4 	movi	r4,7
 80025cc:	20bf3016 	blt	r4,r2,8002290 <__alt_data_end+0xfc002290>
 80025d0:	42000204 	addi	r8,r8,8
 80025d4:	003f3506 	br	80022ac <__alt_data_end+0xfc0022ac>
 80025d8:	01020074 	movhi	r4,2049
 80025dc:	2138aa84 	addi	r4,r4,-7510
 80025e0:	d9002c15 	stw	r4,176(sp)
 80025e4:	003c3c06 	br	80016d8 <__alt_data_end+0xfc0016d8>
 80025e8:	d9402d17 	ldw	r5,180(sp)
 80025ec:	d9801e04 	addi	r6,sp,120
 80025f0:	9809883a 	mov	r4,r19
 80025f4:	80066800 	call	8006680 <__ssprint_r>
 80025f8:	103ad11e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80025fc:	d8c02017 	ldw	r3,128(sp)
 8002600:	da000404 	addi	r8,sp,16
 8002604:	003d9306 	br	8001c54 <__alt_data_end+0xfc001c54>
 8002608:	d8801f17 	ldw	r2,124(sp)
 800260c:	01420074 	movhi	r5,2049
 8002610:	01000044 	movi	r4,1
 8002614:	18c00044 	addi	r3,r3,1
 8002618:	10800044 	addi	r2,r2,1
 800261c:	2978aa04 	addi	r5,r5,-7512
 8002620:	41000115 	stw	r4,4(r8)
 8002624:	41400015 	stw	r5,0(r8)
 8002628:	d8c02015 	stw	r3,128(sp)
 800262c:	d8801f15 	stw	r2,124(sp)
 8002630:	010001c4 	movi	r4,7
 8002634:	2080b516 	blt	r4,r2,800290c <___svfprintf_internal_r+0x1b68>
 8002638:	42000204 	addi	r8,r8,8
 800263c:	8800041e 	bne	r17,zero,8002650 <___svfprintf_internal_r+0x18ac>
 8002640:	d8803317 	ldw	r2,204(sp)
 8002644:	1000021e 	bne	r2,zero,8002650 <___svfprintf_internal_r+0x18ac>
 8002648:	9080004c 	andi	r2,r18,1
 800264c:	103c3926 	beq	r2,zero,8001734 <__alt_data_end+0xfc001734>
 8002650:	d9003817 	ldw	r4,224(sp)
 8002654:	d8801f17 	ldw	r2,124(sp)
 8002658:	d9403417 	ldw	r5,208(sp)
 800265c:	20c7883a 	add	r3,r4,r3
 8002660:	10800044 	addi	r2,r2,1
 8002664:	41000115 	stw	r4,4(r8)
 8002668:	41400015 	stw	r5,0(r8)
 800266c:	d8c02015 	stw	r3,128(sp)
 8002670:	d8801f15 	stw	r2,124(sp)
 8002674:	010001c4 	movi	r4,7
 8002678:	20818016 	blt	r4,r2,8002c7c <___svfprintf_internal_r+0x1ed8>
 800267c:	42000204 	addi	r8,r8,8
 8002680:	0463c83a 	sub	r17,zero,r17
 8002684:	0440cb0e 	bge	zero,r17,80029b4 <___svfprintf_internal_r+0x1c10>
 8002688:	05800404 	movi	r22,16
 800268c:	b440e80e 	bge	r22,r17,8002a30 <___svfprintf_internal_r+0x1c8c>
 8002690:	01420074 	movhi	r5,2049
 8002694:	2978aa84 	addi	r5,r5,-7510
 8002698:	d9402c15 	stw	r5,176(sp)
 800269c:	070001c4 	movi	fp,7
 80026a0:	dd002d17 	ldw	r20,180(sp)
 80026a4:	00000306 	br	80026b4 <___svfprintf_internal_r+0x1910>
 80026a8:	42000204 	addi	r8,r8,8
 80026ac:	8c7ffc04 	addi	r17,r17,-16
 80026b0:	b440e20e 	bge	r22,r17,8002a3c <___svfprintf_internal_r+0x1c98>
 80026b4:	18c00404 	addi	r3,r3,16
 80026b8:	10800044 	addi	r2,r2,1
 80026bc:	45400015 	stw	r21,0(r8)
 80026c0:	45800115 	stw	r22,4(r8)
 80026c4:	d8c02015 	stw	r3,128(sp)
 80026c8:	d8801f15 	stw	r2,124(sp)
 80026cc:	e0bff60e 	bge	fp,r2,80026a8 <__alt_data_end+0xfc0026a8>
 80026d0:	d9801e04 	addi	r6,sp,120
 80026d4:	a00b883a 	mov	r5,r20
 80026d8:	9809883a 	mov	r4,r19
 80026dc:	80066800 	call	8006680 <__ssprint_r>
 80026e0:	103a971e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80026e4:	d8c02017 	ldw	r3,128(sp)
 80026e8:	d8801f17 	ldw	r2,124(sp)
 80026ec:	da000404 	addi	r8,sp,16
 80026f0:	003fee06 	br	80026ac <__alt_data_end+0xfc0026ac>
 80026f4:	d9002e17 	ldw	r4,184(sp)
 80026f8:	d9402a17 	ldw	r5,168(sp)
 80026fc:	002d883a 	mov	r22,zero
 8002700:	20800104 	addi	r2,r4,4
 8002704:	25000017 	ldw	r20,0(r4)
 8002708:	283e7d0e 	bge	r5,zero,8002100 <__alt_data_end+0xfc002100>
 800270c:	003eda06 	br	8002278 <__alt_data_end+0xfc002278>
 8002710:	d9002e17 	ldw	r4,184(sp)
 8002714:	d9402a17 	ldw	r5,168(sp)
 8002718:	002d883a 	mov	r22,zero
 800271c:	20800104 	addi	r2,r4,4
 8002720:	25000017 	ldw	r20,0(r4)
 8002724:	283e2d0e 	bge	r5,zero,8001fdc <__alt_data_end+0xfc001fdc>
 8002728:	003f6b06 	br	80024d8 <__alt_data_end+0xfc0024d8>
 800272c:	d8c02e15 	stw	r3,184(sp)
 8002730:	0039883a 	mov	fp,zero
 8002734:	003ed206 	br	8002280 <__alt_data_end+0xfc002280>
 8002738:	bc400043 	ldbu	r17,1(r23)
 800273c:	84000814 	ori	r16,r16,32
 8002740:	bdc00044 	addi	r23,r23,1
 8002744:	8c403fcc 	andi	r17,r17,255
 8002748:	8c40201c 	xori	r17,r17,128
 800274c:	8c7fe004 	addi	r17,r17,-128
 8002750:	0039e906 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 8002754:	d9402d17 	ldw	r5,180(sp)
 8002758:	d9801e04 	addi	r6,sp,120
 800275c:	9809883a 	mov	r4,r19
 8002760:	80066800 	call	8006680 <__ssprint_r>
 8002764:	103a761e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8002768:	d8c02017 	ldw	r3,128(sp)
 800276c:	da000404 	addi	r8,sp,16
 8002770:	003d4a06 	br	8001c9c <__alt_data_end+0xfc001c9c>
 8002774:	d9002a17 	ldw	r4,168(sp)
 8002778:	05bff7c4 	movi	r22,-33
 800277c:	00bfffc4 	movi	r2,-1
 8002780:	8dac703a 	and	r22,r17,r22
 8002784:	20806a26 	beq	r4,r2,8002930 <___svfprintf_internal_r+0x1b8c>
 8002788:	008011c4 	movi	r2,71
 800278c:	b0813726 	beq	r22,r2,8002c6c <___svfprintf_internal_r+0x1ec8>
 8002790:	d9003717 	ldw	r4,220(sp)
 8002794:	90c04014 	ori	r3,r18,256
 8002798:	d8c02c15 	stw	r3,176(sp)
 800279c:	20015d16 	blt	r4,zero,8002d14 <___svfprintf_internal_r+0x1f70>
 80027a0:	dd003717 	ldw	r20,220(sp)
 80027a4:	d8002905 	stb	zero,164(sp)
 80027a8:	00801984 	movi	r2,102
 80027ac:	88814026 	beq	r17,r2,8002cb0 <___svfprintf_internal_r+0x1f0c>
 80027b0:	00801184 	movi	r2,70
 80027b4:	88817126 	beq	r17,r2,8002d7c <___svfprintf_internal_r+0x1fd8>
 80027b8:	00801144 	movi	r2,69
 80027bc:	b0816226 	beq	r22,r2,8002d48 <___svfprintf_internal_r+0x1fa4>
 80027c0:	d8c02a17 	ldw	r3,168(sp)
 80027c4:	d8802104 	addi	r2,sp,132
 80027c8:	d8800315 	stw	r2,12(sp)
 80027cc:	d9403617 	ldw	r5,216(sp)
 80027d0:	d8802504 	addi	r2,sp,148
 80027d4:	d8800215 	stw	r2,8(sp)
 80027d8:	d8802604 	addi	r2,sp,152
 80027dc:	d8c00015 	stw	r3,0(sp)
 80027e0:	d8800115 	stw	r2,4(sp)
 80027e4:	01c00084 	movi	r7,2
 80027e8:	a00d883a 	mov	r6,r20
 80027ec:	9809883a 	mov	r4,r19
 80027f0:	d8c03d15 	stw	r3,244(sp)
 80027f4:	da003e15 	stw	r8,248(sp)
 80027f8:	80032880 	call	8003288 <_dtoa_r>
 80027fc:	1021883a 	mov	r16,r2
 8002800:	008019c4 	movi	r2,103
 8002804:	d8c03d17 	ldw	r3,244(sp)
 8002808:	da003e17 	ldw	r8,248(sp)
 800280c:	8880e726 	beq	r17,r2,8002bac <___svfprintf_internal_r+0x1e08>
 8002810:	008011c4 	movi	r2,71
 8002814:	8880d426 	beq	r17,r2,8002b68 <___svfprintf_internal_r+0x1dc4>
 8002818:	80f9883a 	add	fp,r16,r3
 800281c:	d9003617 	ldw	r4,216(sp)
 8002820:	000d883a 	mov	r6,zero
 8002824:	000f883a 	mov	r7,zero
 8002828:	a00b883a 	mov	r5,r20
 800282c:	da003e15 	stw	r8,248(sp)
 8002830:	800a8300 	call	800a830 <__eqdf2>
 8002834:	da003e17 	ldw	r8,248(sp)
 8002838:	1000e426 	beq	r2,zero,8002bcc <___svfprintf_internal_r+0x1e28>
 800283c:	d8802117 	ldw	r2,132(sp)
 8002840:	1700062e 	bgeu	r2,fp,800285c <___svfprintf_internal_r+0x1ab8>
 8002844:	01000c04 	movi	r4,48
 8002848:	10c00044 	addi	r3,r2,1
 800284c:	d8c02115 	stw	r3,132(sp)
 8002850:	11000005 	stb	r4,0(r2)
 8002854:	d8802117 	ldw	r2,132(sp)
 8002858:	173ffb36 	bltu	r2,fp,8002848 <__alt_data_end+0xfc002848>
 800285c:	1405c83a 	sub	r2,r2,r16
 8002860:	d8803315 	stw	r2,204(sp)
 8002864:	008011c4 	movi	r2,71
 8002868:	b080c526 	beq	r22,r2,8002b80 <___svfprintf_internal_r+0x1ddc>
 800286c:	00801944 	movi	r2,101
 8002870:	1441d80e 	bge	r2,r17,8002fd4 <___svfprintf_internal_r+0x2230>
 8002874:	d8c02617 	ldw	r3,152(sp)
 8002878:	00801984 	movi	r2,102
 800287c:	d8c03215 	stw	r3,200(sp)
 8002880:	88813426 	beq	r17,r2,8002d54 <___svfprintf_internal_r+0x1fb0>
 8002884:	d8c03217 	ldw	r3,200(sp)
 8002888:	d9003317 	ldw	r4,204(sp)
 800288c:	19012516 	blt	r3,r4,8002d24 <___svfprintf_internal_r+0x1f80>
 8002890:	9480004c 	andi	r18,r18,1
 8002894:	9001841e 	bne	r18,zero,8002ea8 <___svfprintf_internal_r+0x2104>
 8002898:	1805883a 	mov	r2,r3
 800289c:	1801cb16 	blt	r3,zero,8002fcc <___svfprintf_internal_r+0x2228>
 80028a0:	d8c03217 	ldw	r3,200(sp)
 80028a4:	044019c4 	movi	r17,103
 80028a8:	d8c02b15 	stw	r3,172(sp)
 80028ac:	df002907 	ldb	fp,164(sp)
 80028b0:	e000a61e 	bne	fp,zero,8002b4c <___svfprintf_internal_r+0x1da8>
 80028b4:	df002783 	ldbu	fp,158(sp)
 80028b8:	d8802915 	stw	r2,164(sp)
 80028bc:	dc802c17 	ldw	r18,176(sp)
 80028c0:	d8002a15 	stw	zero,168(sp)
 80028c4:	003af506 	br	800149c <__alt_data_end+0xfc00149c>
 80028c8:	04020074 	movhi	r16,2049
 80028cc:	84389a04 	addi	r16,r16,-7576
 80028d0:	003a7e06 	br	80012cc <__alt_data_end+0xfc0012cc>
 80028d4:	d9003917 	ldw	r4,228(sp)
 80028d8:	04001004 	movi	r16,64
 80028dc:	800b883a 	mov	r5,r16
 80028e0:	80049ec0 	call	80049ec <_malloc_r>
 80028e4:	d9002d17 	ldw	r4,180(sp)
 80028e8:	20800015 	stw	r2,0(r4)
 80028ec:	20800415 	stw	r2,16(r4)
 80028f0:	1001d026 	beq	r2,zero,8003034 <___svfprintf_internal_r+0x2290>
 80028f4:	d8802d17 	ldw	r2,180(sp)
 80028f8:	14000515 	stw	r16,20(r2)
 80028fc:	00394406 	br	8000e10 <__alt_data_end+0xfc000e10>
 8002900:	04020074 	movhi	r16,2049
 8002904:	84389c04 	addi	r16,r16,-7568
 8002908:	003ee106 	br	8002490 <__alt_data_end+0xfc002490>
 800290c:	d9402d17 	ldw	r5,180(sp)
 8002910:	d9801e04 	addi	r6,sp,120
 8002914:	9809883a 	mov	r4,r19
 8002918:	80066800 	call	8006680 <__ssprint_r>
 800291c:	103a081e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8002920:	dc402617 	ldw	r17,152(sp)
 8002924:	d8c02017 	ldw	r3,128(sp)
 8002928:	da000404 	addi	r8,sp,16
 800292c:	003f4306 	br	800263c <__alt_data_end+0xfc00263c>
 8002930:	01400184 	movi	r5,6
 8002934:	d9402a15 	stw	r5,168(sp)
 8002938:	003f9506 	br	8002790 <__alt_data_end+0xfc002790>
 800293c:	d8c02e17 	ldw	r3,184(sp)
 8002940:	1d000017 	ldw	r20,0(r3)
 8002944:	18c00104 	addi	r3,r3,4
 8002948:	d8c02e15 	stw	r3,184(sp)
 800294c:	a02dd7fa 	srai	r22,r20,31
 8002950:	b005883a 	mov	r2,r22
 8002954:	003a7606 	br	8001330 <__alt_data_end+0xfc001330>
 8002958:	d9002e17 	ldw	r4,184(sp)
 800295c:	002d883a 	mov	r22,zero
 8002960:	25000017 	ldw	r20,0(r4)
 8002964:	21000104 	addi	r4,r4,4
 8002968:	d9002e15 	stw	r4,184(sp)
 800296c:	003bdd06 	br	80018e4 <__alt_data_end+0xfc0018e4>
 8002970:	9480100c 	andi	r18,r18,64
 8002974:	90006e26 	beq	r18,zero,8002b30 <___svfprintf_internal_r+0x1d8c>
 8002978:	d9402e17 	ldw	r5,184(sp)
 800297c:	d8c02f17 	ldw	r3,188(sp)
 8002980:	28800017 	ldw	r2,0(r5)
 8002984:	29400104 	addi	r5,r5,4
 8002988:	d9402e15 	stw	r5,184(sp)
 800298c:	10c0000d 	sth	r3,0(r2)
 8002990:	00392f06 	br	8000e50 <__alt_data_end+0xfc000e50>
 8002994:	d9402d17 	ldw	r5,180(sp)
 8002998:	d9801e04 	addi	r6,sp,120
 800299c:	9809883a 	mov	r4,r19
 80029a0:	80066800 	call	8006680 <__ssprint_r>
 80029a4:	1039e61e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 80029a8:	d8c02017 	ldw	r3,128(sp)
 80029ac:	d8801f17 	ldw	r2,124(sp)
 80029b0:	da000404 	addi	r8,sp,16
 80029b4:	d9403317 	ldw	r5,204(sp)
 80029b8:	10800044 	addi	r2,r2,1
 80029bc:	44000015 	stw	r16,0(r8)
 80029c0:	28c7883a 	add	r3,r5,r3
 80029c4:	003b5506 	br	800171c <__alt_data_end+0xfc00171c>
 80029c8:	8009883a 	mov	r4,r16
 80029cc:	df003e15 	stw	fp,248(sp)
 80029d0:	8000d0c0 	call	8000d0c <strlen>
 80029d4:	d8802b15 	stw	r2,172(sp)
 80029d8:	da003e17 	ldw	r8,248(sp)
 80029dc:	103c160e 	bge	r2,zero,8001a38 <__alt_data_end+0xfc001a38>
 80029e0:	0005883a 	mov	r2,zero
 80029e4:	003c1406 	br	8001a38 <__alt_data_end+0xfc001a38>
 80029e8:	00bfffc4 	movi	r2,-1
 80029ec:	0039d906 	br	8001154 <__alt_data_end+0xfc001154>
 80029f0:	01020074 	movhi	r4,2049
 80029f4:	2138ae84 	addi	r4,r4,-7494
 80029f8:	d9003515 	stw	r4,212(sp)
 80029fc:	003ae406 	br	8001590 <__alt_data_end+0xfc001590>
 8002a00:	013fffc4 	movi	r4,-1
 8002a04:	0039fa06 	br	80011f0 <__alt_data_end+0xfc0011f0>
 8002a08:	d9402d17 	ldw	r5,180(sp)
 8002a0c:	d9801e04 	addi	r6,sp,120
 8002a10:	9809883a 	mov	r4,r19
 8002a14:	80066800 	call	8006680 <__ssprint_r>
 8002a18:	1039c91e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8002a1c:	d8c02017 	ldw	r3,128(sp)
 8002a20:	da000404 	addi	r8,sp,16
 8002a24:	003d8406 	br	8002038 <__alt_data_end+0xfc002038>
 8002a28:	0023883a 	mov	r17,zero
 8002a2c:	003d8306 	br	800203c <__alt_data_end+0xfc00203c>
 8002a30:	01020074 	movhi	r4,2049
 8002a34:	2138aa84 	addi	r4,r4,-7510
 8002a38:	d9002c15 	stw	r4,176(sp)
 8002a3c:	d9002c17 	ldw	r4,176(sp)
 8002a40:	1c47883a 	add	r3,r3,r17
 8002a44:	10800044 	addi	r2,r2,1
 8002a48:	41000015 	stw	r4,0(r8)
 8002a4c:	44400115 	stw	r17,4(r8)
 8002a50:	d8c02015 	stw	r3,128(sp)
 8002a54:	d8801f15 	stw	r2,124(sp)
 8002a58:	010001c4 	movi	r4,7
 8002a5c:	20bfcd16 	blt	r4,r2,8002994 <__alt_data_end+0xfc002994>
 8002a60:	42000204 	addi	r8,r8,8
 8002a64:	003fd306 	br	80029b4 <__alt_data_end+0xfc0029b4>
 8002a68:	d9402d17 	ldw	r5,180(sp)
 8002a6c:	d9801e04 	addi	r6,sp,120
 8002a70:	9809883a 	mov	r4,r19
 8002a74:	80066800 	call	8006680 <__ssprint_r>
 8002a78:	1039b11e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8002a7c:	d8802617 	ldw	r2,152(sp)
 8002a80:	d8c02017 	ldw	r3,128(sp)
 8002a84:	da000404 	addi	r8,sp,16
 8002a88:	003e1c06 	br	80022fc <__alt_data_end+0xfc0022fc>
 8002a8c:	d8802a17 	ldw	r2,168(sp)
 8002a90:	00c00184 	movi	r3,6
 8002a94:	1880012e 	bgeu	r3,r2,8002a9c <___svfprintf_internal_r+0x1cf8>
 8002a98:	1805883a 	mov	r2,r3
 8002a9c:	d8802b15 	stw	r2,172(sp)
 8002aa0:	1000f316 	blt	r2,zero,8002e70 <___svfprintf_internal_r+0x20cc>
 8002aa4:	04020074 	movhi	r16,2049
 8002aa8:	d8802915 	stw	r2,164(sp)
 8002aac:	dd002e15 	stw	r20,184(sp)
 8002ab0:	d8002a15 	stw	zero,168(sp)
 8002ab4:	d8003215 	stw	zero,200(sp)
 8002ab8:	8438a804 	addi	r16,r16,-7520
 8002abc:	0039883a 	mov	fp,zero
 8002ac0:	003a7d06 	br	80014b8 <__alt_data_end+0xfc0014b8>
 8002ac4:	01020074 	movhi	r4,2049
 8002ac8:	2138ae84 	addi	r4,r4,-7494
 8002acc:	d9003515 	stw	r4,212(sp)
 8002ad0:	003b3d06 	br	80017c8 <__alt_data_end+0xfc0017c8>
 8002ad4:	d9402d17 	ldw	r5,180(sp)
 8002ad8:	d9801e04 	addi	r6,sp,120
 8002adc:	9809883a 	mov	r4,r19
 8002ae0:	80066800 	call	8006680 <__ssprint_r>
 8002ae4:	1039961e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8002ae8:	d8802617 	ldw	r2,152(sp)
 8002aec:	d9403317 	ldw	r5,204(sp)
 8002af0:	d8c02017 	ldw	r3,128(sp)
 8002af4:	da000404 	addi	r8,sp,16
 8002af8:	2885c83a 	sub	r2,r5,r2
 8002afc:	003e1006 	br	8002340 <__alt_data_end+0xfc002340>
 8002b00:	00800044 	movi	r2,1
 8002b04:	10803fcc 	andi	r2,r2,255
 8002b08:	00c00044 	movi	r3,1
 8002b0c:	10fa1026 	beq	r2,r3,8001350 <__alt_data_end+0xfc001350>
 8002b10:	00c00084 	movi	r3,2
 8002b14:	10fb8226 	beq	r2,r3,8001920 <__alt_data_end+0xfc001920>
 8002b18:	003a4206 	br	8001424 <__alt_data_end+0xfc001424>
 8002b1c:	0021883a 	mov	r16,zero
 8002b20:	003e0806 	br	8002344 <__alt_data_end+0xfc002344>
 8002b24:	07000b44 	movi	fp,45
 8002b28:	df002785 	stb	fp,158(sp)
 8002b2c:	0039e306 	br	80012bc <__alt_data_end+0xfc0012bc>
 8002b30:	d9002e17 	ldw	r4,184(sp)
 8002b34:	d9402f17 	ldw	r5,188(sp)
 8002b38:	20800017 	ldw	r2,0(r4)
 8002b3c:	21000104 	addi	r4,r4,4
 8002b40:	d9002e15 	stw	r4,184(sp)
 8002b44:	11400015 	stw	r5,0(r2)
 8002b48:	0038c106 	br	8000e50 <__alt_data_end+0xfc000e50>
 8002b4c:	00c00b44 	movi	r3,45
 8002b50:	d8c02785 	stb	r3,158(sp)
 8002b54:	d8802915 	stw	r2,164(sp)
 8002b58:	dc802c17 	ldw	r18,176(sp)
 8002b5c:	d8002a15 	stw	zero,168(sp)
 8002b60:	07000b44 	movi	fp,45
 8002b64:	003a5106 	br	80014ac <__alt_data_end+0xfc0014ac>
 8002b68:	9080004c 	andi	r2,r18,1
 8002b6c:	1000941e 	bne	r2,zero,8002dc0 <___svfprintf_internal_r+0x201c>
 8002b70:	d8802117 	ldw	r2,132(sp)
 8002b74:	1405c83a 	sub	r2,r2,r16
 8002b78:	d8803315 	stw	r2,204(sp)
 8002b7c:	b441151e 	bne	r22,r17,8002fd4 <___svfprintf_internal_r+0x2230>
 8002b80:	dd802617 	ldw	r22,152(sp)
 8002b84:	00bfff44 	movi	r2,-3
 8002b88:	b0801a16 	blt	r22,r2,8002bf4 <___svfprintf_internal_r+0x1e50>
 8002b8c:	d9402a17 	ldw	r5,168(sp)
 8002b90:	2d801816 	blt	r5,r22,8002bf4 <___svfprintf_internal_r+0x1e50>
 8002b94:	dd803215 	stw	r22,200(sp)
 8002b98:	003f3a06 	br	8002884 <__alt_data_end+0xfc002884>
 8002b9c:	1025883a 	mov	r18,r2
 8002ba0:	0039883a 	mov	fp,zero
 8002ba4:	00800084 	movi	r2,2
 8002ba8:	003fd606 	br	8002b04 <__alt_data_end+0xfc002b04>
 8002bac:	9080004c 	andi	r2,r18,1
 8002bb0:	103f191e 	bne	r2,zero,8002818 <__alt_data_end+0xfc002818>
 8002bb4:	d8802117 	ldw	r2,132(sp)
 8002bb8:	003f2806 	br	800285c <__alt_data_end+0xfc00285c>
 8002bbc:	01020074 	movhi	r4,2049
 8002bc0:	2138aa84 	addi	r4,r4,-7510
 8002bc4:	d9002c15 	stw	r4,176(sp)
 8002bc8:	003c7c06 	br	8001dbc <__alt_data_end+0xfc001dbc>
 8002bcc:	e005883a 	mov	r2,fp
 8002bd0:	003f2206 	br	800285c <__alt_data_end+0xfc00285c>
 8002bd4:	d9002a17 	ldw	r4,168(sp)
 8002bd8:	df002783 	ldbu	fp,158(sp)
 8002bdc:	dd002e15 	stw	r20,184(sp)
 8002be0:	d9002915 	stw	r4,164(sp)
 8002be4:	d9002b15 	stw	r4,172(sp)
 8002be8:	d8002a15 	stw	zero,168(sp)
 8002bec:	d8003215 	stw	zero,200(sp)
 8002bf0:	003a2a06 	br	800149c <__alt_data_end+0xfc00149c>
 8002bf4:	8c7fff84 	addi	r17,r17,-2
 8002bf8:	b5bfffc4 	addi	r22,r22,-1
 8002bfc:	dd802615 	stw	r22,152(sp)
 8002c00:	dc4022c5 	stb	r17,139(sp)
 8002c04:	b000c316 	blt	r22,zero,8002f14 <___svfprintf_internal_r+0x2170>
 8002c08:	00800ac4 	movi	r2,43
 8002c0c:	d8802305 	stb	r2,140(sp)
 8002c10:	00800244 	movi	r2,9
 8002c14:	15806e16 	blt	r2,r22,8002dd0 <___svfprintf_internal_r+0x202c>
 8002c18:	00800c04 	movi	r2,48
 8002c1c:	b5800c04 	addi	r22,r22,48
 8002c20:	d8802345 	stb	r2,141(sp)
 8002c24:	dd802385 	stb	r22,142(sp)
 8002c28:	d88023c4 	addi	r2,sp,143
 8002c2c:	df0022c4 	addi	fp,sp,139
 8002c30:	d8c03317 	ldw	r3,204(sp)
 8002c34:	1739c83a 	sub	fp,r2,fp
 8002c38:	d9003317 	ldw	r4,204(sp)
 8002c3c:	e0c7883a 	add	r3,fp,r3
 8002c40:	df003b15 	stw	fp,236(sp)
 8002c44:	d8c02b15 	stw	r3,172(sp)
 8002c48:	00800044 	movi	r2,1
 8002c4c:	1100b70e 	bge	r2,r4,8002f2c <___svfprintf_internal_r+0x2188>
 8002c50:	d8c02b17 	ldw	r3,172(sp)
 8002c54:	18c00044 	addi	r3,r3,1
 8002c58:	d8c02b15 	stw	r3,172(sp)
 8002c5c:	1805883a 	mov	r2,r3
 8002c60:	1800b016 	blt	r3,zero,8002f24 <___svfprintf_internal_r+0x2180>
 8002c64:	d8003215 	stw	zero,200(sp)
 8002c68:	003f1006 	br	80028ac <__alt_data_end+0xfc0028ac>
 8002c6c:	d8802a17 	ldw	r2,168(sp)
 8002c70:	103ec71e 	bne	r2,zero,8002790 <__alt_data_end+0xfc002790>
 8002c74:	dc002a15 	stw	r16,168(sp)
 8002c78:	003ec506 	br	8002790 <__alt_data_end+0xfc002790>
 8002c7c:	d9402d17 	ldw	r5,180(sp)
 8002c80:	d9801e04 	addi	r6,sp,120
 8002c84:	9809883a 	mov	r4,r19
 8002c88:	80066800 	call	8006680 <__ssprint_r>
 8002c8c:	10392c1e 	bne	r2,zero,8001140 <__alt_data_end+0xfc001140>
 8002c90:	dc402617 	ldw	r17,152(sp)
 8002c94:	d8c02017 	ldw	r3,128(sp)
 8002c98:	d8801f17 	ldw	r2,124(sp)
 8002c9c:	da000404 	addi	r8,sp,16
 8002ca0:	003e7706 	br	8002680 <__alt_data_end+0xfc002680>
 8002ca4:	182f883a 	mov	r23,r3
 8002ca8:	d8002a15 	stw	zero,168(sp)
 8002cac:	00389306 	br	8000efc <__alt_data_end+0xfc000efc>
 8002cb0:	d8c02a17 	ldw	r3,168(sp)
 8002cb4:	d8802104 	addi	r2,sp,132
 8002cb8:	d8800315 	stw	r2,12(sp)
 8002cbc:	d9403617 	ldw	r5,216(sp)
 8002cc0:	d8802504 	addi	r2,sp,148
 8002cc4:	d8800215 	stw	r2,8(sp)
 8002cc8:	d8802604 	addi	r2,sp,152
 8002ccc:	d8c00015 	stw	r3,0(sp)
 8002cd0:	9809883a 	mov	r4,r19
 8002cd4:	d8800115 	stw	r2,4(sp)
 8002cd8:	01c000c4 	movi	r7,3
 8002cdc:	a00d883a 	mov	r6,r20
 8002ce0:	da003e15 	stw	r8,248(sp)
 8002ce4:	80032880 	call	8003288 <_dtoa_r>
 8002ce8:	d9002a17 	ldw	r4,168(sp)
 8002cec:	da003e17 	ldw	r8,248(sp)
 8002cf0:	1021883a 	mov	r16,r2
 8002cf4:	1139883a 	add	fp,r2,r4
 8002cf8:	2007883a 	mov	r3,r4
 8002cfc:	81000007 	ldb	r4,0(r16)
 8002d00:	00800c04 	movi	r2,48
 8002d04:	20806f26 	beq	r4,r2,8002ec4 <___svfprintf_internal_r+0x2120>
 8002d08:	d8c02617 	ldw	r3,152(sp)
 8002d0c:	e0f9883a 	add	fp,fp,r3
 8002d10:	003ec206 	br	800281c <__alt_data_end+0xfc00281c>
 8002d14:	00c00b44 	movi	r3,45
 8002d18:	2520003c 	xorhi	r20,r4,32768
 8002d1c:	d8c02905 	stb	r3,164(sp)
 8002d20:	003ea106 	br	80027a8 <__alt_data_end+0xfc0027a8>
 8002d24:	d8c03217 	ldw	r3,200(sp)
 8002d28:	00c0890e 	bge	zero,r3,8002f50 <___svfprintf_internal_r+0x21ac>
 8002d2c:	00800044 	movi	r2,1
 8002d30:	d9003317 	ldw	r4,204(sp)
 8002d34:	1105883a 	add	r2,r2,r4
 8002d38:	d8802b15 	stw	r2,172(sp)
 8002d3c:	10005f16 	blt	r2,zero,8002ebc <___svfprintf_internal_r+0x2118>
 8002d40:	044019c4 	movi	r17,103
 8002d44:	003ed906 	br	80028ac <__alt_data_end+0xfc0028ac>
 8002d48:	d9002a17 	ldw	r4,168(sp)
 8002d4c:	20c00044 	addi	r3,r4,1
 8002d50:	003e9c06 	br	80027c4 <__alt_data_end+0xfc0027c4>
 8002d54:	d9002a17 	ldw	r4,168(sp)
 8002d58:	00c0680e 	bge	zero,r3,8002efc <___svfprintf_internal_r+0x2158>
 8002d5c:	2000461e 	bne	r4,zero,8002e78 <___svfprintf_internal_r+0x20d4>
 8002d60:	9480004c 	andi	r18,r18,1
 8002d64:	9000441e 	bne	r18,zero,8002e78 <___svfprintf_internal_r+0x20d4>
 8002d68:	1805883a 	mov	r2,r3
 8002d6c:	1800a116 	blt	r3,zero,8002ff4 <___svfprintf_internal_r+0x2250>
 8002d70:	d8c03217 	ldw	r3,200(sp)
 8002d74:	d8c02b15 	stw	r3,172(sp)
 8002d78:	003ecc06 	br	80028ac <__alt_data_end+0xfc0028ac>
 8002d7c:	d9402a17 	ldw	r5,168(sp)
 8002d80:	d8802104 	addi	r2,sp,132
 8002d84:	d8800315 	stw	r2,12(sp)
 8002d88:	d9400015 	stw	r5,0(sp)
 8002d8c:	d8802504 	addi	r2,sp,148
 8002d90:	d9403617 	ldw	r5,216(sp)
 8002d94:	d8800215 	stw	r2,8(sp)
 8002d98:	d8802604 	addi	r2,sp,152
 8002d9c:	d8800115 	stw	r2,4(sp)
 8002da0:	01c000c4 	movi	r7,3
 8002da4:	a00d883a 	mov	r6,r20
 8002da8:	9809883a 	mov	r4,r19
 8002dac:	da003e15 	stw	r8,248(sp)
 8002db0:	80032880 	call	8003288 <_dtoa_r>
 8002db4:	d8c02a17 	ldw	r3,168(sp)
 8002db8:	da003e17 	ldw	r8,248(sp)
 8002dbc:	1021883a 	mov	r16,r2
 8002dc0:	00801184 	movi	r2,70
 8002dc4:	80f9883a 	add	fp,r16,r3
 8002dc8:	88bfcc26 	beq	r17,r2,8002cfc <__alt_data_end+0xfc002cfc>
 8002dcc:	003e9306 	br	800281c <__alt_data_end+0xfc00281c>
 8002dd0:	df0022c4 	addi	fp,sp,139
 8002dd4:	dc002a15 	stw	r16,168(sp)
 8002dd8:	9829883a 	mov	r20,r19
 8002ddc:	e021883a 	mov	r16,fp
 8002de0:	4027883a 	mov	r19,r8
 8002de4:	b009883a 	mov	r4,r22
 8002de8:	01400284 	movi	r5,10
 8002dec:	8000a740 	call	8000a74 <__modsi3>
 8002df0:	10800c04 	addi	r2,r2,48
 8002df4:	843fffc4 	addi	r16,r16,-1
 8002df8:	b009883a 	mov	r4,r22
 8002dfc:	01400284 	movi	r5,10
 8002e00:	80800005 	stb	r2,0(r16)
 8002e04:	80009f00 	call	80009f0 <__divsi3>
 8002e08:	102d883a 	mov	r22,r2
 8002e0c:	00800244 	movi	r2,9
 8002e10:	15bff416 	blt	r2,r22,8002de4 <__alt_data_end+0xfc002de4>
 8002e14:	9811883a 	mov	r8,r19
 8002e18:	b0800c04 	addi	r2,r22,48
 8002e1c:	a027883a 	mov	r19,r20
 8002e20:	8029883a 	mov	r20,r16
 8002e24:	a17fffc4 	addi	r5,r20,-1
 8002e28:	a0bfffc5 	stb	r2,-1(r20)
 8002e2c:	dc002a17 	ldw	r16,168(sp)
 8002e30:	2f00782e 	bgeu	r5,fp,8003014 <___svfprintf_internal_r+0x2270>
 8002e34:	d9c02384 	addi	r7,sp,142
 8002e38:	3d0fc83a 	sub	r7,r7,r20
 8002e3c:	d9002344 	addi	r4,sp,141
 8002e40:	e1cf883a 	add	r7,fp,r7
 8002e44:	00000106 	br	8002e4c <___svfprintf_internal_r+0x20a8>
 8002e48:	28800003 	ldbu	r2,0(r5)
 8002e4c:	20800005 	stb	r2,0(r4)
 8002e50:	21000044 	addi	r4,r4,1
 8002e54:	29400044 	addi	r5,r5,1
 8002e58:	21fffb1e 	bne	r4,r7,8002e48 <__alt_data_end+0xfc002e48>
 8002e5c:	d8802304 	addi	r2,sp,140
 8002e60:	1505c83a 	sub	r2,r2,r20
 8002e64:	d8c02344 	addi	r3,sp,141
 8002e68:	1885883a 	add	r2,r3,r2
 8002e6c:	003f7006 	br	8002c30 <__alt_data_end+0xfc002c30>
 8002e70:	0005883a 	mov	r2,zero
 8002e74:	003f0b06 	br	8002aa4 <__alt_data_end+0xfc002aa4>
 8002e78:	d9002a17 	ldw	r4,168(sp)
 8002e7c:	d8c03217 	ldw	r3,200(sp)
 8002e80:	20800044 	addi	r2,r4,1
 8002e84:	1885883a 	add	r2,r3,r2
 8002e88:	d8802b15 	stw	r2,172(sp)
 8002e8c:	103e870e 	bge	r2,zero,80028ac <__alt_data_end+0xfc0028ac>
 8002e90:	0005883a 	mov	r2,zero
 8002e94:	003e8506 	br	80028ac <__alt_data_end+0xfc0028ac>
 8002e98:	01020074 	movhi	r4,2049
 8002e9c:	2138aa84 	addi	r4,r4,-7510
 8002ea0:	d9002c15 	stw	r4,176(sp)
 8002ea4:	003cc506 	br	80021bc <__alt_data_end+0xfc0021bc>
 8002ea8:	d8c03217 	ldw	r3,200(sp)
 8002eac:	18c00044 	addi	r3,r3,1
 8002eb0:	d8c02b15 	stw	r3,172(sp)
 8002eb4:	1805883a 	mov	r2,r3
 8002eb8:	183fa10e 	bge	r3,zero,8002d40 <__alt_data_end+0xfc002d40>
 8002ebc:	0005883a 	mov	r2,zero
 8002ec0:	003f9f06 	br	8002d40 <__alt_data_end+0xfc002d40>
 8002ec4:	d9003617 	ldw	r4,216(sp)
 8002ec8:	000d883a 	mov	r6,zero
 8002ecc:	000f883a 	mov	r7,zero
 8002ed0:	a00b883a 	mov	r5,r20
 8002ed4:	d8c03d15 	stw	r3,244(sp)
 8002ed8:	da003e15 	stw	r8,248(sp)
 8002edc:	800a8300 	call	800a830 <__eqdf2>
 8002ee0:	d8c03d17 	ldw	r3,244(sp)
 8002ee4:	da003e17 	ldw	r8,248(sp)
 8002ee8:	103f8726 	beq	r2,zero,8002d08 <__alt_data_end+0xfc002d08>
 8002eec:	00800044 	movi	r2,1
 8002ef0:	10c7c83a 	sub	r3,r2,r3
 8002ef4:	d8c02615 	stw	r3,152(sp)
 8002ef8:	003f8406 	br	8002d0c <__alt_data_end+0xfc002d0c>
 8002efc:	20000e1e 	bne	r4,zero,8002f38 <___svfprintf_internal_r+0x2194>
 8002f00:	9480004c 	andi	r18,r18,1
 8002f04:	90000c1e 	bne	r18,zero,8002f38 <___svfprintf_internal_r+0x2194>
 8002f08:	00800044 	movi	r2,1
 8002f0c:	d8802b15 	stw	r2,172(sp)
 8002f10:	003e6606 	br	80028ac <__alt_data_end+0xfc0028ac>
 8002f14:	00800b44 	movi	r2,45
 8002f18:	05adc83a 	sub	r22,zero,r22
 8002f1c:	d8802305 	stb	r2,140(sp)
 8002f20:	003f3b06 	br	8002c10 <__alt_data_end+0xfc002c10>
 8002f24:	0005883a 	mov	r2,zero
 8002f28:	003f4e06 	br	8002c64 <__alt_data_end+0xfc002c64>
 8002f2c:	90a4703a 	and	r18,r18,r2
 8002f30:	903f4a26 	beq	r18,zero,8002c5c <__alt_data_end+0xfc002c5c>
 8002f34:	003f4606 	br	8002c50 <__alt_data_end+0xfc002c50>
 8002f38:	d8c02a17 	ldw	r3,168(sp)
 8002f3c:	18c00084 	addi	r3,r3,2
 8002f40:	d8c02b15 	stw	r3,172(sp)
 8002f44:	1805883a 	mov	r2,r3
 8002f48:	183e580e 	bge	r3,zero,80028ac <__alt_data_end+0xfc0028ac>
 8002f4c:	003fd006 	br	8002e90 <__alt_data_end+0xfc002e90>
 8002f50:	00800084 	movi	r2,2
 8002f54:	10c5c83a 	sub	r2,r2,r3
 8002f58:	003f7506 	br	8002d30 <__alt_data_end+0xfc002d30>
 8002f5c:	d9402e17 	ldw	r5,184(sp)
 8002f60:	d9002e17 	ldw	r4,184(sp)
 8002f64:	bc400043 	ldbu	r17,1(r23)
 8002f68:	29400017 	ldw	r5,0(r5)
 8002f6c:	20800104 	addi	r2,r4,4
 8002f70:	d8802e15 	stw	r2,184(sp)
 8002f74:	d9402a15 	stw	r5,168(sp)
 8002f78:	182f883a 	mov	r23,r3
 8002f7c:	283df10e 	bge	r5,zero,8002744 <__alt_data_end+0xfc002744>
 8002f80:	8c403fcc 	andi	r17,r17,255
 8002f84:	017fffc4 	movi	r5,-1
 8002f88:	8c40201c 	xori	r17,r17,128
 8002f8c:	d9402a15 	stw	r5,168(sp)
 8002f90:	8c7fe004 	addi	r17,r17,-128
 8002f94:	0037d806 	br	8000ef8 <__alt_data_end+0xfc000ef8>
 8002f98:	9080004c 	andi	r2,r18,1
 8002f9c:	0039883a 	mov	fp,zero
 8002fa0:	10000726 	beq	r2,zero,8002fc0 <___svfprintf_internal_r+0x221c>
 8002fa4:	d8c02817 	ldw	r3,160(sp)
 8002fa8:	dc001dc4 	addi	r16,sp,119
 8002fac:	00800c04 	movi	r2,48
 8002fb0:	1c07c83a 	sub	r3,r3,r16
 8002fb4:	d8801dc5 	stb	r2,119(sp)
 8002fb8:	d8c02b15 	stw	r3,172(sp)
 8002fbc:	00393106 	br	8001484 <__alt_data_end+0xfc001484>
 8002fc0:	d8002b15 	stw	zero,172(sp)
 8002fc4:	dc001e04 	addi	r16,sp,120
 8002fc8:	00392e06 	br	8001484 <__alt_data_end+0xfc001484>
 8002fcc:	0005883a 	mov	r2,zero
 8002fd0:	003e3306 	br	80028a0 <__alt_data_end+0xfc0028a0>
 8002fd4:	dd802617 	ldw	r22,152(sp)
 8002fd8:	003f0706 	br	8002bf8 <__alt_data_end+0xfc002bf8>
 8002fdc:	d8c02b03 	ldbu	r3,172(sp)
 8002fe0:	d8c02785 	stb	r3,158(sp)
 8002fe4:	003a3506 	br	80018bc <__alt_data_end+0xfc0018bc>
 8002fe8:	d8c02b03 	ldbu	r3,172(sp)
 8002fec:	d8c02785 	stb	r3,158(sp)
 8002ff0:	003a1706 	br	8001850 <__alt_data_end+0xfc001850>
 8002ff4:	0005883a 	mov	r2,zero
 8002ff8:	003f5d06 	br	8002d70 <__alt_data_end+0xfc002d70>
 8002ffc:	d8c02b03 	ldbu	r3,172(sp)
 8003000:	d8c02785 	stb	r3,158(sp)
 8003004:	0038f306 	br	80013d4 <__alt_data_end+0xfc0013d4>
 8003008:	d8c02b03 	ldbu	r3,172(sp)
 800300c:	d8c02785 	stb	r3,158(sp)
 8003010:	0038be06 	br	800130c <__alt_data_end+0xfc00130c>
 8003014:	d8802344 	addi	r2,sp,141
 8003018:	003f0506 	br	8002c30 <__alt_data_end+0xfc002c30>
 800301c:	d8c02b03 	ldbu	r3,172(sp)
 8003020:	d8c02785 	stb	r3,158(sp)
 8003024:	00388b06 	br	8001254 <__alt_data_end+0xfc001254>
 8003028:	d8c02b03 	ldbu	r3,172(sp)
 800302c:	d8c02785 	stb	r3,158(sp)
 8003030:	003ad706 	br	8001b90 <__alt_data_end+0xfc001b90>
 8003034:	d9403917 	ldw	r5,228(sp)
 8003038:	00800304 	movi	r2,12
 800303c:	28800015 	stw	r2,0(r5)
 8003040:	00bfffc4 	movi	r2,-1
 8003044:	00384306 	br	8001154 <__alt_data_end+0xfc001154>
 8003048:	d8c02b03 	ldbu	r3,172(sp)
 800304c:	d8c02785 	stb	r3,158(sp)
 8003050:	003ab606 	br	8001b2c <__alt_data_end+0xfc001b2c>
 8003054:	d8c02b03 	ldbu	r3,172(sp)
 8003058:	d8c02785 	stb	r3,158(sp)
 800305c:	003a8906 	br	8001a84 <__alt_data_end+0xfc001a84>

08003060 <quorem>:
 8003060:	defff204 	addi	sp,sp,-56
 8003064:	ddc00b15 	stw	r23,44(sp)
 8003068:	20800417 	ldw	r2,16(r4)
 800306c:	2dc00417 	ldw	r23,16(r5)
 8003070:	dfc00d15 	stw	ra,52(sp)
 8003074:	df000c15 	stw	fp,48(sp)
 8003078:	dd800a15 	stw	r22,40(sp)
 800307c:	dd400915 	stw	r21,36(sp)
 8003080:	dd000815 	stw	r20,32(sp)
 8003084:	dcc00715 	stw	r19,28(sp)
 8003088:	dc800615 	stw	r18,24(sp)
 800308c:	dc400515 	stw	r17,20(sp)
 8003090:	dc000415 	stw	r16,16(sp)
 8003094:	15c07a16 	blt	r2,r23,8003280 <quorem+0x220>
 8003098:	bdffffc4 	addi	r23,r23,-1
 800309c:	bde9883a 	add	r20,r23,r23
 80030a0:	28c00504 	addi	r3,r5,20
 80030a4:	a529883a 	add	r20,r20,r20
 80030a8:	1d39883a 	add	fp,r3,r20
 80030ac:	24c00504 	addi	r19,r4,20
 80030b0:	d9400215 	stw	r5,8(sp)
 80030b4:	9d29883a 	add	r20,r19,r20
 80030b8:	e1400017 	ldw	r5,0(fp)
 80030bc:	d9000015 	stw	r4,0(sp)
 80030c0:	a1000017 	ldw	r4,0(r20)
 80030c4:	29400044 	addi	r5,r5,1
 80030c8:	d8c00115 	stw	r3,4(sp)
 80030cc:	dd000315 	stw	r20,12(sp)
 80030d0:	8000ae80 	call	8000ae8 <__udivsi3>
 80030d4:	1025883a 	mov	r18,r2
 80030d8:	10003026 	beq	r2,zero,800319c <quorem+0x13c>
 80030dc:	dc400117 	ldw	r17,4(sp)
 80030e0:	9829883a 	mov	r20,r19
 80030e4:	002d883a 	mov	r22,zero
 80030e8:	0021883a 	mov	r16,zero
 80030ec:	8d400017 	ldw	r21,0(r17)
 80030f0:	900b883a 	mov	r5,r18
 80030f4:	8c400104 	addi	r17,r17,4
 80030f8:	a93fffcc 	andi	r4,r21,65535
 80030fc:	8000ba40 	call	8000ba4 <__mulsi3>
 8003100:	a808d43a 	srli	r4,r21,16
 8003104:	900b883a 	mov	r5,r18
 8003108:	15ad883a 	add	r22,r2,r22
 800310c:	8000ba40 	call	8000ba4 <__mulsi3>
 8003110:	a1000017 	ldw	r4,0(r20)
 8003114:	b00cd43a 	srli	r6,r22,16
 8003118:	b0ffffcc 	andi	r3,r22,65535
 800311c:	217fffcc 	andi	r5,r4,65535
 8003120:	2c21883a 	add	r16,r5,r16
 8003124:	80c7c83a 	sub	r3,r16,r3
 8003128:	2008d43a 	srli	r4,r4,16
 800312c:	1185883a 	add	r2,r2,r6
 8003130:	1821d43a 	srai	r16,r3,16
 8003134:	117fffcc 	andi	r5,r2,65535
 8003138:	2149c83a 	sub	r4,r4,r5
 800313c:	2421883a 	add	r16,r4,r16
 8003140:	8008943a 	slli	r4,r16,16
 8003144:	18ffffcc 	andi	r3,r3,65535
 8003148:	102cd43a 	srli	r22,r2,16
 800314c:	20c8b03a 	or	r4,r4,r3
 8003150:	a1000015 	stw	r4,0(r20)
 8003154:	8021d43a 	srai	r16,r16,16
 8003158:	a5000104 	addi	r20,r20,4
 800315c:	e47fe32e 	bgeu	fp,r17,80030ec <__alt_data_end+0xfc0030ec>
 8003160:	d8c00317 	ldw	r3,12(sp)
 8003164:	18800017 	ldw	r2,0(r3)
 8003168:	10000c1e 	bne	r2,zero,800319c <quorem+0x13c>
 800316c:	18bfff04 	addi	r2,r3,-4
 8003170:	9880082e 	bgeu	r19,r2,8003194 <quorem+0x134>
 8003174:	18ffff17 	ldw	r3,-4(r3)
 8003178:	18000326 	beq	r3,zero,8003188 <quorem+0x128>
 800317c:	00000506 	br	8003194 <quorem+0x134>
 8003180:	10c00017 	ldw	r3,0(r2)
 8003184:	1800031e 	bne	r3,zero,8003194 <quorem+0x134>
 8003188:	10bfff04 	addi	r2,r2,-4
 800318c:	bdffffc4 	addi	r23,r23,-1
 8003190:	98bffb36 	bltu	r19,r2,8003180 <__alt_data_end+0xfc003180>
 8003194:	d8c00017 	ldw	r3,0(sp)
 8003198:	1dc00415 	stw	r23,16(r3)
 800319c:	d9400217 	ldw	r5,8(sp)
 80031a0:	d9000017 	ldw	r4,0(sp)
 80031a4:	8005da80 	call	8005da8 <__mcmp>
 80031a8:	10002816 	blt	r2,zero,800324c <quorem+0x1ec>
 80031ac:	dc400117 	ldw	r17,4(sp)
 80031b0:	94800044 	addi	r18,r18,1
 80031b4:	980d883a 	mov	r6,r19
 80031b8:	0007883a 	mov	r3,zero
 80031bc:	31000017 	ldw	r4,0(r6)
 80031c0:	89400017 	ldw	r5,0(r17)
 80031c4:	31800104 	addi	r6,r6,4
 80031c8:	20bfffcc 	andi	r2,r4,65535
 80031cc:	10c7883a 	add	r3,r2,r3
 80031d0:	28bfffcc 	andi	r2,r5,65535
 80031d4:	1885c83a 	sub	r2,r3,r2
 80031d8:	280ad43a 	srli	r5,r5,16
 80031dc:	2008d43a 	srli	r4,r4,16
 80031e0:	1007d43a 	srai	r3,r2,16
 80031e4:	10bfffcc 	andi	r2,r2,65535
 80031e8:	2149c83a 	sub	r4,r4,r5
 80031ec:	20c9883a 	add	r4,r4,r3
 80031f0:	200a943a 	slli	r5,r4,16
 80031f4:	8c400104 	addi	r17,r17,4
 80031f8:	2007d43a 	srai	r3,r4,16
 80031fc:	2884b03a 	or	r2,r5,r2
 8003200:	30bfff15 	stw	r2,-4(r6)
 8003204:	e47fed2e 	bgeu	fp,r17,80031bc <__alt_data_end+0xfc0031bc>
 8003208:	bdc5883a 	add	r2,r23,r23
 800320c:	1085883a 	add	r2,r2,r2
 8003210:	9887883a 	add	r3,r19,r2
 8003214:	18800017 	ldw	r2,0(r3)
 8003218:	10000c1e 	bne	r2,zero,800324c <quorem+0x1ec>
 800321c:	18bfff04 	addi	r2,r3,-4
 8003220:	9880082e 	bgeu	r19,r2,8003244 <quorem+0x1e4>
 8003224:	18ffff17 	ldw	r3,-4(r3)
 8003228:	18000326 	beq	r3,zero,8003238 <quorem+0x1d8>
 800322c:	00000506 	br	8003244 <quorem+0x1e4>
 8003230:	10c00017 	ldw	r3,0(r2)
 8003234:	1800031e 	bne	r3,zero,8003244 <quorem+0x1e4>
 8003238:	10bfff04 	addi	r2,r2,-4
 800323c:	bdffffc4 	addi	r23,r23,-1
 8003240:	98bffb36 	bltu	r19,r2,8003230 <__alt_data_end+0xfc003230>
 8003244:	d8c00017 	ldw	r3,0(sp)
 8003248:	1dc00415 	stw	r23,16(r3)
 800324c:	9005883a 	mov	r2,r18
 8003250:	dfc00d17 	ldw	ra,52(sp)
 8003254:	df000c17 	ldw	fp,48(sp)
 8003258:	ddc00b17 	ldw	r23,44(sp)
 800325c:	dd800a17 	ldw	r22,40(sp)
 8003260:	dd400917 	ldw	r21,36(sp)
 8003264:	dd000817 	ldw	r20,32(sp)
 8003268:	dcc00717 	ldw	r19,28(sp)
 800326c:	dc800617 	ldw	r18,24(sp)
 8003270:	dc400517 	ldw	r17,20(sp)
 8003274:	dc000417 	ldw	r16,16(sp)
 8003278:	dec00e04 	addi	sp,sp,56
 800327c:	f800283a 	ret
 8003280:	0005883a 	mov	r2,zero
 8003284:	003ff206 	br	8003250 <__alt_data_end+0xfc003250>

08003288 <_dtoa_r>:
 8003288:	20801017 	ldw	r2,64(r4)
 800328c:	deffde04 	addi	sp,sp,-136
 8003290:	df002015 	stw	fp,128(sp)
 8003294:	dcc01b15 	stw	r19,108(sp)
 8003298:	dc801a15 	stw	r18,104(sp)
 800329c:	dc401915 	stw	r17,100(sp)
 80032a0:	dc001815 	stw	r16,96(sp)
 80032a4:	dfc02115 	stw	ra,132(sp)
 80032a8:	ddc01f15 	stw	r23,124(sp)
 80032ac:	dd801e15 	stw	r22,120(sp)
 80032b0:	dd401d15 	stw	r21,116(sp)
 80032b4:	dd001c15 	stw	r20,112(sp)
 80032b8:	d9c00315 	stw	r7,12(sp)
 80032bc:	2039883a 	mov	fp,r4
 80032c0:	3023883a 	mov	r17,r6
 80032c4:	2825883a 	mov	r18,r5
 80032c8:	dc002417 	ldw	r16,144(sp)
 80032cc:	3027883a 	mov	r19,r6
 80032d0:	10000826 	beq	r2,zero,80032f4 <_dtoa_r+0x6c>
 80032d4:	21801117 	ldw	r6,68(r4)
 80032d8:	00c00044 	movi	r3,1
 80032dc:	100b883a 	mov	r5,r2
 80032e0:	1986983a 	sll	r3,r3,r6
 80032e4:	11800115 	stw	r6,4(r2)
 80032e8:	10c00215 	stw	r3,8(r2)
 80032ec:	80054cc0 	call	80054cc <_Bfree>
 80032f0:	e0001015 	stw	zero,64(fp)
 80032f4:	88002e16 	blt	r17,zero,80033b0 <_dtoa_r+0x128>
 80032f8:	80000015 	stw	zero,0(r16)
 80032fc:	889ffc2c 	andhi	r2,r17,32752
 8003300:	00dffc34 	movhi	r3,32752
 8003304:	10c01c26 	beq	r2,r3,8003378 <_dtoa_r+0xf0>
 8003308:	000d883a 	mov	r6,zero
 800330c:	000f883a 	mov	r7,zero
 8003310:	9009883a 	mov	r4,r18
 8003314:	980b883a 	mov	r5,r19
 8003318:	800a8300 	call	800a830 <__eqdf2>
 800331c:	10002b1e 	bne	r2,zero,80033cc <_dtoa_r+0x144>
 8003320:	d9c02317 	ldw	r7,140(sp)
 8003324:	00800044 	movi	r2,1
 8003328:	38800015 	stw	r2,0(r7)
 800332c:	d8802517 	ldw	r2,148(sp)
 8003330:	10019e26 	beq	r2,zero,80039ac <_dtoa_r+0x724>
 8003334:	d8c02517 	ldw	r3,148(sp)
 8003338:	00820074 	movhi	r2,2049
 800333c:	10b8aa44 	addi	r2,r2,-7511
 8003340:	18800015 	stw	r2,0(r3)
 8003344:	10bfffc4 	addi	r2,r2,-1
 8003348:	dfc02117 	ldw	ra,132(sp)
 800334c:	df002017 	ldw	fp,128(sp)
 8003350:	ddc01f17 	ldw	r23,124(sp)
 8003354:	dd801e17 	ldw	r22,120(sp)
 8003358:	dd401d17 	ldw	r21,116(sp)
 800335c:	dd001c17 	ldw	r20,112(sp)
 8003360:	dcc01b17 	ldw	r19,108(sp)
 8003364:	dc801a17 	ldw	r18,104(sp)
 8003368:	dc401917 	ldw	r17,100(sp)
 800336c:	dc001817 	ldw	r16,96(sp)
 8003370:	dec02204 	addi	sp,sp,136
 8003374:	f800283a 	ret
 8003378:	d8c02317 	ldw	r3,140(sp)
 800337c:	0089c3c4 	movi	r2,9999
 8003380:	18800015 	stw	r2,0(r3)
 8003384:	90017726 	beq	r18,zero,8003964 <_dtoa_r+0x6dc>
 8003388:	00820074 	movhi	r2,2049
 800338c:	10b8b604 	addi	r2,r2,-7464
 8003390:	d9002517 	ldw	r4,148(sp)
 8003394:	203fec26 	beq	r4,zero,8003348 <__alt_data_end+0xfc003348>
 8003398:	10c000c7 	ldb	r3,3(r2)
 800339c:	1801781e 	bne	r3,zero,8003980 <_dtoa_r+0x6f8>
 80033a0:	10c000c4 	addi	r3,r2,3
 80033a4:	d9802517 	ldw	r6,148(sp)
 80033a8:	30c00015 	stw	r3,0(r6)
 80033ac:	003fe606 	br	8003348 <__alt_data_end+0xfc003348>
 80033b0:	04e00034 	movhi	r19,32768
 80033b4:	9cffffc4 	addi	r19,r19,-1
 80033b8:	00800044 	movi	r2,1
 80033bc:	8ce6703a 	and	r19,r17,r19
 80033c0:	80800015 	stw	r2,0(r16)
 80033c4:	9823883a 	mov	r17,r19
 80033c8:	003fcc06 	br	80032fc <__alt_data_end+0xfc0032fc>
 80033cc:	d8800204 	addi	r2,sp,8
 80033d0:	d8800015 	stw	r2,0(sp)
 80033d4:	d9c00104 	addi	r7,sp,4
 80033d8:	900b883a 	mov	r5,r18
 80033dc:	980d883a 	mov	r6,r19
 80033e0:	e009883a 	mov	r4,fp
 80033e4:	8820d53a 	srli	r16,r17,20
 80033e8:	80061740 	call	8006174 <__d2b>
 80033ec:	d8800915 	stw	r2,36(sp)
 80033f0:	8001651e 	bne	r16,zero,8003988 <_dtoa_r+0x700>
 80033f4:	dd800217 	ldw	r22,8(sp)
 80033f8:	dc000117 	ldw	r16,4(sp)
 80033fc:	00800804 	movi	r2,32
 8003400:	b421883a 	add	r16,r22,r16
 8003404:	80c10c84 	addi	r3,r16,1074
 8003408:	10c2d10e 	bge	r2,r3,8003f50 <_dtoa_r+0xcc8>
 800340c:	00801004 	movi	r2,64
 8003410:	81010484 	addi	r4,r16,1042
 8003414:	10c7c83a 	sub	r3,r2,r3
 8003418:	9108d83a 	srl	r4,r18,r4
 800341c:	88e2983a 	sll	r17,r17,r3
 8003420:	2448b03a 	or	r4,r4,r17
 8003424:	800bd4c0 	call	800bd4c <__floatunsidf>
 8003428:	017f8434 	movhi	r5,65040
 800342c:	01800044 	movi	r6,1
 8003430:	1009883a 	mov	r4,r2
 8003434:	194b883a 	add	r5,r3,r5
 8003438:	843fffc4 	addi	r16,r16,-1
 800343c:	d9801115 	stw	r6,68(sp)
 8003440:	000d883a 	mov	r6,zero
 8003444:	01cffe34 	movhi	r7,16376
 8003448:	800b2f40 	call	800b2f4 <__subdf3>
 800344c:	0198dbf4 	movhi	r6,25455
 8003450:	01cff4f4 	movhi	r7,16339
 8003454:	3190d844 	addi	r6,r6,17249
 8003458:	39e1e9c4 	addi	r7,r7,-30809
 800345c:	1009883a 	mov	r4,r2
 8003460:	180b883a 	mov	r5,r3
 8003464:	800aa880 	call	800aa88 <__muldf3>
 8003468:	01a2d874 	movhi	r6,35681
 800346c:	01cff1f4 	movhi	r7,16327
 8003470:	31b22cc4 	addi	r6,r6,-14157
 8003474:	39e28a04 	addi	r7,r7,-30168
 8003478:	180b883a 	mov	r5,r3
 800347c:	1009883a 	mov	r4,r2
 8003480:	80095b40 	call	80095b4 <__adddf3>
 8003484:	8009883a 	mov	r4,r16
 8003488:	1029883a 	mov	r20,r2
 800348c:	1823883a 	mov	r17,r3
 8003490:	800bc700 	call	800bc70 <__floatsidf>
 8003494:	019427f4 	movhi	r6,20639
 8003498:	01cff4f4 	movhi	r7,16339
 800349c:	319e7ec4 	addi	r6,r6,31227
 80034a0:	39d104c4 	addi	r7,r7,17427
 80034a4:	1009883a 	mov	r4,r2
 80034a8:	180b883a 	mov	r5,r3
 80034ac:	800aa880 	call	800aa88 <__muldf3>
 80034b0:	100d883a 	mov	r6,r2
 80034b4:	180f883a 	mov	r7,r3
 80034b8:	a009883a 	mov	r4,r20
 80034bc:	880b883a 	mov	r5,r17
 80034c0:	80095b40 	call	80095b4 <__adddf3>
 80034c4:	1009883a 	mov	r4,r2
 80034c8:	180b883a 	mov	r5,r3
 80034cc:	1029883a 	mov	r20,r2
 80034d0:	1823883a 	mov	r17,r3
 80034d4:	800bbf00 	call	800bbf0 <__fixdfsi>
 80034d8:	000d883a 	mov	r6,zero
 80034dc:	000f883a 	mov	r7,zero
 80034e0:	a009883a 	mov	r4,r20
 80034e4:	880b883a 	mov	r5,r17
 80034e8:	d8800515 	stw	r2,20(sp)
 80034ec:	800a9940 	call	800a994 <__ledf2>
 80034f0:	10028716 	blt	r2,zero,8003f10 <_dtoa_r+0xc88>
 80034f4:	d8c00517 	ldw	r3,20(sp)
 80034f8:	00800584 	movi	r2,22
 80034fc:	10c27536 	bltu	r2,r3,8003ed4 <_dtoa_r+0xc4c>
 8003500:	180490fa 	slli	r2,r3,3
 8003504:	00c20074 	movhi	r3,2049
 8003508:	18f8d204 	addi	r3,r3,-7352
 800350c:	1885883a 	add	r2,r3,r2
 8003510:	11000017 	ldw	r4,0(r2)
 8003514:	11400117 	ldw	r5,4(r2)
 8003518:	900d883a 	mov	r6,r18
 800351c:	980f883a 	mov	r7,r19
 8003520:	800a8b80 	call	800a8b8 <__gedf2>
 8003524:	00828d0e 	bge	zero,r2,8003f5c <_dtoa_r+0xcd4>
 8003528:	d9000517 	ldw	r4,20(sp)
 800352c:	d8000e15 	stw	zero,56(sp)
 8003530:	213fffc4 	addi	r4,r4,-1
 8003534:	d9000515 	stw	r4,20(sp)
 8003538:	b42dc83a 	sub	r22,r22,r16
 800353c:	b5bfffc4 	addi	r22,r22,-1
 8003540:	b0026f16 	blt	r22,zero,8003f00 <_dtoa_r+0xc78>
 8003544:	d8000815 	stw	zero,32(sp)
 8003548:	d9c00517 	ldw	r7,20(sp)
 800354c:	38026416 	blt	r7,zero,8003ee0 <_dtoa_r+0xc58>
 8003550:	b1ed883a 	add	r22,r22,r7
 8003554:	d9c00d15 	stw	r7,52(sp)
 8003558:	d8000a15 	stw	zero,40(sp)
 800355c:	d9800317 	ldw	r6,12(sp)
 8003560:	00800244 	movi	r2,9
 8003564:	11811436 	bltu	r2,r6,80039b8 <_dtoa_r+0x730>
 8003568:	00800144 	movi	r2,5
 800356c:	1184e10e 	bge	r2,r6,80048f4 <_dtoa_r+0x166c>
 8003570:	31bfff04 	addi	r6,r6,-4
 8003574:	d9800315 	stw	r6,12(sp)
 8003578:	0023883a 	mov	r17,zero
 800357c:	d9800317 	ldw	r6,12(sp)
 8003580:	008000c4 	movi	r2,3
 8003584:	30836726 	beq	r6,r2,8004324 <_dtoa_r+0x109c>
 8003588:	1183410e 	bge	r2,r6,8004290 <_dtoa_r+0x1008>
 800358c:	d9c00317 	ldw	r7,12(sp)
 8003590:	00800104 	movi	r2,4
 8003594:	38827c26 	beq	r7,r2,8003f88 <_dtoa_r+0xd00>
 8003598:	00800144 	movi	r2,5
 800359c:	3884c41e 	bne	r7,r2,80048b0 <_dtoa_r+0x1628>
 80035a0:	00800044 	movi	r2,1
 80035a4:	d8800b15 	stw	r2,44(sp)
 80035a8:	d8c00517 	ldw	r3,20(sp)
 80035ac:	d9002217 	ldw	r4,136(sp)
 80035b0:	1907883a 	add	r3,r3,r4
 80035b4:	19800044 	addi	r6,r3,1
 80035b8:	d8c00c15 	stw	r3,48(sp)
 80035bc:	d9800615 	stw	r6,24(sp)
 80035c0:	0183a40e 	bge	zero,r6,8004454 <_dtoa_r+0x11cc>
 80035c4:	d9800617 	ldw	r6,24(sp)
 80035c8:	3021883a 	mov	r16,r6
 80035cc:	e0001115 	stw	zero,68(fp)
 80035d0:	008005c4 	movi	r2,23
 80035d4:	1184c92e 	bgeu	r2,r6,80048fc <_dtoa_r+0x1674>
 80035d8:	00c00044 	movi	r3,1
 80035dc:	00800104 	movi	r2,4
 80035e0:	1085883a 	add	r2,r2,r2
 80035e4:	11000504 	addi	r4,r2,20
 80035e8:	180b883a 	mov	r5,r3
 80035ec:	18c00044 	addi	r3,r3,1
 80035f0:	313ffb2e 	bgeu	r6,r4,80035e0 <__alt_data_end+0xfc0035e0>
 80035f4:	e1401115 	stw	r5,68(fp)
 80035f8:	e009883a 	mov	r4,fp
 80035fc:	80054240 	call	8005424 <_Balloc>
 8003600:	d8800715 	stw	r2,28(sp)
 8003604:	e0801015 	stw	r2,64(fp)
 8003608:	00800384 	movi	r2,14
 800360c:	1400f736 	bltu	r2,r16,80039ec <_dtoa_r+0x764>
 8003610:	8800f626 	beq	r17,zero,80039ec <_dtoa_r+0x764>
 8003614:	d9c00517 	ldw	r7,20(sp)
 8003618:	01c39a0e 	bge	zero,r7,8004484 <_dtoa_r+0x11fc>
 800361c:	388003cc 	andi	r2,r7,15
 8003620:	100490fa 	slli	r2,r2,3
 8003624:	382bd13a 	srai	r21,r7,4
 8003628:	00c20074 	movhi	r3,2049
 800362c:	18f8d204 	addi	r3,r3,-7352
 8003630:	1885883a 	add	r2,r3,r2
 8003634:	a8c0040c 	andi	r3,r21,16
 8003638:	12400017 	ldw	r9,0(r2)
 800363c:	12000117 	ldw	r8,4(r2)
 8003640:	18037926 	beq	r3,zero,8004428 <_dtoa_r+0x11a0>
 8003644:	00820074 	movhi	r2,2049
 8003648:	10b8c804 	addi	r2,r2,-7392
 800364c:	11800817 	ldw	r6,32(r2)
 8003650:	11c00917 	ldw	r7,36(r2)
 8003654:	9009883a 	mov	r4,r18
 8003658:	980b883a 	mov	r5,r19
 800365c:	da001715 	stw	r8,92(sp)
 8003660:	da401615 	stw	r9,88(sp)
 8003664:	8009e600 	call	8009e60 <__divdf3>
 8003668:	da001717 	ldw	r8,92(sp)
 800366c:	da401617 	ldw	r9,88(sp)
 8003670:	ad4003cc 	andi	r21,r21,15
 8003674:	040000c4 	movi	r16,3
 8003678:	1023883a 	mov	r17,r2
 800367c:	1829883a 	mov	r20,r3
 8003680:	a8001126 	beq	r21,zero,80036c8 <_dtoa_r+0x440>
 8003684:	05c20074 	movhi	r23,2049
 8003688:	bdf8c804 	addi	r23,r23,-7392
 800368c:	4805883a 	mov	r2,r9
 8003690:	4007883a 	mov	r3,r8
 8003694:	a980004c 	andi	r6,r21,1
 8003698:	1009883a 	mov	r4,r2
 800369c:	a82bd07a 	srai	r21,r21,1
 80036a0:	180b883a 	mov	r5,r3
 80036a4:	30000426 	beq	r6,zero,80036b8 <_dtoa_r+0x430>
 80036a8:	b9800017 	ldw	r6,0(r23)
 80036ac:	b9c00117 	ldw	r7,4(r23)
 80036b0:	84000044 	addi	r16,r16,1
 80036b4:	800aa880 	call	800aa88 <__muldf3>
 80036b8:	bdc00204 	addi	r23,r23,8
 80036bc:	a83ff51e 	bne	r21,zero,8003694 <__alt_data_end+0xfc003694>
 80036c0:	1013883a 	mov	r9,r2
 80036c4:	1811883a 	mov	r8,r3
 80036c8:	480d883a 	mov	r6,r9
 80036cc:	400f883a 	mov	r7,r8
 80036d0:	8809883a 	mov	r4,r17
 80036d4:	a00b883a 	mov	r5,r20
 80036d8:	8009e600 	call	8009e60 <__divdf3>
 80036dc:	d8800f15 	stw	r2,60(sp)
 80036e0:	d8c01015 	stw	r3,64(sp)
 80036e4:	d8c00e17 	ldw	r3,56(sp)
 80036e8:	18000626 	beq	r3,zero,8003704 <_dtoa_r+0x47c>
 80036ec:	d9000f17 	ldw	r4,60(sp)
 80036f0:	d9401017 	ldw	r5,64(sp)
 80036f4:	000d883a 	mov	r6,zero
 80036f8:	01cffc34 	movhi	r7,16368
 80036fc:	800a9940 	call	800a994 <__ledf2>
 8003700:	10040b16 	blt	r2,zero,8004730 <_dtoa_r+0x14a8>
 8003704:	8009883a 	mov	r4,r16
 8003708:	800bc700 	call	800bc70 <__floatsidf>
 800370c:	d9800f17 	ldw	r6,60(sp)
 8003710:	d9c01017 	ldw	r7,64(sp)
 8003714:	1009883a 	mov	r4,r2
 8003718:	180b883a 	mov	r5,r3
 800371c:	800aa880 	call	800aa88 <__muldf3>
 8003720:	000d883a 	mov	r6,zero
 8003724:	01d00734 	movhi	r7,16412
 8003728:	1009883a 	mov	r4,r2
 800372c:	180b883a 	mov	r5,r3
 8003730:	80095b40 	call	80095b4 <__adddf3>
 8003734:	1021883a 	mov	r16,r2
 8003738:	d8800617 	ldw	r2,24(sp)
 800373c:	047f3034 	movhi	r17,64704
 8003740:	1c63883a 	add	r17,r3,r17
 8003744:	10031826 	beq	r2,zero,80043a8 <_dtoa_r+0x1120>
 8003748:	d8c00517 	ldw	r3,20(sp)
 800374c:	db000617 	ldw	r12,24(sp)
 8003750:	d8c01315 	stw	r3,76(sp)
 8003754:	d9000b17 	ldw	r4,44(sp)
 8003758:	20038f26 	beq	r4,zero,8004598 <_dtoa_r+0x1310>
 800375c:	60bfffc4 	addi	r2,r12,-1
 8003760:	100490fa 	slli	r2,r2,3
 8003764:	00c20074 	movhi	r3,2049
 8003768:	18f8d204 	addi	r3,r3,-7352
 800376c:	1885883a 	add	r2,r3,r2
 8003770:	11800017 	ldw	r6,0(r2)
 8003774:	11c00117 	ldw	r7,4(r2)
 8003778:	d8800717 	ldw	r2,28(sp)
 800377c:	0009883a 	mov	r4,zero
 8003780:	014ff834 	movhi	r5,16352
 8003784:	db001615 	stw	r12,88(sp)
 8003788:	15c00044 	addi	r23,r2,1
 800378c:	8009e600 	call	8009e60 <__divdf3>
 8003790:	800d883a 	mov	r6,r16
 8003794:	880f883a 	mov	r7,r17
 8003798:	1009883a 	mov	r4,r2
 800379c:	180b883a 	mov	r5,r3
 80037a0:	800b2f40 	call	800b2f4 <__subdf3>
 80037a4:	d9401017 	ldw	r5,64(sp)
 80037a8:	d9000f17 	ldw	r4,60(sp)
 80037ac:	102b883a 	mov	r21,r2
 80037b0:	d8c01215 	stw	r3,72(sp)
 80037b4:	800bbf00 	call	800bbf0 <__fixdfsi>
 80037b8:	1009883a 	mov	r4,r2
 80037bc:	1029883a 	mov	r20,r2
 80037c0:	800bc700 	call	800bc70 <__floatsidf>
 80037c4:	d9000f17 	ldw	r4,60(sp)
 80037c8:	d9401017 	ldw	r5,64(sp)
 80037cc:	100d883a 	mov	r6,r2
 80037d0:	180f883a 	mov	r7,r3
 80037d4:	800b2f40 	call	800b2f4 <__subdf3>
 80037d8:	1823883a 	mov	r17,r3
 80037dc:	d8c00717 	ldw	r3,28(sp)
 80037e0:	d9401217 	ldw	r5,72(sp)
 80037e4:	a2000c04 	addi	r8,r20,48
 80037e8:	1021883a 	mov	r16,r2
 80037ec:	1a000005 	stb	r8,0(r3)
 80037f0:	800d883a 	mov	r6,r16
 80037f4:	880f883a 	mov	r7,r17
 80037f8:	a809883a 	mov	r4,r21
 80037fc:	4029883a 	mov	r20,r8
 8003800:	800a8b80 	call	800a8b8 <__gedf2>
 8003804:	00841d16 	blt	zero,r2,800487c <_dtoa_r+0x15f4>
 8003808:	800d883a 	mov	r6,r16
 800380c:	880f883a 	mov	r7,r17
 8003810:	0009883a 	mov	r4,zero
 8003814:	014ffc34 	movhi	r5,16368
 8003818:	800b2f40 	call	800b2f4 <__subdf3>
 800381c:	d9401217 	ldw	r5,72(sp)
 8003820:	100d883a 	mov	r6,r2
 8003824:	180f883a 	mov	r7,r3
 8003828:	a809883a 	mov	r4,r21
 800382c:	800a8b80 	call	800a8b8 <__gedf2>
 8003830:	db001617 	ldw	r12,88(sp)
 8003834:	00840e16 	blt	zero,r2,8004870 <_dtoa_r+0x15e8>
 8003838:	00800044 	movi	r2,1
 800383c:	13006b0e 	bge	r2,r12,80039ec <_dtoa_r+0x764>
 8003840:	d9000717 	ldw	r4,28(sp)
 8003844:	dd800f15 	stw	r22,60(sp)
 8003848:	dcc01015 	stw	r19,64(sp)
 800384c:	2319883a 	add	r12,r4,r12
 8003850:	dcc01217 	ldw	r19,72(sp)
 8003854:	602d883a 	mov	r22,r12
 8003858:	dc801215 	stw	r18,72(sp)
 800385c:	b825883a 	mov	r18,r23
 8003860:	00000906 	br	8003888 <_dtoa_r+0x600>
 8003864:	800b2f40 	call	800b2f4 <__subdf3>
 8003868:	a80d883a 	mov	r6,r21
 800386c:	980f883a 	mov	r7,r19
 8003870:	1009883a 	mov	r4,r2
 8003874:	180b883a 	mov	r5,r3
 8003878:	800a9940 	call	800a994 <__ledf2>
 800387c:	1003e816 	blt	r2,zero,8004820 <_dtoa_r+0x1598>
 8003880:	b825883a 	mov	r18,r23
 8003884:	bd83e926 	beq	r23,r22,800482c <_dtoa_r+0x15a4>
 8003888:	a809883a 	mov	r4,r21
 800388c:	980b883a 	mov	r5,r19
 8003890:	000d883a 	mov	r6,zero
 8003894:	01d00934 	movhi	r7,16420
 8003898:	800aa880 	call	800aa88 <__muldf3>
 800389c:	000d883a 	mov	r6,zero
 80038a0:	01d00934 	movhi	r7,16420
 80038a4:	8009883a 	mov	r4,r16
 80038a8:	880b883a 	mov	r5,r17
 80038ac:	102b883a 	mov	r21,r2
 80038b0:	1827883a 	mov	r19,r3
 80038b4:	800aa880 	call	800aa88 <__muldf3>
 80038b8:	180b883a 	mov	r5,r3
 80038bc:	1009883a 	mov	r4,r2
 80038c0:	1821883a 	mov	r16,r3
 80038c4:	1023883a 	mov	r17,r2
 80038c8:	800bbf00 	call	800bbf0 <__fixdfsi>
 80038cc:	1009883a 	mov	r4,r2
 80038d0:	1029883a 	mov	r20,r2
 80038d4:	800bc700 	call	800bc70 <__floatsidf>
 80038d8:	8809883a 	mov	r4,r17
 80038dc:	800b883a 	mov	r5,r16
 80038e0:	100d883a 	mov	r6,r2
 80038e4:	180f883a 	mov	r7,r3
 80038e8:	800b2f40 	call	800b2f4 <__subdf3>
 80038ec:	a5000c04 	addi	r20,r20,48
 80038f0:	a80d883a 	mov	r6,r21
 80038f4:	980f883a 	mov	r7,r19
 80038f8:	1009883a 	mov	r4,r2
 80038fc:	180b883a 	mov	r5,r3
 8003900:	95000005 	stb	r20,0(r18)
 8003904:	1021883a 	mov	r16,r2
 8003908:	1823883a 	mov	r17,r3
 800390c:	800a9940 	call	800a994 <__ledf2>
 8003910:	bdc00044 	addi	r23,r23,1
 8003914:	800d883a 	mov	r6,r16
 8003918:	880f883a 	mov	r7,r17
 800391c:	0009883a 	mov	r4,zero
 8003920:	014ffc34 	movhi	r5,16368
 8003924:	103fcf0e 	bge	r2,zero,8003864 <__alt_data_end+0xfc003864>
 8003928:	d8c01317 	ldw	r3,76(sp)
 800392c:	d8c00515 	stw	r3,20(sp)
 8003930:	d9400917 	ldw	r5,36(sp)
 8003934:	e009883a 	mov	r4,fp
 8003938:	80054cc0 	call	80054cc <_Bfree>
 800393c:	d9000517 	ldw	r4,20(sp)
 8003940:	d9802317 	ldw	r6,140(sp)
 8003944:	d9c02517 	ldw	r7,148(sp)
 8003948:	b8000005 	stb	zero,0(r23)
 800394c:	20800044 	addi	r2,r4,1
 8003950:	30800015 	stw	r2,0(r6)
 8003954:	3802aa26 	beq	r7,zero,8004400 <_dtoa_r+0x1178>
 8003958:	3dc00015 	stw	r23,0(r7)
 800395c:	d8800717 	ldw	r2,28(sp)
 8003960:	003e7906 	br	8003348 <__alt_data_end+0xfc003348>
 8003964:	00800434 	movhi	r2,16
 8003968:	10bfffc4 	addi	r2,r2,-1
 800396c:	88a2703a 	and	r17,r17,r2
 8003970:	883e851e 	bne	r17,zero,8003388 <__alt_data_end+0xfc003388>
 8003974:	00820074 	movhi	r2,2049
 8003978:	10b8b304 	addi	r2,r2,-7476
 800397c:	003e8406 	br	8003390 <__alt_data_end+0xfc003390>
 8003980:	10c00204 	addi	r3,r2,8
 8003984:	003e8706 	br	80033a4 <__alt_data_end+0xfc0033a4>
 8003988:	01400434 	movhi	r5,16
 800398c:	297fffc4 	addi	r5,r5,-1
 8003990:	994a703a 	and	r5,r19,r5
 8003994:	9009883a 	mov	r4,r18
 8003998:	843f0044 	addi	r16,r16,-1023
 800399c:	294ffc34 	orhi	r5,r5,16368
 80039a0:	dd800217 	ldw	r22,8(sp)
 80039a4:	d8001115 	stw	zero,68(sp)
 80039a8:	003ea506 	br	8003440 <__alt_data_end+0xfc003440>
 80039ac:	00820074 	movhi	r2,2049
 80039b0:	10b8aa04 	addi	r2,r2,-7512
 80039b4:	003e6406 	br	8003348 <__alt_data_end+0xfc003348>
 80039b8:	e0001115 	stw	zero,68(fp)
 80039bc:	000b883a 	mov	r5,zero
 80039c0:	e009883a 	mov	r4,fp
 80039c4:	80054240 	call	8005424 <_Balloc>
 80039c8:	01bfffc4 	movi	r6,-1
 80039cc:	01c00044 	movi	r7,1
 80039d0:	d8800715 	stw	r2,28(sp)
 80039d4:	d9800c15 	stw	r6,48(sp)
 80039d8:	e0801015 	stw	r2,64(fp)
 80039dc:	d8000315 	stw	zero,12(sp)
 80039e0:	d9c00b15 	stw	r7,44(sp)
 80039e4:	d9800615 	stw	r6,24(sp)
 80039e8:	d8002215 	stw	zero,136(sp)
 80039ec:	d8800117 	ldw	r2,4(sp)
 80039f0:	10008916 	blt	r2,zero,8003c18 <_dtoa_r+0x990>
 80039f4:	d9000517 	ldw	r4,20(sp)
 80039f8:	00c00384 	movi	r3,14
 80039fc:	19008616 	blt	r3,r4,8003c18 <_dtoa_r+0x990>
 8003a00:	200490fa 	slli	r2,r4,3
 8003a04:	00c20074 	movhi	r3,2049
 8003a08:	d9802217 	ldw	r6,136(sp)
 8003a0c:	18f8d204 	addi	r3,r3,-7352
 8003a10:	1885883a 	add	r2,r3,r2
 8003a14:	14000017 	ldw	r16,0(r2)
 8003a18:	14400117 	ldw	r17,4(r2)
 8003a1c:	30016316 	blt	r6,zero,8003fac <_dtoa_r+0xd24>
 8003a20:	800d883a 	mov	r6,r16
 8003a24:	880f883a 	mov	r7,r17
 8003a28:	9009883a 	mov	r4,r18
 8003a2c:	980b883a 	mov	r5,r19
 8003a30:	8009e600 	call	8009e60 <__divdf3>
 8003a34:	180b883a 	mov	r5,r3
 8003a38:	1009883a 	mov	r4,r2
 8003a3c:	800bbf00 	call	800bbf0 <__fixdfsi>
 8003a40:	1009883a 	mov	r4,r2
 8003a44:	102b883a 	mov	r21,r2
 8003a48:	800bc700 	call	800bc70 <__floatsidf>
 8003a4c:	800d883a 	mov	r6,r16
 8003a50:	880f883a 	mov	r7,r17
 8003a54:	1009883a 	mov	r4,r2
 8003a58:	180b883a 	mov	r5,r3
 8003a5c:	800aa880 	call	800aa88 <__muldf3>
 8003a60:	100d883a 	mov	r6,r2
 8003a64:	180f883a 	mov	r7,r3
 8003a68:	9009883a 	mov	r4,r18
 8003a6c:	980b883a 	mov	r5,r19
 8003a70:	800b2f40 	call	800b2f4 <__subdf3>
 8003a74:	d9c00717 	ldw	r7,28(sp)
 8003a78:	1009883a 	mov	r4,r2
 8003a7c:	a8800c04 	addi	r2,r21,48
 8003a80:	38800005 	stb	r2,0(r7)
 8003a84:	3dc00044 	addi	r23,r7,1
 8003a88:	d9c00617 	ldw	r7,24(sp)
 8003a8c:	01800044 	movi	r6,1
 8003a90:	180b883a 	mov	r5,r3
 8003a94:	2005883a 	mov	r2,r4
 8003a98:	39803826 	beq	r7,r6,8003b7c <_dtoa_r+0x8f4>
 8003a9c:	000d883a 	mov	r6,zero
 8003aa0:	01d00934 	movhi	r7,16420
 8003aa4:	800aa880 	call	800aa88 <__muldf3>
 8003aa8:	000d883a 	mov	r6,zero
 8003aac:	000f883a 	mov	r7,zero
 8003ab0:	1009883a 	mov	r4,r2
 8003ab4:	180b883a 	mov	r5,r3
 8003ab8:	1025883a 	mov	r18,r2
 8003abc:	1827883a 	mov	r19,r3
 8003ac0:	800a8300 	call	800a830 <__eqdf2>
 8003ac4:	103f9a26 	beq	r2,zero,8003930 <__alt_data_end+0xfc003930>
 8003ac8:	d9c00617 	ldw	r7,24(sp)
 8003acc:	d8c00717 	ldw	r3,28(sp)
 8003ad0:	b829883a 	mov	r20,r23
 8003ad4:	38bfffc4 	addi	r2,r7,-1
 8003ad8:	18ad883a 	add	r22,r3,r2
 8003adc:	00000a06 	br	8003b08 <_dtoa_r+0x880>
 8003ae0:	800aa880 	call	800aa88 <__muldf3>
 8003ae4:	000d883a 	mov	r6,zero
 8003ae8:	000f883a 	mov	r7,zero
 8003aec:	1009883a 	mov	r4,r2
 8003af0:	180b883a 	mov	r5,r3
 8003af4:	1025883a 	mov	r18,r2
 8003af8:	1827883a 	mov	r19,r3
 8003afc:	b829883a 	mov	r20,r23
 8003b00:	800a8300 	call	800a830 <__eqdf2>
 8003b04:	103f8a26 	beq	r2,zero,8003930 <__alt_data_end+0xfc003930>
 8003b08:	800d883a 	mov	r6,r16
 8003b0c:	880f883a 	mov	r7,r17
 8003b10:	9009883a 	mov	r4,r18
 8003b14:	980b883a 	mov	r5,r19
 8003b18:	8009e600 	call	8009e60 <__divdf3>
 8003b1c:	180b883a 	mov	r5,r3
 8003b20:	1009883a 	mov	r4,r2
 8003b24:	800bbf00 	call	800bbf0 <__fixdfsi>
 8003b28:	1009883a 	mov	r4,r2
 8003b2c:	102b883a 	mov	r21,r2
 8003b30:	800bc700 	call	800bc70 <__floatsidf>
 8003b34:	800d883a 	mov	r6,r16
 8003b38:	880f883a 	mov	r7,r17
 8003b3c:	1009883a 	mov	r4,r2
 8003b40:	180b883a 	mov	r5,r3
 8003b44:	800aa880 	call	800aa88 <__muldf3>
 8003b48:	100d883a 	mov	r6,r2
 8003b4c:	180f883a 	mov	r7,r3
 8003b50:	9009883a 	mov	r4,r18
 8003b54:	980b883a 	mov	r5,r19
 8003b58:	800b2f40 	call	800b2f4 <__subdf3>
 8003b5c:	aa000c04 	addi	r8,r21,48
 8003b60:	a2000005 	stb	r8,0(r20)
 8003b64:	000d883a 	mov	r6,zero
 8003b68:	01d00934 	movhi	r7,16420
 8003b6c:	1009883a 	mov	r4,r2
 8003b70:	180b883a 	mov	r5,r3
 8003b74:	a5c00044 	addi	r23,r20,1
 8003b78:	b53fd91e 	bne	r22,r20,8003ae0 <__alt_data_end+0xfc003ae0>
 8003b7c:	100d883a 	mov	r6,r2
 8003b80:	180f883a 	mov	r7,r3
 8003b84:	1009883a 	mov	r4,r2
 8003b88:	180b883a 	mov	r5,r3
 8003b8c:	80095b40 	call	80095b4 <__adddf3>
 8003b90:	100d883a 	mov	r6,r2
 8003b94:	180f883a 	mov	r7,r3
 8003b98:	8009883a 	mov	r4,r16
 8003b9c:	880b883a 	mov	r5,r17
 8003ba0:	1027883a 	mov	r19,r2
 8003ba4:	1825883a 	mov	r18,r3
 8003ba8:	800a9940 	call	800a994 <__ledf2>
 8003bac:	10000816 	blt	r2,zero,8003bd0 <_dtoa_r+0x948>
 8003bb0:	980d883a 	mov	r6,r19
 8003bb4:	900f883a 	mov	r7,r18
 8003bb8:	8009883a 	mov	r4,r16
 8003bbc:	880b883a 	mov	r5,r17
 8003bc0:	800a8300 	call	800a830 <__eqdf2>
 8003bc4:	103f5a1e 	bne	r2,zero,8003930 <__alt_data_end+0xfc003930>
 8003bc8:	ad40004c 	andi	r21,r21,1
 8003bcc:	a83f5826 	beq	r21,zero,8003930 <__alt_data_end+0xfc003930>
 8003bd0:	bd3fffc3 	ldbu	r20,-1(r23)
 8003bd4:	b8bfffc4 	addi	r2,r23,-1
 8003bd8:	1007883a 	mov	r3,r2
 8003bdc:	01400e44 	movi	r5,57
 8003be0:	d9800717 	ldw	r6,28(sp)
 8003be4:	00000506 	br	8003bfc <_dtoa_r+0x974>
 8003be8:	18ffffc4 	addi	r3,r3,-1
 8003bec:	11824726 	beq	r2,r6,800450c <_dtoa_r+0x1284>
 8003bf0:	1d000003 	ldbu	r20,0(r3)
 8003bf4:	102f883a 	mov	r23,r2
 8003bf8:	10bfffc4 	addi	r2,r2,-1
 8003bfc:	a1003fcc 	andi	r4,r20,255
 8003c00:	2100201c 	xori	r4,r4,128
 8003c04:	213fe004 	addi	r4,r4,-128
 8003c08:	217ff726 	beq	r4,r5,8003be8 <__alt_data_end+0xfc003be8>
 8003c0c:	a2000044 	addi	r8,r20,1
 8003c10:	12000005 	stb	r8,0(r2)
 8003c14:	003f4606 	br	8003930 <__alt_data_end+0xfc003930>
 8003c18:	d9000b17 	ldw	r4,44(sp)
 8003c1c:	2000c826 	beq	r4,zero,8003f40 <_dtoa_r+0xcb8>
 8003c20:	d9800317 	ldw	r6,12(sp)
 8003c24:	00c00044 	movi	r3,1
 8003c28:	1980f90e 	bge	r3,r6,8004010 <_dtoa_r+0xd88>
 8003c2c:	d8800617 	ldw	r2,24(sp)
 8003c30:	d8c00a17 	ldw	r3,40(sp)
 8003c34:	157fffc4 	addi	r21,r2,-1
 8003c38:	1d41f316 	blt	r3,r21,8004408 <_dtoa_r+0x1180>
 8003c3c:	1d6bc83a 	sub	r21,r3,r21
 8003c40:	d9c00617 	ldw	r7,24(sp)
 8003c44:	3802aa16 	blt	r7,zero,80046f0 <_dtoa_r+0x1468>
 8003c48:	dd000817 	ldw	r20,32(sp)
 8003c4c:	d8800617 	ldw	r2,24(sp)
 8003c50:	d8c00817 	ldw	r3,32(sp)
 8003c54:	01400044 	movi	r5,1
 8003c58:	e009883a 	mov	r4,fp
 8003c5c:	1887883a 	add	r3,r3,r2
 8003c60:	d8c00815 	stw	r3,32(sp)
 8003c64:	b0ad883a 	add	r22,r22,r2
 8003c68:	80058580 	call	8005858 <__i2b>
 8003c6c:	1023883a 	mov	r17,r2
 8003c70:	a0000826 	beq	r20,zero,8003c94 <_dtoa_r+0xa0c>
 8003c74:	0580070e 	bge	zero,r22,8003c94 <_dtoa_r+0xa0c>
 8003c78:	a005883a 	mov	r2,r20
 8003c7c:	b500b916 	blt	r22,r20,8003f64 <_dtoa_r+0xcdc>
 8003c80:	d9000817 	ldw	r4,32(sp)
 8003c84:	a0a9c83a 	sub	r20,r20,r2
 8003c88:	b0adc83a 	sub	r22,r22,r2
 8003c8c:	2089c83a 	sub	r4,r4,r2
 8003c90:	d9000815 	stw	r4,32(sp)
 8003c94:	d9800a17 	ldw	r6,40(sp)
 8003c98:	0181810e 	bge	zero,r6,80042a0 <_dtoa_r+0x1018>
 8003c9c:	d9c00b17 	ldw	r7,44(sp)
 8003ca0:	3800b326 	beq	r7,zero,8003f70 <_dtoa_r+0xce8>
 8003ca4:	a800b226 	beq	r21,zero,8003f70 <_dtoa_r+0xce8>
 8003ca8:	880b883a 	mov	r5,r17
 8003cac:	a80d883a 	mov	r6,r21
 8003cb0:	e009883a 	mov	r4,fp
 8003cb4:	8005b200 	call	8005b20 <__pow5mult>
 8003cb8:	d9800917 	ldw	r6,36(sp)
 8003cbc:	100b883a 	mov	r5,r2
 8003cc0:	e009883a 	mov	r4,fp
 8003cc4:	1023883a 	mov	r17,r2
 8003cc8:	80058940 	call	8005894 <__multiply>
 8003ccc:	1021883a 	mov	r16,r2
 8003cd0:	d8800a17 	ldw	r2,40(sp)
 8003cd4:	d9400917 	ldw	r5,36(sp)
 8003cd8:	e009883a 	mov	r4,fp
 8003cdc:	1545c83a 	sub	r2,r2,r21
 8003ce0:	d8800a15 	stw	r2,40(sp)
 8003ce4:	80054cc0 	call	80054cc <_Bfree>
 8003ce8:	d8c00a17 	ldw	r3,40(sp)
 8003cec:	18009f1e 	bne	r3,zero,8003f6c <_dtoa_r+0xce4>
 8003cf0:	05c00044 	movi	r23,1
 8003cf4:	e009883a 	mov	r4,fp
 8003cf8:	b80b883a 	mov	r5,r23
 8003cfc:	80058580 	call	8005858 <__i2b>
 8003d00:	d9000d17 	ldw	r4,52(sp)
 8003d04:	102b883a 	mov	r21,r2
 8003d08:	2000ce26 	beq	r4,zero,8004044 <_dtoa_r+0xdbc>
 8003d0c:	200d883a 	mov	r6,r4
 8003d10:	100b883a 	mov	r5,r2
 8003d14:	e009883a 	mov	r4,fp
 8003d18:	8005b200 	call	8005b20 <__pow5mult>
 8003d1c:	d9800317 	ldw	r6,12(sp)
 8003d20:	102b883a 	mov	r21,r2
 8003d24:	b981810e 	bge	r23,r6,800432c <_dtoa_r+0x10a4>
 8003d28:	0027883a 	mov	r19,zero
 8003d2c:	a8800417 	ldw	r2,16(r21)
 8003d30:	05c00804 	movi	r23,32
 8003d34:	10800104 	addi	r2,r2,4
 8003d38:	1085883a 	add	r2,r2,r2
 8003d3c:	1085883a 	add	r2,r2,r2
 8003d40:	a885883a 	add	r2,r21,r2
 8003d44:	11000017 	ldw	r4,0(r2)
 8003d48:	80057400 	call	8005740 <__hi0bits>
 8003d4c:	b885c83a 	sub	r2,r23,r2
 8003d50:	1585883a 	add	r2,r2,r22
 8003d54:	108007cc 	andi	r2,r2,31
 8003d58:	1000b326 	beq	r2,zero,8004028 <_dtoa_r+0xda0>
 8003d5c:	00c00804 	movi	r3,32
 8003d60:	1887c83a 	sub	r3,r3,r2
 8003d64:	01000104 	movi	r4,4
 8003d68:	20c2cd0e 	bge	r4,r3,80048a0 <_dtoa_r+0x1618>
 8003d6c:	00c00704 	movi	r3,28
 8003d70:	1885c83a 	sub	r2,r3,r2
 8003d74:	d8c00817 	ldw	r3,32(sp)
 8003d78:	a0a9883a 	add	r20,r20,r2
 8003d7c:	b0ad883a 	add	r22,r22,r2
 8003d80:	1887883a 	add	r3,r3,r2
 8003d84:	d8c00815 	stw	r3,32(sp)
 8003d88:	d9800817 	ldw	r6,32(sp)
 8003d8c:	0180040e 	bge	zero,r6,8003da0 <_dtoa_r+0xb18>
 8003d90:	800b883a 	mov	r5,r16
 8003d94:	e009883a 	mov	r4,fp
 8003d98:	8005c600 	call	8005c60 <__lshift>
 8003d9c:	1021883a 	mov	r16,r2
 8003da0:	0580050e 	bge	zero,r22,8003db8 <_dtoa_r+0xb30>
 8003da4:	a80b883a 	mov	r5,r21
 8003da8:	b00d883a 	mov	r6,r22
 8003dac:	e009883a 	mov	r4,fp
 8003db0:	8005c600 	call	8005c60 <__lshift>
 8003db4:	102b883a 	mov	r21,r2
 8003db8:	d9c00e17 	ldw	r7,56(sp)
 8003dbc:	3801211e 	bne	r7,zero,8004244 <_dtoa_r+0xfbc>
 8003dc0:	d9800617 	ldw	r6,24(sp)
 8003dc4:	0181380e 	bge	zero,r6,80042a8 <_dtoa_r+0x1020>
 8003dc8:	d8c00b17 	ldw	r3,44(sp)
 8003dcc:	1800ab1e 	bne	r3,zero,800407c <_dtoa_r+0xdf4>
 8003dd0:	dc800717 	ldw	r18,28(sp)
 8003dd4:	dcc00617 	ldw	r19,24(sp)
 8003dd8:	9029883a 	mov	r20,r18
 8003ddc:	00000206 	br	8003de8 <_dtoa_r+0xb60>
 8003de0:	80054f40 	call	80054f4 <__multadd>
 8003de4:	1021883a 	mov	r16,r2
 8003de8:	a80b883a 	mov	r5,r21
 8003dec:	8009883a 	mov	r4,r16
 8003df0:	80030600 	call	8003060 <quorem>
 8003df4:	10800c04 	addi	r2,r2,48
 8003df8:	90800005 	stb	r2,0(r18)
 8003dfc:	94800044 	addi	r18,r18,1
 8003e00:	9507c83a 	sub	r3,r18,r20
 8003e04:	000f883a 	mov	r7,zero
 8003e08:	01800284 	movi	r6,10
 8003e0c:	800b883a 	mov	r5,r16
 8003e10:	e009883a 	mov	r4,fp
 8003e14:	1cfff216 	blt	r3,r19,8003de0 <__alt_data_end+0xfc003de0>
 8003e18:	1011883a 	mov	r8,r2
 8003e1c:	d8800617 	ldw	r2,24(sp)
 8003e20:	0082370e 	bge	zero,r2,8004700 <_dtoa_r+0x1478>
 8003e24:	d9000717 	ldw	r4,28(sp)
 8003e28:	0025883a 	mov	r18,zero
 8003e2c:	20af883a 	add	r23,r4,r2
 8003e30:	01800044 	movi	r6,1
 8003e34:	800b883a 	mov	r5,r16
 8003e38:	e009883a 	mov	r4,fp
 8003e3c:	da001715 	stw	r8,92(sp)
 8003e40:	8005c600 	call	8005c60 <__lshift>
 8003e44:	a80b883a 	mov	r5,r21
 8003e48:	1009883a 	mov	r4,r2
 8003e4c:	d8800915 	stw	r2,36(sp)
 8003e50:	8005da80 	call	8005da8 <__mcmp>
 8003e54:	da001717 	ldw	r8,92(sp)
 8003e58:	0081800e 	bge	zero,r2,800445c <_dtoa_r+0x11d4>
 8003e5c:	b93fffc3 	ldbu	r4,-1(r23)
 8003e60:	b8bfffc4 	addi	r2,r23,-1
 8003e64:	1007883a 	mov	r3,r2
 8003e68:	01800e44 	movi	r6,57
 8003e6c:	d9c00717 	ldw	r7,28(sp)
 8003e70:	00000506 	br	8003e88 <_dtoa_r+0xc00>
 8003e74:	18ffffc4 	addi	r3,r3,-1
 8003e78:	11c12326 	beq	r2,r7,8004308 <_dtoa_r+0x1080>
 8003e7c:	19000003 	ldbu	r4,0(r3)
 8003e80:	102f883a 	mov	r23,r2
 8003e84:	10bfffc4 	addi	r2,r2,-1
 8003e88:	21403fcc 	andi	r5,r4,255
 8003e8c:	2940201c 	xori	r5,r5,128
 8003e90:	297fe004 	addi	r5,r5,-128
 8003e94:	29bff726 	beq	r5,r6,8003e74 <__alt_data_end+0xfc003e74>
 8003e98:	21000044 	addi	r4,r4,1
 8003e9c:	11000005 	stb	r4,0(r2)
 8003ea0:	a80b883a 	mov	r5,r21
 8003ea4:	e009883a 	mov	r4,fp
 8003ea8:	80054cc0 	call	80054cc <_Bfree>
 8003eac:	883ea026 	beq	r17,zero,8003930 <__alt_data_end+0xfc003930>
 8003eb0:	90000426 	beq	r18,zero,8003ec4 <_dtoa_r+0xc3c>
 8003eb4:	94400326 	beq	r18,r17,8003ec4 <_dtoa_r+0xc3c>
 8003eb8:	900b883a 	mov	r5,r18
 8003ebc:	e009883a 	mov	r4,fp
 8003ec0:	80054cc0 	call	80054cc <_Bfree>
 8003ec4:	880b883a 	mov	r5,r17
 8003ec8:	e009883a 	mov	r4,fp
 8003ecc:	80054cc0 	call	80054cc <_Bfree>
 8003ed0:	003e9706 	br	8003930 <__alt_data_end+0xfc003930>
 8003ed4:	01800044 	movi	r6,1
 8003ed8:	d9800e15 	stw	r6,56(sp)
 8003edc:	003d9606 	br	8003538 <__alt_data_end+0xfc003538>
 8003ee0:	d8800817 	ldw	r2,32(sp)
 8003ee4:	d8c00517 	ldw	r3,20(sp)
 8003ee8:	d8000d15 	stw	zero,52(sp)
 8003eec:	10c5c83a 	sub	r2,r2,r3
 8003ef0:	00c9c83a 	sub	r4,zero,r3
 8003ef4:	d8800815 	stw	r2,32(sp)
 8003ef8:	d9000a15 	stw	r4,40(sp)
 8003efc:	003d9706 	br	800355c <__alt_data_end+0xfc00355c>
 8003f00:	05adc83a 	sub	r22,zero,r22
 8003f04:	dd800815 	stw	r22,32(sp)
 8003f08:	002d883a 	mov	r22,zero
 8003f0c:	003d8e06 	br	8003548 <__alt_data_end+0xfc003548>
 8003f10:	d9000517 	ldw	r4,20(sp)
 8003f14:	800bc700 	call	800bc70 <__floatsidf>
 8003f18:	100d883a 	mov	r6,r2
 8003f1c:	180f883a 	mov	r7,r3
 8003f20:	a009883a 	mov	r4,r20
 8003f24:	880b883a 	mov	r5,r17
 8003f28:	800a8300 	call	800a830 <__eqdf2>
 8003f2c:	103d7126 	beq	r2,zero,80034f4 <__alt_data_end+0xfc0034f4>
 8003f30:	d9c00517 	ldw	r7,20(sp)
 8003f34:	39ffffc4 	addi	r7,r7,-1
 8003f38:	d9c00515 	stw	r7,20(sp)
 8003f3c:	003d6d06 	br	80034f4 <__alt_data_end+0xfc0034f4>
 8003f40:	dd400a17 	ldw	r21,40(sp)
 8003f44:	dd000817 	ldw	r20,32(sp)
 8003f48:	0023883a 	mov	r17,zero
 8003f4c:	003f4806 	br	8003c70 <__alt_data_end+0xfc003c70>
 8003f50:	10e3c83a 	sub	r17,r2,r3
 8003f54:	9448983a 	sll	r4,r18,r17
 8003f58:	003d3206 	br	8003424 <__alt_data_end+0xfc003424>
 8003f5c:	d8000e15 	stw	zero,56(sp)
 8003f60:	003d7506 	br	8003538 <__alt_data_end+0xfc003538>
 8003f64:	b005883a 	mov	r2,r22
 8003f68:	003f4506 	br	8003c80 <__alt_data_end+0xfc003c80>
 8003f6c:	dc000915 	stw	r16,36(sp)
 8003f70:	d9800a17 	ldw	r6,40(sp)
 8003f74:	d9400917 	ldw	r5,36(sp)
 8003f78:	e009883a 	mov	r4,fp
 8003f7c:	8005b200 	call	8005b20 <__pow5mult>
 8003f80:	1021883a 	mov	r16,r2
 8003f84:	003f5a06 	br	8003cf0 <__alt_data_end+0xfc003cf0>
 8003f88:	01c00044 	movi	r7,1
 8003f8c:	d9c00b15 	stw	r7,44(sp)
 8003f90:	d8802217 	ldw	r2,136(sp)
 8003f94:	0081280e 	bge	zero,r2,8004438 <_dtoa_r+0x11b0>
 8003f98:	100d883a 	mov	r6,r2
 8003f9c:	1021883a 	mov	r16,r2
 8003fa0:	d8800c15 	stw	r2,48(sp)
 8003fa4:	d8800615 	stw	r2,24(sp)
 8003fa8:	003d8806 	br	80035cc <__alt_data_end+0xfc0035cc>
 8003fac:	d8800617 	ldw	r2,24(sp)
 8003fb0:	00be9b16 	blt	zero,r2,8003a20 <__alt_data_end+0xfc003a20>
 8003fb4:	10010f1e 	bne	r2,zero,80043f4 <_dtoa_r+0x116c>
 8003fb8:	880b883a 	mov	r5,r17
 8003fbc:	000d883a 	mov	r6,zero
 8003fc0:	01d00534 	movhi	r7,16404
 8003fc4:	8009883a 	mov	r4,r16
 8003fc8:	800aa880 	call	800aa88 <__muldf3>
 8003fcc:	900d883a 	mov	r6,r18
 8003fd0:	980f883a 	mov	r7,r19
 8003fd4:	1009883a 	mov	r4,r2
 8003fd8:	180b883a 	mov	r5,r3
 8003fdc:	800a8b80 	call	800a8b8 <__gedf2>
 8003fe0:	002b883a 	mov	r21,zero
 8003fe4:	0023883a 	mov	r17,zero
 8003fe8:	1000bf16 	blt	r2,zero,80042e8 <_dtoa_r+0x1060>
 8003fec:	d9802217 	ldw	r6,136(sp)
 8003ff0:	ddc00717 	ldw	r23,28(sp)
 8003ff4:	018c303a 	nor	r6,zero,r6
 8003ff8:	d9800515 	stw	r6,20(sp)
 8003ffc:	a80b883a 	mov	r5,r21
 8004000:	e009883a 	mov	r4,fp
 8004004:	80054cc0 	call	80054cc <_Bfree>
 8004008:	883e4926 	beq	r17,zero,8003930 <__alt_data_end+0xfc003930>
 800400c:	003fad06 	br	8003ec4 <__alt_data_end+0xfc003ec4>
 8004010:	d9c01117 	ldw	r7,68(sp)
 8004014:	3801bc26 	beq	r7,zero,8004708 <_dtoa_r+0x1480>
 8004018:	10810cc4 	addi	r2,r2,1075
 800401c:	dd400a17 	ldw	r21,40(sp)
 8004020:	dd000817 	ldw	r20,32(sp)
 8004024:	003f0a06 	br	8003c50 <__alt_data_end+0xfc003c50>
 8004028:	00800704 	movi	r2,28
 800402c:	d9000817 	ldw	r4,32(sp)
 8004030:	a0a9883a 	add	r20,r20,r2
 8004034:	b0ad883a 	add	r22,r22,r2
 8004038:	2089883a 	add	r4,r4,r2
 800403c:	d9000815 	stw	r4,32(sp)
 8004040:	003f5106 	br	8003d88 <__alt_data_end+0xfc003d88>
 8004044:	d8c00317 	ldw	r3,12(sp)
 8004048:	b8c1fc0e 	bge	r23,r3,800483c <_dtoa_r+0x15b4>
 800404c:	0027883a 	mov	r19,zero
 8004050:	b805883a 	mov	r2,r23
 8004054:	003f3e06 	br	8003d50 <__alt_data_end+0xfc003d50>
 8004058:	880b883a 	mov	r5,r17
 800405c:	e009883a 	mov	r4,fp
 8004060:	000f883a 	mov	r7,zero
 8004064:	01800284 	movi	r6,10
 8004068:	80054f40 	call	80054f4 <__multadd>
 800406c:	d9000c17 	ldw	r4,48(sp)
 8004070:	1023883a 	mov	r17,r2
 8004074:	0102040e 	bge	zero,r4,8004888 <_dtoa_r+0x1600>
 8004078:	d9000615 	stw	r4,24(sp)
 800407c:	0500050e 	bge	zero,r20,8004094 <_dtoa_r+0xe0c>
 8004080:	880b883a 	mov	r5,r17
 8004084:	a00d883a 	mov	r6,r20
 8004088:	e009883a 	mov	r4,fp
 800408c:	8005c600 	call	8005c60 <__lshift>
 8004090:	1023883a 	mov	r17,r2
 8004094:	9801241e 	bne	r19,zero,8004528 <_dtoa_r+0x12a0>
 8004098:	8829883a 	mov	r20,r17
 800409c:	d9000617 	ldw	r4,24(sp)
 80040a0:	dcc00717 	ldw	r19,28(sp)
 80040a4:	9480004c 	andi	r18,r18,1
 80040a8:	20bfffc4 	addi	r2,r4,-1
 80040ac:	9885883a 	add	r2,r19,r2
 80040b0:	d8800415 	stw	r2,16(sp)
 80040b4:	dc800615 	stw	r18,24(sp)
 80040b8:	a80b883a 	mov	r5,r21
 80040bc:	8009883a 	mov	r4,r16
 80040c0:	80030600 	call	8003060 <quorem>
 80040c4:	880b883a 	mov	r5,r17
 80040c8:	8009883a 	mov	r4,r16
 80040cc:	102f883a 	mov	r23,r2
 80040d0:	8005da80 	call	8005da8 <__mcmp>
 80040d4:	a80b883a 	mov	r5,r21
 80040d8:	a00d883a 	mov	r6,r20
 80040dc:	e009883a 	mov	r4,fp
 80040e0:	102d883a 	mov	r22,r2
 80040e4:	8005e080 	call	8005e08 <__mdiff>
 80040e8:	1007883a 	mov	r3,r2
 80040ec:	10800317 	ldw	r2,12(r2)
 80040f0:	bc800c04 	addi	r18,r23,48
 80040f4:	180b883a 	mov	r5,r3
 80040f8:	10004e1e 	bne	r2,zero,8004234 <_dtoa_r+0xfac>
 80040fc:	8009883a 	mov	r4,r16
 8004100:	d8c01615 	stw	r3,88(sp)
 8004104:	8005da80 	call	8005da8 <__mcmp>
 8004108:	d8c01617 	ldw	r3,88(sp)
 800410c:	e009883a 	mov	r4,fp
 8004110:	d8801615 	stw	r2,88(sp)
 8004114:	180b883a 	mov	r5,r3
 8004118:	80054cc0 	call	80054cc <_Bfree>
 800411c:	d8801617 	ldw	r2,88(sp)
 8004120:	1000041e 	bne	r2,zero,8004134 <_dtoa_r+0xeac>
 8004124:	d9800317 	ldw	r6,12(sp)
 8004128:	3000021e 	bne	r6,zero,8004134 <_dtoa_r+0xeac>
 800412c:	d8c00617 	ldw	r3,24(sp)
 8004130:	18003726 	beq	r3,zero,8004210 <_dtoa_r+0xf88>
 8004134:	b0002016 	blt	r22,zero,80041b8 <_dtoa_r+0xf30>
 8004138:	b000041e 	bne	r22,zero,800414c <_dtoa_r+0xec4>
 800413c:	d9000317 	ldw	r4,12(sp)
 8004140:	2000021e 	bne	r4,zero,800414c <_dtoa_r+0xec4>
 8004144:	d8c00617 	ldw	r3,24(sp)
 8004148:	18001b26 	beq	r3,zero,80041b8 <_dtoa_r+0xf30>
 800414c:	00810716 	blt	zero,r2,800456c <_dtoa_r+0x12e4>
 8004150:	d8c00417 	ldw	r3,16(sp)
 8004154:	9d800044 	addi	r22,r19,1
 8004158:	9c800005 	stb	r18,0(r19)
 800415c:	b02f883a 	mov	r23,r22
 8004160:	98c10626 	beq	r19,r3,800457c <_dtoa_r+0x12f4>
 8004164:	800b883a 	mov	r5,r16
 8004168:	000f883a 	mov	r7,zero
 800416c:	01800284 	movi	r6,10
 8004170:	e009883a 	mov	r4,fp
 8004174:	80054f40 	call	80054f4 <__multadd>
 8004178:	1021883a 	mov	r16,r2
 800417c:	000f883a 	mov	r7,zero
 8004180:	01800284 	movi	r6,10
 8004184:	880b883a 	mov	r5,r17
 8004188:	e009883a 	mov	r4,fp
 800418c:	8d002526 	beq	r17,r20,8004224 <_dtoa_r+0xf9c>
 8004190:	80054f40 	call	80054f4 <__multadd>
 8004194:	a00b883a 	mov	r5,r20
 8004198:	000f883a 	mov	r7,zero
 800419c:	01800284 	movi	r6,10
 80041a0:	e009883a 	mov	r4,fp
 80041a4:	1023883a 	mov	r17,r2
 80041a8:	80054f40 	call	80054f4 <__multadd>
 80041ac:	1029883a 	mov	r20,r2
 80041b0:	b027883a 	mov	r19,r22
 80041b4:	003fc006 	br	80040b8 <__alt_data_end+0xfc0040b8>
 80041b8:	9011883a 	mov	r8,r18
 80041bc:	00800e0e 	bge	zero,r2,80041f8 <_dtoa_r+0xf70>
 80041c0:	800b883a 	mov	r5,r16
 80041c4:	01800044 	movi	r6,1
 80041c8:	e009883a 	mov	r4,fp
 80041cc:	da001715 	stw	r8,92(sp)
 80041d0:	8005c600 	call	8005c60 <__lshift>
 80041d4:	a80b883a 	mov	r5,r21
 80041d8:	1009883a 	mov	r4,r2
 80041dc:	1021883a 	mov	r16,r2
 80041e0:	8005da80 	call	8005da8 <__mcmp>
 80041e4:	da001717 	ldw	r8,92(sp)
 80041e8:	0081960e 	bge	zero,r2,8004844 <_dtoa_r+0x15bc>
 80041ec:	00800e44 	movi	r2,57
 80041f0:	40817026 	beq	r8,r2,80047b4 <_dtoa_r+0x152c>
 80041f4:	ba000c44 	addi	r8,r23,49
 80041f8:	8825883a 	mov	r18,r17
 80041fc:	9dc00044 	addi	r23,r19,1
 8004200:	9a000005 	stb	r8,0(r19)
 8004204:	a023883a 	mov	r17,r20
 8004208:	dc000915 	stw	r16,36(sp)
 800420c:	003f2406 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004210:	00800e44 	movi	r2,57
 8004214:	9011883a 	mov	r8,r18
 8004218:	90816626 	beq	r18,r2,80047b4 <_dtoa_r+0x152c>
 800421c:	05bff516 	blt	zero,r22,80041f4 <__alt_data_end+0xfc0041f4>
 8004220:	003ff506 	br	80041f8 <__alt_data_end+0xfc0041f8>
 8004224:	80054f40 	call	80054f4 <__multadd>
 8004228:	1023883a 	mov	r17,r2
 800422c:	1029883a 	mov	r20,r2
 8004230:	003fdf06 	br	80041b0 <__alt_data_end+0xfc0041b0>
 8004234:	e009883a 	mov	r4,fp
 8004238:	80054cc0 	call	80054cc <_Bfree>
 800423c:	00800044 	movi	r2,1
 8004240:	003fbc06 	br	8004134 <__alt_data_end+0xfc004134>
 8004244:	a80b883a 	mov	r5,r21
 8004248:	8009883a 	mov	r4,r16
 800424c:	8005da80 	call	8005da8 <__mcmp>
 8004250:	103edb0e 	bge	r2,zero,8003dc0 <__alt_data_end+0xfc003dc0>
 8004254:	800b883a 	mov	r5,r16
 8004258:	000f883a 	mov	r7,zero
 800425c:	01800284 	movi	r6,10
 8004260:	e009883a 	mov	r4,fp
 8004264:	80054f40 	call	80054f4 <__multadd>
 8004268:	1021883a 	mov	r16,r2
 800426c:	d8800517 	ldw	r2,20(sp)
 8004270:	d8c00b17 	ldw	r3,44(sp)
 8004274:	10bfffc4 	addi	r2,r2,-1
 8004278:	d8800515 	stw	r2,20(sp)
 800427c:	183f761e 	bne	r3,zero,8004058 <__alt_data_end+0xfc004058>
 8004280:	d9000c17 	ldw	r4,48(sp)
 8004284:	0101730e 	bge	zero,r4,8004854 <_dtoa_r+0x15cc>
 8004288:	d9000615 	stw	r4,24(sp)
 800428c:	003ed006 	br	8003dd0 <__alt_data_end+0xfc003dd0>
 8004290:	00800084 	movi	r2,2
 8004294:	3081861e 	bne	r6,r2,80048b0 <_dtoa_r+0x1628>
 8004298:	d8000b15 	stw	zero,44(sp)
 800429c:	003f3c06 	br	8003f90 <__alt_data_end+0xfc003f90>
 80042a0:	dc000917 	ldw	r16,36(sp)
 80042a4:	003e9206 	br	8003cf0 <__alt_data_end+0xfc003cf0>
 80042a8:	d9c00317 	ldw	r7,12(sp)
 80042ac:	00800084 	movi	r2,2
 80042b0:	11fec50e 	bge	r2,r7,8003dc8 <__alt_data_end+0xfc003dc8>
 80042b4:	d9000617 	ldw	r4,24(sp)
 80042b8:	20013c1e 	bne	r4,zero,80047ac <_dtoa_r+0x1524>
 80042bc:	a80b883a 	mov	r5,r21
 80042c0:	000f883a 	mov	r7,zero
 80042c4:	01800144 	movi	r6,5
 80042c8:	e009883a 	mov	r4,fp
 80042cc:	80054f40 	call	80054f4 <__multadd>
 80042d0:	100b883a 	mov	r5,r2
 80042d4:	8009883a 	mov	r4,r16
 80042d8:	102b883a 	mov	r21,r2
 80042dc:	8005da80 	call	8005da8 <__mcmp>
 80042e0:	dc000915 	stw	r16,36(sp)
 80042e4:	00bf410e 	bge	zero,r2,8003fec <__alt_data_end+0xfc003fec>
 80042e8:	d9c00717 	ldw	r7,28(sp)
 80042ec:	00800c44 	movi	r2,49
 80042f0:	38800005 	stb	r2,0(r7)
 80042f4:	d8800517 	ldw	r2,20(sp)
 80042f8:	3dc00044 	addi	r23,r7,1
 80042fc:	10800044 	addi	r2,r2,1
 8004300:	d8800515 	stw	r2,20(sp)
 8004304:	003f3d06 	br	8003ffc <__alt_data_end+0xfc003ffc>
 8004308:	d9800517 	ldw	r6,20(sp)
 800430c:	d9c00717 	ldw	r7,28(sp)
 8004310:	00800c44 	movi	r2,49
 8004314:	31800044 	addi	r6,r6,1
 8004318:	d9800515 	stw	r6,20(sp)
 800431c:	38800005 	stb	r2,0(r7)
 8004320:	003edf06 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004324:	d8000b15 	stw	zero,44(sp)
 8004328:	003c9f06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 800432c:	903e7e1e 	bne	r18,zero,8003d28 <__alt_data_end+0xfc003d28>
 8004330:	00800434 	movhi	r2,16
 8004334:	10bfffc4 	addi	r2,r2,-1
 8004338:	9884703a 	and	r2,r19,r2
 800433c:	1000ea1e 	bne	r2,zero,80046e8 <_dtoa_r+0x1460>
 8004340:	9cdffc2c 	andhi	r19,r19,32752
 8004344:	9800e826 	beq	r19,zero,80046e8 <_dtoa_r+0x1460>
 8004348:	d9c00817 	ldw	r7,32(sp)
 800434c:	b5800044 	addi	r22,r22,1
 8004350:	04c00044 	movi	r19,1
 8004354:	39c00044 	addi	r7,r7,1
 8004358:	d9c00815 	stw	r7,32(sp)
 800435c:	d8800d17 	ldw	r2,52(sp)
 8004360:	103e721e 	bne	r2,zero,8003d2c <__alt_data_end+0xfc003d2c>
 8004364:	00800044 	movi	r2,1
 8004368:	003e7906 	br	8003d50 <__alt_data_end+0xfc003d50>
 800436c:	8009883a 	mov	r4,r16
 8004370:	800bc700 	call	800bc70 <__floatsidf>
 8004374:	d9800f17 	ldw	r6,60(sp)
 8004378:	d9c01017 	ldw	r7,64(sp)
 800437c:	1009883a 	mov	r4,r2
 8004380:	180b883a 	mov	r5,r3
 8004384:	800aa880 	call	800aa88 <__muldf3>
 8004388:	000d883a 	mov	r6,zero
 800438c:	01d00734 	movhi	r7,16412
 8004390:	1009883a 	mov	r4,r2
 8004394:	180b883a 	mov	r5,r3
 8004398:	80095b40 	call	80095b4 <__adddf3>
 800439c:	047f3034 	movhi	r17,64704
 80043a0:	1021883a 	mov	r16,r2
 80043a4:	1c63883a 	add	r17,r3,r17
 80043a8:	d9000f17 	ldw	r4,60(sp)
 80043ac:	d9401017 	ldw	r5,64(sp)
 80043b0:	000d883a 	mov	r6,zero
 80043b4:	01d00534 	movhi	r7,16404
 80043b8:	800b2f40 	call	800b2f4 <__subdf3>
 80043bc:	800d883a 	mov	r6,r16
 80043c0:	880f883a 	mov	r7,r17
 80043c4:	1009883a 	mov	r4,r2
 80043c8:	180b883a 	mov	r5,r3
 80043cc:	102b883a 	mov	r21,r2
 80043d0:	1829883a 	mov	r20,r3
 80043d4:	800a8b80 	call	800a8b8 <__gedf2>
 80043d8:	00806c16 	blt	zero,r2,800458c <_dtoa_r+0x1304>
 80043dc:	89e0003c 	xorhi	r7,r17,32768
 80043e0:	800d883a 	mov	r6,r16
 80043e4:	a809883a 	mov	r4,r21
 80043e8:	a00b883a 	mov	r5,r20
 80043ec:	800a9940 	call	800a994 <__ledf2>
 80043f0:	103d7e0e 	bge	r2,zero,80039ec <__alt_data_end+0xfc0039ec>
 80043f4:	002b883a 	mov	r21,zero
 80043f8:	0023883a 	mov	r17,zero
 80043fc:	003efb06 	br	8003fec <__alt_data_end+0xfc003fec>
 8004400:	d8800717 	ldw	r2,28(sp)
 8004404:	003bd006 	br	8003348 <__alt_data_end+0xfc003348>
 8004408:	d9000a17 	ldw	r4,40(sp)
 800440c:	d9800d17 	ldw	r6,52(sp)
 8004410:	dd400a15 	stw	r21,40(sp)
 8004414:	a905c83a 	sub	r2,r21,r4
 8004418:	308d883a 	add	r6,r6,r2
 800441c:	d9800d15 	stw	r6,52(sp)
 8004420:	002b883a 	mov	r21,zero
 8004424:	003e0606 	br	8003c40 <__alt_data_end+0xfc003c40>
 8004428:	9023883a 	mov	r17,r18
 800442c:	9829883a 	mov	r20,r19
 8004430:	04000084 	movi	r16,2
 8004434:	003c9206 	br	8003680 <__alt_data_end+0xfc003680>
 8004438:	04000044 	movi	r16,1
 800443c:	dc000c15 	stw	r16,48(sp)
 8004440:	dc000615 	stw	r16,24(sp)
 8004444:	dc002215 	stw	r16,136(sp)
 8004448:	e0001115 	stw	zero,68(fp)
 800444c:	000b883a 	mov	r5,zero
 8004450:	003c6906 	br	80035f8 <__alt_data_end+0xfc0035f8>
 8004454:	3021883a 	mov	r16,r6
 8004458:	003ffb06 	br	8004448 <__alt_data_end+0xfc004448>
 800445c:	1000021e 	bne	r2,zero,8004468 <_dtoa_r+0x11e0>
 8004460:	4200004c 	andi	r8,r8,1
 8004464:	403e7d1e 	bne	r8,zero,8003e5c <__alt_data_end+0xfc003e5c>
 8004468:	01000c04 	movi	r4,48
 800446c:	00000106 	br	8004474 <_dtoa_r+0x11ec>
 8004470:	102f883a 	mov	r23,r2
 8004474:	b8bfffc4 	addi	r2,r23,-1
 8004478:	10c00007 	ldb	r3,0(r2)
 800447c:	193ffc26 	beq	r3,r4,8004470 <__alt_data_end+0xfc004470>
 8004480:	003e8706 	br	8003ea0 <__alt_data_end+0xfc003ea0>
 8004484:	d8800517 	ldw	r2,20(sp)
 8004488:	00a3c83a 	sub	r17,zero,r2
 800448c:	8800a426 	beq	r17,zero,8004720 <_dtoa_r+0x1498>
 8004490:	888003cc 	andi	r2,r17,15
 8004494:	100490fa 	slli	r2,r2,3
 8004498:	00c20074 	movhi	r3,2049
 800449c:	18f8d204 	addi	r3,r3,-7352
 80044a0:	1885883a 	add	r2,r3,r2
 80044a4:	11800017 	ldw	r6,0(r2)
 80044a8:	11c00117 	ldw	r7,4(r2)
 80044ac:	9009883a 	mov	r4,r18
 80044b0:	980b883a 	mov	r5,r19
 80044b4:	8823d13a 	srai	r17,r17,4
 80044b8:	800aa880 	call	800aa88 <__muldf3>
 80044bc:	d8800f15 	stw	r2,60(sp)
 80044c0:	d8c01015 	stw	r3,64(sp)
 80044c4:	8800e826 	beq	r17,zero,8004868 <_dtoa_r+0x15e0>
 80044c8:	05020074 	movhi	r20,2049
 80044cc:	a538c804 	addi	r20,r20,-7392
 80044d0:	04000084 	movi	r16,2
 80044d4:	8980004c 	andi	r6,r17,1
 80044d8:	1009883a 	mov	r4,r2
 80044dc:	8823d07a 	srai	r17,r17,1
 80044e0:	180b883a 	mov	r5,r3
 80044e4:	30000426 	beq	r6,zero,80044f8 <_dtoa_r+0x1270>
 80044e8:	a1800017 	ldw	r6,0(r20)
 80044ec:	a1c00117 	ldw	r7,4(r20)
 80044f0:	84000044 	addi	r16,r16,1
 80044f4:	800aa880 	call	800aa88 <__muldf3>
 80044f8:	a5000204 	addi	r20,r20,8
 80044fc:	883ff51e 	bne	r17,zero,80044d4 <__alt_data_end+0xfc0044d4>
 8004500:	d8800f15 	stw	r2,60(sp)
 8004504:	d8c01015 	stw	r3,64(sp)
 8004508:	003c7606 	br	80036e4 <__alt_data_end+0xfc0036e4>
 800450c:	00c00c04 	movi	r3,48
 8004510:	10c00005 	stb	r3,0(r2)
 8004514:	d8c00517 	ldw	r3,20(sp)
 8004518:	bd3fffc3 	ldbu	r20,-1(r23)
 800451c:	18c00044 	addi	r3,r3,1
 8004520:	d8c00515 	stw	r3,20(sp)
 8004524:	003db906 	br	8003c0c <__alt_data_end+0xfc003c0c>
 8004528:	89400117 	ldw	r5,4(r17)
 800452c:	e009883a 	mov	r4,fp
 8004530:	80054240 	call	8005424 <_Balloc>
 8004534:	89800417 	ldw	r6,16(r17)
 8004538:	89400304 	addi	r5,r17,12
 800453c:	11000304 	addi	r4,r2,12
 8004540:	31800084 	addi	r6,r6,2
 8004544:	318d883a 	add	r6,r6,r6
 8004548:	318d883a 	add	r6,r6,r6
 800454c:	1027883a 	mov	r19,r2
 8004550:	80052dc0 	call	80052dc <memcpy>
 8004554:	01800044 	movi	r6,1
 8004558:	980b883a 	mov	r5,r19
 800455c:	e009883a 	mov	r4,fp
 8004560:	8005c600 	call	8005c60 <__lshift>
 8004564:	1029883a 	mov	r20,r2
 8004568:	003ecc06 	br	800409c <__alt_data_end+0xfc00409c>
 800456c:	00800e44 	movi	r2,57
 8004570:	90809026 	beq	r18,r2,80047b4 <_dtoa_r+0x152c>
 8004574:	92000044 	addi	r8,r18,1
 8004578:	003f1f06 	br	80041f8 <__alt_data_end+0xfc0041f8>
 800457c:	9011883a 	mov	r8,r18
 8004580:	8825883a 	mov	r18,r17
 8004584:	a023883a 	mov	r17,r20
 8004588:	003e2906 	br	8003e30 <__alt_data_end+0xfc003e30>
 800458c:	002b883a 	mov	r21,zero
 8004590:	0023883a 	mov	r17,zero
 8004594:	003f5406 	br	80042e8 <__alt_data_end+0xfc0042e8>
 8004598:	61bfffc4 	addi	r6,r12,-1
 800459c:	300490fa 	slli	r2,r6,3
 80045a0:	00c20074 	movhi	r3,2049
 80045a4:	18f8d204 	addi	r3,r3,-7352
 80045a8:	1885883a 	add	r2,r3,r2
 80045ac:	11000017 	ldw	r4,0(r2)
 80045b0:	11400117 	ldw	r5,4(r2)
 80045b4:	d8800717 	ldw	r2,28(sp)
 80045b8:	880f883a 	mov	r7,r17
 80045bc:	d9801215 	stw	r6,72(sp)
 80045c0:	800d883a 	mov	r6,r16
 80045c4:	db001615 	stw	r12,88(sp)
 80045c8:	15c00044 	addi	r23,r2,1
 80045cc:	800aa880 	call	800aa88 <__muldf3>
 80045d0:	d9401017 	ldw	r5,64(sp)
 80045d4:	d9000f17 	ldw	r4,60(sp)
 80045d8:	d8c01515 	stw	r3,84(sp)
 80045dc:	d8801415 	stw	r2,80(sp)
 80045e0:	800bbf00 	call	800bbf0 <__fixdfsi>
 80045e4:	1009883a 	mov	r4,r2
 80045e8:	1021883a 	mov	r16,r2
 80045ec:	800bc700 	call	800bc70 <__floatsidf>
 80045f0:	d9000f17 	ldw	r4,60(sp)
 80045f4:	d9401017 	ldw	r5,64(sp)
 80045f8:	100d883a 	mov	r6,r2
 80045fc:	180f883a 	mov	r7,r3
 8004600:	800b2f40 	call	800b2f4 <__subdf3>
 8004604:	1829883a 	mov	r20,r3
 8004608:	d8c00717 	ldw	r3,28(sp)
 800460c:	84000c04 	addi	r16,r16,48
 8004610:	1023883a 	mov	r17,r2
 8004614:	1c000005 	stb	r16,0(r3)
 8004618:	db001617 	ldw	r12,88(sp)
 800461c:	00800044 	movi	r2,1
 8004620:	60802226 	beq	r12,r2,80046ac <_dtoa_r+0x1424>
 8004624:	d9c00717 	ldw	r7,28(sp)
 8004628:	8805883a 	mov	r2,r17
 800462c:	b82b883a 	mov	r21,r23
 8004630:	3b19883a 	add	r12,r7,r12
 8004634:	6023883a 	mov	r17,r12
 8004638:	a007883a 	mov	r3,r20
 800463c:	dc800f15 	stw	r18,60(sp)
 8004640:	000d883a 	mov	r6,zero
 8004644:	01d00934 	movhi	r7,16420
 8004648:	1009883a 	mov	r4,r2
 800464c:	180b883a 	mov	r5,r3
 8004650:	800aa880 	call	800aa88 <__muldf3>
 8004654:	180b883a 	mov	r5,r3
 8004658:	1009883a 	mov	r4,r2
 800465c:	1829883a 	mov	r20,r3
 8004660:	1025883a 	mov	r18,r2
 8004664:	800bbf00 	call	800bbf0 <__fixdfsi>
 8004668:	1009883a 	mov	r4,r2
 800466c:	1021883a 	mov	r16,r2
 8004670:	800bc700 	call	800bc70 <__floatsidf>
 8004674:	100d883a 	mov	r6,r2
 8004678:	180f883a 	mov	r7,r3
 800467c:	9009883a 	mov	r4,r18
 8004680:	a00b883a 	mov	r5,r20
 8004684:	84000c04 	addi	r16,r16,48
 8004688:	800b2f40 	call	800b2f4 <__subdf3>
 800468c:	ad400044 	addi	r21,r21,1
 8004690:	ac3fffc5 	stb	r16,-1(r21)
 8004694:	ac7fea1e 	bne	r21,r17,8004640 <__alt_data_end+0xfc004640>
 8004698:	1023883a 	mov	r17,r2
 800469c:	d8801217 	ldw	r2,72(sp)
 80046a0:	dc800f17 	ldw	r18,60(sp)
 80046a4:	1829883a 	mov	r20,r3
 80046a8:	b8af883a 	add	r23,r23,r2
 80046ac:	d9001417 	ldw	r4,80(sp)
 80046b0:	d9401517 	ldw	r5,84(sp)
 80046b4:	000d883a 	mov	r6,zero
 80046b8:	01cff834 	movhi	r7,16352
 80046bc:	80095b40 	call	80095b4 <__adddf3>
 80046c0:	880d883a 	mov	r6,r17
 80046c4:	a00f883a 	mov	r7,r20
 80046c8:	1009883a 	mov	r4,r2
 80046cc:	180b883a 	mov	r5,r3
 80046d0:	800a9940 	call	800a994 <__ledf2>
 80046d4:	10003e0e 	bge	r2,zero,80047d0 <_dtoa_r+0x1548>
 80046d8:	d9001317 	ldw	r4,76(sp)
 80046dc:	bd3fffc3 	ldbu	r20,-1(r23)
 80046e0:	d9000515 	stw	r4,20(sp)
 80046e4:	003d3b06 	br	8003bd4 <__alt_data_end+0xfc003bd4>
 80046e8:	0027883a 	mov	r19,zero
 80046ec:	003f1b06 	br	800435c <__alt_data_end+0xfc00435c>
 80046f0:	d8800817 	ldw	r2,32(sp)
 80046f4:	11e9c83a 	sub	r20,r2,r7
 80046f8:	0005883a 	mov	r2,zero
 80046fc:	003d5406 	br	8003c50 <__alt_data_end+0xfc003c50>
 8004700:	00800044 	movi	r2,1
 8004704:	003dc706 	br	8003e24 <__alt_data_end+0xfc003e24>
 8004708:	d8c00217 	ldw	r3,8(sp)
 800470c:	00800d84 	movi	r2,54
 8004710:	dd400a17 	ldw	r21,40(sp)
 8004714:	10c5c83a 	sub	r2,r2,r3
 8004718:	dd000817 	ldw	r20,32(sp)
 800471c:	003d4c06 	br	8003c50 <__alt_data_end+0xfc003c50>
 8004720:	dc800f15 	stw	r18,60(sp)
 8004724:	dcc01015 	stw	r19,64(sp)
 8004728:	04000084 	movi	r16,2
 800472c:	003bed06 	br	80036e4 <__alt_data_end+0xfc0036e4>
 8004730:	d9000617 	ldw	r4,24(sp)
 8004734:	203f0d26 	beq	r4,zero,800436c <__alt_data_end+0xfc00436c>
 8004738:	d9800c17 	ldw	r6,48(sp)
 800473c:	01bcab0e 	bge	zero,r6,80039ec <__alt_data_end+0xfc0039ec>
 8004740:	d9401017 	ldw	r5,64(sp)
 8004744:	d9000f17 	ldw	r4,60(sp)
 8004748:	000d883a 	mov	r6,zero
 800474c:	01d00934 	movhi	r7,16420
 8004750:	800aa880 	call	800aa88 <__muldf3>
 8004754:	81000044 	addi	r4,r16,1
 8004758:	d8800f15 	stw	r2,60(sp)
 800475c:	d8c01015 	stw	r3,64(sp)
 8004760:	800bc700 	call	800bc70 <__floatsidf>
 8004764:	d9800f17 	ldw	r6,60(sp)
 8004768:	d9c01017 	ldw	r7,64(sp)
 800476c:	1009883a 	mov	r4,r2
 8004770:	180b883a 	mov	r5,r3
 8004774:	800aa880 	call	800aa88 <__muldf3>
 8004778:	01d00734 	movhi	r7,16412
 800477c:	000d883a 	mov	r6,zero
 8004780:	1009883a 	mov	r4,r2
 8004784:	180b883a 	mov	r5,r3
 8004788:	80095b40 	call	80095b4 <__adddf3>
 800478c:	d9c00517 	ldw	r7,20(sp)
 8004790:	047f3034 	movhi	r17,64704
 8004794:	1021883a 	mov	r16,r2
 8004798:	39ffffc4 	addi	r7,r7,-1
 800479c:	d9c01315 	stw	r7,76(sp)
 80047a0:	1c63883a 	add	r17,r3,r17
 80047a4:	db000c17 	ldw	r12,48(sp)
 80047a8:	003bea06 	br	8003754 <__alt_data_end+0xfc003754>
 80047ac:	dc000915 	stw	r16,36(sp)
 80047b0:	003e0e06 	br	8003fec <__alt_data_end+0xfc003fec>
 80047b4:	01000e44 	movi	r4,57
 80047b8:	8825883a 	mov	r18,r17
 80047bc:	9dc00044 	addi	r23,r19,1
 80047c0:	99000005 	stb	r4,0(r19)
 80047c4:	a023883a 	mov	r17,r20
 80047c8:	dc000915 	stw	r16,36(sp)
 80047cc:	003da406 	br	8003e60 <__alt_data_end+0xfc003e60>
 80047d0:	d9801417 	ldw	r6,80(sp)
 80047d4:	d9c01517 	ldw	r7,84(sp)
 80047d8:	0009883a 	mov	r4,zero
 80047dc:	014ff834 	movhi	r5,16352
 80047e0:	800b2f40 	call	800b2f4 <__subdf3>
 80047e4:	880d883a 	mov	r6,r17
 80047e8:	a00f883a 	mov	r7,r20
 80047ec:	1009883a 	mov	r4,r2
 80047f0:	180b883a 	mov	r5,r3
 80047f4:	800a8b80 	call	800a8b8 <__gedf2>
 80047f8:	00bc7c0e 	bge	zero,r2,80039ec <__alt_data_end+0xfc0039ec>
 80047fc:	01000c04 	movi	r4,48
 8004800:	00000106 	br	8004808 <_dtoa_r+0x1580>
 8004804:	102f883a 	mov	r23,r2
 8004808:	b8bfffc4 	addi	r2,r23,-1
 800480c:	10c00007 	ldb	r3,0(r2)
 8004810:	193ffc26 	beq	r3,r4,8004804 <__alt_data_end+0xfc004804>
 8004814:	d9801317 	ldw	r6,76(sp)
 8004818:	d9800515 	stw	r6,20(sp)
 800481c:	003c4406 	br	8003930 <__alt_data_end+0xfc003930>
 8004820:	d9801317 	ldw	r6,76(sp)
 8004824:	d9800515 	stw	r6,20(sp)
 8004828:	003cea06 	br	8003bd4 <__alt_data_end+0xfc003bd4>
 800482c:	dd800f17 	ldw	r22,60(sp)
 8004830:	dcc01017 	ldw	r19,64(sp)
 8004834:	dc801217 	ldw	r18,72(sp)
 8004838:	003c6c06 	br	80039ec <__alt_data_end+0xfc0039ec>
 800483c:	903e031e 	bne	r18,zero,800404c <__alt_data_end+0xfc00404c>
 8004840:	003ebb06 	br	8004330 <__alt_data_end+0xfc004330>
 8004844:	103e6c1e 	bne	r2,zero,80041f8 <__alt_data_end+0xfc0041f8>
 8004848:	4080004c 	andi	r2,r8,1
 800484c:	103e6a26 	beq	r2,zero,80041f8 <__alt_data_end+0xfc0041f8>
 8004850:	003e6606 	br	80041ec <__alt_data_end+0xfc0041ec>
 8004854:	d8c00317 	ldw	r3,12(sp)
 8004858:	00800084 	movi	r2,2
 800485c:	10c02916 	blt	r2,r3,8004904 <_dtoa_r+0x167c>
 8004860:	d9000c17 	ldw	r4,48(sp)
 8004864:	003e8806 	br	8004288 <__alt_data_end+0xfc004288>
 8004868:	04000084 	movi	r16,2
 800486c:	003b9d06 	br	80036e4 <__alt_data_end+0xfc0036e4>
 8004870:	d9001317 	ldw	r4,76(sp)
 8004874:	d9000515 	stw	r4,20(sp)
 8004878:	003cd606 	br	8003bd4 <__alt_data_end+0xfc003bd4>
 800487c:	d8801317 	ldw	r2,76(sp)
 8004880:	d8800515 	stw	r2,20(sp)
 8004884:	003c2a06 	br	8003930 <__alt_data_end+0xfc003930>
 8004888:	d9800317 	ldw	r6,12(sp)
 800488c:	00800084 	movi	r2,2
 8004890:	11801516 	blt	r2,r6,80048e8 <_dtoa_r+0x1660>
 8004894:	d9c00c17 	ldw	r7,48(sp)
 8004898:	d9c00615 	stw	r7,24(sp)
 800489c:	003df706 	br	800407c <__alt_data_end+0xfc00407c>
 80048a0:	193d3926 	beq	r3,r4,8003d88 <__alt_data_end+0xfc003d88>
 80048a4:	00c00f04 	movi	r3,60
 80048a8:	1885c83a 	sub	r2,r3,r2
 80048ac:	003ddf06 	br	800402c <__alt_data_end+0xfc00402c>
 80048b0:	e009883a 	mov	r4,fp
 80048b4:	e0001115 	stw	zero,68(fp)
 80048b8:	000b883a 	mov	r5,zero
 80048bc:	80054240 	call	8005424 <_Balloc>
 80048c0:	d8800715 	stw	r2,28(sp)
 80048c4:	d8c00717 	ldw	r3,28(sp)
 80048c8:	00bfffc4 	movi	r2,-1
 80048cc:	01000044 	movi	r4,1
 80048d0:	d8800c15 	stw	r2,48(sp)
 80048d4:	e0c01015 	stw	r3,64(fp)
 80048d8:	d9000b15 	stw	r4,44(sp)
 80048dc:	d8800615 	stw	r2,24(sp)
 80048e0:	d8002215 	stw	zero,136(sp)
 80048e4:	003c4106 	br	80039ec <__alt_data_end+0xfc0039ec>
 80048e8:	d8c00c17 	ldw	r3,48(sp)
 80048ec:	d8c00615 	stw	r3,24(sp)
 80048f0:	003e7006 	br	80042b4 <__alt_data_end+0xfc0042b4>
 80048f4:	04400044 	movi	r17,1
 80048f8:	003b2006 	br	800357c <__alt_data_end+0xfc00357c>
 80048fc:	000b883a 	mov	r5,zero
 8004900:	003b3d06 	br	80035f8 <__alt_data_end+0xfc0035f8>
 8004904:	d8800c17 	ldw	r2,48(sp)
 8004908:	d8800615 	stw	r2,24(sp)
 800490c:	003e6906 	br	80042b4 <__alt_data_end+0xfc0042b4>

08004910 <_setlocale_r>:
 8004910:	30001b26 	beq	r6,zero,8004980 <_setlocale_r+0x70>
 8004914:	01420074 	movhi	r5,2049
 8004918:	defffe04 	addi	sp,sp,-8
 800491c:	2978b804 	addi	r5,r5,-7456
 8004920:	3009883a 	mov	r4,r6
 8004924:	dc000015 	stw	r16,0(sp)
 8004928:	dfc00115 	stw	ra,4(sp)
 800492c:	3021883a 	mov	r16,r6
 8004930:	80065a40 	call	80065a4 <strcmp>
 8004934:	1000061e 	bne	r2,zero,8004950 <_setlocale_r+0x40>
 8004938:	00820074 	movhi	r2,2049
 800493c:	10b8b704 	addi	r2,r2,-7460
 8004940:	dfc00117 	ldw	ra,4(sp)
 8004944:	dc000017 	ldw	r16,0(sp)
 8004948:	dec00204 	addi	sp,sp,8
 800494c:	f800283a 	ret
 8004950:	01420074 	movhi	r5,2049
 8004954:	2978b704 	addi	r5,r5,-7460
 8004958:	8009883a 	mov	r4,r16
 800495c:	80065a40 	call	80065a4 <strcmp>
 8004960:	103ff526 	beq	r2,zero,8004938 <__alt_data_end+0xfc004938>
 8004964:	01420074 	movhi	r5,2049
 8004968:	2978a204 	addi	r5,r5,-7544
 800496c:	8009883a 	mov	r4,r16
 8004970:	80065a40 	call	80065a4 <strcmp>
 8004974:	103ff026 	beq	r2,zero,8004938 <__alt_data_end+0xfc004938>
 8004978:	0005883a 	mov	r2,zero
 800497c:	003ff006 	br	8004940 <__alt_data_end+0xfc004940>
 8004980:	00820074 	movhi	r2,2049
 8004984:	10b8b704 	addi	r2,r2,-7460
 8004988:	f800283a 	ret

0800498c <__locale_charset>:
 800498c:	00820074 	movhi	r2,2049
 8004990:	10bb7c04 	addi	r2,r2,-4624
 8004994:	f800283a 	ret

08004998 <__locale_mb_cur_max>:
 8004998:	00820074 	movhi	r2,2049
 800499c:	10811b04 	addi	r2,r2,1132
 80049a0:	10800017 	ldw	r2,0(r2)
 80049a4:	f800283a 	ret

080049a8 <__locale_msgcharset>:
 80049a8:	00820074 	movhi	r2,2049
 80049ac:	10bb7404 	addi	r2,r2,-4656
 80049b0:	f800283a 	ret

080049b4 <__locale_cjk_lang>:
 80049b4:	0005883a 	mov	r2,zero
 80049b8:	f800283a 	ret

080049bc <_localeconv_r>:
 80049bc:	00820074 	movhi	r2,2049
 80049c0:	10bb8404 	addi	r2,r2,-4592
 80049c4:	f800283a 	ret

080049c8 <setlocale>:
 80049c8:	00820074 	movhi	r2,2049
 80049cc:	10811a04 	addi	r2,r2,1128
 80049d0:	280d883a 	mov	r6,r5
 80049d4:	200b883a 	mov	r5,r4
 80049d8:	11000017 	ldw	r4,0(r2)
 80049dc:	80049101 	jmpi	8004910 <_setlocale_r>

080049e0 <localeconv>:
 80049e0:	00820074 	movhi	r2,2049
 80049e4:	10bb8404 	addi	r2,r2,-4592
 80049e8:	f800283a 	ret

080049ec <_malloc_r>:
 80049ec:	defff504 	addi	sp,sp,-44
 80049f0:	dc800315 	stw	r18,12(sp)
 80049f4:	dfc00a15 	stw	ra,40(sp)
 80049f8:	df000915 	stw	fp,36(sp)
 80049fc:	ddc00815 	stw	r23,32(sp)
 8004a00:	dd800715 	stw	r22,28(sp)
 8004a04:	dd400615 	stw	r21,24(sp)
 8004a08:	dd000515 	stw	r20,20(sp)
 8004a0c:	dcc00415 	stw	r19,16(sp)
 8004a10:	dc400215 	stw	r17,8(sp)
 8004a14:	dc000115 	stw	r16,4(sp)
 8004a18:	288002c4 	addi	r2,r5,11
 8004a1c:	00c00584 	movi	r3,22
 8004a20:	2025883a 	mov	r18,r4
 8004a24:	18807f2e 	bgeu	r3,r2,8004c24 <_malloc_r+0x238>
 8004a28:	047ffe04 	movi	r17,-8
 8004a2c:	1462703a 	and	r17,r2,r17
 8004a30:	8800a316 	blt	r17,zero,8004cc0 <_malloc_r+0x2d4>
 8004a34:	8940a236 	bltu	r17,r5,8004cc0 <_malloc_r+0x2d4>
 8004a38:	800bfc00 	call	800bfc0 <__malloc_lock>
 8004a3c:	00807dc4 	movi	r2,503
 8004a40:	1441e92e 	bgeu	r2,r17,80051e8 <_malloc_r+0x7fc>
 8004a44:	8804d27a 	srli	r2,r17,9
 8004a48:	1000a126 	beq	r2,zero,8004cd0 <_malloc_r+0x2e4>
 8004a4c:	00c00104 	movi	r3,4
 8004a50:	18811e36 	bltu	r3,r2,8004ecc <_malloc_r+0x4e0>
 8004a54:	8804d1ba 	srli	r2,r17,6
 8004a58:	12000e44 	addi	r8,r2,57
 8004a5c:	11c00e04 	addi	r7,r2,56
 8004a60:	4209883a 	add	r4,r8,r8
 8004a64:	04c20074 	movhi	r19,2049
 8004a68:	2109883a 	add	r4,r4,r4
 8004a6c:	9cfb9204 	addi	r19,r19,-4536
 8004a70:	2109883a 	add	r4,r4,r4
 8004a74:	9909883a 	add	r4,r19,r4
 8004a78:	24000117 	ldw	r16,4(r4)
 8004a7c:	213ffe04 	addi	r4,r4,-8
 8004a80:	24009726 	beq	r4,r16,8004ce0 <_malloc_r+0x2f4>
 8004a84:	80800117 	ldw	r2,4(r16)
 8004a88:	01bfff04 	movi	r6,-4
 8004a8c:	014003c4 	movi	r5,15
 8004a90:	1184703a 	and	r2,r2,r6
 8004a94:	1447c83a 	sub	r3,r2,r17
 8004a98:	28c00716 	blt	r5,r3,8004ab8 <_malloc_r+0xcc>
 8004a9c:	1800920e 	bge	r3,zero,8004ce8 <_malloc_r+0x2fc>
 8004aa0:	84000317 	ldw	r16,12(r16)
 8004aa4:	24008e26 	beq	r4,r16,8004ce0 <_malloc_r+0x2f4>
 8004aa8:	80800117 	ldw	r2,4(r16)
 8004aac:	1184703a 	and	r2,r2,r6
 8004ab0:	1447c83a 	sub	r3,r2,r17
 8004ab4:	28fff90e 	bge	r5,r3,8004a9c <__alt_data_end+0xfc004a9c>
 8004ab8:	3809883a 	mov	r4,r7
 8004abc:	01820074 	movhi	r6,2049
 8004ac0:	9c000417 	ldw	r16,16(r19)
 8004ac4:	31bb9204 	addi	r6,r6,-4536
 8004ac8:	32000204 	addi	r8,r6,8
 8004acc:	82013426 	beq	r16,r8,8004fa0 <_malloc_r+0x5b4>
 8004ad0:	80c00117 	ldw	r3,4(r16)
 8004ad4:	00bfff04 	movi	r2,-4
 8004ad8:	188e703a 	and	r7,r3,r2
 8004adc:	3c45c83a 	sub	r2,r7,r17
 8004ae0:	00c003c4 	movi	r3,15
 8004ae4:	18811f16 	blt	r3,r2,8004f64 <_malloc_r+0x578>
 8004ae8:	32000515 	stw	r8,20(r6)
 8004aec:	32000415 	stw	r8,16(r6)
 8004af0:	10007f0e 	bge	r2,zero,8004cf0 <_malloc_r+0x304>
 8004af4:	00807fc4 	movi	r2,511
 8004af8:	11c0fd36 	bltu	r2,r7,8004ef0 <_malloc_r+0x504>
 8004afc:	3806d0fa 	srli	r3,r7,3
 8004b00:	01c00044 	movi	r7,1
 8004b04:	30800117 	ldw	r2,4(r6)
 8004b08:	19400044 	addi	r5,r3,1
 8004b0c:	294b883a 	add	r5,r5,r5
 8004b10:	1807d0ba 	srai	r3,r3,2
 8004b14:	294b883a 	add	r5,r5,r5
 8004b18:	294b883a 	add	r5,r5,r5
 8004b1c:	298b883a 	add	r5,r5,r6
 8004b20:	38c6983a 	sll	r3,r7,r3
 8004b24:	29c00017 	ldw	r7,0(r5)
 8004b28:	2a7ffe04 	addi	r9,r5,-8
 8004b2c:	1886b03a 	or	r3,r3,r2
 8004b30:	82400315 	stw	r9,12(r16)
 8004b34:	81c00215 	stw	r7,8(r16)
 8004b38:	30c00115 	stw	r3,4(r6)
 8004b3c:	2c000015 	stw	r16,0(r5)
 8004b40:	3c000315 	stw	r16,12(r7)
 8004b44:	2005d0ba 	srai	r2,r4,2
 8004b48:	01400044 	movi	r5,1
 8004b4c:	288a983a 	sll	r5,r5,r2
 8004b50:	19406f36 	bltu	r3,r5,8004d10 <_malloc_r+0x324>
 8004b54:	28c4703a 	and	r2,r5,r3
 8004b58:	10000a1e 	bne	r2,zero,8004b84 <_malloc_r+0x198>
 8004b5c:	00bfff04 	movi	r2,-4
 8004b60:	294b883a 	add	r5,r5,r5
 8004b64:	2088703a 	and	r4,r4,r2
 8004b68:	28c4703a 	and	r2,r5,r3
 8004b6c:	21000104 	addi	r4,r4,4
 8004b70:	1000041e 	bne	r2,zero,8004b84 <_malloc_r+0x198>
 8004b74:	294b883a 	add	r5,r5,r5
 8004b78:	28c4703a 	and	r2,r5,r3
 8004b7c:	21000104 	addi	r4,r4,4
 8004b80:	103ffc26 	beq	r2,zero,8004b74 <__alt_data_end+0xfc004b74>
 8004b84:	02bfff04 	movi	r10,-4
 8004b88:	024003c4 	movi	r9,15
 8004b8c:	21800044 	addi	r6,r4,1
 8004b90:	318d883a 	add	r6,r6,r6
 8004b94:	318d883a 	add	r6,r6,r6
 8004b98:	318d883a 	add	r6,r6,r6
 8004b9c:	998d883a 	add	r6,r19,r6
 8004ba0:	333ffe04 	addi	r12,r6,-8
 8004ba4:	2017883a 	mov	r11,r4
 8004ba8:	31800104 	addi	r6,r6,4
 8004bac:	34000017 	ldw	r16,0(r6)
 8004bb0:	31fffd04 	addi	r7,r6,-12
 8004bb4:	81c0041e 	bne	r16,r7,8004bc8 <_malloc_r+0x1dc>
 8004bb8:	0000fb06 	br	8004fa8 <_malloc_r+0x5bc>
 8004bbc:	1801030e 	bge	r3,zero,8004fcc <_malloc_r+0x5e0>
 8004bc0:	84000317 	ldw	r16,12(r16)
 8004bc4:	81c0f826 	beq	r16,r7,8004fa8 <_malloc_r+0x5bc>
 8004bc8:	80800117 	ldw	r2,4(r16)
 8004bcc:	1284703a 	and	r2,r2,r10
 8004bd0:	1447c83a 	sub	r3,r2,r17
 8004bd4:	48fff90e 	bge	r9,r3,8004bbc <__alt_data_end+0xfc004bbc>
 8004bd8:	80800317 	ldw	r2,12(r16)
 8004bdc:	81000217 	ldw	r4,8(r16)
 8004be0:	89400054 	ori	r5,r17,1
 8004be4:	81400115 	stw	r5,4(r16)
 8004be8:	20800315 	stw	r2,12(r4)
 8004bec:	11000215 	stw	r4,8(r2)
 8004bf0:	8463883a 	add	r17,r16,r17
 8004bf4:	9c400515 	stw	r17,20(r19)
 8004bf8:	9c400415 	stw	r17,16(r19)
 8004bfc:	18800054 	ori	r2,r3,1
 8004c00:	88800115 	stw	r2,4(r17)
 8004c04:	8a000315 	stw	r8,12(r17)
 8004c08:	8a000215 	stw	r8,8(r17)
 8004c0c:	88e3883a 	add	r17,r17,r3
 8004c10:	88c00015 	stw	r3,0(r17)
 8004c14:	9009883a 	mov	r4,r18
 8004c18:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8004c1c:	80800204 	addi	r2,r16,8
 8004c20:	00001b06 	br	8004c90 <_malloc_r+0x2a4>
 8004c24:	04400404 	movi	r17,16
 8004c28:	89402536 	bltu	r17,r5,8004cc0 <_malloc_r+0x2d4>
 8004c2c:	800bfc00 	call	800bfc0 <__malloc_lock>
 8004c30:	00800184 	movi	r2,6
 8004c34:	01000084 	movi	r4,2
 8004c38:	04c20074 	movhi	r19,2049
 8004c3c:	1085883a 	add	r2,r2,r2
 8004c40:	9cfb9204 	addi	r19,r19,-4536
 8004c44:	1085883a 	add	r2,r2,r2
 8004c48:	9885883a 	add	r2,r19,r2
 8004c4c:	14000117 	ldw	r16,4(r2)
 8004c50:	10fffe04 	addi	r3,r2,-8
 8004c54:	80c0d926 	beq	r16,r3,8004fbc <_malloc_r+0x5d0>
 8004c58:	80c00117 	ldw	r3,4(r16)
 8004c5c:	81000317 	ldw	r4,12(r16)
 8004c60:	00bfff04 	movi	r2,-4
 8004c64:	1884703a 	and	r2,r3,r2
 8004c68:	81400217 	ldw	r5,8(r16)
 8004c6c:	8085883a 	add	r2,r16,r2
 8004c70:	10c00117 	ldw	r3,4(r2)
 8004c74:	29000315 	stw	r4,12(r5)
 8004c78:	21400215 	stw	r5,8(r4)
 8004c7c:	18c00054 	ori	r3,r3,1
 8004c80:	10c00115 	stw	r3,4(r2)
 8004c84:	9009883a 	mov	r4,r18
 8004c88:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8004c8c:	80800204 	addi	r2,r16,8
 8004c90:	dfc00a17 	ldw	ra,40(sp)
 8004c94:	df000917 	ldw	fp,36(sp)
 8004c98:	ddc00817 	ldw	r23,32(sp)
 8004c9c:	dd800717 	ldw	r22,28(sp)
 8004ca0:	dd400617 	ldw	r21,24(sp)
 8004ca4:	dd000517 	ldw	r20,20(sp)
 8004ca8:	dcc00417 	ldw	r19,16(sp)
 8004cac:	dc800317 	ldw	r18,12(sp)
 8004cb0:	dc400217 	ldw	r17,8(sp)
 8004cb4:	dc000117 	ldw	r16,4(sp)
 8004cb8:	dec00b04 	addi	sp,sp,44
 8004cbc:	f800283a 	ret
 8004cc0:	00800304 	movi	r2,12
 8004cc4:	90800015 	stw	r2,0(r18)
 8004cc8:	0005883a 	mov	r2,zero
 8004ccc:	003ff006 	br	8004c90 <__alt_data_end+0xfc004c90>
 8004cd0:	01002004 	movi	r4,128
 8004cd4:	02001004 	movi	r8,64
 8004cd8:	01c00fc4 	movi	r7,63
 8004cdc:	003f6106 	br	8004a64 <__alt_data_end+0xfc004a64>
 8004ce0:	4009883a 	mov	r4,r8
 8004ce4:	003f7506 	br	8004abc <__alt_data_end+0xfc004abc>
 8004ce8:	81000317 	ldw	r4,12(r16)
 8004cec:	003fde06 	br	8004c68 <__alt_data_end+0xfc004c68>
 8004cf0:	81c5883a 	add	r2,r16,r7
 8004cf4:	11400117 	ldw	r5,4(r2)
 8004cf8:	9009883a 	mov	r4,r18
 8004cfc:	29400054 	ori	r5,r5,1
 8004d00:	11400115 	stw	r5,4(r2)
 8004d04:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8004d08:	80800204 	addi	r2,r16,8
 8004d0c:	003fe006 	br	8004c90 <__alt_data_end+0xfc004c90>
 8004d10:	9c000217 	ldw	r16,8(r19)
 8004d14:	00bfff04 	movi	r2,-4
 8004d18:	85800117 	ldw	r22,4(r16)
 8004d1c:	b0ac703a 	and	r22,r22,r2
 8004d20:	b4400336 	bltu	r22,r17,8004d30 <_malloc_r+0x344>
 8004d24:	b445c83a 	sub	r2,r22,r17
 8004d28:	00c003c4 	movi	r3,15
 8004d2c:	18805d16 	blt	r3,r2,8004ea4 <_malloc_r+0x4b8>
 8004d30:	05c20074 	movhi	r23,2049
 8004d34:	00820074 	movhi	r2,2049
 8004d38:	1088fe04 	addi	r2,r2,9208
 8004d3c:	bdc11c04 	addi	r23,r23,1136
 8004d40:	15400017 	ldw	r21,0(r2)
 8004d44:	b8c00017 	ldw	r3,0(r23)
 8004d48:	00bfffc4 	movi	r2,-1
 8004d4c:	858d883a 	add	r6,r16,r22
 8004d50:	8d6b883a 	add	r21,r17,r21
 8004d54:	1880ea26 	beq	r3,r2,8005100 <_malloc_r+0x714>
 8004d58:	ad4403c4 	addi	r21,r21,4111
 8004d5c:	00bc0004 	movi	r2,-4096
 8004d60:	a8aa703a 	and	r21,r21,r2
 8004d64:	a80b883a 	mov	r5,r21
 8004d68:	9009883a 	mov	r4,r18
 8004d6c:	d9800015 	stw	r6,0(sp)
 8004d70:	80065500 	call	8006550 <_sbrk_r>
 8004d74:	1029883a 	mov	r20,r2
 8004d78:	00bfffc4 	movi	r2,-1
 8004d7c:	d9800017 	ldw	r6,0(sp)
 8004d80:	a080e826 	beq	r20,r2,8005124 <_malloc_r+0x738>
 8004d84:	a180a636 	bltu	r20,r6,8005020 <_malloc_r+0x634>
 8004d88:	07020074 	movhi	fp,2049
 8004d8c:	e7090704 	addi	fp,fp,9244
 8004d90:	e0800017 	ldw	r2,0(fp)
 8004d94:	a887883a 	add	r3,r21,r2
 8004d98:	e0c00015 	stw	r3,0(fp)
 8004d9c:	3500e626 	beq	r6,r20,8005138 <_malloc_r+0x74c>
 8004da0:	b9000017 	ldw	r4,0(r23)
 8004da4:	00bfffc4 	movi	r2,-1
 8004da8:	2080ee26 	beq	r4,r2,8005164 <_malloc_r+0x778>
 8004dac:	a185c83a 	sub	r2,r20,r6
 8004db0:	10c5883a 	add	r2,r2,r3
 8004db4:	e0800015 	stw	r2,0(fp)
 8004db8:	a0c001cc 	andi	r3,r20,7
 8004dbc:	1800bc26 	beq	r3,zero,80050b0 <_malloc_r+0x6c4>
 8004dc0:	a0e9c83a 	sub	r20,r20,r3
 8004dc4:	00840204 	movi	r2,4104
 8004dc8:	a5000204 	addi	r20,r20,8
 8004dcc:	10c7c83a 	sub	r3,r2,r3
 8004dd0:	a545883a 	add	r2,r20,r21
 8004dd4:	1083ffcc 	andi	r2,r2,4095
 8004dd8:	18abc83a 	sub	r21,r3,r2
 8004ddc:	a80b883a 	mov	r5,r21
 8004de0:	9009883a 	mov	r4,r18
 8004de4:	80065500 	call	8006550 <_sbrk_r>
 8004de8:	00ffffc4 	movi	r3,-1
 8004dec:	10c0e126 	beq	r2,r3,8005174 <_malloc_r+0x788>
 8004df0:	1505c83a 	sub	r2,r2,r20
 8004df4:	1545883a 	add	r2,r2,r21
 8004df8:	10800054 	ori	r2,r2,1
 8004dfc:	e0c00017 	ldw	r3,0(fp)
 8004e00:	9d000215 	stw	r20,8(r19)
 8004e04:	a0800115 	stw	r2,4(r20)
 8004e08:	a8c7883a 	add	r3,r21,r3
 8004e0c:	e0c00015 	stw	r3,0(fp)
 8004e10:	84c00e26 	beq	r16,r19,8004e4c <_malloc_r+0x460>
 8004e14:	018003c4 	movi	r6,15
 8004e18:	3580a72e 	bgeu	r6,r22,80050b8 <_malloc_r+0x6cc>
 8004e1c:	81400117 	ldw	r5,4(r16)
 8004e20:	013ffe04 	movi	r4,-8
 8004e24:	b0bffd04 	addi	r2,r22,-12
 8004e28:	1104703a 	and	r2,r2,r4
 8004e2c:	2900004c 	andi	r4,r5,1
 8004e30:	2088b03a 	or	r4,r4,r2
 8004e34:	81000115 	stw	r4,4(r16)
 8004e38:	01400144 	movi	r5,5
 8004e3c:	8089883a 	add	r4,r16,r2
 8004e40:	21400115 	stw	r5,4(r4)
 8004e44:	21400215 	stw	r5,8(r4)
 8004e48:	3080cd36 	bltu	r6,r2,8005180 <_malloc_r+0x794>
 8004e4c:	00820074 	movhi	r2,2049
 8004e50:	1088fd04 	addi	r2,r2,9204
 8004e54:	11000017 	ldw	r4,0(r2)
 8004e58:	20c0012e 	bgeu	r4,r3,8004e60 <_malloc_r+0x474>
 8004e5c:	10c00015 	stw	r3,0(r2)
 8004e60:	00820074 	movhi	r2,2049
 8004e64:	1088fc04 	addi	r2,r2,9200
 8004e68:	11000017 	ldw	r4,0(r2)
 8004e6c:	9c000217 	ldw	r16,8(r19)
 8004e70:	20c0012e 	bgeu	r4,r3,8004e78 <_malloc_r+0x48c>
 8004e74:	10c00015 	stw	r3,0(r2)
 8004e78:	80c00117 	ldw	r3,4(r16)
 8004e7c:	00bfff04 	movi	r2,-4
 8004e80:	1886703a 	and	r3,r3,r2
 8004e84:	1c45c83a 	sub	r2,r3,r17
 8004e88:	1c400236 	bltu	r3,r17,8004e94 <_malloc_r+0x4a8>
 8004e8c:	00c003c4 	movi	r3,15
 8004e90:	18800416 	blt	r3,r2,8004ea4 <_malloc_r+0x4b8>
 8004e94:	9009883a 	mov	r4,r18
 8004e98:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8004e9c:	0005883a 	mov	r2,zero
 8004ea0:	003f7b06 	br	8004c90 <__alt_data_end+0xfc004c90>
 8004ea4:	88c00054 	ori	r3,r17,1
 8004ea8:	80c00115 	stw	r3,4(r16)
 8004eac:	8463883a 	add	r17,r16,r17
 8004eb0:	10800054 	ori	r2,r2,1
 8004eb4:	9c400215 	stw	r17,8(r19)
 8004eb8:	88800115 	stw	r2,4(r17)
 8004ebc:	9009883a 	mov	r4,r18
 8004ec0:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8004ec4:	80800204 	addi	r2,r16,8
 8004ec8:	003f7106 	br	8004c90 <__alt_data_end+0xfc004c90>
 8004ecc:	00c00504 	movi	r3,20
 8004ed0:	18804a2e 	bgeu	r3,r2,8004ffc <_malloc_r+0x610>
 8004ed4:	00c01504 	movi	r3,84
 8004ed8:	18806e36 	bltu	r3,r2,8005094 <_malloc_r+0x6a8>
 8004edc:	8804d33a 	srli	r2,r17,12
 8004ee0:	12001bc4 	addi	r8,r2,111
 8004ee4:	11c01b84 	addi	r7,r2,110
 8004ee8:	4209883a 	add	r4,r8,r8
 8004eec:	003edd06 	br	8004a64 <__alt_data_end+0xfc004a64>
 8004ef0:	3804d27a 	srli	r2,r7,9
 8004ef4:	00c00104 	movi	r3,4
 8004ef8:	1880442e 	bgeu	r3,r2,800500c <_malloc_r+0x620>
 8004efc:	00c00504 	movi	r3,20
 8004f00:	18808136 	bltu	r3,r2,8005108 <_malloc_r+0x71c>
 8004f04:	11401704 	addi	r5,r2,92
 8004f08:	10c016c4 	addi	r3,r2,91
 8004f0c:	294b883a 	add	r5,r5,r5
 8004f10:	294b883a 	add	r5,r5,r5
 8004f14:	294b883a 	add	r5,r5,r5
 8004f18:	994b883a 	add	r5,r19,r5
 8004f1c:	28800017 	ldw	r2,0(r5)
 8004f20:	01820074 	movhi	r6,2049
 8004f24:	297ffe04 	addi	r5,r5,-8
 8004f28:	31bb9204 	addi	r6,r6,-4536
 8004f2c:	28806526 	beq	r5,r2,80050c4 <_malloc_r+0x6d8>
 8004f30:	01bfff04 	movi	r6,-4
 8004f34:	10c00117 	ldw	r3,4(r2)
 8004f38:	1986703a 	and	r3,r3,r6
 8004f3c:	38c0022e 	bgeu	r7,r3,8004f48 <_malloc_r+0x55c>
 8004f40:	10800217 	ldw	r2,8(r2)
 8004f44:	28bffb1e 	bne	r5,r2,8004f34 <__alt_data_end+0xfc004f34>
 8004f48:	11400317 	ldw	r5,12(r2)
 8004f4c:	98c00117 	ldw	r3,4(r19)
 8004f50:	81400315 	stw	r5,12(r16)
 8004f54:	80800215 	stw	r2,8(r16)
 8004f58:	2c000215 	stw	r16,8(r5)
 8004f5c:	14000315 	stw	r16,12(r2)
 8004f60:	003ef806 	br	8004b44 <__alt_data_end+0xfc004b44>
 8004f64:	88c00054 	ori	r3,r17,1
 8004f68:	80c00115 	stw	r3,4(r16)
 8004f6c:	8463883a 	add	r17,r16,r17
 8004f70:	34400515 	stw	r17,20(r6)
 8004f74:	34400415 	stw	r17,16(r6)
 8004f78:	10c00054 	ori	r3,r2,1
 8004f7c:	8a000315 	stw	r8,12(r17)
 8004f80:	8a000215 	stw	r8,8(r17)
 8004f84:	88c00115 	stw	r3,4(r17)
 8004f88:	88a3883a 	add	r17,r17,r2
 8004f8c:	88800015 	stw	r2,0(r17)
 8004f90:	9009883a 	mov	r4,r18
 8004f94:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8004f98:	80800204 	addi	r2,r16,8
 8004f9c:	003f3c06 	br	8004c90 <__alt_data_end+0xfc004c90>
 8004fa0:	30c00117 	ldw	r3,4(r6)
 8004fa4:	003ee706 	br	8004b44 <__alt_data_end+0xfc004b44>
 8004fa8:	5ac00044 	addi	r11,r11,1
 8004fac:	588000cc 	andi	r2,r11,3
 8004fb0:	31800204 	addi	r6,r6,8
 8004fb4:	103efd1e 	bne	r2,zero,8004bac <__alt_data_end+0xfc004bac>
 8004fb8:	00002406 	br	800504c <_malloc_r+0x660>
 8004fbc:	14000317 	ldw	r16,12(r2)
 8004fc0:	143f251e 	bne	r2,r16,8004c58 <__alt_data_end+0xfc004c58>
 8004fc4:	21000084 	addi	r4,r4,2
 8004fc8:	003ebc06 	br	8004abc <__alt_data_end+0xfc004abc>
 8004fcc:	8085883a 	add	r2,r16,r2
 8004fd0:	10c00117 	ldw	r3,4(r2)
 8004fd4:	81000317 	ldw	r4,12(r16)
 8004fd8:	81400217 	ldw	r5,8(r16)
 8004fdc:	18c00054 	ori	r3,r3,1
 8004fe0:	10c00115 	stw	r3,4(r2)
 8004fe4:	29000315 	stw	r4,12(r5)
 8004fe8:	21400215 	stw	r5,8(r4)
 8004fec:	9009883a 	mov	r4,r18
 8004ff0:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8004ff4:	80800204 	addi	r2,r16,8
 8004ff8:	003f2506 	br	8004c90 <__alt_data_end+0xfc004c90>
 8004ffc:	12001704 	addi	r8,r2,92
 8005000:	11c016c4 	addi	r7,r2,91
 8005004:	4209883a 	add	r4,r8,r8
 8005008:	003e9606 	br	8004a64 <__alt_data_end+0xfc004a64>
 800500c:	3804d1ba 	srli	r2,r7,6
 8005010:	11400e44 	addi	r5,r2,57
 8005014:	10c00e04 	addi	r3,r2,56
 8005018:	294b883a 	add	r5,r5,r5
 800501c:	003fbc06 	br	8004f10 <__alt_data_end+0xfc004f10>
 8005020:	84ff5926 	beq	r16,r19,8004d88 <__alt_data_end+0xfc004d88>
 8005024:	00820074 	movhi	r2,2049
 8005028:	10bb9204 	addi	r2,r2,-4536
 800502c:	14000217 	ldw	r16,8(r2)
 8005030:	00bfff04 	movi	r2,-4
 8005034:	80c00117 	ldw	r3,4(r16)
 8005038:	1886703a 	and	r3,r3,r2
 800503c:	003f9106 	br	8004e84 <__alt_data_end+0xfc004e84>
 8005040:	60800217 	ldw	r2,8(r12)
 8005044:	213fffc4 	addi	r4,r4,-1
 8005048:	1300651e 	bne	r2,r12,80051e0 <_malloc_r+0x7f4>
 800504c:	208000cc 	andi	r2,r4,3
 8005050:	633ffe04 	addi	r12,r12,-8
 8005054:	103ffa1e 	bne	r2,zero,8005040 <__alt_data_end+0xfc005040>
 8005058:	98800117 	ldw	r2,4(r19)
 800505c:	0146303a 	nor	r3,zero,r5
 8005060:	1884703a 	and	r2,r3,r2
 8005064:	98800115 	stw	r2,4(r19)
 8005068:	294b883a 	add	r5,r5,r5
 800506c:	117f2836 	bltu	r2,r5,8004d10 <__alt_data_end+0xfc004d10>
 8005070:	283f2726 	beq	r5,zero,8004d10 <__alt_data_end+0xfc004d10>
 8005074:	2886703a 	and	r3,r5,r2
 8005078:	5809883a 	mov	r4,r11
 800507c:	183ec31e 	bne	r3,zero,8004b8c <__alt_data_end+0xfc004b8c>
 8005080:	294b883a 	add	r5,r5,r5
 8005084:	2886703a 	and	r3,r5,r2
 8005088:	21000104 	addi	r4,r4,4
 800508c:	183ffc26 	beq	r3,zero,8005080 <__alt_data_end+0xfc005080>
 8005090:	003ebe06 	br	8004b8c <__alt_data_end+0xfc004b8c>
 8005094:	00c05504 	movi	r3,340
 8005098:	18801236 	bltu	r3,r2,80050e4 <_malloc_r+0x6f8>
 800509c:	8804d3fa 	srli	r2,r17,15
 80050a0:	12001e04 	addi	r8,r2,120
 80050a4:	11c01dc4 	addi	r7,r2,119
 80050a8:	4209883a 	add	r4,r8,r8
 80050ac:	003e6d06 	br	8004a64 <__alt_data_end+0xfc004a64>
 80050b0:	00c40004 	movi	r3,4096
 80050b4:	003f4606 	br	8004dd0 <__alt_data_end+0xfc004dd0>
 80050b8:	00800044 	movi	r2,1
 80050bc:	a0800115 	stw	r2,4(r20)
 80050c0:	003f7406 	br	8004e94 <__alt_data_end+0xfc004e94>
 80050c4:	1805d0ba 	srai	r2,r3,2
 80050c8:	01c00044 	movi	r7,1
 80050cc:	30c00117 	ldw	r3,4(r6)
 80050d0:	388e983a 	sll	r7,r7,r2
 80050d4:	2805883a 	mov	r2,r5
 80050d8:	38c6b03a 	or	r3,r7,r3
 80050dc:	30c00115 	stw	r3,4(r6)
 80050e0:	003f9b06 	br	8004f50 <__alt_data_end+0xfc004f50>
 80050e4:	00c15504 	movi	r3,1364
 80050e8:	18801a36 	bltu	r3,r2,8005154 <_malloc_r+0x768>
 80050ec:	8804d4ba 	srli	r2,r17,18
 80050f0:	12001f44 	addi	r8,r2,125
 80050f4:	11c01f04 	addi	r7,r2,124
 80050f8:	4209883a 	add	r4,r8,r8
 80050fc:	003e5906 	br	8004a64 <__alt_data_end+0xfc004a64>
 8005100:	ad400404 	addi	r21,r21,16
 8005104:	003f1706 	br	8004d64 <__alt_data_end+0xfc004d64>
 8005108:	00c01504 	movi	r3,84
 800510c:	18802336 	bltu	r3,r2,800519c <_malloc_r+0x7b0>
 8005110:	3804d33a 	srli	r2,r7,12
 8005114:	11401bc4 	addi	r5,r2,111
 8005118:	10c01b84 	addi	r3,r2,110
 800511c:	294b883a 	add	r5,r5,r5
 8005120:	003f7b06 	br	8004f10 <__alt_data_end+0xfc004f10>
 8005124:	9c000217 	ldw	r16,8(r19)
 8005128:	00bfff04 	movi	r2,-4
 800512c:	80c00117 	ldw	r3,4(r16)
 8005130:	1886703a 	and	r3,r3,r2
 8005134:	003f5306 	br	8004e84 <__alt_data_end+0xfc004e84>
 8005138:	3083ffcc 	andi	r2,r6,4095
 800513c:	103f181e 	bne	r2,zero,8004da0 <__alt_data_end+0xfc004da0>
 8005140:	99000217 	ldw	r4,8(r19)
 8005144:	b545883a 	add	r2,r22,r21
 8005148:	10800054 	ori	r2,r2,1
 800514c:	20800115 	stw	r2,4(r4)
 8005150:	003f3e06 	br	8004e4c <__alt_data_end+0xfc004e4c>
 8005154:	01003f84 	movi	r4,254
 8005158:	02001fc4 	movi	r8,127
 800515c:	01c01f84 	movi	r7,126
 8005160:	003e4006 	br	8004a64 <__alt_data_end+0xfc004a64>
 8005164:	00820074 	movhi	r2,2049
 8005168:	10811c04 	addi	r2,r2,1136
 800516c:	15000015 	stw	r20,0(r2)
 8005170:	003f1106 	br	8004db8 <__alt_data_end+0xfc004db8>
 8005174:	00800044 	movi	r2,1
 8005178:	002b883a 	mov	r21,zero
 800517c:	003f1f06 	br	8004dfc <__alt_data_end+0xfc004dfc>
 8005180:	81400204 	addi	r5,r16,8
 8005184:	9009883a 	mov	r4,r18
 8005188:	8007df00 	call	8007df0 <_free_r>
 800518c:	00820074 	movhi	r2,2049
 8005190:	10890704 	addi	r2,r2,9244
 8005194:	10c00017 	ldw	r3,0(r2)
 8005198:	003f2c06 	br	8004e4c <__alt_data_end+0xfc004e4c>
 800519c:	00c05504 	movi	r3,340
 80051a0:	18800536 	bltu	r3,r2,80051b8 <_malloc_r+0x7cc>
 80051a4:	3804d3fa 	srli	r2,r7,15
 80051a8:	11401e04 	addi	r5,r2,120
 80051ac:	10c01dc4 	addi	r3,r2,119
 80051b0:	294b883a 	add	r5,r5,r5
 80051b4:	003f5606 	br	8004f10 <__alt_data_end+0xfc004f10>
 80051b8:	00c15504 	movi	r3,1364
 80051bc:	18800536 	bltu	r3,r2,80051d4 <_malloc_r+0x7e8>
 80051c0:	3804d4ba 	srli	r2,r7,18
 80051c4:	11401f44 	addi	r5,r2,125
 80051c8:	10c01f04 	addi	r3,r2,124
 80051cc:	294b883a 	add	r5,r5,r5
 80051d0:	003f4f06 	br	8004f10 <__alt_data_end+0xfc004f10>
 80051d4:	01403f84 	movi	r5,254
 80051d8:	00c01f84 	movi	r3,126
 80051dc:	003f4c06 	br	8004f10 <__alt_data_end+0xfc004f10>
 80051e0:	98800117 	ldw	r2,4(r19)
 80051e4:	003fa006 	br	8005068 <__alt_data_end+0xfc005068>
 80051e8:	8808d0fa 	srli	r4,r17,3
 80051ec:	20800044 	addi	r2,r4,1
 80051f0:	1085883a 	add	r2,r2,r2
 80051f4:	003e9006 	br	8004c38 <__alt_data_end+0xfc004c38>

080051f8 <memchr>:
 80051f8:	208000cc 	andi	r2,r4,3
 80051fc:	280f883a 	mov	r7,r5
 8005200:	10003426 	beq	r2,zero,80052d4 <memchr+0xdc>
 8005204:	30bfffc4 	addi	r2,r6,-1
 8005208:	30001a26 	beq	r6,zero,8005274 <memchr+0x7c>
 800520c:	20c00003 	ldbu	r3,0(r4)
 8005210:	29803fcc 	andi	r6,r5,255
 8005214:	30c0051e 	bne	r6,r3,800522c <memchr+0x34>
 8005218:	00001806 	br	800527c <memchr+0x84>
 800521c:	10001526 	beq	r2,zero,8005274 <memchr+0x7c>
 8005220:	20c00003 	ldbu	r3,0(r4)
 8005224:	10bfffc4 	addi	r2,r2,-1
 8005228:	30c01426 	beq	r6,r3,800527c <memchr+0x84>
 800522c:	21000044 	addi	r4,r4,1
 8005230:	20c000cc 	andi	r3,r4,3
 8005234:	183ff91e 	bne	r3,zero,800521c <__alt_data_end+0xfc00521c>
 8005238:	020000c4 	movi	r8,3
 800523c:	40801136 	bltu	r8,r2,8005284 <memchr+0x8c>
 8005240:	10000c26 	beq	r2,zero,8005274 <memchr+0x7c>
 8005244:	20c00003 	ldbu	r3,0(r4)
 8005248:	29403fcc 	andi	r5,r5,255
 800524c:	28c00b26 	beq	r5,r3,800527c <memchr+0x84>
 8005250:	20c00044 	addi	r3,r4,1
 8005254:	39803fcc 	andi	r6,r7,255
 8005258:	2089883a 	add	r4,r4,r2
 800525c:	00000306 	br	800526c <memchr+0x74>
 8005260:	18c00044 	addi	r3,r3,1
 8005264:	197fffc3 	ldbu	r5,-1(r3)
 8005268:	31400526 	beq	r6,r5,8005280 <memchr+0x88>
 800526c:	1805883a 	mov	r2,r3
 8005270:	20fffb1e 	bne	r4,r3,8005260 <__alt_data_end+0xfc005260>
 8005274:	0005883a 	mov	r2,zero
 8005278:	f800283a 	ret
 800527c:	2005883a 	mov	r2,r4
 8005280:	f800283a 	ret
 8005284:	28c03fcc 	andi	r3,r5,255
 8005288:	1812923a 	slli	r9,r3,8
 800528c:	02ffbff4 	movhi	r11,65279
 8005290:	02a02074 	movhi	r10,32897
 8005294:	48d2b03a 	or	r9,r9,r3
 8005298:	4806943a 	slli	r3,r9,16
 800529c:	5affbfc4 	addi	r11,r11,-257
 80052a0:	52a02004 	addi	r10,r10,-32640
 80052a4:	48d2b03a 	or	r9,r9,r3
 80052a8:	20c00017 	ldw	r3,0(r4)
 80052ac:	48c6f03a 	xor	r3,r9,r3
 80052b0:	1acd883a 	add	r6,r3,r11
 80052b4:	00c6303a 	nor	r3,zero,r3
 80052b8:	30c6703a 	and	r3,r6,r3
 80052bc:	1a86703a 	and	r3,r3,r10
 80052c0:	183fe01e 	bne	r3,zero,8005244 <__alt_data_end+0xfc005244>
 80052c4:	10bfff04 	addi	r2,r2,-4
 80052c8:	21000104 	addi	r4,r4,4
 80052cc:	40bff636 	bltu	r8,r2,80052a8 <__alt_data_end+0xfc0052a8>
 80052d0:	003fdb06 	br	8005240 <__alt_data_end+0xfc005240>
 80052d4:	3005883a 	mov	r2,r6
 80052d8:	003fd706 	br	8005238 <__alt_data_end+0xfc005238>

080052dc <memcpy>:
 80052dc:	defffd04 	addi	sp,sp,-12
 80052e0:	dfc00215 	stw	ra,8(sp)
 80052e4:	dc400115 	stw	r17,4(sp)
 80052e8:	dc000015 	stw	r16,0(sp)
 80052ec:	00c003c4 	movi	r3,15
 80052f0:	2005883a 	mov	r2,r4
 80052f4:	1980452e 	bgeu	r3,r6,800540c <memcpy+0x130>
 80052f8:	2906b03a 	or	r3,r5,r4
 80052fc:	18c000cc 	andi	r3,r3,3
 8005300:	1800441e 	bne	r3,zero,8005414 <memcpy+0x138>
 8005304:	347ffc04 	addi	r17,r6,-16
 8005308:	8822d13a 	srli	r17,r17,4
 800530c:	28c00104 	addi	r3,r5,4
 8005310:	23400104 	addi	r13,r4,4
 8005314:	8820913a 	slli	r16,r17,4
 8005318:	2b000204 	addi	r12,r5,8
 800531c:	22c00204 	addi	r11,r4,8
 8005320:	84000504 	addi	r16,r16,20
 8005324:	2a800304 	addi	r10,r5,12
 8005328:	22400304 	addi	r9,r4,12
 800532c:	2c21883a 	add	r16,r5,r16
 8005330:	2811883a 	mov	r8,r5
 8005334:	200f883a 	mov	r7,r4
 8005338:	41000017 	ldw	r4,0(r8)
 800533c:	1fc00017 	ldw	ra,0(r3)
 8005340:	63c00017 	ldw	r15,0(r12)
 8005344:	39000015 	stw	r4,0(r7)
 8005348:	53800017 	ldw	r14,0(r10)
 800534c:	6fc00015 	stw	ra,0(r13)
 8005350:	5bc00015 	stw	r15,0(r11)
 8005354:	4b800015 	stw	r14,0(r9)
 8005358:	18c00404 	addi	r3,r3,16
 800535c:	39c00404 	addi	r7,r7,16
 8005360:	42000404 	addi	r8,r8,16
 8005364:	6b400404 	addi	r13,r13,16
 8005368:	63000404 	addi	r12,r12,16
 800536c:	5ac00404 	addi	r11,r11,16
 8005370:	52800404 	addi	r10,r10,16
 8005374:	4a400404 	addi	r9,r9,16
 8005378:	1c3fef1e 	bne	r3,r16,8005338 <__alt_data_end+0xfc005338>
 800537c:	89c00044 	addi	r7,r17,1
 8005380:	380e913a 	slli	r7,r7,4
 8005384:	310003cc 	andi	r4,r6,15
 8005388:	02c000c4 	movi	r11,3
 800538c:	11c7883a 	add	r3,r2,r7
 8005390:	29cb883a 	add	r5,r5,r7
 8005394:	5900212e 	bgeu	r11,r4,800541c <memcpy+0x140>
 8005398:	1813883a 	mov	r9,r3
 800539c:	2811883a 	mov	r8,r5
 80053a0:	200f883a 	mov	r7,r4
 80053a4:	42800017 	ldw	r10,0(r8)
 80053a8:	4a400104 	addi	r9,r9,4
 80053ac:	39ffff04 	addi	r7,r7,-4
 80053b0:	4abfff15 	stw	r10,-4(r9)
 80053b4:	42000104 	addi	r8,r8,4
 80053b8:	59fffa36 	bltu	r11,r7,80053a4 <__alt_data_end+0xfc0053a4>
 80053bc:	213fff04 	addi	r4,r4,-4
 80053c0:	2008d0ba 	srli	r4,r4,2
 80053c4:	318000cc 	andi	r6,r6,3
 80053c8:	21000044 	addi	r4,r4,1
 80053cc:	2109883a 	add	r4,r4,r4
 80053d0:	2109883a 	add	r4,r4,r4
 80053d4:	1907883a 	add	r3,r3,r4
 80053d8:	290b883a 	add	r5,r5,r4
 80053dc:	30000626 	beq	r6,zero,80053f8 <memcpy+0x11c>
 80053e0:	198d883a 	add	r6,r3,r6
 80053e4:	29c00003 	ldbu	r7,0(r5)
 80053e8:	18c00044 	addi	r3,r3,1
 80053ec:	29400044 	addi	r5,r5,1
 80053f0:	19ffffc5 	stb	r7,-1(r3)
 80053f4:	19bffb1e 	bne	r3,r6,80053e4 <__alt_data_end+0xfc0053e4>
 80053f8:	dfc00217 	ldw	ra,8(sp)
 80053fc:	dc400117 	ldw	r17,4(sp)
 8005400:	dc000017 	ldw	r16,0(sp)
 8005404:	dec00304 	addi	sp,sp,12
 8005408:	f800283a 	ret
 800540c:	2007883a 	mov	r3,r4
 8005410:	003ff206 	br	80053dc <__alt_data_end+0xfc0053dc>
 8005414:	2007883a 	mov	r3,r4
 8005418:	003ff106 	br	80053e0 <__alt_data_end+0xfc0053e0>
 800541c:	200d883a 	mov	r6,r4
 8005420:	003fee06 	br	80053dc <__alt_data_end+0xfc0053dc>

08005424 <_Balloc>:
 8005424:	20801317 	ldw	r2,76(r4)
 8005428:	defffc04 	addi	sp,sp,-16
 800542c:	dc400115 	stw	r17,4(sp)
 8005430:	dc000015 	stw	r16,0(sp)
 8005434:	dfc00315 	stw	ra,12(sp)
 8005438:	dc800215 	stw	r18,8(sp)
 800543c:	2023883a 	mov	r17,r4
 8005440:	2821883a 	mov	r16,r5
 8005444:	10000f26 	beq	r2,zero,8005484 <_Balloc+0x60>
 8005448:	8407883a 	add	r3,r16,r16
 800544c:	18c7883a 	add	r3,r3,r3
 8005450:	10c7883a 	add	r3,r2,r3
 8005454:	18800017 	ldw	r2,0(r3)
 8005458:	10001126 	beq	r2,zero,80054a0 <_Balloc+0x7c>
 800545c:	11000017 	ldw	r4,0(r2)
 8005460:	19000015 	stw	r4,0(r3)
 8005464:	10000415 	stw	zero,16(r2)
 8005468:	10000315 	stw	zero,12(r2)
 800546c:	dfc00317 	ldw	ra,12(sp)
 8005470:	dc800217 	ldw	r18,8(sp)
 8005474:	dc400117 	ldw	r17,4(sp)
 8005478:	dc000017 	ldw	r16,0(sp)
 800547c:	dec00404 	addi	sp,sp,16
 8005480:	f800283a 	ret
 8005484:	01800844 	movi	r6,33
 8005488:	01400104 	movi	r5,4
 800548c:	8007bf00 	call	8007bf0 <_calloc_r>
 8005490:	88801315 	stw	r2,76(r17)
 8005494:	103fec1e 	bne	r2,zero,8005448 <__alt_data_end+0xfc005448>
 8005498:	0005883a 	mov	r2,zero
 800549c:	003ff306 	br	800546c <__alt_data_end+0xfc00546c>
 80054a0:	01400044 	movi	r5,1
 80054a4:	2c24983a 	sll	r18,r5,r16
 80054a8:	8809883a 	mov	r4,r17
 80054ac:	91800144 	addi	r6,r18,5
 80054b0:	318d883a 	add	r6,r6,r6
 80054b4:	318d883a 	add	r6,r6,r6
 80054b8:	8007bf00 	call	8007bf0 <_calloc_r>
 80054bc:	103ff626 	beq	r2,zero,8005498 <__alt_data_end+0xfc005498>
 80054c0:	14000115 	stw	r16,4(r2)
 80054c4:	14800215 	stw	r18,8(r2)
 80054c8:	003fe606 	br	8005464 <__alt_data_end+0xfc005464>

080054cc <_Bfree>:
 80054cc:	28000826 	beq	r5,zero,80054f0 <_Bfree+0x24>
 80054d0:	28c00117 	ldw	r3,4(r5)
 80054d4:	20801317 	ldw	r2,76(r4)
 80054d8:	18c7883a 	add	r3,r3,r3
 80054dc:	18c7883a 	add	r3,r3,r3
 80054e0:	10c5883a 	add	r2,r2,r3
 80054e4:	10c00017 	ldw	r3,0(r2)
 80054e8:	28c00015 	stw	r3,0(r5)
 80054ec:	11400015 	stw	r5,0(r2)
 80054f0:	f800283a 	ret

080054f4 <__multadd>:
 80054f4:	defff704 	addi	sp,sp,-36
 80054f8:	dc800215 	stw	r18,8(sp)
 80054fc:	2c800417 	ldw	r18,16(r5)
 8005500:	dd800615 	stw	r22,24(sp)
 8005504:	dd400515 	stw	r21,20(sp)
 8005508:	dd000415 	stw	r20,16(sp)
 800550c:	dcc00315 	stw	r19,12(sp)
 8005510:	dc400115 	stw	r17,4(sp)
 8005514:	dc000015 	stw	r16,0(sp)
 8005518:	dfc00815 	stw	ra,32(sp)
 800551c:	ddc00715 	stw	r23,28(sp)
 8005520:	2827883a 	mov	r19,r5
 8005524:	2029883a 	mov	r20,r4
 8005528:	3023883a 	mov	r17,r6
 800552c:	3821883a 	mov	r16,r7
 8005530:	2d400504 	addi	r21,r5,20
 8005534:	002d883a 	mov	r22,zero
 8005538:	adc00017 	ldw	r23,0(r21)
 800553c:	880b883a 	mov	r5,r17
 8005540:	ad400104 	addi	r21,r21,4
 8005544:	b93fffcc 	andi	r4,r23,65535
 8005548:	8000ba40 	call	8000ba4 <__mulsi3>
 800554c:	b808d43a 	srli	r4,r23,16
 8005550:	880b883a 	mov	r5,r17
 8005554:	1421883a 	add	r16,r2,r16
 8005558:	8000ba40 	call	8000ba4 <__mulsi3>
 800555c:	800ed43a 	srli	r7,r16,16
 8005560:	80ffffcc 	andi	r3,r16,65535
 8005564:	b5800044 	addi	r22,r22,1
 8005568:	11c5883a 	add	r2,r2,r7
 800556c:	100e943a 	slli	r7,r2,16
 8005570:	1020d43a 	srli	r16,r2,16
 8005574:	38c7883a 	add	r3,r7,r3
 8005578:	a8ffff15 	stw	r3,-4(r21)
 800557c:	b4bfee16 	blt	r22,r18,8005538 <__alt_data_end+0xfc005538>
 8005580:	80000926 	beq	r16,zero,80055a8 <__multadd+0xb4>
 8005584:	98800217 	ldw	r2,8(r19)
 8005588:	9080130e 	bge	r18,r2,80055d8 <__multadd+0xe4>
 800558c:	90800144 	addi	r2,r18,5
 8005590:	1085883a 	add	r2,r2,r2
 8005594:	1085883a 	add	r2,r2,r2
 8005598:	9885883a 	add	r2,r19,r2
 800559c:	14000015 	stw	r16,0(r2)
 80055a0:	94800044 	addi	r18,r18,1
 80055a4:	9c800415 	stw	r18,16(r19)
 80055a8:	9805883a 	mov	r2,r19
 80055ac:	dfc00817 	ldw	ra,32(sp)
 80055b0:	ddc00717 	ldw	r23,28(sp)
 80055b4:	dd800617 	ldw	r22,24(sp)
 80055b8:	dd400517 	ldw	r21,20(sp)
 80055bc:	dd000417 	ldw	r20,16(sp)
 80055c0:	dcc00317 	ldw	r19,12(sp)
 80055c4:	dc800217 	ldw	r18,8(sp)
 80055c8:	dc400117 	ldw	r17,4(sp)
 80055cc:	dc000017 	ldw	r16,0(sp)
 80055d0:	dec00904 	addi	sp,sp,36
 80055d4:	f800283a 	ret
 80055d8:	99400117 	ldw	r5,4(r19)
 80055dc:	a009883a 	mov	r4,r20
 80055e0:	29400044 	addi	r5,r5,1
 80055e4:	80054240 	call	8005424 <_Balloc>
 80055e8:	99800417 	ldw	r6,16(r19)
 80055ec:	99400304 	addi	r5,r19,12
 80055f0:	11000304 	addi	r4,r2,12
 80055f4:	31800084 	addi	r6,r6,2
 80055f8:	318d883a 	add	r6,r6,r6
 80055fc:	318d883a 	add	r6,r6,r6
 8005600:	1023883a 	mov	r17,r2
 8005604:	80052dc0 	call	80052dc <memcpy>
 8005608:	98000a26 	beq	r19,zero,8005634 <__multadd+0x140>
 800560c:	98c00117 	ldw	r3,4(r19)
 8005610:	a0801317 	ldw	r2,76(r20)
 8005614:	18c7883a 	add	r3,r3,r3
 8005618:	18c7883a 	add	r3,r3,r3
 800561c:	10c5883a 	add	r2,r2,r3
 8005620:	10c00017 	ldw	r3,0(r2)
 8005624:	98c00015 	stw	r3,0(r19)
 8005628:	14c00015 	stw	r19,0(r2)
 800562c:	8827883a 	mov	r19,r17
 8005630:	003fd606 	br	800558c <__alt_data_end+0xfc00558c>
 8005634:	8827883a 	mov	r19,r17
 8005638:	003fd406 	br	800558c <__alt_data_end+0xfc00558c>

0800563c <__s2b>:
 800563c:	defff904 	addi	sp,sp,-28
 8005640:	dc400115 	stw	r17,4(sp)
 8005644:	dc000015 	stw	r16,0(sp)
 8005648:	2023883a 	mov	r17,r4
 800564c:	2821883a 	mov	r16,r5
 8005650:	39000204 	addi	r4,r7,8
 8005654:	01400244 	movi	r5,9
 8005658:	dcc00315 	stw	r19,12(sp)
 800565c:	dc800215 	stw	r18,8(sp)
 8005660:	dfc00615 	stw	ra,24(sp)
 8005664:	dd400515 	stw	r21,20(sp)
 8005668:	dd000415 	stw	r20,16(sp)
 800566c:	3825883a 	mov	r18,r7
 8005670:	3027883a 	mov	r19,r6
 8005674:	80009f00 	call	80009f0 <__divsi3>
 8005678:	00c00044 	movi	r3,1
 800567c:	000b883a 	mov	r5,zero
 8005680:	1880030e 	bge	r3,r2,8005690 <__s2b+0x54>
 8005684:	18c7883a 	add	r3,r3,r3
 8005688:	29400044 	addi	r5,r5,1
 800568c:	18bffd16 	blt	r3,r2,8005684 <__alt_data_end+0xfc005684>
 8005690:	8809883a 	mov	r4,r17
 8005694:	80054240 	call	8005424 <_Balloc>
 8005698:	d8c00717 	ldw	r3,28(sp)
 800569c:	10c00515 	stw	r3,20(r2)
 80056a0:	00c00044 	movi	r3,1
 80056a4:	10c00415 	stw	r3,16(r2)
 80056a8:	00c00244 	movi	r3,9
 80056ac:	1cc0210e 	bge	r3,r19,8005734 <__s2b+0xf8>
 80056b0:	80eb883a 	add	r21,r16,r3
 80056b4:	a829883a 	mov	r20,r21
 80056b8:	84e1883a 	add	r16,r16,r19
 80056bc:	a1c00007 	ldb	r7,0(r20)
 80056c0:	01800284 	movi	r6,10
 80056c4:	a5000044 	addi	r20,r20,1
 80056c8:	100b883a 	mov	r5,r2
 80056cc:	39fff404 	addi	r7,r7,-48
 80056d0:	8809883a 	mov	r4,r17
 80056d4:	80054f40 	call	80054f4 <__multadd>
 80056d8:	a43ff81e 	bne	r20,r16,80056bc <__alt_data_end+0xfc0056bc>
 80056dc:	ace1883a 	add	r16,r21,r19
 80056e0:	843ffe04 	addi	r16,r16,-8
 80056e4:	9c800a0e 	bge	r19,r18,8005710 <__s2b+0xd4>
 80056e8:	94e5c83a 	sub	r18,r18,r19
 80056ec:	84a5883a 	add	r18,r16,r18
 80056f0:	81c00007 	ldb	r7,0(r16)
 80056f4:	01800284 	movi	r6,10
 80056f8:	84000044 	addi	r16,r16,1
 80056fc:	100b883a 	mov	r5,r2
 8005700:	39fff404 	addi	r7,r7,-48
 8005704:	8809883a 	mov	r4,r17
 8005708:	80054f40 	call	80054f4 <__multadd>
 800570c:	84bff81e 	bne	r16,r18,80056f0 <__alt_data_end+0xfc0056f0>
 8005710:	dfc00617 	ldw	ra,24(sp)
 8005714:	dd400517 	ldw	r21,20(sp)
 8005718:	dd000417 	ldw	r20,16(sp)
 800571c:	dcc00317 	ldw	r19,12(sp)
 8005720:	dc800217 	ldw	r18,8(sp)
 8005724:	dc400117 	ldw	r17,4(sp)
 8005728:	dc000017 	ldw	r16,0(sp)
 800572c:	dec00704 	addi	sp,sp,28
 8005730:	f800283a 	ret
 8005734:	84000284 	addi	r16,r16,10
 8005738:	1827883a 	mov	r19,r3
 800573c:	003fe906 	br	80056e4 <__alt_data_end+0xfc0056e4>

08005740 <__hi0bits>:
 8005740:	20bfffec 	andhi	r2,r4,65535
 8005744:	1000141e 	bne	r2,zero,8005798 <__hi0bits+0x58>
 8005748:	2008943a 	slli	r4,r4,16
 800574c:	00800404 	movi	r2,16
 8005750:	20ffc02c 	andhi	r3,r4,65280
 8005754:	1800021e 	bne	r3,zero,8005760 <__hi0bits+0x20>
 8005758:	2008923a 	slli	r4,r4,8
 800575c:	10800204 	addi	r2,r2,8
 8005760:	20fc002c 	andhi	r3,r4,61440
 8005764:	1800021e 	bne	r3,zero,8005770 <__hi0bits+0x30>
 8005768:	2008913a 	slli	r4,r4,4
 800576c:	10800104 	addi	r2,r2,4
 8005770:	20f0002c 	andhi	r3,r4,49152
 8005774:	1800031e 	bne	r3,zero,8005784 <__hi0bits+0x44>
 8005778:	2109883a 	add	r4,r4,r4
 800577c:	10800084 	addi	r2,r2,2
 8005780:	2109883a 	add	r4,r4,r4
 8005784:	20000316 	blt	r4,zero,8005794 <__hi0bits+0x54>
 8005788:	2110002c 	andhi	r4,r4,16384
 800578c:	2000041e 	bne	r4,zero,80057a0 <__hi0bits+0x60>
 8005790:	00800804 	movi	r2,32
 8005794:	f800283a 	ret
 8005798:	0005883a 	mov	r2,zero
 800579c:	003fec06 	br	8005750 <__alt_data_end+0xfc005750>
 80057a0:	10800044 	addi	r2,r2,1
 80057a4:	f800283a 	ret

080057a8 <__lo0bits>:
 80057a8:	20c00017 	ldw	r3,0(r4)
 80057ac:	188001cc 	andi	r2,r3,7
 80057b0:	10000826 	beq	r2,zero,80057d4 <__lo0bits+0x2c>
 80057b4:	1880004c 	andi	r2,r3,1
 80057b8:	1000211e 	bne	r2,zero,8005840 <__lo0bits+0x98>
 80057bc:	1880008c 	andi	r2,r3,2
 80057c0:	1000211e 	bne	r2,zero,8005848 <__lo0bits+0xa0>
 80057c4:	1806d0ba 	srli	r3,r3,2
 80057c8:	00800084 	movi	r2,2
 80057cc:	20c00015 	stw	r3,0(r4)
 80057d0:	f800283a 	ret
 80057d4:	18bfffcc 	andi	r2,r3,65535
 80057d8:	10001326 	beq	r2,zero,8005828 <__lo0bits+0x80>
 80057dc:	0005883a 	mov	r2,zero
 80057e0:	19403fcc 	andi	r5,r3,255
 80057e4:	2800021e 	bne	r5,zero,80057f0 <__lo0bits+0x48>
 80057e8:	1806d23a 	srli	r3,r3,8
 80057ec:	10800204 	addi	r2,r2,8
 80057f0:	194003cc 	andi	r5,r3,15
 80057f4:	2800021e 	bne	r5,zero,8005800 <__lo0bits+0x58>
 80057f8:	1806d13a 	srli	r3,r3,4
 80057fc:	10800104 	addi	r2,r2,4
 8005800:	194000cc 	andi	r5,r3,3
 8005804:	2800021e 	bne	r5,zero,8005810 <__lo0bits+0x68>
 8005808:	1806d0ba 	srli	r3,r3,2
 800580c:	10800084 	addi	r2,r2,2
 8005810:	1940004c 	andi	r5,r3,1
 8005814:	2800081e 	bne	r5,zero,8005838 <__lo0bits+0x90>
 8005818:	1806d07a 	srli	r3,r3,1
 800581c:	1800051e 	bne	r3,zero,8005834 <__lo0bits+0x8c>
 8005820:	00800804 	movi	r2,32
 8005824:	f800283a 	ret
 8005828:	1806d43a 	srli	r3,r3,16
 800582c:	00800404 	movi	r2,16
 8005830:	003feb06 	br	80057e0 <__alt_data_end+0xfc0057e0>
 8005834:	10800044 	addi	r2,r2,1
 8005838:	20c00015 	stw	r3,0(r4)
 800583c:	f800283a 	ret
 8005840:	0005883a 	mov	r2,zero
 8005844:	f800283a 	ret
 8005848:	1806d07a 	srli	r3,r3,1
 800584c:	00800044 	movi	r2,1
 8005850:	20c00015 	stw	r3,0(r4)
 8005854:	f800283a 	ret

08005858 <__i2b>:
 8005858:	defffd04 	addi	sp,sp,-12
 800585c:	dc000015 	stw	r16,0(sp)
 8005860:	04000044 	movi	r16,1
 8005864:	dc400115 	stw	r17,4(sp)
 8005868:	2823883a 	mov	r17,r5
 800586c:	800b883a 	mov	r5,r16
 8005870:	dfc00215 	stw	ra,8(sp)
 8005874:	80054240 	call	8005424 <_Balloc>
 8005878:	14400515 	stw	r17,20(r2)
 800587c:	14000415 	stw	r16,16(r2)
 8005880:	dfc00217 	ldw	ra,8(sp)
 8005884:	dc400117 	ldw	r17,4(sp)
 8005888:	dc000017 	ldw	r16,0(sp)
 800588c:	dec00304 	addi	sp,sp,12
 8005890:	f800283a 	ret

08005894 <__multiply>:
 8005894:	deffef04 	addi	sp,sp,-68
 8005898:	dc400815 	stw	r17,32(sp)
 800589c:	dc000715 	stw	r16,28(sp)
 80058a0:	34400417 	ldw	r17,16(r6)
 80058a4:	2c000417 	ldw	r16,16(r5)
 80058a8:	dd800d15 	stw	r22,52(sp)
 80058ac:	dc800915 	stw	r18,36(sp)
 80058b0:	dfc01015 	stw	ra,64(sp)
 80058b4:	df000f15 	stw	fp,60(sp)
 80058b8:	ddc00e15 	stw	r23,56(sp)
 80058bc:	dd400c15 	stw	r21,48(sp)
 80058c0:	dd000b15 	stw	r20,44(sp)
 80058c4:	dcc00a15 	stw	r19,40(sp)
 80058c8:	2825883a 	mov	r18,r5
 80058cc:	302d883a 	mov	r22,r6
 80058d0:	8440050e 	bge	r16,r17,80058e8 <__multiply+0x54>
 80058d4:	8007883a 	mov	r3,r16
 80058d8:	3025883a 	mov	r18,r6
 80058dc:	8821883a 	mov	r16,r17
 80058e0:	282d883a 	mov	r22,r5
 80058e4:	1823883a 	mov	r17,r3
 80058e8:	90800217 	ldw	r2,8(r18)
 80058ec:	8447883a 	add	r3,r16,r17
 80058f0:	d8c00215 	stw	r3,8(sp)
 80058f4:	91400117 	ldw	r5,4(r18)
 80058f8:	10c0010e 	bge	r2,r3,8005900 <__multiply+0x6c>
 80058fc:	29400044 	addi	r5,r5,1
 8005900:	80054240 	call	8005424 <_Balloc>
 8005904:	d8c00217 	ldw	r3,8(sp)
 8005908:	d8800615 	stw	r2,24(sp)
 800590c:	18eb883a 	add	r21,r3,r3
 8005910:	ad6b883a 	add	r21,r21,r21
 8005914:	10c00504 	addi	r3,r2,20
 8005918:	1d6b883a 	add	r21,r3,r21
 800591c:	d8c00115 	stw	r3,4(sp)
 8005920:	dd400315 	stw	r21,12(sp)
 8005924:	1805883a 	mov	r2,r3
 8005928:	1d40042e 	bgeu	r3,r21,800593c <__multiply+0xa8>
 800592c:	d8c00317 	ldw	r3,12(sp)
 8005930:	10000015 	stw	zero,0(r2)
 8005934:	10800104 	addi	r2,r2,4
 8005938:	10fffc36 	bltu	r2,r3,800592c <__alt_data_end+0xfc00592c>
 800593c:	8c63883a 	add	r17,r17,r17
 8005940:	b5800504 	addi	r22,r22,20
 8005944:	8c63883a 	add	r17,r17,r17
 8005948:	94800504 	addi	r18,r18,20
 800594c:	8421883a 	add	r16,r16,r16
 8005950:	b463883a 	add	r17,r22,r17
 8005954:	8421883a 	add	r16,r16,r16
 8005958:	dd800015 	stw	r22,0(sp)
 800595c:	dc800415 	stw	r18,16(sp)
 8005960:	dc400515 	stw	r17,20(sp)
 8005964:	9429883a 	add	r20,r18,r16
 8005968:	b4404f2e 	bgeu	r22,r17,8005aa8 <__multiply+0x214>
 800596c:	d8c00017 	ldw	r3,0(sp)
 8005970:	1c800017 	ldw	r18,0(r3)
 8005974:	947fffcc 	andi	r17,r18,65535
 8005978:	88001e26 	beq	r17,zero,80059f4 <__multiply+0x160>
 800597c:	dd800117 	ldw	r22,4(sp)
 8005980:	dd400417 	ldw	r21,16(sp)
 8005984:	0027883a 	mov	r19,zero
 8005988:	ac800017 	ldw	r18,0(r21)
 800598c:	b4000017 	ldw	r16,0(r22)
 8005990:	880b883a 	mov	r5,r17
 8005994:	913fffcc 	andi	r4,r18,65535
 8005998:	8000ba40 	call	8000ba4 <__mulsi3>
 800599c:	9008d43a 	srli	r4,r18,16
 80059a0:	84bfffcc 	andi	r18,r16,65535
 80059a4:	1485883a 	add	r2,r2,r18
 80059a8:	14e5883a 	add	r18,r2,r19
 80059ac:	8020d43a 	srli	r16,r16,16
 80059b0:	9026d43a 	srli	r19,r18,16
 80059b4:	880b883a 	mov	r5,r17
 80059b8:	8000ba40 	call	8000ba4 <__mulsi3>
 80059bc:	1405883a 	add	r2,r2,r16
 80059c0:	14e1883a 	add	r16,r2,r19
 80059c4:	90ffffcc 	andi	r3,r18,65535
 80059c8:	8024943a 	slli	r18,r16,16
 80059cc:	ad400104 	addi	r21,r21,4
 80059d0:	b005883a 	mov	r2,r22
 80059d4:	90c6b03a 	or	r3,r18,r3
 80059d8:	b0c00015 	stw	r3,0(r22)
 80059dc:	8026d43a 	srli	r19,r16,16
 80059e0:	b5800104 	addi	r22,r22,4
 80059e4:	ad3fe836 	bltu	r21,r20,8005988 <__alt_data_end+0xfc005988>
 80059e8:	d8c00017 	ldw	r3,0(sp)
 80059ec:	14c00115 	stw	r19,4(r2)
 80059f0:	1c800017 	ldw	r18,0(r3)
 80059f4:	9024d43a 	srli	r18,r18,16
 80059f8:	90002226 	beq	r18,zero,8005a84 <__multiply+0x1f0>
 80059fc:	d8c00117 	ldw	r3,4(sp)
 8005a00:	dd800417 	ldw	r22,16(sp)
 8005a04:	002f883a 	mov	r23,zero
 8005a08:	1f000017 	ldw	fp,0(r3)
 8005a0c:	1823883a 	mov	r17,r3
 8005a10:	182b883a 	mov	r21,r3
 8005a14:	e021883a 	mov	r16,fp
 8005a18:	00000106 	br	8005a20 <__multiply+0x18c>
 8005a1c:	982b883a 	mov	r21,r19
 8005a20:	b100000b 	ldhu	r4,0(r22)
 8005a24:	8020d43a 	srli	r16,r16,16
 8005a28:	900b883a 	mov	r5,r18
 8005a2c:	8000ba40 	call	8000ba4 <__mulsi3>
 8005a30:	1405883a 	add	r2,r2,r16
 8005a34:	15ef883a 	add	r23,r2,r23
 8005a38:	b804943a 	slli	r2,r23,16
 8005a3c:	e0ffffcc 	andi	r3,fp,65535
 8005a40:	8c400104 	addi	r17,r17,4
 8005a44:	10c6b03a 	or	r3,r2,r3
 8005a48:	88ffff15 	stw	r3,-4(r17)
 8005a4c:	b5800104 	addi	r22,r22,4
 8005a50:	b13fff17 	ldw	r4,-4(r22)
 8005a54:	acc00104 	addi	r19,r21,4
 8005a58:	900b883a 	mov	r5,r18
 8005a5c:	2008d43a 	srli	r4,r4,16
 8005a60:	9c000017 	ldw	r16,0(r19)
 8005a64:	8000ba40 	call	8000ba4 <__mulsi3>
 8005a68:	b806d43a 	srli	r3,r23,16
 8005a6c:	813fffcc 	andi	r4,r16,65535
 8005a70:	1105883a 	add	r2,r2,r4
 8005a74:	10f9883a 	add	fp,r2,r3
 8005a78:	e02ed43a 	srli	r23,fp,16
 8005a7c:	b53fe736 	bltu	r22,r20,8005a1c <__alt_data_end+0xfc005a1c>
 8005a80:	af000115 	stw	fp,4(r21)
 8005a84:	d8c00017 	ldw	r3,0(sp)
 8005a88:	d9000517 	ldw	r4,20(sp)
 8005a8c:	18c00104 	addi	r3,r3,4
 8005a90:	d8c00015 	stw	r3,0(sp)
 8005a94:	d8c00117 	ldw	r3,4(sp)
 8005a98:	18c00104 	addi	r3,r3,4
 8005a9c:	d8c00115 	stw	r3,4(sp)
 8005aa0:	d8c00017 	ldw	r3,0(sp)
 8005aa4:	193fb136 	bltu	r3,r4,800596c <__alt_data_end+0xfc00596c>
 8005aa8:	d8c00217 	ldw	r3,8(sp)
 8005aac:	00c00c0e 	bge	zero,r3,8005ae0 <__multiply+0x24c>
 8005ab0:	d8c00317 	ldw	r3,12(sp)
 8005ab4:	18bfff17 	ldw	r2,-4(r3)
 8005ab8:	1d7fff04 	addi	r21,r3,-4
 8005abc:	10000326 	beq	r2,zero,8005acc <__multiply+0x238>
 8005ac0:	00000706 	br	8005ae0 <__multiply+0x24c>
 8005ac4:	a8800017 	ldw	r2,0(r21)
 8005ac8:	1000051e 	bne	r2,zero,8005ae0 <__multiply+0x24c>
 8005acc:	d8c00217 	ldw	r3,8(sp)
 8005ad0:	ad7fff04 	addi	r21,r21,-4
 8005ad4:	18ffffc4 	addi	r3,r3,-1
 8005ad8:	d8c00215 	stw	r3,8(sp)
 8005adc:	183ff91e 	bne	r3,zero,8005ac4 <__alt_data_end+0xfc005ac4>
 8005ae0:	d8c00617 	ldw	r3,24(sp)
 8005ae4:	d9000217 	ldw	r4,8(sp)
 8005ae8:	1805883a 	mov	r2,r3
 8005aec:	19000415 	stw	r4,16(r3)
 8005af0:	dfc01017 	ldw	ra,64(sp)
 8005af4:	df000f17 	ldw	fp,60(sp)
 8005af8:	ddc00e17 	ldw	r23,56(sp)
 8005afc:	dd800d17 	ldw	r22,52(sp)
 8005b00:	dd400c17 	ldw	r21,48(sp)
 8005b04:	dd000b17 	ldw	r20,44(sp)
 8005b08:	dcc00a17 	ldw	r19,40(sp)
 8005b0c:	dc800917 	ldw	r18,36(sp)
 8005b10:	dc400817 	ldw	r17,32(sp)
 8005b14:	dc000717 	ldw	r16,28(sp)
 8005b18:	dec01104 	addi	sp,sp,68
 8005b1c:	f800283a 	ret

08005b20 <__pow5mult>:
 8005b20:	defffa04 	addi	sp,sp,-24
 8005b24:	dcc00315 	stw	r19,12(sp)
 8005b28:	dc000015 	stw	r16,0(sp)
 8005b2c:	dfc00515 	stw	ra,20(sp)
 8005b30:	dd000415 	stw	r20,16(sp)
 8005b34:	dc800215 	stw	r18,8(sp)
 8005b38:	dc400115 	stw	r17,4(sp)
 8005b3c:	308000cc 	andi	r2,r6,3
 8005b40:	3021883a 	mov	r16,r6
 8005b44:	2027883a 	mov	r19,r4
 8005b48:	10002f1e 	bne	r2,zero,8005c08 <__pow5mult+0xe8>
 8005b4c:	2825883a 	mov	r18,r5
 8005b50:	8021d0ba 	srai	r16,r16,2
 8005b54:	80001a26 	beq	r16,zero,8005bc0 <__pow5mult+0xa0>
 8005b58:	9c401217 	ldw	r17,72(r19)
 8005b5c:	8800061e 	bne	r17,zero,8005b78 <__pow5mult+0x58>
 8005b60:	00003406 	br	8005c34 <__pow5mult+0x114>
 8005b64:	8021d07a 	srai	r16,r16,1
 8005b68:	80001526 	beq	r16,zero,8005bc0 <__pow5mult+0xa0>
 8005b6c:	88800017 	ldw	r2,0(r17)
 8005b70:	10001c26 	beq	r2,zero,8005be4 <__pow5mult+0xc4>
 8005b74:	1023883a 	mov	r17,r2
 8005b78:	8080004c 	andi	r2,r16,1
 8005b7c:	103ff926 	beq	r2,zero,8005b64 <__alt_data_end+0xfc005b64>
 8005b80:	880d883a 	mov	r6,r17
 8005b84:	900b883a 	mov	r5,r18
 8005b88:	9809883a 	mov	r4,r19
 8005b8c:	80058940 	call	8005894 <__multiply>
 8005b90:	90001b26 	beq	r18,zero,8005c00 <__pow5mult+0xe0>
 8005b94:	91000117 	ldw	r4,4(r18)
 8005b98:	98c01317 	ldw	r3,76(r19)
 8005b9c:	8021d07a 	srai	r16,r16,1
 8005ba0:	2109883a 	add	r4,r4,r4
 8005ba4:	2109883a 	add	r4,r4,r4
 8005ba8:	1907883a 	add	r3,r3,r4
 8005bac:	19000017 	ldw	r4,0(r3)
 8005bb0:	91000015 	stw	r4,0(r18)
 8005bb4:	1c800015 	stw	r18,0(r3)
 8005bb8:	1025883a 	mov	r18,r2
 8005bbc:	803feb1e 	bne	r16,zero,8005b6c <__alt_data_end+0xfc005b6c>
 8005bc0:	9005883a 	mov	r2,r18
 8005bc4:	dfc00517 	ldw	ra,20(sp)
 8005bc8:	dd000417 	ldw	r20,16(sp)
 8005bcc:	dcc00317 	ldw	r19,12(sp)
 8005bd0:	dc800217 	ldw	r18,8(sp)
 8005bd4:	dc400117 	ldw	r17,4(sp)
 8005bd8:	dc000017 	ldw	r16,0(sp)
 8005bdc:	dec00604 	addi	sp,sp,24
 8005be0:	f800283a 	ret
 8005be4:	880d883a 	mov	r6,r17
 8005be8:	880b883a 	mov	r5,r17
 8005bec:	9809883a 	mov	r4,r19
 8005bf0:	80058940 	call	8005894 <__multiply>
 8005bf4:	88800015 	stw	r2,0(r17)
 8005bf8:	10000015 	stw	zero,0(r2)
 8005bfc:	003fdd06 	br	8005b74 <__alt_data_end+0xfc005b74>
 8005c00:	1025883a 	mov	r18,r2
 8005c04:	003fd706 	br	8005b64 <__alt_data_end+0xfc005b64>
 8005c08:	10bfffc4 	addi	r2,r2,-1
 8005c0c:	1085883a 	add	r2,r2,r2
 8005c10:	00c20074 	movhi	r3,2049
 8005c14:	18f8bb04 	addi	r3,r3,-7444
 8005c18:	1085883a 	add	r2,r2,r2
 8005c1c:	1885883a 	add	r2,r3,r2
 8005c20:	11800017 	ldw	r6,0(r2)
 8005c24:	000f883a 	mov	r7,zero
 8005c28:	80054f40 	call	80054f4 <__multadd>
 8005c2c:	1025883a 	mov	r18,r2
 8005c30:	003fc706 	br	8005b50 <__alt_data_end+0xfc005b50>
 8005c34:	05000044 	movi	r20,1
 8005c38:	a00b883a 	mov	r5,r20
 8005c3c:	9809883a 	mov	r4,r19
 8005c40:	80054240 	call	8005424 <_Balloc>
 8005c44:	1023883a 	mov	r17,r2
 8005c48:	00809c44 	movi	r2,625
 8005c4c:	88800515 	stw	r2,20(r17)
 8005c50:	8d000415 	stw	r20,16(r17)
 8005c54:	9c401215 	stw	r17,72(r19)
 8005c58:	88000015 	stw	zero,0(r17)
 8005c5c:	003fc606 	br	8005b78 <__alt_data_end+0xfc005b78>

08005c60 <__lshift>:
 8005c60:	defff904 	addi	sp,sp,-28
 8005c64:	dd400515 	stw	r21,20(sp)
 8005c68:	dcc00315 	stw	r19,12(sp)
 8005c6c:	302bd17a 	srai	r21,r6,5
 8005c70:	2cc00417 	ldw	r19,16(r5)
 8005c74:	28800217 	ldw	r2,8(r5)
 8005c78:	dd000415 	stw	r20,16(sp)
 8005c7c:	ace7883a 	add	r19,r21,r19
 8005c80:	dc800215 	stw	r18,8(sp)
 8005c84:	dc400115 	stw	r17,4(sp)
 8005c88:	dc000015 	stw	r16,0(sp)
 8005c8c:	dfc00615 	stw	ra,24(sp)
 8005c90:	9c000044 	addi	r16,r19,1
 8005c94:	2823883a 	mov	r17,r5
 8005c98:	3029883a 	mov	r20,r6
 8005c9c:	2025883a 	mov	r18,r4
 8005ca0:	29400117 	ldw	r5,4(r5)
 8005ca4:	1400030e 	bge	r2,r16,8005cb4 <__lshift+0x54>
 8005ca8:	1085883a 	add	r2,r2,r2
 8005cac:	29400044 	addi	r5,r5,1
 8005cb0:	143ffd16 	blt	r2,r16,8005ca8 <__alt_data_end+0xfc005ca8>
 8005cb4:	9009883a 	mov	r4,r18
 8005cb8:	80054240 	call	8005424 <_Balloc>
 8005cbc:	10c00504 	addi	r3,r2,20
 8005cc0:	0540070e 	bge	zero,r21,8005ce0 <__lshift+0x80>
 8005cc4:	ad6b883a 	add	r21,r21,r21
 8005cc8:	ad6b883a 	add	r21,r21,r21
 8005ccc:	1809883a 	mov	r4,r3
 8005cd0:	1d47883a 	add	r3,r3,r21
 8005cd4:	20000015 	stw	zero,0(r4)
 8005cd8:	21000104 	addi	r4,r4,4
 8005cdc:	193ffd1e 	bne	r3,r4,8005cd4 <__alt_data_end+0xfc005cd4>
 8005ce0:	8a000417 	ldw	r8,16(r17)
 8005ce4:	89000504 	addi	r4,r17,20
 8005ce8:	a18007cc 	andi	r6,r20,31
 8005cec:	4211883a 	add	r8,r8,r8
 8005cf0:	4211883a 	add	r8,r8,r8
 8005cf4:	2211883a 	add	r8,r4,r8
 8005cf8:	30002326 	beq	r6,zero,8005d88 <__lshift+0x128>
 8005cfc:	02400804 	movi	r9,32
 8005d00:	4993c83a 	sub	r9,r9,r6
 8005d04:	000b883a 	mov	r5,zero
 8005d08:	21c00017 	ldw	r7,0(r4)
 8005d0c:	1815883a 	mov	r10,r3
 8005d10:	18c00104 	addi	r3,r3,4
 8005d14:	398e983a 	sll	r7,r7,r6
 8005d18:	21000104 	addi	r4,r4,4
 8005d1c:	394ab03a 	or	r5,r7,r5
 8005d20:	197fff15 	stw	r5,-4(r3)
 8005d24:	217fff17 	ldw	r5,-4(r4)
 8005d28:	2a4ad83a 	srl	r5,r5,r9
 8005d2c:	223ff636 	bltu	r4,r8,8005d08 <__alt_data_end+0xfc005d08>
 8005d30:	51400115 	stw	r5,4(r10)
 8005d34:	28001a1e 	bne	r5,zero,8005da0 <__lshift+0x140>
 8005d38:	843fffc4 	addi	r16,r16,-1
 8005d3c:	14000415 	stw	r16,16(r2)
 8005d40:	88000826 	beq	r17,zero,8005d64 <__lshift+0x104>
 8005d44:	89000117 	ldw	r4,4(r17)
 8005d48:	90c01317 	ldw	r3,76(r18)
 8005d4c:	2109883a 	add	r4,r4,r4
 8005d50:	2109883a 	add	r4,r4,r4
 8005d54:	1907883a 	add	r3,r3,r4
 8005d58:	19000017 	ldw	r4,0(r3)
 8005d5c:	89000015 	stw	r4,0(r17)
 8005d60:	1c400015 	stw	r17,0(r3)
 8005d64:	dfc00617 	ldw	ra,24(sp)
 8005d68:	dd400517 	ldw	r21,20(sp)
 8005d6c:	dd000417 	ldw	r20,16(sp)
 8005d70:	dcc00317 	ldw	r19,12(sp)
 8005d74:	dc800217 	ldw	r18,8(sp)
 8005d78:	dc400117 	ldw	r17,4(sp)
 8005d7c:	dc000017 	ldw	r16,0(sp)
 8005d80:	dec00704 	addi	sp,sp,28
 8005d84:	f800283a 	ret
 8005d88:	21400017 	ldw	r5,0(r4)
 8005d8c:	18c00104 	addi	r3,r3,4
 8005d90:	21000104 	addi	r4,r4,4
 8005d94:	197fff15 	stw	r5,-4(r3)
 8005d98:	223ffb36 	bltu	r4,r8,8005d88 <__alt_data_end+0xfc005d88>
 8005d9c:	003fe606 	br	8005d38 <__alt_data_end+0xfc005d38>
 8005da0:	9c000084 	addi	r16,r19,2
 8005da4:	003fe406 	br	8005d38 <__alt_data_end+0xfc005d38>

08005da8 <__mcmp>:
 8005da8:	20800417 	ldw	r2,16(r4)
 8005dac:	28c00417 	ldw	r3,16(r5)
 8005db0:	10c5c83a 	sub	r2,r2,r3
 8005db4:	1000111e 	bne	r2,zero,8005dfc <__mcmp+0x54>
 8005db8:	18c7883a 	add	r3,r3,r3
 8005dbc:	18c7883a 	add	r3,r3,r3
 8005dc0:	21000504 	addi	r4,r4,20
 8005dc4:	29400504 	addi	r5,r5,20
 8005dc8:	20c5883a 	add	r2,r4,r3
 8005dcc:	28cb883a 	add	r5,r5,r3
 8005dd0:	00000106 	br	8005dd8 <__mcmp+0x30>
 8005dd4:	20800a2e 	bgeu	r4,r2,8005e00 <__mcmp+0x58>
 8005dd8:	10bfff04 	addi	r2,r2,-4
 8005ddc:	297fff04 	addi	r5,r5,-4
 8005de0:	11800017 	ldw	r6,0(r2)
 8005de4:	28c00017 	ldw	r3,0(r5)
 8005de8:	30fffa26 	beq	r6,r3,8005dd4 <__alt_data_end+0xfc005dd4>
 8005dec:	30c00236 	bltu	r6,r3,8005df8 <__mcmp+0x50>
 8005df0:	00800044 	movi	r2,1
 8005df4:	f800283a 	ret
 8005df8:	00bfffc4 	movi	r2,-1
 8005dfc:	f800283a 	ret
 8005e00:	0005883a 	mov	r2,zero
 8005e04:	f800283a 	ret

08005e08 <__mdiff>:
 8005e08:	28c00417 	ldw	r3,16(r5)
 8005e0c:	30800417 	ldw	r2,16(r6)
 8005e10:	defffa04 	addi	sp,sp,-24
 8005e14:	dcc00315 	stw	r19,12(sp)
 8005e18:	dc800215 	stw	r18,8(sp)
 8005e1c:	dfc00515 	stw	ra,20(sp)
 8005e20:	dd000415 	stw	r20,16(sp)
 8005e24:	dc400115 	stw	r17,4(sp)
 8005e28:	dc000015 	stw	r16,0(sp)
 8005e2c:	1887c83a 	sub	r3,r3,r2
 8005e30:	2825883a 	mov	r18,r5
 8005e34:	3027883a 	mov	r19,r6
 8005e38:	1800141e 	bne	r3,zero,8005e8c <__mdiff+0x84>
 8005e3c:	1085883a 	add	r2,r2,r2
 8005e40:	1085883a 	add	r2,r2,r2
 8005e44:	2a000504 	addi	r8,r5,20
 8005e48:	34000504 	addi	r16,r6,20
 8005e4c:	4087883a 	add	r3,r8,r2
 8005e50:	8085883a 	add	r2,r16,r2
 8005e54:	00000106 	br	8005e5c <__mdiff+0x54>
 8005e58:	40c0592e 	bgeu	r8,r3,8005fc0 <__mdiff+0x1b8>
 8005e5c:	18ffff04 	addi	r3,r3,-4
 8005e60:	10bfff04 	addi	r2,r2,-4
 8005e64:	19c00017 	ldw	r7,0(r3)
 8005e68:	11400017 	ldw	r5,0(r2)
 8005e6c:	397ffa26 	beq	r7,r5,8005e58 <__alt_data_end+0xfc005e58>
 8005e70:	3940592e 	bgeu	r7,r5,8005fd8 <__mdiff+0x1d0>
 8005e74:	9005883a 	mov	r2,r18
 8005e78:	4023883a 	mov	r17,r8
 8005e7c:	9825883a 	mov	r18,r19
 8005e80:	05000044 	movi	r20,1
 8005e84:	1027883a 	mov	r19,r2
 8005e88:	00000406 	br	8005e9c <__mdiff+0x94>
 8005e8c:	18005616 	blt	r3,zero,8005fe8 <__mdiff+0x1e0>
 8005e90:	34400504 	addi	r17,r6,20
 8005e94:	2c000504 	addi	r16,r5,20
 8005e98:	0029883a 	mov	r20,zero
 8005e9c:	91400117 	ldw	r5,4(r18)
 8005ea0:	80054240 	call	8005424 <_Balloc>
 8005ea4:	92400417 	ldw	r9,16(r18)
 8005ea8:	9b000417 	ldw	r12,16(r19)
 8005eac:	12c00504 	addi	r11,r2,20
 8005eb0:	4a51883a 	add	r8,r9,r9
 8005eb4:	6319883a 	add	r12,r12,r12
 8005eb8:	4211883a 	add	r8,r8,r8
 8005ebc:	6319883a 	add	r12,r12,r12
 8005ec0:	15000315 	stw	r20,12(r2)
 8005ec4:	8211883a 	add	r8,r16,r8
 8005ec8:	8b19883a 	add	r12,r17,r12
 8005ecc:	0007883a 	mov	r3,zero
 8005ed0:	81400017 	ldw	r5,0(r16)
 8005ed4:	89c00017 	ldw	r7,0(r17)
 8005ed8:	59800104 	addi	r6,r11,4
 8005edc:	293fffcc 	andi	r4,r5,65535
 8005ee0:	20c7883a 	add	r3,r4,r3
 8005ee4:	393fffcc 	andi	r4,r7,65535
 8005ee8:	1909c83a 	sub	r4,r3,r4
 8005eec:	280ad43a 	srli	r5,r5,16
 8005ef0:	380ed43a 	srli	r7,r7,16
 8005ef4:	2007d43a 	srai	r3,r4,16
 8005ef8:	213fffcc 	andi	r4,r4,65535
 8005efc:	29cbc83a 	sub	r5,r5,r7
 8005f00:	28c7883a 	add	r3,r5,r3
 8005f04:	180a943a 	slli	r5,r3,16
 8005f08:	8c400104 	addi	r17,r17,4
 8005f0c:	84000104 	addi	r16,r16,4
 8005f10:	2908b03a 	or	r4,r5,r4
 8005f14:	59000015 	stw	r4,0(r11)
 8005f18:	1807d43a 	srai	r3,r3,16
 8005f1c:	3015883a 	mov	r10,r6
 8005f20:	3017883a 	mov	r11,r6
 8005f24:	8b3fea36 	bltu	r17,r12,8005ed0 <__alt_data_end+0xfc005ed0>
 8005f28:	8200162e 	bgeu	r16,r8,8005f84 <__mdiff+0x17c>
 8005f2c:	8017883a 	mov	r11,r16
 8005f30:	59400017 	ldw	r5,0(r11)
 8005f34:	31800104 	addi	r6,r6,4
 8005f38:	5ac00104 	addi	r11,r11,4
 8005f3c:	293fffcc 	andi	r4,r5,65535
 8005f40:	20c7883a 	add	r3,r4,r3
 8005f44:	280ed43a 	srli	r7,r5,16
 8005f48:	180bd43a 	srai	r5,r3,16
 8005f4c:	193fffcc 	andi	r4,r3,65535
 8005f50:	3947883a 	add	r3,r7,r5
 8005f54:	180a943a 	slli	r5,r3,16
 8005f58:	1807d43a 	srai	r3,r3,16
 8005f5c:	2908b03a 	or	r4,r5,r4
 8005f60:	313fff15 	stw	r4,-4(r6)
 8005f64:	5a3ff236 	bltu	r11,r8,8005f30 <__alt_data_end+0xfc005f30>
 8005f68:	0406303a 	nor	r3,zero,r16
 8005f6c:	1a07883a 	add	r3,r3,r8
 8005f70:	1806d0ba 	srli	r3,r3,2
 8005f74:	18c00044 	addi	r3,r3,1
 8005f78:	18c7883a 	add	r3,r3,r3
 8005f7c:	18c7883a 	add	r3,r3,r3
 8005f80:	50d5883a 	add	r10,r10,r3
 8005f84:	50ffff04 	addi	r3,r10,-4
 8005f88:	2000041e 	bne	r4,zero,8005f9c <__mdiff+0x194>
 8005f8c:	18ffff04 	addi	r3,r3,-4
 8005f90:	19000017 	ldw	r4,0(r3)
 8005f94:	4a7fffc4 	addi	r9,r9,-1
 8005f98:	203ffc26 	beq	r4,zero,8005f8c <__alt_data_end+0xfc005f8c>
 8005f9c:	12400415 	stw	r9,16(r2)
 8005fa0:	dfc00517 	ldw	ra,20(sp)
 8005fa4:	dd000417 	ldw	r20,16(sp)
 8005fa8:	dcc00317 	ldw	r19,12(sp)
 8005fac:	dc800217 	ldw	r18,8(sp)
 8005fb0:	dc400117 	ldw	r17,4(sp)
 8005fb4:	dc000017 	ldw	r16,0(sp)
 8005fb8:	dec00604 	addi	sp,sp,24
 8005fbc:	f800283a 	ret
 8005fc0:	000b883a 	mov	r5,zero
 8005fc4:	80054240 	call	8005424 <_Balloc>
 8005fc8:	00c00044 	movi	r3,1
 8005fcc:	10c00415 	stw	r3,16(r2)
 8005fd0:	10000515 	stw	zero,20(r2)
 8005fd4:	003ff206 	br	8005fa0 <__alt_data_end+0xfc005fa0>
 8005fd8:	8023883a 	mov	r17,r16
 8005fdc:	0029883a 	mov	r20,zero
 8005fe0:	4021883a 	mov	r16,r8
 8005fe4:	003fad06 	br	8005e9c <__alt_data_end+0xfc005e9c>
 8005fe8:	9005883a 	mov	r2,r18
 8005fec:	94400504 	addi	r17,r18,20
 8005ff0:	9c000504 	addi	r16,r19,20
 8005ff4:	9825883a 	mov	r18,r19
 8005ff8:	05000044 	movi	r20,1
 8005ffc:	1027883a 	mov	r19,r2
 8006000:	003fa606 	br	8005e9c <__alt_data_end+0xfc005e9c>

08006004 <__ulp>:
 8006004:	295ffc2c 	andhi	r5,r5,32752
 8006008:	00bf3034 	movhi	r2,64704
 800600c:	2887883a 	add	r3,r5,r2
 8006010:	00c0020e 	bge	zero,r3,800601c <__ulp+0x18>
 8006014:	0005883a 	mov	r2,zero
 8006018:	f800283a 	ret
 800601c:	00c7c83a 	sub	r3,zero,r3
 8006020:	1807d53a 	srai	r3,r3,20
 8006024:	008004c4 	movi	r2,19
 8006028:	10c00b0e 	bge	r2,r3,8006058 <__ulp+0x54>
 800602c:	18bffb04 	addi	r2,r3,-20
 8006030:	01000784 	movi	r4,30
 8006034:	0007883a 	mov	r3,zero
 8006038:	20800516 	blt	r4,r2,8006050 <__ulp+0x4c>
 800603c:	010007c4 	movi	r4,31
 8006040:	2089c83a 	sub	r4,r4,r2
 8006044:	00800044 	movi	r2,1
 8006048:	1104983a 	sll	r2,r2,r4
 800604c:	f800283a 	ret
 8006050:	00800044 	movi	r2,1
 8006054:	f800283a 	ret
 8006058:	01400234 	movhi	r5,8
 800605c:	28c7d83a 	sra	r3,r5,r3
 8006060:	0005883a 	mov	r2,zero
 8006064:	f800283a 	ret

08006068 <__b2d>:
 8006068:	defffa04 	addi	sp,sp,-24
 800606c:	dc000015 	stw	r16,0(sp)
 8006070:	24000417 	ldw	r16,16(r4)
 8006074:	dc400115 	stw	r17,4(sp)
 8006078:	24400504 	addi	r17,r4,20
 800607c:	8421883a 	add	r16,r16,r16
 8006080:	8421883a 	add	r16,r16,r16
 8006084:	8c21883a 	add	r16,r17,r16
 8006088:	dc800215 	stw	r18,8(sp)
 800608c:	84bfff17 	ldw	r18,-4(r16)
 8006090:	dd000415 	stw	r20,16(sp)
 8006094:	dcc00315 	stw	r19,12(sp)
 8006098:	9009883a 	mov	r4,r18
 800609c:	2829883a 	mov	r20,r5
 80060a0:	dfc00515 	stw	ra,20(sp)
 80060a4:	80057400 	call	8005740 <__hi0bits>
 80060a8:	00c00804 	movi	r3,32
 80060ac:	1889c83a 	sub	r4,r3,r2
 80060b0:	a1000015 	stw	r4,0(r20)
 80060b4:	01000284 	movi	r4,10
 80060b8:	84ffff04 	addi	r19,r16,-4
 80060bc:	20801216 	blt	r4,r2,8006108 <__b2d+0xa0>
 80060c0:	018002c4 	movi	r6,11
 80060c4:	308dc83a 	sub	r6,r6,r2
 80060c8:	9186d83a 	srl	r3,r18,r6
 80060cc:	18cffc34 	orhi	r3,r3,16368
 80060d0:	8cc0212e 	bgeu	r17,r19,8006158 <__b2d+0xf0>
 80060d4:	813ffe17 	ldw	r4,-8(r16)
 80060d8:	218cd83a 	srl	r6,r4,r6
 80060dc:	10800544 	addi	r2,r2,21
 80060e0:	9084983a 	sll	r2,r18,r2
 80060e4:	1184b03a 	or	r2,r2,r6
 80060e8:	dfc00517 	ldw	ra,20(sp)
 80060ec:	dd000417 	ldw	r20,16(sp)
 80060f0:	dcc00317 	ldw	r19,12(sp)
 80060f4:	dc800217 	ldw	r18,8(sp)
 80060f8:	dc400117 	ldw	r17,4(sp)
 80060fc:	dc000017 	ldw	r16,0(sp)
 8006100:	dec00604 	addi	sp,sp,24
 8006104:	f800283a 	ret
 8006108:	8cc00f2e 	bgeu	r17,r19,8006148 <__b2d+0xe0>
 800610c:	117ffd44 	addi	r5,r2,-11
 8006110:	80bffe17 	ldw	r2,-8(r16)
 8006114:	28000e26 	beq	r5,zero,8006150 <__b2d+0xe8>
 8006118:	1949c83a 	sub	r4,r3,r5
 800611c:	9164983a 	sll	r18,r18,r5
 8006120:	1106d83a 	srl	r3,r2,r4
 8006124:	81bffe04 	addi	r6,r16,-8
 8006128:	948ffc34 	orhi	r18,r18,16368
 800612c:	90c6b03a 	or	r3,r18,r3
 8006130:	89800e2e 	bgeu	r17,r6,800616c <__b2d+0x104>
 8006134:	81bffd17 	ldw	r6,-12(r16)
 8006138:	1144983a 	sll	r2,r2,r5
 800613c:	310ad83a 	srl	r5,r6,r4
 8006140:	2884b03a 	or	r2,r5,r2
 8006144:	003fe806 	br	80060e8 <__alt_data_end+0xfc0060e8>
 8006148:	10bffd44 	addi	r2,r2,-11
 800614c:	1000041e 	bne	r2,zero,8006160 <__b2d+0xf8>
 8006150:	90cffc34 	orhi	r3,r18,16368
 8006154:	003fe406 	br	80060e8 <__alt_data_end+0xfc0060e8>
 8006158:	000d883a 	mov	r6,zero
 800615c:	003fdf06 	br	80060dc <__alt_data_end+0xfc0060dc>
 8006160:	90a4983a 	sll	r18,r18,r2
 8006164:	0005883a 	mov	r2,zero
 8006168:	003ff906 	br	8006150 <__alt_data_end+0xfc006150>
 800616c:	1144983a 	sll	r2,r2,r5
 8006170:	003fdd06 	br	80060e8 <__alt_data_end+0xfc0060e8>

08006174 <__d2b>:
 8006174:	defff804 	addi	sp,sp,-32
 8006178:	dc000215 	stw	r16,8(sp)
 800617c:	3021883a 	mov	r16,r6
 8006180:	dc400315 	stw	r17,12(sp)
 8006184:	8022907a 	slli	r17,r16,1
 8006188:	dd000615 	stw	r20,24(sp)
 800618c:	2829883a 	mov	r20,r5
 8006190:	01400044 	movi	r5,1
 8006194:	dcc00515 	stw	r19,20(sp)
 8006198:	dc800415 	stw	r18,16(sp)
 800619c:	dfc00715 	stw	ra,28(sp)
 80061a0:	3825883a 	mov	r18,r7
 80061a4:	8822d57a 	srli	r17,r17,21
 80061a8:	80054240 	call	8005424 <_Balloc>
 80061ac:	1027883a 	mov	r19,r2
 80061b0:	00800434 	movhi	r2,16
 80061b4:	10bfffc4 	addi	r2,r2,-1
 80061b8:	808c703a 	and	r6,r16,r2
 80061bc:	88000126 	beq	r17,zero,80061c4 <__d2b+0x50>
 80061c0:	31800434 	orhi	r6,r6,16
 80061c4:	d9800015 	stw	r6,0(sp)
 80061c8:	a0002426 	beq	r20,zero,800625c <__d2b+0xe8>
 80061cc:	d9000104 	addi	r4,sp,4
 80061d0:	dd000115 	stw	r20,4(sp)
 80061d4:	80057a80 	call	80057a8 <__lo0bits>
 80061d8:	d8c00017 	ldw	r3,0(sp)
 80061dc:	10002f1e 	bne	r2,zero,800629c <__d2b+0x128>
 80061e0:	d9000117 	ldw	r4,4(sp)
 80061e4:	99000515 	stw	r4,20(r19)
 80061e8:	1821003a 	cmpeq	r16,r3,zero
 80061ec:	01000084 	movi	r4,2
 80061f0:	2421c83a 	sub	r16,r4,r16
 80061f4:	98c00615 	stw	r3,24(r19)
 80061f8:	9c000415 	stw	r16,16(r19)
 80061fc:	88001f1e 	bne	r17,zero,800627c <__d2b+0x108>
 8006200:	10bef384 	addi	r2,r2,-1074
 8006204:	90800015 	stw	r2,0(r18)
 8006208:	00900034 	movhi	r2,16384
 800620c:	10bfffc4 	addi	r2,r2,-1
 8006210:	8085883a 	add	r2,r16,r2
 8006214:	1085883a 	add	r2,r2,r2
 8006218:	1085883a 	add	r2,r2,r2
 800621c:	9885883a 	add	r2,r19,r2
 8006220:	11000517 	ldw	r4,20(r2)
 8006224:	8020917a 	slli	r16,r16,5
 8006228:	80057400 	call	8005740 <__hi0bits>
 800622c:	d8c00817 	ldw	r3,32(sp)
 8006230:	8085c83a 	sub	r2,r16,r2
 8006234:	18800015 	stw	r2,0(r3)
 8006238:	9805883a 	mov	r2,r19
 800623c:	dfc00717 	ldw	ra,28(sp)
 8006240:	dd000617 	ldw	r20,24(sp)
 8006244:	dcc00517 	ldw	r19,20(sp)
 8006248:	dc800417 	ldw	r18,16(sp)
 800624c:	dc400317 	ldw	r17,12(sp)
 8006250:	dc000217 	ldw	r16,8(sp)
 8006254:	dec00804 	addi	sp,sp,32
 8006258:	f800283a 	ret
 800625c:	d809883a 	mov	r4,sp
 8006260:	80057a80 	call	80057a8 <__lo0bits>
 8006264:	d8c00017 	ldw	r3,0(sp)
 8006268:	04000044 	movi	r16,1
 800626c:	9c000415 	stw	r16,16(r19)
 8006270:	98c00515 	stw	r3,20(r19)
 8006274:	10800804 	addi	r2,r2,32
 8006278:	883fe126 	beq	r17,zero,8006200 <__alt_data_end+0xfc006200>
 800627c:	00c00d44 	movi	r3,53
 8006280:	8c7ef344 	addi	r17,r17,-1075
 8006284:	88a3883a 	add	r17,r17,r2
 8006288:	1885c83a 	sub	r2,r3,r2
 800628c:	d8c00817 	ldw	r3,32(sp)
 8006290:	94400015 	stw	r17,0(r18)
 8006294:	18800015 	stw	r2,0(r3)
 8006298:	003fe706 	br	8006238 <__alt_data_end+0xfc006238>
 800629c:	01000804 	movi	r4,32
 80062a0:	2089c83a 	sub	r4,r4,r2
 80062a4:	1908983a 	sll	r4,r3,r4
 80062a8:	d9400117 	ldw	r5,4(sp)
 80062ac:	1886d83a 	srl	r3,r3,r2
 80062b0:	2148b03a 	or	r4,r4,r5
 80062b4:	99000515 	stw	r4,20(r19)
 80062b8:	d8c00015 	stw	r3,0(sp)
 80062bc:	003fca06 	br	80061e8 <__alt_data_end+0xfc0061e8>

080062c0 <__ratio>:
 80062c0:	defff904 	addi	sp,sp,-28
 80062c4:	dc400315 	stw	r17,12(sp)
 80062c8:	2823883a 	mov	r17,r5
 80062cc:	d9400104 	addi	r5,sp,4
 80062d0:	dfc00615 	stw	ra,24(sp)
 80062d4:	dcc00515 	stw	r19,20(sp)
 80062d8:	dc800415 	stw	r18,16(sp)
 80062dc:	2027883a 	mov	r19,r4
 80062e0:	dc000215 	stw	r16,8(sp)
 80062e4:	80060680 	call	8006068 <__b2d>
 80062e8:	d80b883a 	mov	r5,sp
 80062ec:	8809883a 	mov	r4,r17
 80062f0:	1025883a 	mov	r18,r2
 80062f4:	1821883a 	mov	r16,r3
 80062f8:	80060680 	call	8006068 <__b2d>
 80062fc:	8a000417 	ldw	r8,16(r17)
 8006300:	99000417 	ldw	r4,16(r19)
 8006304:	d9400117 	ldw	r5,4(sp)
 8006308:	2209c83a 	sub	r4,r4,r8
 800630c:	2010917a 	slli	r8,r4,5
 8006310:	d9000017 	ldw	r4,0(sp)
 8006314:	2909c83a 	sub	r4,r5,r4
 8006318:	4109883a 	add	r4,r8,r4
 800631c:	01000e0e 	bge	zero,r4,8006358 <__ratio+0x98>
 8006320:	2008953a 	slli	r4,r4,20
 8006324:	2421883a 	add	r16,r4,r16
 8006328:	100d883a 	mov	r6,r2
 800632c:	180f883a 	mov	r7,r3
 8006330:	9009883a 	mov	r4,r18
 8006334:	800b883a 	mov	r5,r16
 8006338:	8009e600 	call	8009e60 <__divdf3>
 800633c:	dfc00617 	ldw	ra,24(sp)
 8006340:	dcc00517 	ldw	r19,20(sp)
 8006344:	dc800417 	ldw	r18,16(sp)
 8006348:	dc400317 	ldw	r17,12(sp)
 800634c:	dc000217 	ldw	r16,8(sp)
 8006350:	dec00704 	addi	sp,sp,28
 8006354:	f800283a 	ret
 8006358:	2008953a 	slli	r4,r4,20
 800635c:	1907c83a 	sub	r3,r3,r4
 8006360:	003ff106 	br	8006328 <__alt_data_end+0xfc006328>

08006364 <_mprec_log10>:
 8006364:	defffe04 	addi	sp,sp,-8
 8006368:	dc000015 	stw	r16,0(sp)
 800636c:	dfc00115 	stw	ra,4(sp)
 8006370:	008005c4 	movi	r2,23
 8006374:	2021883a 	mov	r16,r4
 8006378:	11000d0e 	bge	r2,r4,80063b0 <_mprec_log10+0x4c>
 800637c:	0005883a 	mov	r2,zero
 8006380:	00cffc34 	movhi	r3,16368
 8006384:	843fffc4 	addi	r16,r16,-1
 8006388:	000d883a 	mov	r6,zero
 800638c:	01d00934 	movhi	r7,16420
 8006390:	1009883a 	mov	r4,r2
 8006394:	180b883a 	mov	r5,r3
 8006398:	800aa880 	call	800aa88 <__muldf3>
 800639c:	803ff91e 	bne	r16,zero,8006384 <__alt_data_end+0xfc006384>
 80063a0:	dfc00117 	ldw	ra,4(sp)
 80063a4:	dc000017 	ldw	r16,0(sp)
 80063a8:	dec00204 	addi	sp,sp,8
 80063ac:	f800283a 	ret
 80063b0:	202090fa 	slli	r16,r4,3
 80063b4:	00820074 	movhi	r2,2049
 80063b8:	10b8d204 	addi	r2,r2,-7352
 80063bc:	1421883a 	add	r16,r2,r16
 80063c0:	80800017 	ldw	r2,0(r16)
 80063c4:	80c00117 	ldw	r3,4(r16)
 80063c8:	dfc00117 	ldw	ra,4(sp)
 80063cc:	dc000017 	ldw	r16,0(sp)
 80063d0:	dec00204 	addi	sp,sp,8
 80063d4:	f800283a 	ret

080063d8 <__copybits>:
 80063d8:	297fffc4 	addi	r5,r5,-1
 80063dc:	280fd17a 	srai	r7,r5,5
 80063e0:	30c00417 	ldw	r3,16(r6)
 80063e4:	30800504 	addi	r2,r6,20
 80063e8:	39c00044 	addi	r7,r7,1
 80063ec:	18c7883a 	add	r3,r3,r3
 80063f0:	39cf883a 	add	r7,r7,r7
 80063f4:	18c7883a 	add	r3,r3,r3
 80063f8:	39cf883a 	add	r7,r7,r7
 80063fc:	10c7883a 	add	r3,r2,r3
 8006400:	21cf883a 	add	r7,r4,r7
 8006404:	10c00d2e 	bgeu	r2,r3,800643c <__copybits+0x64>
 8006408:	200b883a 	mov	r5,r4
 800640c:	12000017 	ldw	r8,0(r2)
 8006410:	29400104 	addi	r5,r5,4
 8006414:	10800104 	addi	r2,r2,4
 8006418:	2a3fff15 	stw	r8,-4(r5)
 800641c:	10fffb36 	bltu	r2,r3,800640c <__alt_data_end+0xfc00640c>
 8006420:	1985c83a 	sub	r2,r3,r6
 8006424:	10bffac4 	addi	r2,r2,-21
 8006428:	1004d0ba 	srli	r2,r2,2
 800642c:	10800044 	addi	r2,r2,1
 8006430:	1085883a 	add	r2,r2,r2
 8006434:	1085883a 	add	r2,r2,r2
 8006438:	2089883a 	add	r4,r4,r2
 800643c:	21c0032e 	bgeu	r4,r7,800644c <__copybits+0x74>
 8006440:	20000015 	stw	zero,0(r4)
 8006444:	21000104 	addi	r4,r4,4
 8006448:	21fffd36 	bltu	r4,r7,8006440 <__alt_data_end+0xfc006440>
 800644c:	f800283a 	ret

08006450 <__any_on>:
 8006450:	20c00417 	ldw	r3,16(r4)
 8006454:	2805d17a 	srai	r2,r5,5
 8006458:	21000504 	addi	r4,r4,20
 800645c:	18800d0e 	bge	r3,r2,8006494 <__any_on+0x44>
 8006460:	18c7883a 	add	r3,r3,r3
 8006464:	18c7883a 	add	r3,r3,r3
 8006468:	20c7883a 	add	r3,r4,r3
 800646c:	20c0192e 	bgeu	r4,r3,80064d4 <__any_on+0x84>
 8006470:	18bfff17 	ldw	r2,-4(r3)
 8006474:	18ffff04 	addi	r3,r3,-4
 8006478:	1000041e 	bne	r2,zero,800648c <__any_on+0x3c>
 800647c:	20c0142e 	bgeu	r4,r3,80064d0 <__any_on+0x80>
 8006480:	18ffff04 	addi	r3,r3,-4
 8006484:	19400017 	ldw	r5,0(r3)
 8006488:	283ffc26 	beq	r5,zero,800647c <__alt_data_end+0xfc00647c>
 800648c:	00800044 	movi	r2,1
 8006490:	f800283a 	ret
 8006494:	10c00a0e 	bge	r2,r3,80064c0 <__any_on+0x70>
 8006498:	1085883a 	add	r2,r2,r2
 800649c:	1085883a 	add	r2,r2,r2
 80064a0:	294007cc 	andi	r5,r5,31
 80064a4:	2087883a 	add	r3,r4,r2
 80064a8:	283ff026 	beq	r5,zero,800646c <__alt_data_end+0xfc00646c>
 80064ac:	19800017 	ldw	r6,0(r3)
 80064b0:	3144d83a 	srl	r2,r6,r5
 80064b4:	114a983a 	sll	r5,r2,r5
 80064b8:	317ff41e 	bne	r6,r5,800648c <__alt_data_end+0xfc00648c>
 80064bc:	003feb06 	br	800646c <__alt_data_end+0xfc00646c>
 80064c0:	1085883a 	add	r2,r2,r2
 80064c4:	1085883a 	add	r2,r2,r2
 80064c8:	2087883a 	add	r3,r4,r2
 80064cc:	003fe706 	br	800646c <__alt_data_end+0xfc00646c>
 80064d0:	f800283a 	ret
 80064d4:	0005883a 	mov	r2,zero
 80064d8:	f800283a 	ret

080064dc <__fpclassifyd>:
 80064dc:	00a00034 	movhi	r2,32768
 80064e0:	10bfffc4 	addi	r2,r2,-1
 80064e4:	2884703a 	and	r2,r5,r2
 80064e8:	10000726 	beq	r2,zero,8006508 <__fpclassifyd+0x2c>
 80064ec:	00fffc34 	movhi	r3,65520
 80064f0:	019ff834 	movhi	r6,32736
 80064f4:	28c7883a 	add	r3,r5,r3
 80064f8:	31bfffc4 	addi	r6,r6,-1
 80064fc:	30c00536 	bltu	r6,r3,8006514 <__fpclassifyd+0x38>
 8006500:	00800104 	movi	r2,4
 8006504:	f800283a 	ret
 8006508:	2000021e 	bne	r4,zero,8006514 <__fpclassifyd+0x38>
 800650c:	00800084 	movi	r2,2
 8006510:	f800283a 	ret
 8006514:	00dffc34 	movhi	r3,32752
 8006518:	019ff834 	movhi	r6,32736
 800651c:	28cb883a 	add	r5,r5,r3
 8006520:	31bfffc4 	addi	r6,r6,-1
 8006524:	317ff62e 	bgeu	r6,r5,8006500 <__alt_data_end+0xfc006500>
 8006528:	01400434 	movhi	r5,16
 800652c:	297fffc4 	addi	r5,r5,-1
 8006530:	28800236 	bltu	r5,r2,800653c <__fpclassifyd+0x60>
 8006534:	008000c4 	movi	r2,3
 8006538:	f800283a 	ret
 800653c:	10c00226 	beq	r2,r3,8006548 <__fpclassifyd+0x6c>
 8006540:	0005883a 	mov	r2,zero
 8006544:	f800283a 	ret
 8006548:	2005003a 	cmpeq	r2,r4,zero
 800654c:	f800283a 	ret

08006550 <_sbrk_r>:
 8006550:	defffd04 	addi	sp,sp,-12
 8006554:	dc000015 	stw	r16,0(sp)
 8006558:	04020074 	movhi	r16,2049
 800655c:	dc400115 	stw	r17,4(sp)
 8006560:	8408ff04 	addi	r16,r16,9212
 8006564:	2023883a 	mov	r17,r4
 8006568:	2809883a 	mov	r4,r5
 800656c:	dfc00215 	stw	ra,8(sp)
 8006570:	80000015 	stw	zero,0(r16)
 8006574:	800c0080 	call	800c008 <sbrk>
 8006578:	00ffffc4 	movi	r3,-1
 800657c:	10c00526 	beq	r2,r3,8006594 <_sbrk_r+0x44>
 8006580:	dfc00217 	ldw	ra,8(sp)
 8006584:	dc400117 	ldw	r17,4(sp)
 8006588:	dc000017 	ldw	r16,0(sp)
 800658c:	dec00304 	addi	sp,sp,12
 8006590:	f800283a 	ret
 8006594:	80c00017 	ldw	r3,0(r16)
 8006598:	183ff926 	beq	r3,zero,8006580 <__alt_data_end+0xfc006580>
 800659c:	88c00015 	stw	r3,0(r17)
 80065a0:	003ff706 	br	8006580 <__alt_data_end+0xfc006580>

080065a4 <strcmp>:
 80065a4:	2144b03a 	or	r2,r4,r5
 80065a8:	108000cc 	andi	r2,r2,3
 80065ac:	1000171e 	bne	r2,zero,800660c <strcmp+0x68>
 80065b0:	20800017 	ldw	r2,0(r4)
 80065b4:	28c00017 	ldw	r3,0(r5)
 80065b8:	10c0141e 	bne	r2,r3,800660c <strcmp+0x68>
 80065bc:	027fbff4 	movhi	r9,65279
 80065c0:	4a7fbfc4 	addi	r9,r9,-257
 80065c4:	0086303a 	nor	r3,zero,r2
 80065c8:	02202074 	movhi	r8,32897
 80065cc:	1245883a 	add	r2,r2,r9
 80065d0:	42202004 	addi	r8,r8,-32640
 80065d4:	10c4703a 	and	r2,r2,r3
 80065d8:	1204703a 	and	r2,r2,r8
 80065dc:	10000226 	beq	r2,zero,80065e8 <strcmp+0x44>
 80065e0:	00002306 	br	8006670 <strcmp+0xcc>
 80065e4:	1000221e 	bne	r2,zero,8006670 <strcmp+0xcc>
 80065e8:	21000104 	addi	r4,r4,4
 80065ec:	20c00017 	ldw	r3,0(r4)
 80065f0:	29400104 	addi	r5,r5,4
 80065f4:	29800017 	ldw	r6,0(r5)
 80065f8:	1a4f883a 	add	r7,r3,r9
 80065fc:	00c4303a 	nor	r2,zero,r3
 8006600:	3884703a 	and	r2,r7,r2
 8006604:	1204703a 	and	r2,r2,r8
 8006608:	19bff626 	beq	r3,r6,80065e4 <__alt_data_end+0xfc0065e4>
 800660c:	20800003 	ldbu	r2,0(r4)
 8006610:	10c03fcc 	andi	r3,r2,255
 8006614:	18c0201c 	xori	r3,r3,128
 8006618:	18ffe004 	addi	r3,r3,-128
 800661c:	18000c26 	beq	r3,zero,8006650 <strcmp+0xac>
 8006620:	29800007 	ldb	r6,0(r5)
 8006624:	19800326 	beq	r3,r6,8006634 <strcmp+0x90>
 8006628:	00001306 	br	8006678 <strcmp+0xd4>
 800662c:	29800007 	ldb	r6,0(r5)
 8006630:	11800b1e 	bne	r2,r6,8006660 <strcmp+0xbc>
 8006634:	21000044 	addi	r4,r4,1
 8006638:	20c00003 	ldbu	r3,0(r4)
 800663c:	29400044 	addi	r5,r5,1
 8006640:	18803fcc 	andi	r2,r3,255
 8006644:	1080201c 	xori	r2,r2,128
 8006648:	10bfe004 	addi	r2,r2,-128
 800664c:	103ff71e 	bne	r2,zero,800662c <__alt_data_end+0xfc00662c>
 8006650:	0007883a 	mov	r3,zero
 8006654:	28800003 	ldbu	r2,0(r5)
 8006658:	1885c83a 	sub	r2,r3,r2
 800665c:	f800283a 	ret
 8006660:	28800003 	ldbu	r2,0(r5)
 8006664:	18c03fcc 	andi	r3,r3,255
 8006668:	1885c83a 	sub	r2,r3,r2
 800666c:	f800283a 	ret
 8006670:	0005883a 	mov	r2,zero
 8006674:	f800283a 	ret
 8006678:	10c03fcc 	andi	r3,r2,255
 800667c:	003ff506 	br	8006654 <__alt_data_end+0xfc006654>

08006680 <__ssprint_r>:
 8006680:	30800217 	ldw	r2,8(r6)
 8006684:	defff604 	addi	sp,sp,-40
 8006688:	dc800215 	stw	r18,8(sp)
 800668c:	dfc00915 	stw	ra,36(sp)
 8006690:	df000815 	stw	fp,32(sp)
 8006694:	ddc00715 	stw	r23,28(sp)
 8006698:	dd800615 	stw	r22,24(sp)
 800669c:	dd400515 	stw	r21,20(sp)
 80066a0:	dd000415 	stw	r20,16(sp)
 80066a4:	dcc00315 	stw	r19,12(sp)
 80066a8:	dc400115 	stw	r17,4(sp)
 80066ac:	dc000015 	stw	r16,0(sp)
 80066b0:	3025883a 	mov	r18,r6
 80066b4:	10005826 	beq	r2,zero,8006818 <__ssprint_r+0x198>
 80066b8:	2027883a 	mov	r19,r4
 80066bc:	35c00017 	ldw	r23,0(r6)
 80066c0:	29000017 	ldw	r4,0(r5)
 80066c4:	28800217 	ldw	r2,8(r5)
 80066c8:	2823883a 	mov	r17,r5
 80066cc:	0039883a 	mov	fp,zero
 80066d0:	0021883a 	mov	r16,zero
 80066d4:	80003926 	beq	r16,zero,80067bc <__ssprint_r+0x13c>
 80066d8:	102b883a 	mov	r21,r2
 80066dc:	102d883a 	mov	r22,r2
 80066e0:	80803a36 	bltu	r16,r2,80067cc <__ssprint_r+0x14c>
 80066e4:	88c0030b 	ldhu	r3,12(r17)
 80066e8:	1881200c 	andi	r2,r3,1152
 80066ec:	10002626 	beq	r2,zero,8006788 <__ssprint_r+0x108>
 80066f0:	88800517 	ldw	r2,20(r17)
 80066f4:	89400417 	ldw	r5,16(r17)
 80066f8:	81800044 	addi	r6,r16,1
 80066fc:	108f883a 	add	r7,r2,r2
 8006700:	3885883a 	add	r2,r7,r2
 8006704:	100ed7fa 	srli	r7,r2,31
 8006708:	216dc83a 	sub	r22,r4,r5
 800670c:	3589883a 	add	r4,r6,r22
 8006710:	3885883a 	add	r2,r7,r2
 8006714:	102bd07a 	srai	r21,r2,1
 8006718:	a80d883a 	mov	r6,r21
 800671c:	a900022e 	bgeu	r21,r4,8006728 <__ssprint_r+0xa8>
 8006720:	202b883a 	mov	r21,r4
 8006724:	200d883a 	mov	r6,r4
 8006728:	18c1000c 	andi	r3,r3,1024
 800672c:	18002a26 	beq	r3,zero,80067d8 <__ssprint_r+0x158>
 8006730:	300b883a 	mov	r5,r6
 8006734:	9809883a 	mov	r4,r19
 8006738:	80049ec0 	call	80049ec <_malloc_r>
 800673c:	1029883a 	mov	r20,r2
 8006740:	10002c26 	beq	r2,zero,80067f4 <__ssprint_r+0x174>
 8006744:	89400417 	ldw	r5,16(r17)
 8006748:	b00d883a 	mov	r6,r22
 800674c:	1009883a 	mov	r4,r2
 8006750:	80052dc0 	call	80052dc <memcpy>
 8006754:	8880030b 	ldhu	r2,12(r17)
 8006758:	00fedfc4 	movi	r3,-1153
 800675c:	10c4703a 	and	r2,r2,r3
 8006760:	10802014 	ori	r2,r2,128
 8006764:	8880030d 	sth	r2,12(r17)
 8006768:	a589883a 	add	r4,r20,r22
 800676c:	adadc83a 	sub	r22,r21,r22
 8006770:	8d400515 	stw	r21,20(r17)
 8006774:	8d800215 	stw	r22,8(r17)
 8006778:	8d000415 	stw	r20,16(r17)
 800677c:	89000015 	stw	r4,0(r17)
 8006780:	802b883a 	mov	r21,r16
 8006784:	802d883a 	mov	r22,r16
 8006788:	b00d883a 	mov	r6,r22
 800678c:	e00b883a 	mov	r5,fp
 8006790:	80081000 	call	8008100 <memmove>
 8006794:	88800217 	ldw	r2,8(r17)
 8006798:	89000017 	ldw	r4,0(r17)
 800679c:	90c00217 	ldw	r3,8(r18)
 80067a0:	1545c83a 	sub	r2,r2,r21
 80067a4:	2589883a 	add	r4,r4,r22
 80067a8:	88800215 	stw	r2,8(r17)
 80067ac:	89000015 	stw	r4,0(r17)
 80067b0:	1c21c83a 	sub	r16,r3,r16
 80067b4:	94000215 	stw	r16,8(r18)
 80067b8:	80001726 	beq	r16,zero,8006818 <__ssprint_r+0x198>
 80067bc:	bf000017 	ldw	fp,0(r23)
 80067c0:	bc000117 	ldw	r16,4(r23)
 80067c4:	bdc00204 	addi	r23,r23,8
 80067c8:	003fc206 	br	80066d4 <__alt_data_end+0xfc0066d4>
 80067cc:	802b883a 	mov	r21,r16
 80067d0:	802d883a 	mov	r22,r16
 80067d4:	003fec06 	br	8006788 <__alt_data_end+0xfc006788>
 80067d8:	9809883a 	mov	r4,r19
 80067dc:	80083840 	call	8008384 <_realloc_r>
 80067e0:	1029883a 	mov	r20,r2
 80067e4:	103fe01e 	bne	r2,zero,8006768 <__alt_data_end+0xfc006768>
 80067e8:	89400417 	ldw	r5,16(r17)
 80067ec:	9809883a 	mov	r4,r19
 80067f0:	8007df00 	call	8007df0 <_free_r>
 80067f4:	88c0030b 	ldhu	r3,12(r17)
 80067f8:	00800304 	movi	r2,12
 80067fc:	98800015 	stw	r2,0(r19)
 8006800:	18c01014 	ori	r3,r3,64
 8006804:	88c0030d 	sth	r3,12(r17)
 8006808:	00bfffc4 	movi	r2,-1
 800680c:	90000215 	stw	zero,8(r18)
 8006810:	90000115 	stw	zero,4(r18)
 8006814:	00000206 	br	8006820 <__ssprint_r+0x1a0>
 8006818:	90000115 	stw	zero,4(r18)
 800681c:	0005883a 	mov	r2,zero
 8006820:	dfc00917 	ldw	ra,36(sp)
 8006824:	df000817 	ldw	fp,32(sp)
 8006828:	ddc00717 	ldw	r23,28(sp)
 800682c:	dd800617 	ldw	r22,24(sp)
 8006830:	dd400517 	ldw	r21,20(sp)
 8006834:	dd000417 	ldw	r20,16(sp)
 8006838:	dcc00317 	ldw	r19,12(sp)
 800683c:	dc800217 	ldw	r18,8(sp)
 8006840:	dc400117 	ldw	r17,4(sp)
 8006844:	dc000017 	ldw	r16,0(sp)
 8006848:	dec00a04 	addi	sp,sp,40
 800684c:	f800283a 	ret

08006850 <___svfiprintf_internal_r>:
 8006850:	2880030b 	ldhu	r2,12(r5)
 8006854:	deffc804 	addi	sp,sp,-224
 8006858:	dcc03115 	stw	r19,196(sp)
 800685c:	dfc03715 	stw	ra,220(sp)
 8006860:	df003615 	stw	fp,216(sp)
 8006864:	ddc03515 	stw	r23,212(sp)
 8006868:	dd803415 	stw	r22,208(sp)
 800686c:	dd403315 	stw	r21,204(sp)
 8006870:	dd003215 	stw	r20,200(sp)
 8006874:	dc803015 	stw	r18,192(sp)
 8006878:	dc402f15 	stw	r17,188(sp)
 800687c:	dc002e15 	stw	r16,184(sp)
 8006880:	d9402315 	stw	r5,140(sp)
 8006884:	d9002715 	stw	r4,156(sp)
 8006888:	1080200c 	andi	r2,r2,128
 800688c:	d9c02415 	stw	r7,144(sp)
 8006890:	3027883a 	mov	r19,r6
 8006894:	10000226 	beq	r2,zero,80068a0 <___svfiprintf_internal_r+0x50>
 8006898:	28800417 	ldw	r2,16(r5)
 800689c:	10046d26 	beq	r2,zero,8007a54 <___svfiprintf_internal_r+0x1204>
 80068a0:	d8801a04 	addi	r2,sp,104
 80068a4:	d8c019c4 	addi	r3,sp,103
 80068a8:	05820074 	movhi	r22,2049
 80068ac:	10c9c83a 	sub	r4,r2,r3
 80068b0:	b5b90404 	addi	r22,r22,-7152
 80068b4:	d8801e15 	stw	r2,120(sp)
 80068b8:	d8c01f15 	stw	r3,124(sp)
 80068bc:	dec01a15 	stw	sp,104(sp)
 80068c0:	d8001c15 	stw	zero,112(sp)
 80068c4:	d8001b15 	stw	zero,108(sp)
 80068c8:	d811883a 	mov	r8,sp
 80068cc:	d8002915 	stw	zero,164(sp)
 80068d0:	d8002615 	stw	zero,152(sp)
 80068d4:	d9002c15 	stw	r4,176(sp)
 80068d8:	98800007 	ldb	r2,0(r19)
 80068dc:	10031426 	beq	r2,zero,8007530 <___svfiprintf_internal_r+0xce0>
 80068e0:	00c00944 	movi	r3,37
 80068e4:	9825883a 	mov	r18,r19
 80068e8:	10c0021e 	bne	r2,r3,80068f4 <___svfiprintf_internal_r+0xa4>
 80068ec:	00001406 	br	8006940 <___svfiprintf_internal_r+0xf0>
 80068f0:	10c00326 	beq	r2,r3,8006900 <___svfiprintf_internal_r+0xb0>
 80068f4:	94800044 	addi	r18,r18,1
 80068f8:	90800007 	ldb	r2,0(r18)
 80068fc:	103ffc1e 	bne	r2,zero,80068f0 <__alt_data_end+0xfc0068f0>
 8006900:	94e1c83a 	sub	r16,r18,r19
 8006904:	80000e26 	beq	r16,zero,8006940 <___svfiprintf_internal_r+0xf0>
 8006908:	d8c01c17 	ldw	r3,112(sp)
 800690c:	d8801b17 	ldw	r2,108(sp)
 8006910:	44c00015 	stw	r19,0(r8)
 8006914:	1c07883a 	add	r3,r3,r16
 8006918:	10800044 	addi	r2,r2,1
 800691c:	d8c01c15 	stw	r3,112(sp)
 8006920:	44000115 	stw	r16,4(r8)
 8006924:	d8801b15 	stw	r2,108(sp)
 8006928:	00c001c4 	movi	r3,7
 800692c:	18835c16 	blt	r3,r2,80076a0 <___svfiprintf_internal_r+0xe50>
 8006930:	42000204 	addi	r8,r8,8
 8006934:	d9402617 	ldw	r5,152(sp)
 8006938:	2c0b883a 	add	r5,r5,r16
 800693c:	d9402615 	stw	r5,152(sp)
 8006940:	90800007 	ldb	r2,0(r18)
 8006944:	1002fc26 	beq	r2,zero,8007538 <___svfiprintf_internal_r+0xce8>
 8006948:	0023883a 	mov	r17,zero
 800694c:	00bfffc4 	movi	r2,-1
 8006950:	0021883a 	mov	r16,zero
 8006954:	94c00044 	addi	r19,r18,1
 8006958:	90c00047 	ldb	r3,1(r18)
 800695c:	dc402105 	stb	r17,132(sp)
 8006960:	d8001d85 	stb	zero,118(sp)
 8006964:	002b883a 	mov	r21,zero
 8006968:	d8802015 	stw	r2,128(sp)
 800696c:	d8002515 	stw	zero,148(sp)
 8006970:	04801604 	movi	r18,88
 8006974:	05000244 	movi	r20,9
 8006978:	402f883a 	mov	r23,r8
 800697c:	8023883a 	mov	r17,r16
 8006980:	9cc00044 	addi	r19,r19,1
 8006984:	18bff804 	addi	r2,r3,-32
 8006988:	9081fb36 	bltu	r18,r2,8007178 <___svfiprintf_internal_r+0x928>
 800698c:	100490ba 	slli	r2,r2,2
 8006990:	01020034 	movhi	r4,2048
 8006994:	211a6904 	addi	r4,r4,27044
 8006998:	1105883a 	add	r2,r2,r4
 800699c:	10800017 	ldw	r2,0(r2)
 80069a0:	1000683a 	jmp	r2
 80069a4:	08006ba4 	muli	zero,at,430
 80069a8:	08007178 	rdprs	zero,at,453
 80069ac:	08007178 	rdprs	zero,at,453
 80069b0:	08006b98 	cmpnei	zero,at,430
 80069b4:	08007178 	rdprs	zero,at,453
 80069b8:	08007178 	rdprs	zero,at,453
 80069bc:	08007178 	rdprs	zero,at,453
 80069c0:	08007178 	rdprs	zero,at,453
 80069c4:	08007178 	rdprs	zero,at,453
 80069c8:	08007178 	rdprs	zero,at,453
 80069cc:	08006b08 	cmpgei	zero,at,428
 80069d0:	08006d04 	addi	zero,at,436
 80069d4:	08007178 	rdprs	zero,at,453
 80069d8:	08006b30 	cmpltui	zero,at,428
 80069dc:	080071b4 	orhi	zero,at,454
 80069e0:	08007178 	rdprs	zero,at,453
 80069e4:	080071a8 	cmpgeui	zero,at,454
 80069e8:	0800713c 	xorhi	zero,at,452
 80069ec:	0800713c 	xorhi	zero,at,452
 80069f0:	0800713c 	xorhi	zero,at,452
 80069f4:	0800713c 	xorhi	zero,at,452
 80069f8:	0800713c 	xorhi	zero,at,452
 80069fc:	0800713c 	xorhi	zero,at,452
 8006a00:	0800713c 	xorhi	zero,at,452
 8006a04:	0800713c 	xorhi	zero,at,452
 8006a08:	0800713c 	xorhi	zero,at,452
 8006a0c:	08007178 	rdprs	zero,at,453
 8006a10:	08007178 	rdprs	zero,at,453
 8006a14:	08007178 	rdprs	zero,at,453
 8006a18:	08007178 	rdprs	zero,at,453
 8006a1c:	08007178 	rdprs	zero,at,453
 8006a20:	08007178 	rdprs	zero,at,453
 8006a24:	08007178 	rdprs	zero,at,453
 8006a28:	08007178 	rdprs	zero,at,453
 8006a2c:	08007178 	rdprs	zero,at,453
 8006a30:	08007178 	rdprs	zero,at,453
 8006a34:	080070c0 	call	80070c <__alt_mem_onchip_memory2_0+0x80070c>
 8006a38:	08007178 	rdprs	zero,at,453
 8006a3c:	08007178 	rdprs	zero,at,453
 8006a40:	08007178 	rdprs	zero,at,453
 8006a44:	08007178 	rdprs	zero,at,453
 8006a48:	08007178 	rdprs	zero,at,453
 8006a4c:	08007178 	rdprs	zero,at,453
 8006a50:	08007178 	rdprs	zero,at,453
 8006a54:	08007178 	rdprs	zero,at,453
 8006a58:	08007178 	rdprs	zero,at,453
 8006a5c:	08007178 	rdprs	zero,at,453
 8006a60:	08007270 	cmpltui	zero,at,457
 8006a64:	08007178 	rdprs	zero,at,453
 8006a68:	08007178 	rdprs	zero,at,453
 8006a6c:	08007178 	rdprs	zero,at,453
 8006a70:	08007178 	rdprs	zero,at,453
 8006a74:	08007178 	rdprs	zero,at,453
 8006a78:	080071fc 	xorhi	zero,at,455
 8006a7c:	08007178 	rdprs	zero,at,453
 8006a80:	08007178 	rdprs	zero,at,453
 8006a84:	08006efc 	xorhi	zero,at,443
 8006a88:	08007178 	rdprs	zero,at,453
 8006a8c:	08007178 	rdprs	zero,at,453
 8006a90:	08007178 	rdprs	zero,at,453
 8006a94:	08007178 	rdprs	zero,at,453
 8006a98:	08007178 	rdprs	zero,at,453
 8006a9c:	08007178 	rdprs	zero,at,453
 8006aa0:	08007178 	rdprs	zero,at,453
 8006aa4:	08007178 	rdprs	zero,at,453
 8006aa8:	08007178 	rdprs	zero,at,453
 8006aac:	08007178 	rdprs	zero,at,453
 8006ab0:	08006dc8 	cmpgei	zero,at,439
 8006ab4:	08006fac 	andhi	zero,at,446
 8006ab8:	08007178 	rdprs	zero,at,453
 8006abc:	08007178 	rdprs	zero,at,453
 8006ac0:	08007178 	rdprs	zero,at,453
 8006ac4:	08006fa0 	cmpeqi	zero,at,446
 8006ac8:	08006fac 	andhi	zero,at,446
 8006acc:	08007178 	rdprs	zero,at,453
 8006ad0:	08007178 	rdprs	zero,at,453
 8006ad4:	08006f8c 	andi	zero,at,446
 8006ad8:	08007178 	rdprs	zero,at,453
 8006adc:	08006f4c 	andi	zero,at,445
 8006ae0:	08006d18 	cmpnei	zero,at,436
 8006ae4:	08006b3c 	xorhi	zero,at,428
 8006ae8:	080070b4 	orhi	zero,at,450
 8006aec:	08007178 	rdprs	zero,at,453
 8006af0:	08007060 	cmpeqi	zero,at,449
 8006af4:	08007178 	rdprs	zero,at,453
 8006af8:	08006c7c 	xorhi	zero,at,433
 8006afc:	08007178 	rdprs	zero,at,453
 8006b00:	08007178 	rdprs	zero,at,453
 8006b04:	08006bc8 	cmpgei	zero,at,431
 8006b08:	d9002417 	ldw	r4,144(sp)
 8006b0c:	d9402417 	ldw	r5,144(sp)
 8006b10:	21000017 	ldw	r4,0(r4)
 8006b14:	28800104 	addi	r2,r5,4
 8006b18:	d9002515 	stw	r4,148(sp)
 8006b1c:	20032b0e 	bge	r4,zero,80077cc <___svfiprintf_internal_r+0xf7c>
 8006b20:	d8c02517 	ldw	r3,148(sp)
 8006b24:	d8802415 	stw	r2,144(sp)
 8006b28:	00c7c83a 	sub	r3,zero,r3
 8006b2c:	d8c02515 	stw	r3,148(sp)
 8006b30:	8c400114 	ori	r17,r17,4
 8006b34:	98c00007 	ldb	r3,0(r19)
 8006b38:	003f9106 	br	8006980 <__alt_data_end+0xfc006980>
 8006b3c:	00800c04 	movi	r2,48
 8006b40:	d9402417 	ldw	r5,144(sp)
 8006b44:	d9002017 	ldw	r4,128(sp)
 8006b48:	d8801d05 	stb	r2,116(sp)
 8006b4c:	00801e04 	movi	r2,120
 8006b50:	d8801d45 	stb	r2,117(sp)
 8006b54:	d8001d85 	stb	zero,118(sp)
 8006b58:	b811883a 	mov	r8,r23
 8006b5c:	28c00104 	addi	r3,r5,4
 8006b60:	2c800017 	ldw	r18,0(r5)
 8006b64:	0029883a 	mov	r20,zero
 8006b68:	88800094 	ori	r2,r17,2
 8006b6c:	20036316 	blt	r4,zero,80078fc <___svfiprintf_internal_r+0x10ac>
 8006b70:	00bfdfc4 	movi	r2,-129
 8006b74:	88a0703a 	and	r16,r17,r2
 8006b78:	d8c02415 	stw	r3,144(sp)
 8006b7c:	84000094 	ori	r16,r16,2
 8006b80:	90031c26 	beq	r18,zero,80077f4 <___svfiprintf_internal_r+0xfa4>
 8006b84:	01420074 	movhi	r5,2049
 8006b88:	2978a304 	addi	r5,r5,-7540
 8006b8c:	002b883a 	mov	r21,zero
 8006b90:	d9402915 	stw	r5,164(sp)
 8006b94:	00002906 	br	8006c3c <___svfiprintf_internal_r+0x3ec>
 8006b98:	8c400054 	ori	r17,r17,1
 8006b9c:	98c00007 	ldb	r3,0(r19)
 8006ba0:	003f7706 	br	8006980 <__alt_data_end+0xfc006980>
 8006ba4:	a8803fcc 	andi	r2,r21,255
 8006ba8:	1080201c 	xori	r2,r2,128
 8006bac:	10bfe004 	addi	r2,r2,-128
 8006bb0:	10032a1e 	bne	r2,zero,800785c <___svfiprintf_internal_r+0x100c>
 8006bb4:	00c00044 	movi	r3,1
 8006bb8:	d8c02105 	stb	r3,132(sp)
 8006bbc:	05400804 	movi	r21,32
 8006bc0:	98c00007 	ldb	r3,0(r19)
 8006bc4:	003f6e06 	br	8006980 <__alt_data_end+0xfc006980>
 8006bc8:	8821883a 	mov	r16,r17
 8006bcc:	dc402103 	ldbu	r17,132(sp)
 8006bd0:	b811883a 	mov	r8,r23
 8006bd4:	8c403fcc 	andi	r17,r17,255
 8006bd8:	8803f01e 	bne	r17,zero,8007b9c <___svfiprintf_internal_r+0x134c>
 8006bdc:	00820074 	movhi	r2,2049
 8006be0:	10b8a304 	addi	r2,r2,-7540
 8006be4:	d8802915 	stw	r2,164(sp)
 8006be8:	8080080c 	andi	r2,r16,32
 8006bec:	1000cd26 	beq	r2,zero,8006f24 <___svfiprintf_internal_r+0x6d4>
 8006bf0:	d9002417 	ldw	r4,144(sp)
 8006bf4:	24800017 	ldw	r18,0(r4)
 8006bf8:	25000117 	ldw	r20,4(r4)
 8006bfc:	21000204 	addi	r4,r4,8
 8006c00:	d9002415 	stw	r4,144(sp)
 8006c04:	8080004c 	andi	r2,r16,1
 8006c08:	1002c726 	beq	r2,zero,8007728 <___svfiprintf_internal_r+0xed8>
 8006c0c:	9504b03a 	or	r2,r18,r20
 8006c10:	1003061e 	bne	r2,zero,800782c <___svfiprintf_internal_r+0xfdc>
 8006c14:	d9002017 	ldw	r4,128(sp)
 8006c18:	d8001d85 	stb	zero,118(sp)
 8006c1c:	20033e16 	blt	r4,zero,8007918 <___svfiprintf_internal_r+0x10c8>
 8006c20:	00bfdfc4 	movi	r2,-129
 8006c24:	80a0703a 	and	r16,r16,r2
 8006c28:	d9402017 	ldw	r5,128(sp)
 8006c2c:	002b883a 	mov	r21,zero
 8006c30:	28002826 	beq	r5,zero,8006cd4 <___svfiprintf_internal_r+0x484>
 8006c34:	0025883a 	mov	r18,zero
 8006c38:	0029883a 	mov	r20,zero
 8006c3c:	d9002917 	ldw	r4,164(sp)
 8006c40:	dc401a04 	addi	r17,sp,104
 8006c44:	908003cc 	andi	r2,r18,15
 8006c48:	a006973a 	slli	r3,r20,28
 8006c4c:	2085883a 	add	r2,r4,r2
 8006c50:	9024d13a 	srli	r18,r18,4
 8006c54:	10800003 	ldbu	r2,0(r2)
 8006c58:	a028d13a 	srli	r20,r20,4
 8006c5c:	8c7fffc4 	addi	r17,r17,-1
 8006c60:	1ca4b03a 	or	r18,r3,r18
 8006c64:	88800005 	stb	r2,0(r17)
 8006c68:	9504b03a 	or	r2,r18,r20
 8006c6c:	103ff51e 	bne	r2,zero,8006c44 <__alt_data_end+0xfc006c44>
 8006c70:	d8801e17 	ldw	r2,120(sp)
 8006c74:	1469c83a 	sub	r20,r2,r17
 8006c78:	00001906 	br	8006ce0 <___svfiprintf_internal_r+0x490>
 8006c7c:	8821883a 	mov	r16,r17
 8006c80:	dc402103 	ldbu	r17,132(sp)
 8006c84:	b811883a 	mov	r8,r23
 8006c88:	8c403fcc 	andi	r17,r17,255
 8006c8c:	8803d01e 	bne	r17,zero,8007bd0 <___svfiprintf_internal_r+0x1380>
 8006c90:	8080080c 	andi	r2,r16,32
 8006c94:	10016126 	beq	r2,zero,800721c <___svfiprintf_internal_r+0x9cc>
 8006c98:	d9002417 	ldw	r4,144(sp)
 8006c9c:	d9402017 	ldw	r5,128(sp)
 8006ca0:	d8001d85 	stb	zero,118(sp)
 8006ca4:	20c00204 	addi	r3,r4,8
 8006ca8:	24800017 	ldw	r18,0(r4)
 8006cac:	25000117 	ldw	r20,4(r4)
 8006cb0:	28030f16 	blt	r5,zero,80078f0 <___svfiprintf_internal_r+0x10a0>
 8006cb4:	013fdfc4 	movi	r4,-129
 8006cb8:	9504b03a 	or	r2,r18,r20
 8006cbc:	d8c02415 	stw	r3,144(sp)
 8006cc0:	8120703a 	and	r16,r16,r4
 8006cc4:	002b883a 	mov	r21,zero
 8006cc8:	1000cd1e 	bne	r2,zero,8007000 <___svfiprintf_internal_r+0x7b0>
 8006ccc:	d8c02017 	ldw	r3,128(sp)
 8006cd0:	1803141e 	bne	r3,zero,8007924 <___svfiprintf_internal_r+0x10d4>
 8006cd4:	d8002015 	stw	zero,128(sp)
 8006cd8:	0029883a 	mov	r20,zero
 8006cdc:	dc401a04 	addi	r17,sp,104
 8006ce0:	dc802017 	ldw	r18,128(sp)
 8006ce4:	9500010e 	bge	r18,r20,8006cec <___svfiprintf_internal_r+0x49c>
 8006ce8:	a025883a 	mov	r18,r20
 8006cec:	ad403fcc 	andi	r21,r21,255
 8006cf0:	ad40201c 	xori	r21,r21,128
 8006cf4:	ad7fe004 	addi	r21,r21,-128
 8006cf8:	a8003f26 	beq	r21,zero,8006df8 <___svfiprintf_internal_r+0x5a8>
 8006cfc:	94800044 	addi	r18,r18,1
 8006d00:	00003d06 	br	8006df8 <___svfiprintf_internal_r+0x5a8>
 8006d04:	00c00044 	movi	r3,1
 8006d08:	d8c02105 	stb	r3,132(sp)
 8006d0c:	05400ac4 	movi	r21,43
 8006d10:	98c00007 	ldb	r3,0(r19)
 8006d14:	003f1a06 	br	8006980 <__alt_data_end+0xfc006980>
 8006d18:	8821883a 	mov	r16,r17
 8006d1c:	dc402103 	ldbu	r17,132(sp)
 8006d20:	b811883a 	mov	r8,r23
 8006d24:	8c403fcc 	andi	r17,r17,255
 8006d28:	8803a71e 	bne	r17,zero,8007bc8 <___svfiprintf_internal_r+0x1378>
 8006d2c:	8080080c 	andi	r2,r16,32
 8006d30:	10015726 	beq	r2,zero,8007290 <___svfiprintf_internal_r+0xa40>
 8006d34:	d8c02417 	ldw	r3,144(sp)
 8006d38:	d9002017 	ldw	r4,128(sp)
 8006d3c:	d8001d85 	stb	zero,118(sp)
 8006d40:	18800204 	addi	r2,r3,8
 8006d44:	1c800017 	ldw	r18,0(r3)
 8006d48:	1d000117 	ldw	r20,4(r3)
 8006d4c:	2002db16 	blt	r4,zero,80078bc <___svfiprintf_internal_r+0x106c>
 8006d50:	013fdfc4 	movi	r4,-129
 8006d54:	9506b03a 	or	r3,r18,r20
 8006d58:	d8802415 	stw	r2,144(sp)
 8006d5c:	8120703a 	and	r16,r16,r4
 8006d60:	18015826 	beq	r3,zero,80072c4 <___svfiprintf_internal_r+0xa74>
 8006d64:	002b883a 	mov	r21,zero
 8006d68:	dc401a04 	addi	r17,sp,104
 8006d6c:	9006d0fa 	srli	r3,r18,3
 8006d70:	a008977a 	slli	r4,r20,29
 8006d74:	a028d0fa 	srli	r20,r20,3
 8006d78:	948001cc 	andi	r18,r18,7
 8006d7c:	90800c04 	addi	r2,r18,48
 8006d80:	8c7fffc4 	addi	r17,r17,-1
 8006d84:	20e4b03a 	or	r18,r4,r3
 8006d88:	88800005 	stb	r2,0(r17)
 8006d8c:	9506b03a 	or	r3,r18,r20
 8006d90:	183ff61e 	bne	r3,zero,8006d6c <__alt_data_end+0xfc006d6c>
 8006d94:	80c0004c 	andi	r3,r16,1
 8006d98:	18028926 	beq	r3,zero,80077c0 <___svfiprintf_internal_r+0xf70>
 8006d9c:	10803fcc 	andi	r2,r2,255
 8006da0:	1080201c 	xori	r2,r2,128
 8006da4:	10bfe004 	addi	r2,r2,-128
 8006da8:	00c00c04 	movi	r3,48
 8006dac:	10ffb026 	beq	r2,r3,8006c70 <__alt_data_end+0xfc006c70>
 8006db0:	88ffffc5 	stb	r3,-1(r17)
 8006db4:	d8c01e17 	ldw	r3,120(sp)
 8006db8:	88bfffc4 	addi	r2,r17,-1
 8006dbc:	1023883a 	mov	r17,r2
 8006dc0:	18a9c83a 	sub	r20,r3,r2
 8006dc4:	003fc606 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8006dc8:	d8c02417 	ldw	r3,144(sp)
 8006dcc:	04800044 	movi	r18,1
 8006dd0:	8821883a 	mov	r16,r17
 8006dd4:	18800017 	ldw	r2,0(r3)
 8006dd8:	18c00104 	addi	r3,r3,4
 8006ddc:	b811883a 	mov	r8,r23
 8006de0:	d8001d85 	stb	zero,118(sp)
 8006de4:	d8801005 	stb	r2,64(sp)
 8006de8:	d8c02415 	stw	r3,144(sp)
 8006dec:	9029883a 	mov	r20,r18
 8006df0:	dc401004 	addi	r17,sp,64
 8006df4:	d8002015 	stw	zero,128(sp)
 8006df8:	80c0008c 	andi	r3,r16,2
 8006dfc:	d8c02115 	stw	r3,132(sp)
 8006e00:	18000126 	beq	r3,zero,8006e08 <___svfiprintf_internal_r+0x5b8>
 8006e04:	94800084 	addi	r18,r18,2
 8006e08:	80c0210c 	andi	r3,r16,132
 8006e0c:	d8c02215 	stw	r3,136(sp)
 8006e10:	1801321e 	bne	r3,zero,80072dc <___svfiprintf_internal_r+0xa8c>
 8006e14:	d9002517 	ldw	r4,148(sp)
 8006e18:	24b9c83a 	sub	fp,r4,r18
 8006e1c:	07012f0e 	bge	zero,fp,80072dc <___svfiprintf_internal_r+0xa8c>
 8006e20:	02400404 	movi	r9,16
 8006e24:	d8c01c17 	ldw	r3,112(sp)
 8006e28:	d8801b17 	ldw	r2,108(sp)
 8006e2c:	4f03250e 	bge	r9,fp,8007ac4 <___svfiprintf_internal_r+0x1274>
 8006e30:	01020074 	movhi	r4,2049
 8006e34:	21390804 	addi	r4,r4,-7136
 8006e38:	dc002a15 	stw	r16,168(sp)
 8006e3c:	dc402b15 	stw	r17,172(sp)
 8006e40:	d9002815 	stw	r4,160(sp)
 8006e44:	e023883a 	mov	r17,fp
 8006e48:	482f883a 	mov	r23,r9
 8006e4c:	9839883a 	mov	fp,r19
 8006e50:	054001c4 	movi	r21,7
 8006e54:	9027883a 	mov	r19,r18
 8006e58:	dc002717 	ldw	r16,156(sp)
 8006e5c:	dc802317 	ldw	r18,140(sp)
 8006e60:	00000306 	br	8006e70 <___svfiprintf_internal_r+0x620>
 8006e64:	8c7ffc04 	addi	r17,r17,-16
 8006e68:	42000204 	addi	r8,r8,8
 8006e6c:	bc40130e 	bge	r23,r17,8006ebc <___svfiprintf_internal_r+0x66c>
 8006e70:	01420074 	movhi	r5,2049
 8006e74:	18c00404 	addi	r3,r3,16
 8006e78:	10800044 	addi	r2,r2,1
 8006e7c:	29790804 	addi	r5,r5,-7136
 8006e80:	41400015 	stw	r5,0(r8)
 8006e84:	45c00115 	stw	r23,4(r8)
 8006e88:	d8c01c15 	stw	r3,112(sp)
 8006e8c:	d8801b15 	stw	r2,108(sp)
 8006e90:	a8bff40e 	bge	r21,r2,8006e64 <__alt_data_end+0xfc006e64>
 8006e94:	d9801a04 	addi	r6,sp,104
 8006e98:	900b883a 	mov	r5,r18
 8006e9c:	8009883a 	mov	r4,r16
 8006ea0:	80066800 	call	8006680 <__ssprint_r>
 8006ea4:	1001aa1e 	bne	r2,zero,8007550 <___svfiprintf_internal_r+0xd00>
 8006ea8:	8c7ffc04 	addi	r17,r17,-16
 8006eac:	d8c01c17 	ldw	r3,112(sp)
 8006eb0:	d8801b17 	ldw	r2,108(sp)
 8006eb4:	d811883a 	mov	r8,sp
 8006eb8:	bc7fed16 	blt	r23,r17,8006e70 <__alt_data_end+0xfc006e70>
 8006ebc:	9825883a 	mov	r18,r19
 8006ec0:	dc002a17 	ldw	r16,168(sp)
 8006ec4:	e027883a 	mov	r19,fp
 8006ec8:	8839883a 	mov	fp,r17
 8006ecc:	dc402b17 	ldw	r17,172(sp)
 8006ed0:	d9002817 	ldw	r4,160(sp)
 8006ed4:	e0c7883a 	add	r3,fp,r3
 8006ed8:	10800044 	addi	r2,r2,1
 8006edc:	41000015 	stw	r4,0(r8)
 8006ee0:	47000115 	stw	fp,4(r8)
 8006ee4:	d8c01c15 	stw	r3,112(sp)
 8006ee8:	d8801b15 	stw	r2,108(sp)
 8006eec:	010001c4 	movi	r4,7
 8006ef0:	20821616 	blt	r4,r2,800774c <___svfiprintf_internal_r+0xefc>
 8006ef4:	42000204 	addi	r8,r8,8
 8006ef8:	0000fa06 	br	80072e4 <___svfiprintf_internal_r+0xa94>
 8006efc:	8821883a 	mov	r16,r17
 8006f00:	dc402103 	ldbu	r17,132(sp)
 8006f04:	b811883a 	mov	r8,r23
 8006f08:	8c403fcc 	andi	r17,r17,255
 8006f0c:	8803361e 	bne	r17,zero,8007be8 <___svfiprintf_internal_r+0x1398>
 8006f10:	01420074 	movhi	r5,2049
 8006f14:	29789e04 	addi	r5,r5,-7560
 8006f18:	d9402915 	stw	r5,164(sp)
 8006f1c:	8080080c 	andi	r2,r16,32
 8006f20:	103f331e 	bne	r2,zero,8006bf0 <__alt_data_end+0xfc006bf0>
 8006f24:	8080040c 	andi	r2,r16,16
 8006f28:	1002551e 	bne	r2,zero,8007880 <___svfiprintf_internal_r+0x1030>
 8006f2c:	8080100c 	andi	r2,r16,64
 8006f30:	1002a626 	beq	r2,zero,80079cc <___svfiprintf_internal_r+0x117c>
 8006f34:	d8802417 	ldw	r2,144(sp)
 8006f38:	0029883a 	mov	r20,zero
 8006f3c:	1480000b 	ldhu	r18,0(r2)
 8006f40:	10800104 	addi	r2,r2,4
 8006f44:	d8802415 	stw	r2,144(sp)
 8006f48:	003f2e06 	br	8006c04 <__alt_data_end+0xfc006c04>
 8006f4c:	8821883a 	mov	r16,r17
 8006f50:	dc402103 	ldbu	r17,132(sp)
 8006f54:	b811883a 	mov	r8,r23
 8006f58:	8c403fcc 	andi	r17,r17,255
 8006f5c:	88030b1e 	bne	r17,zero,8007b8c <___svfiprintf_internal_r+0x133c>
 8006f60:	8080080c 	andi	r2,r16,32
 8006f64:	1002271e 	bne	r2,zero,8007804 <___svfiprintf_internal_r+0xfb4>
 8006f68:	8080040c 	andi	r2,r16,16
 8006f6c:	10028e26 	beq	r2,zero,80079a8 <___svfiprintf_internal_r+0x1158>
 8006f70:	d8c02417 	ldw	r3,144(sp)
 8006f74:	d9002617 	ldw	r4,152(sp)
 8006f78:	18800017 	ldw	r2,0(r3)
 8006f7c:	18c00104 	addi	r3,r3,4
 8006f80:	d8c02415 	stw	r3,144(sp)
 8006f84:	11000015 	stw	r4,0(r2)
 8006f88:	003e5306 	br	80068d8 <__alt_data_end+0xfc0068d8>
 8006f8c:	98c00007 	ldb	r3,0(r19)
 8006f90:	01401b04 	movi	r5,108
 8006f94:	19424f26 	beq	r3,r5,80078d4 <___svfiprintf_internal_r+0x1084>
 8006f98:	8c400414 	ori	r17,r17,16
 8006f9c:	003e7806 	br	8006980 <__alt_data_end+0xfc006980>
 8006fa0:	8c401014 	ori	r17,r17,64
 8006fa4:	98c00007 	ldb	r3,0(r19)
 8006fa8:	003e7506 	br	8006980 <__alt_data_end+0xfc006980>
 8006fac:	8821883a 	mov	r16,r17
 8006fb0:	dc402103 	ldbu	r17,132(sp)
 8006fb4:	b811883a 	mov	r8,r23
 8006fb8:	8c403fcc 	andi	r17,r17,255
 8006fbc:	8802fe1e 	bne	r17,zero,8007bb8 <___svfiprintf_internal_r+0x1368>
 8006fc0:	8080080c 	andi	r2,r16,32
 8006fc4:	10004626 	beq	r2,zero,80070e0 <___svfiprintf_internal_r+0x890>
 8006fc8:	d9002417 	ldw	r4,144(sp)
 8006fcc:	20800117 	ldw	r2,4(r4)
 8006fd0:	24800017 	ldw	r18,0(r4)
 8006fd4:	21000204 	addi	r4,r4,8
 8006fd8:	d9002415 	stw	r4,144(sp)
 8006fdc:	1029883a 	mov	r20,r2
 8006fe0:	10004a16 	blt	r2,zero,800710c <___svfiprintf_internal_r+0x8bc>
 8006fe4:	d9002017 	ldw	r4,128(sp)
 8006fe8:	dd401d83 	ldbu	r21,118(sp)
 8006fec:	2001eb16 	blt	r4,zero,800779c <___svfiprintf_internal_r+0xf4c>
 8006ff0:	00ffdfc4 	movi	r3,-129
 8006ff4:	9504b03a 	or	r2,r18,r20
 8006ff8:	80e0703a 	and	r16,r16,r3
 8006ffc:	103f3326 	beq	r2,zero,8006ccc <__alt_data_end+0xfc006ccc>
 8007000:	a0009426 	beq	r20,zero,8007254 <___svfiprintf_internal_r+0xa04>
 8007004:	dc401a04 	addi	r17,sp,104
 8007008:	402f883a 	mov	r23,r8
 800700c:	9009883a 	mov	r4,r18
 8007010:	a00b883a 	mov	r5,r20
 8007014:	01800284 	movi	r6,10
 8007018:	000f883a 	mov	r7,zero
 800701c:	8008ff00 	call	8008ff0 <__umoddi3>
 8007020:	10800c04 	addi	r2,r2,48
 8007024:	8c7fffc4 	addi	r17,r17,-1
 8007028:	9009883a 	mov	r4,r18
 800702c:	a00b883a 	mov	r5,r20
 8007030:	88800005 	stb	r2,0(r17)
 8007034:	01800284 	movi	r6,10
 8007038:	000f883a 	mov	r7,zero
 800703c:	80089f40 	call	80089f4 <__udivdi3>
 8007040:	1025883a 	mov	r18,r2
 8007044:	10c4b03a 	or	r2,r2,r3
 8007048:	1829883a 	mov	r20,r3
 800704c:	103fef1e 	bne	r2,zero,800700c <__alt_data_end+0xfc00700c>
 8007050:	d9001e17 	ldw	r4,120(sp)
 8007054:	b811883a 	mov	r8,r23
 8007058:	2469c83a 	sub	r20,r4,r17
 800705c:	003f2006 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007060:	d8802417 	ldw	r2,144(sp)
 8007064:	8821883a 	mov	r16,r17
 8007068:	d8001d85 	stb	zero,118(sp)
 800706c:	14400017 	ldw	r17,0(r2)
 8007070:	b811883a 	mov	r8,r23
 8007074:	15c00104 	addi	r23,r2,4
 8007078:	88026c26 	beq	r17,zero,8007a2c <___svfiprintf_internal_r+0x11dc>
 800707c:	d8c02017 	ldw	r3,128(sp)
 8007080:	18025f16 	blt	r3,zero,8007a00 <___svfiprintf_internal_r+0x11b0>
 8007084:	180d883a 	mov	r6,r3
 8007088:	000b883a 	mov	r5,zero
 800708c:	8809883a 	mov	r4,r17
 8007090:	da002d15 	stw	r8,180(sp)
 8007094:	80051f80 	call	80051f8 <memchr>
 8007098:	da002d17 	ldw	r8,180(sp)
 800709c:	1002a526 	beq	r2,zero,8007b34 <___svfiprintf_internal_r+0x12e4>
 80070a0:	1469c83a 	sub	r20,r2,r17
 80070a4:	dd401d83 	ldbu	r21,118(sp)
 80070a8:	ddc02415 	stw	r23,144(sp)
 80070ac:	d8002015 	stw	zero,128(sp)
 80070b0:	003f0b06 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 80070b4:	8c400814 	ori	r17,r17,32
 80070b8:	98c00007 	ldb	r3,0(r19)
 80070bc:	003e3006 	br	8006980 <__alt_data_end+0xfc006980>
 80070c0:	8821883a 	mov	r16,r17
 80070c4:	dc402103 	ldbu	r17,132(sp)
 80070c8:	b811883a 	mov	r8,r23
 80070cc:	8c403fcc 	andi	r17,r17,255
 80070d0:	8802b01e 	bne	r17,zero,8007b94 <___svfiprintf_internal_r+0x1344>
 80070d4:	84000414 	ori	r16,r16,16
 80070d8:	8080080c 	andi	r2,r16,32
 80070dc:	103fba1e 	bne	r2,zero,8006fc8 <__alt_data_end+0xfc006fc8>
 80070e0:	8080040c 	andi	r2,r16,16
 80070e4:	1001df1e 	bne	r2,zero,8007864 <___svfiprintf_internal_r+0x1014>
 80070e8:	8080100c 	andi	r2,r16,64
 80070ec:	10023d26 	beq	r2,zero,80079e4 <___svfiprintf_internal_r+0x1194>
 80070f0:	d8802417 	ldw	r2,144(sp)
 80070f4:	1480000f 	ldh	r18,0(r2)
 80070f8:	10800104 	addi	r2,r2,4
 80070fc:	d8802415 	stw	r2,144(sp)
 8007100:	9029d7fa 	srai	r20,r18,31
 8007104:	a005883a 	mov	r2,r20
 8007108:	103fb60e 	bge	r2,zero,8006fe4 <__alt_data_end+0xfc006fe4>
 800710c:	d9402017 	ldw	r5,128(sp)
 8007110:	04a5c83a 	sub	r18,zero,r18
 8007114:	05400b44 	movi	r21,45
 8007118:	9004c03a 	cmpne	r2,r18,zero
 800711c:	0529c83a 	sub	r20,zero,r20
 8007120:	dd401d85 	stb	r21,118(sp)
 8007124:	a0a9c83a 	sub	r20,r20,r2
 8007128:	28026c16 	blt	r5,zero,8007adc <___svfiprintf_internal_r+0x128c>
 800712c:	00bfdfc4 	movi	r2,-129
 8007130:	80a0703a 	and	r16,r16,r2
 8007134:	a03fb31e 	bne	r20,zero,8007004 <__alt_data_end+0xfc007004>
 8007138:	00004606 	br	8007254 <___svfiprintf_internal_r+0xa04>
 800713c:	9839883a 	mov	fp,r19
 8007140:	d8002515 	stw	zero,148(sp)
 8007144:	1c3ff404 	addi	r16,r3,-48
 8007148:	0009883a 	mov	r4,zero
 800714c:	01400284 	movi	r5,10
 8007150:	8000ba40 	call	8000ba4 <__mulsi3>
 8007154:	e0c00007 	ldb	r3,0(fp)
 8007158:	8089883a 	add	r4,r16,r2
 800715c:	9cc00044 	addi	r19,r19,1
 8007160:	1c3ff404 	addi	r16,r3,-48
 8007164:	9839883a 	mov	fp,r19
 8007168:	a43ff82e 	bgeu	r20,r16,800714c <__alt_data_end+0xfc00714c>
 800716c:	d9002515 	stw	r4,148(sp)
 8007170:	18bff804 	addi	r2,r3,-32
 8007174:	90be052e 	bgeu	r18,r2,800698c <__alt_data_end+0xfc00698c>
 8007178:	8821883a 	mov	r16,r17
 800717c:	dc402103 	ldbu	r17,132(sp)
 8007180:	b811883a 	mov	r8,r23
 8007184:	8c403fcc 	andi	r17,r17,255
 8007188:	88028d1e 	bne	r17,zero,8007bc0 <___svfiprintf_internal_r+0x1370>
 800718c:	1800ea26 	beq	r3,zero,8007538 <___svfiprintf_internal_r+0xce8>
 8007190:	04800044 	movi	r18,1
 8007194:	d8c01005 	stb	r3,64(sp)
 8007198:	d8001d85 	stb	zero,118(sp)
 800719c:	9029883a 	mov	r20,r18
 80071a0:	dc401004 	addi	r17,sp,64
 80071a4:	003f1306 	br	8006df4 <__alt_data_end+0xfc006df4>
 80071a8:	8c402014 	ori	r17,r17,128
 80071ac:	98c00007 	ldb	r3,0(r19)
 80071b0:	003df306 	br	8006980 <__alt_data_end+0xfc006980>
 80071b4:	98c00007 	ldb	r3,0(r19)
 80071b8:	01000a84 	movi	r4,42
 80071bc:	9f000044 	addi	fp,r19,1
 80071c0:	19026326 	beq	r3,r4,8007b50 <___svfiprintf_internal_r+0x1300>
 80071c4:	1c3ff404 	addi	r16,r3,-48
 80071c8:	0009883a 	mov	r4,zero
 80071cc:	a4025636 	bltu	r20,r16,8007b28 <___svfiprintf_internal_r+0x12d8>
 80071d0:	01400284 	movi	r5,10
 80071d4:	8000ba40 	call	8000ba4 <__mulsi3>
 80071d8:	e0c00007 	ldb	r3,0(fp)
 80071dc:	1409883a 	add	r4,r2,r16
 80071e0:	e4c00044 	addi	r19,fp,1
 80071e4:	1c3ff404 	addi	r16,r3,-48
 80071e8:	9839883a 	mov	fp,r19
 80071ec:	a43ff82e 	bgeu	r20,r16,80071d0 <__alt_data_end+0xfc0071d0>
 80071f0:	20020c16 	blt	r4,zero,8007a24 <___svfiprintf_internal_r+0x11d4>
 80071f4:	d9002015 	stw	r4,128(sp)
 80071f8:	003de206 	br	8006984 <__alt_data_end+0xfc006984>
 80071fc:	8821883a 	mov	r16,r17
 8007200:	dc402103 	ldbu	r17,132(sp)
 8007204:	b811883a 	mov	r8,r23
 8007208:	8c403fcc 	andi	r17,r17,255
 800720c:	8802721e 	bne	r17,zero,8007bd8 <___svfiprintf_internal_r+0x1388>
 8007210:	84000414 	ori	r16,r16,16
 8007214:	8080080c 	andi	r2,r16,32
 8007218:	103e9f1e 	bne	r2,zero,8006c98 <__alt_data_end+0xfc006c98>
 800721c:	8080040c 	andi	r2,r16,16
 8007220:	10015326 	beq	r2,zero,8007770 <___svfiprintf_internal_r+0xf20>
 8007224:	d8c02417 	ldw	r3,144(sp)
 8007228:	d9002017 	ldw	r4,128(sp)
 800722c:	d8001d85 	stb	zero,118(sp)
 8007230:	18800104 	addi	r2,r3,4
 8007234:	1c800017 	ldw	r18,0(r3)
 8007238:	0029883a 	mov	r20,zero
 800723c:	20015516 	blt	r4,zero,8007794 <___svfiprintf_internal_r+0xf44>
 8007240:	00ffdfc4 	movi	r3,-129
 8007244:	d8802415 	stw	r2,144(sp)
 8007248:	80e0703a 	and	r16,r16,r3
 800724c:	002b883a 	mov	r21,zero
 8007250:	903e9e26 	beq	r18,zero,8006ccc <__alt_data_end+0xfc006ccc>
 8007254:	00800244 	movi	r2,9
 8007258:	14bf6a36 	bltu	r2,r18,8007004 <__alt_data_end+0xfc007004>
 800725c:	94800c04 	addi	r18,r18,48
 8007260:	dc8019c5 	stb	r18,103(sp)
 8007264:	dd002c17 	ldw	r20,176(sp)
 8007268:	dc4019c4 	addi	r17,sp,103
 800726c:	003e9c06 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007270:	8821883a 	mov	r16,r17
 8007274:	dc402103 	ldbu	r17,132(sp)
 8007278:	b811883a 	mov	r8,r23
 800727c:	8c403fcc 	andi	r17,r17,255
 8007280:	8802571e 	bne	r17,zero,8007be0 <___svfiprintf_internal_r+0x1390>
 8007284:	84000414 	ori	r16,r16,16
 8007288:	8080080c 	andi	r2,r16,32
 800728c:	103ea91e 	bne	r2,zero,8006d34 <__alt_data_end+0xfc006d34>
 8007290:	8080040c 	andi	r2,r16,16
 8007294:	10018026 	beq	r2,zero,8007898 <___svfiprintf_internal_r+0x1048>
 8007298:	d9402417 	ldw	r5,144(sp)
 800729c:	d8c02017 	ldw	r3,128(sp)
 80072a0:	d8001d85 	stb	zero,118(sp)
 80072a4:	28800104 	addi	r2,r5,4
 80072a8:	2c800017 	ldw	r18,0(r5)
 80072ac:	0029883a 	mov	r20,zero
 80072b0:	18018216 	blt	r3,zero,80078bc <___svfiprintf_internal_r+0x106c>
 80072b4:	00ffdfc4 	movi	r3,-129
 80072b8:	d8802415 	stw	r2,144(sp)
 80072bc:	80e0703a 	and	r16,r16,r3
 80072c0:	903ea81e 	bne	r18,zero,8006d64 <__alt_data_end+0xfc006d64>
 80072c4:	d8802017 	ldw	r2,128(sp)
 80072c8:	002b883a 	mov	r21,zero
 80072cc:	1001f226 	beq	r2,zero,8007a98 <___svfiprintf_internal_r+0x1248>
 80072d0:	0025883a 	mov	r18,zero
 80072d4:	0029883a 	mov	r20,zero
 80072d8:	003ea306 	br	8006d68 <__alt_data_end+0xfc006d68>
 80072dc:	d8c01c17 	ldw	r3,112(sp)
 80072e0:	d8801b17 	ldw	r2,108(sp)
 80072e4:	d9001d87 	ldb	r4,118(sp)
 80072e8:	20000b26 	beq	r4,zero,8007318 <___svfiprintf_internal_r+0xac8>
 80072ec:	d9001d84 	addi	r4,sp,118
 80072f0:	18c00044 	addi	r3,r3,1
 80072f4:	10800044 	addi	r2,r2,1
 80072f8:	41000015 	stw	r4,0(r8)
 80072fc:	01000044 	movi	r4,1
 8007300:	41000115 	stw	r4,4(r8)
 8007304:	d8c01c15 	stw	r3,112(sp)
 8007308:	d8801b15 	stw	r2,108(sp)
 800730c:	010001c4 	movi	r4,7
 8007310:	2080f316 	blt	r4,r2,80076e0 <___svfiprintf_internal_r+0xe90>
 8007314:	42000204 	addi	r8,r8,8
 8007318:	d9402117 	ldw	r5,132(sp)
 800731c:	28000b26 	beq	r5,zero,800734c <___svfiprintf_internal_r+0xafc>
 8007320:	d9001d04 	addi	r4,sp,116
 8007324:	18c00084 	addi	r3,r3,2
 8007328:	10800044 	addi	r2,r2,1
 800732c:	41000015 	stw	r4,0(r8)
 8007330:	01000084 	movi	r4,2
 8007334:	41000115 	stw	r4,4(r8)
 8007338:	d8c01c15 	stw	r3,112(sp)
 800733c:	d8801b15 	stw	r2,108(sp)
 8007340:	010001c4 	movi	r4,7
 8007344:	2080ef16 	blt	r4,r2,8007704 <___svfiprintf_internal_r+0xeb4>
 8007348:	42000204 	addi	r8,r8,8
 800734c:	d9402217 	ldw	r5,136(sp)
 8007350:	01002004 	movi	r4,128
 8007354:	29008f26 	beq	r5,r4,8007594 <___svfiprintf_internal_r+0xd44>
 8007358:	d9002017 	ldw	r4,128(sp)
 800735c:	252fc83a 	sub	r23,r4,r20
 8007360:	05c0310e 	bge	zero,r23,8007428 <___svfiprintf_internal_r+0xbd8>
 8007364:	07000404 	movi	fp,16
 8007368:	e5c17d0e 	bge	fp,r23,8007960 <___svfiprintf_internal_r+0x1110>
 800736c:	01020074 	movhi	r4,2049
 8007370:	21390404 	addi	r4,r4,-7152
 8007374:	dc002015 	stw	r16,128(sp)
 8007378:	dc402215 	stw	r17,136(sp)
 800737c:	d9002115 	stw	r4,132(sp)
 8007380:	b823883a 	mov	r17,r23
 8007384:	054001c4 	movi	r21,7
 8007388:	982f883a 	mov	r23,r19
 800738c:	dc002717 	ldw	r16,156(sp)
 8007390:	9027883a 	mov	r19,r18
 8007394:	dc802317 	ldw	r18,140(sp)
 8007398:	00000306 	br	80073a8 <___svfiprintf_internal_r+0xb58>
 800739c:	8c7ffc04 	addi	r17,r17,-16
 80073a0:	42000204 	addi	r8,r8,8
 80073a4:	e440110e 	bge	fp,r17,80073ec <___svfiprintf_internal_r+0xb9c>
 80073a8:	18c00404 	addi	r3,r3,16
 80073ac:	10800044 	addi	r2,r2,1
 80073b0:	45800015 	stw	r22,0(r8)
 80073b4:	47000115 	stw	fp,4(r8)
 80073b8:	d8c01c15 	stw	r3,112(sp)
 80073bc:	d8801b15 	stw	r2,108(sp)
 80073c0:	a8bff60e 	bge	r21,r2,800739c <__alt_data_end+0xfc00739c>
 80073c4:	d9801a04 	addi	r6,sp,104
 80073c8:	900b883a 	mov	r5,r18
 80073cc:	8009883a 	mov	r4,r16
 80073d0:	80066800 	call	8006680 <__ssprint_r>
 80073d4:	10005e1e 	bne	r2,zero,8007550 <___svfiprintf_internal_r+0xd00>
 80073d8:	8c7ffc04 	addi	r17,r17,-16
 80073dc:	d8c01c17 	ldw	r3,112(sp)
 80073e0:	d8801b17 	ldw	r2,108(sp)
 80073e4:	d811883a 	mov	r8,sp
 80073e8:	e47fef16 	blt	fp,r17,80073a8 <__alt_data_end+0xfc0073a8>
 80073ec:	9825883a 	mov	r18,r19
 80073f0:	dc002017 	ldw	r16,128(sp)
 80073f4:	b827883a 	mov	r19,r23
 80073f8:	882f883a 	mov	r23,r17
 80073fc:	dc402217 	ldw	r17,136(sp)
 8007400:	d9402117 	ldw	r5,132(sp)
 8007404:	1dc7883a 	add	r3,r3,r23
 8007408:	10800044 	addi	r2,r2,1
 800740c:	41400015 	stw	r5,0(r8)
 8007410:	45c00115 	stw	r23,4(r8)
 8007414:	d8c01c15 	stw	r3,112(sp)
 8007418:	d8801b15 	stw	r2,108(sp)
 800741c:	010001c4 	movi	r4,7
 8007420:	2080a616 	blt	r4,r2,80076bc <___svfiprintf_internal_r+0xe6c>
 8007424:	42000204 	addi	r8,r8,8
 8007428:	a0c7883a 	add	r3,r20,r3
 800742c:	10800044 	addi	r2,r2,1
 8007430:	44400015 	stw	r17,0(r8)
 8007434:	45000115 	stw	r20,4(r8)
 8007438:	d8c01c15 	stw	r3,112(sp)
 800743c:	d8801b15 	stw	r2,108(sp)
 8007440:	010001c4 	movi	r4,7
 8007444:	20808816 	blt	r4,r2,8007668 <___svfiprintf_internal_r+0xe18>
 8007448:	42000204 	addi	r8,r8,8
 800744c:	8400010c 	andi	r16,r16,4
 8007450:	80002c26 	beq	r16,zero,8007504 <___svfiprintf_internal_r+0xcb4>
 8007454:	d8802517 	ldw	r2,148(sp)
 8007458:	14a1c83a 	sub	r16,r2,r18
 800745c:	0400290e 	bge	zero,r16,8007504 <___svfiprintf_internal_r+0xcb4>
 8007460:	04400404 	movi	r17,16
 8007464:	d8801b17 	ldw	r2,108(sp)
 8007468:	8c01a70e 	bge	r17,r16,8007b08 <___svfiprintf_internal_r+0x12b8>
 800746c:	01420074 	movhi	r5,2049
 8007470:	29790804 	addi	r5,r5,-7136
 8007474:	d9402815 	stw	r5,160(sp)
 8007478:	050001c4 	movi	r20,7
 800747c:	dd402717 	ldw	r21,156(sp)
 8007480:	ddc02317 	ldw	r23,140(sp)
 8007484:	00000306 	br	8007494 <___svfiprintf_internal_r+0xc44>
 8007488:	843ffc04 	addi	r16,r16,-16
 800748c:	42000204 	addi	r8,r8,8
 8007490:	8c00130e 	bge	r17,r16,80074e0 <___svfiprintf_internal_r+0xc90>
 8007494:	01020074 	movhi	r4,2049
 8007498:	18c00404 	addi	r3,r3,16
 800749c:	10800044 	addi	r2,r2,1
 80074a0:	21390804 	addi	r4,r4,-7136
 80074a4:	41000015 	stw	r4,0(r8)
 80074a8:	44400115 	stw	r17,4(r8)
 80074ac:	d8c01c15 	stw	r3,112(sp)
 80074b0:	d8801b15 	stw	r2,108(sp)
 80074b4:	a0bff40e 	bge	r20,r2,8007488 <__alt_data_end+0xfc007488>
 80074b8:	d9801a04 	addi	r6,sp,104
 80074bc:	b80b883a 	mov	r5,r23
 80074c0:	a809883a 	mov	r4,r21
 80074c4:	80066800 	call	8006680 <__ssprint_r>
 80074c8:	1000211e 	bne	r2,zero,8007550 <___svfiprintf_internal_r+0xd00>
 80074cc:	843ffc04 	addi	r16,r16,-16
 80074d0:	d8c01c17 	ldw	r3,112(sp)
 80074d4:	d8801b17 	ldw	r2,108(sp)
 80074d8:	d811883a 	mov	r8,sp
 80074dc:	8c3fed16 	blt	r17,r16,8007494 <__alt_data_end+0xfc007494>
 80074e0:	d9402817 	ldw	r5,160(sp)
 80074e4:	1c07883a 	add	r3,r3,r16
 80074e8:	10800044 	addi	r2,r2,1
 80074ec:	41400015 	stw	r5,0(r8)
 80074f0:	44000115 	stw	r16,4(r8)
 80074f4:	d8c01c15 	stw	r3,112(sp)
 80074f8:	d8801b15 	stw	r2,108(sp)
 80074fc:	010001c4 	movi	r4,7
 8007500:	2080b516 	blt	r4,r2,80077d8 <___svfiprintf_internal_r+0xf88>
 8007504:	d8802517 	ldw	r2,148(sp)
 8007508:	1480010e 	bge	r2,r18,8007510 <___svfiprintf_internal_r+0xcc0>
 800750c:	9005883a 	mov	r2,r18
 8007510:	d9002617 	ldw	r4,152(sp)
 8007514:	2089883a 	add	r4,r4,r2
 8007518:	d9002615 	stw	r4,152(sp)
 800751c:	18005a1e 	bne	r3,zero,8007688 <___svfiprintf_internal_r+0xe38>
 8007520:	98800007 	ldb	r2,0(r19)
 8007524:	d8001b15 	stw	zero,108(sp)
 8007528:	d811883a 	mov	r8,sp
 800752c:	103cec1e 	bne	r2,zero,80068e0 <__alt_data_end+0xfc0068e0>
 8007530:	9825883a 	mov	r18,r19
 8007534:	003d0206 	br	8006940 <__alt_data_end+0xfc006940>
 8007538:	d8801c17 	ldw	r2,112(sp)
 800753c:	10000426 	beq	r2,zero,8007550 <___svfiprintf_internal_r+0xd00>
 8007540:	d9402317 	ldw	r5,140(sp)
 8007544:	d9002717 	ldw	r4,156(sp)
 8007548:	d9801a04 	addi	r6,sp,104
 800754c:	80066800 	call	8006680 <__ssprint_r>
 8007550:	d9402317 	ldw	r5,140(sp)
 8007554:	d8802617 	ldw	r2,152(sp)
 8007558:	28c0030b 	ldhu	r3,12(r5)
 800755c:	18c0100c 	andi	r3,r3,64
 8007560:	18015c1e 	bne	r3,zero,8007ad4 <___svfiprintf_internal_r+0x1284>
 8007564:	dfc03717 	ldw	ra,220(sp)
 8007568:	df003617 	ldw	fp,216(sp)
 800756c:	ddc03517 	ldw	r23,212(sp)
 8007570:	dd803417 	ldw	r22,208(sp)
 8007574:	dd403317 	ldw	r21,204(sp)
 8007578:	dd003217 	ldw	r20,200(sp)
 800757c:	dcc03117 	ldw	r19,196(sp)
 8007580:	dc803017 	ldw	r18,192(sp)
 8007584:	dc402f17 	ldw	r17,188(sp)
 8007588:	dc002e17 	ldw	r16,184(sp)
 800758c:	dec03804 	addi	sp,sp,224
 8007590:	f800283a 	ret
 8007594:	d9002517 	ldw	r4,148(sp)
 8007598:	24afc83a 	sub	r23,r4,r18
 800759c:	05ff6e0e 	bge	zero,r23,8007358 <__alt_data_end+0xfc007358>
 80075a0:	07000404 	movi	fp,16
 80075a4:	e5c15c0e 	bge	fp,r23,8007b18 <___svfiprintf_internal_r+0x12c8>
 80075a8:	01020074 	movhi	r4,2049
 80075ac:	21390404 	addi	r4,r4,-7152
 80075b0:	dc002215 	stw	r16,136(sp)
 80075b4:	dc402815 	stw	r17,160(sp)
 80075b8:	d9002115 	stw	r4,132(sp)
 80075bc:	b823883a 	mov	r17,r23
 80075c0:	054001c4 	movi	r21,7
 80075c4:	982f883a 	mov	r23,r19
 80075c8:	dc002717 	ldw	r16,156(sp)
 80075cc:	9027883a 	mov	r19,r18
 80075d0:	dc802317 	ldw	r18,140(sp)
 80075d4:	00000306 	br	80075e4 <___svfiprintf_internal_r+0xd94>
 80075d8:	8c7ffc04 	addi	r17,r17,-16
 80075dc:	42000204 	addi	r8,r8,8
 80075e0:	e440110e 	bge	fp,r17,8007628 <___svfiprintf_internal_r+0xdd8>
 80075e4:	18c00404 	addi	r3,r3,16
 80075e8:	10800044 	addi	r2,r2,1
 80075ec:	45800015 	stw	r22,0(r8)
 80075f0:	47000115 	stw	fp,4(r8)
 80075f4:	d8c01c15 	stw	r3,112(sp)
 80075f8:	d8801b15 	stw	r2,108(sp)
 80075fc:	a8bff60e 	bge	r21,r2,80075d8 <__alt_data_end+0xfc0075d8>
 8007600:	d9801a04 	addi	r6,sp,104
 8007604:	900b883a 	mov	r5,r18
 8007608:	8009883a 	mov	r4,r16
 800760c:	80066800 	call	8006680 <__ssprint_r>
 8007610:	103fcf1e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 8007614:	8c7ffc04 	addi	r17,r17,-16
 8007618:	d8c01c17 	ldw	r3,112(sp)
 800761c:	d8801b17 	ldw	r2,108(sp)
 8007620:	d811883a 	mov	r8,sp
 8007624:	e47fef16 	blt	fp,r17,80075e4 <__alt_data_end+0xfc0075e4>
 8007628:	9825883a 	mov	r18,r19
 800762c:	dc002217 	ldw	r16,136(sp)
 8007630:	b827883a 	mov	r19,r23
 8007634:	882f883a 	mov	r23,r17
 8007638:	dc402817 	ldw	r17,160(sp)
 800763c:	d9402117 	ldw	r5,132(sp)
 8007640:	1dc7883a 	add	r3,r3,r23
 8007644:	10800044 	addi	r2,r2,1
 8007648:	41400015 	stw	r5,0(r8)
 800764c:	45c00115 	stw	r23,4(r8)
 8007650:	d8c01c15 	stw	r3,112(sp)
 8007654:	d8801b15 	stw	r2,108(sp)
 8007658:	010001c4 	movi	r4,7
 800765c:	2080b716 	blt	r4,r2,800793c <___svfiprintf_internal_r+0x10ec>
 8007660:	42000204 	addi	r8,r8,8
 8007664:	003f3c06 	br	8007358 <__alt_data_end+0xfc007358>
 8007668:	d9402317 	ldw	r5,140(sp)
 800766c:	d9002717 	ldw	r4,156(sp)
 8007670:	d9801a04 	addi	r6,sp,104
 8007674:	80066800 	call	8006680 <__ssprint_r>
 8007678:	103fb51e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 800767c:	d8c01c17 	ldw	r3,112(sp)
 8007680:	d811883a 	mov	r8,sp
 8007684:	003f7106 	br	800744c <__alt_data_end+0xfc00744c>
 8007688:	d9402317 	ldw	r5,140(sp)
 800768c:	d9002717 	ldw	r4,156(sp)
 8007690:	d9801a04 	addi	r6,sp,104
 8007694:	80066800 	call	8006680 <__ssprint_r>
 8007698:	103fa126 	beq	r2,zero,8007520 <__alt_data_end+0xfc007520>
 800769c:	003fac06 	br	8007550 <__alt_data_end+0xfc007550>
 80076a0:	d9402317 	ldw	r5,140(sp)
 80076a4:	d9002717 	ldw	r4,156(sp)
 80076a8:	d9801a04 	addi	r6,sp,104
 80076ac:	80066800 	call	8006680 <__ssprint_r>
 80076b0:	103fa71e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 80076b4:	d811883a 	mov	r8,sp
 80076b8:	003c9e06 	br	8006934 <__alt_data_end+0xfc006934>
 80076bc:	d9402317 	ldw	r5,140(sp)
 80076c0:	d9002717 	ldw	r4,156(sp)
 80076c4:	d9801a04 	addi	r6,sp,104
 80076c8:	80066800 	call	8006680 <__ssprint_r>
 80076cc:	103fa01e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 80076d0:	d8c01c17 	ldw	r3,112(sp)
 80076d4:	d8801b17 	ldw	r2,108(sp)
 80076d8:	d811883a 	mov	r8,sp
 80076dc:	003f5206 	br	8007428 <__alt_data_end+0xfc007428>
 80076e0:	d9402317 	ldw	r5,140(sp)
 80076e4:	d9002717 	ldw	r4,156(sp)
 80076e8:	d9801a04 	addi	r6,sp,104
 80076ec:	80066800 	call	8006680 <__ssprint_r>
 80076f0:	103f971e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 80076f4:	d8c01c17 	ldw	r3,112(sp)
 80076f8:	d8801b17 	ldw	r2,108(sp)
 80076fc:	d811883a 	mov	r8,sp
 8007700:	003f0506 	br	8007318 <__alt_data_end+0xfc007318>
 8007704:	d9402317 	ldw	r5,140(sp)
 8007708:	d9002717 	ldw	r4,156(sp)
 800770c:	d9801a04 	addi	r6,sp,104
 8007710:	80066800 	call	8006680 <__ssprint_r>
 8007714:	103f8e1e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 8007718:	d8c01c17 	ldw	r3,112(sp)
 800771c:	d8801b17 	ldw	r2,108(sp)
 8007720:	d811883a 	mov	r8,sp
 8007724:	003f0906 	br	800734c <__alt_data_end+0xfc00734c>
 8007728:	d9402017 	ldw	r5,128(sp)
 800772c:	d8001d85 	stb	zero,118(sp)
 8007730:	28007716 	blt	r5,zero,8007910 <___svfiprintf_internal_r+0x10c0>
 8007734:	00ffdfc4 	movi	r3,-129
 8007738:	9504b03a 	or	r2,r18,r20
 800773c:	80e0703a 	and	r16,r16,r3
 8007740:	103d3926 	beq	r2,zero,8006c28 <__alt_data_end+0xfc006c28>
 8007744:	002b883a 	mov	r21,zero
 8007748:	003d3c06 	br	8006c3c <__alt_data_end+0xfc006c3c>
 800774c:	d9402317 	ldw	r5,140(sp)
 8007750:	d9002717 	ldw	r4,156(sp)
 8007754:	d9801a04 	addi	r6,sp,104
 8007758:	80066800 	call	8006680 <__ssprint_r>
 800775c:	103f7c1e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 8007760:	d8c01c17 	ldw	r3,112(sp)
 8007764:	d8801b17 	ldw	r2,108(sp)
 8007768:	d811883a 	mov	r8,sp
 800776c:	003edd06 	br	80072e4 <__alt_data_end+0xfc0072e4>
 8007770:	8080100c 	andi	r2,r16,64
 8007774:	d8001d85 	stb	zero,118(sp)
 8007778:	10008426 	beq	r2,zero,800798c <___svfiprintf_internal_r+0x113c>
 800777c:	d9402417 	ldw	r5,144(sp)
 8007780:	d8c02017 	ldw	r3,128(sp)
 8007784:	0029883a 	mov	r20,zero
 8007788:	28800104 	addi	r2,r5,4
 800778c:	2c80000b 	ldhu	r18,0(r5)
 8007790:	183eab0e 	bge	r3,zero,8007240 <__alt_data_end+0xfc007240>
 8007794:	d8802415 	stw	r2,144(sp)
 8007798:	002b883a 	mov	r21,zero
 800779c:	9504b03a 	or	r2,r18,r20
 80077a0:	103e171e 	bne	r2,zero,8007000 <__alt_data_end+0xfc007000>
 80077a4:	00800044 	movi	r2,1
 80077a8:	10803fcc 	andi	r2,r2,255
 80077ac:	00c00044 	movi	r3,1
 80077b0:	10c05c26 	beq	r2,r3,8007924 <___svfiprintf_internal_r+0x10d4>
 80077b4:	00c00084 	movi	r3,2
 80077b8:	10fd1e26 	beq	r2,r3,8006c34 <__alt_data_end+0xfc006c34>
 80077bc:	003ec406 	br	80072d0 <__alt_data_end+0xfc0072d0>
 80077c0:	d9401e17 	ldw	r5,120(sp)
 80077c4:	2c69c83a 	sub	r20,r5,r17
 80077c8:	003d4506 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 80077cc:	d8802415 	stw	r2,144(sp)
 80077d0:	98c00007 	ldb	r3,0(r19)
 80077d4:	003c6a06 	br	8006980 <__alt_data_end+0xfc006980>
 80077d8:	d9402317 	ldw	r5,140(sp)
 80077dc:	d9002717 	ldw	r4,156(sp)
 80077e0:	d9801a04 	addi	r6,sp,104
 80077e4:	80066800 	call	8006680 <__ssprint_r>
 80077e8:	103f591e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 80077ec:	d8c01c17 	ldw	r3,112(sp)
 80077f0:	003f4406 	br	8007504 <__alt_data_end+0xfc007504>
 80077f4:	01420074 	movhi	r5,2049
 80077f8:	2978a304 	addi	r5,r5,-7540
 80077fc:	d9402915 	stw	r5,164(sp)
 8007800:	003d0906 	br	8006c28 <__alt_data_end+0xfc006c28>
 8007804:	d8c02417 	ldw	r3,144(sp)
 8007808:	d9002617 	ldw	r4,152(sp)
 800780c:	d9402417 	ldw	r5,144(sp)
 8007810:	18800017 	ldw	r2,0(r3)
 8007814:	2007d7fa 	srai	r3,r4,31
 8007818:	29400104 	addi	r5,r5,4
 800781c:	d9402415 	stw	r5,144(sp)
 8007820:	11000015 	stw	r4,0(r2)
 8007824:	10c00115 	stw	r3,4(r2)
 8007828:	003c2b06 	br	80068d8 <__alt_data_end+0xfc0068d8>
 800782c:	d8c01d45 	stb	r3,117(sp)
 8007830:	d8c02017 	ldw	r3,128(sp)
 8007834:	00800c04 	movi	r2,48
 8007838:	d8801d05 	stb	r2,116(sp)
 800783c:	d8001d85 	stb	zero,118(sp)
 8007840:	80800094 	ori	r2,r16,2
 8007844:	1800ac16 	blt	r3,zero,8007af8 <___svfiprintf_internal_r+0x12a8>
 8007848:	00bfdfc4 	movi	r2,-129
 800784c:	80a0703a 	and	r16,r16,r2
 8007850:	84000094 	ori	r16,r16,2
 8007854:	002b883a 	mov	r21,zero
 8007858:	003cf806 	br	8006c3c <__alt_data_end+0xfc006c3c>
 800785c:	98c00007 	ldb	r3,0(r19)
 8007860:	003c4706 	br	8006980 <__alt_data_end+0xfc006980>
 8007864:	d9402417 	ldw	r5,144(sp)
 8007868:	2c800017 	ldw	r18,0(r5)
 800786c:	29400104 	addi	r5,r5,4
 8007870:	d9402415 	stw	r5,144(sp)
 8007874:	9029d7fa 	srai	r20,r18,31
 8007878:	a005883a 	mov	r2,r20
 800787c:	003dd806 	br	8006fe0 <__alt_data_end+0xfc006fe0>
 8007880:	d9402417 	ldw	r5,144(sp)
 8007884:	0029883a 	mov	r20,zero
 8007888:	2c800017 	ldw	r18,0(r5)
 800788c:	29400104 	addi	r5,r5,4
 8007890:	d9402415 	stw	r5,144(sp)
 8007894:	003cdb06 	br	8006c04 <__alt_data_end+0xfc006c04>
 8007898:	8080100c 	andi	r2,r16,64
 800789c:	d8001d85 	stb	zero,118(sp)
 80078a0:	10003326 	beq	r2,zero,8007970 <___svfiprintf_internal_r+0x1120>
 80078a4:	d9002417 	ldw	r4,144(sp)
 80078a8:	d9402017 	ldw	r5,128(sp)
 80078ac:	0029883a 	mov	r20,zero
 80078b0:	20800104 	addi	r2,r4,4
 80078b4:	2480000b 	ldhu	r18,0(r4)
 80078b8:	283e7e0e 	bge	r5,zero,80072b4 <__alt_data_end+0xfc0072b4>
 80078bc:	9506b03a 	or	r3,r18,r20
 80078c0:	d8802415 	stw	r2,144(sp)
 80078c4:	183d271e 	bne	r3,zero,8006d64 <__alt_data_end+0xfc006d64>
 80078c8:	002b883a 	mov	r21,zero
 80078cc:	0005883a 	mov	r2,zero
 80078d0:	003fb506 	br	80077a8 <__alt_data_end+0xfc0077a8>
 80078d4:	98c00043 	ldbu	r3,1(r19)
 80078d8:	8c400814 	ori	r17,r17,32
 80078dc:	9cc00044 	addi	r19,r19,1
 80078e0:	18c03fcc 	andi	r3,r3,255
 80078e4:	18c0201c 	xori	r3,r3,128
 80078e8:	18ffe004 	addi	r3,r3,-128
 80078ec:	003c2406 	br	8006980 <__alt_data_end+0xfc006980>
 80078f0:	d8c02415 	stw	r3,144(sp)
 80078f4:	002b883a 	mov	r21,zero
 80078f8:	003fa806 	br	800779c <__alt_data_end+0xfc00779c>
 80078fc:	01020074 	movhi	r4,2049
 8007900:	2138a304 	addi	r4,r4,-7540
 8007904:	d9002915 	stw	r4,164(sp)
 8007908:	d8c02415 	stw	r3,144(sp)
 800790c:	1021883a 	mov	r16,r2
 8007910:	9504b03a 	or	r2,r18,r20
 8007914:	103f8b1e 	bne	r2,zero,8007744 <__alt_data_end+0xfc007744>
 8007918:	002b883a 	mov	r21,zero
 800791c:	00800084 	movi	r2,2
 8007920:	003fa106 	br	80077a8 <__alt_data_end+0xfc0077a8>
 8007924:	0025883a 	mov	r18,zero
 8007928:	94800c04 	addi	r18,r18,48
 800792c:	dc8019c5 	stb	r18,103(sp)
 8007930:	dd002c17 	ldw	r20,176(sp)
 8007934:	dc4019c4 	addi	r17,sp,103
 8007938:	003ce906 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 800793c:	d9402317 	ldw	r5,140(sp)
 8007940:	d9002717 	ldw	r4,156(sp)
 8007944:	d9801a04 	addi	r6,sp,104
 8007948:	80066800 	call	8006680 <__ssprint_r>
 800794c:	103f001e 	bne	r2,zero,8007550 <__alt_data_end+0xfc007550>
 8007950:	d8c01c17 	ldw	r3,112(sp)
 8007954:	d8801b17 	ldw	r2,108(sp)
 8007958:	d811883a 	mov	r8,sp
 800795c:	003e7e06 	br	8007358 <__alt_data_end+0xfc007358>
 8007960:	01420074 	movhi	r5,2049
 8007964:	29790404 	addi	r5,r5,-7152
 8007968:	d9402115 	stw	r5,132(sp)
 800796c:	003ea406 	br	8007400 <__alt_data_end+0xfc007400>
 8007970:	d8c02417 	ldw	r3,144(sp)
 8007974:	d9002017 	ldw	r4,128(sp)
 8007978:	0029883a 	mov	r20,zero
 800797c:	18800104 	addi	r2,r3,4
 8007980:	1c800017 	ldw	r18,0(r3)
 8007984:	203e4b0e 	bge	r4,zero,80072b4 <__alt_data_end+0xfc0072b4>
 8007988:	003fcc06 	br	80078bc <__alt_data_end+0xfc0078bc>
 800798c:	d9002417 	ldw	r4,144(sp)
 8007990:	d9402017 	ldw	r5,128(sp)
 8007994:	0029883a 	mov	r20,zero
 8007998:	20800104 	addi	r2,r4,4
 800799c:	24800017 	ldw	r18,0(r4)
 80079a0:	283e270e 	bge	r5,zero,8007240 <__alt_data_end+0xfc007240>
 80079a4:	003f7b06 	br	8007794 <__alt_data_end+0xfc007794>
 80079a8:	8400100c 	andi	r16,r16,64
 80079ac:	80003326 	beq	r16,zero,8007a7c <___svfiprintf_internal_r+0x122c>
 80079b0:	d9402417 	ldw	r5,144(sp)
 80079b4:	d8c02617 	ldw	r3,152(sp)
 80079b8:	28800017 	ldw	r2,0(r5)
 80079bc:	29400104 	addi	r5,r5,4
 80079c0:	d9402415 	stw	r5,144(sp)
 80079c4:	10c0000d 	sth	r3,0(r2)
 80079c8:	003bc306 	br	80068d8 <__alt_data_end+0xfc0068d8>
 80079cc:	d9002417 	ldw	r4,144(sp)
 80079d0:	0029883a 	mov	r20,zero
 80079d4:	24800017 	ldw	r18,0(r4)
 80079d8:	21000104 	addi	r4,r4,4
 80079dc:	d9002415 	stw	r4,144(sp)
 80079e0:	003c8806 	br	8006c04 <__alt_data_end+0xfc006c04>
 80079e4:	d8c02417 	ldw	r3,144(sp)
 80079e8:	1c800017 	ldw	r18,0(r3)
 80079ec:	18c00104 	addi	r3,r3,4
 80079f0:	d8c02415 	stw	r3,144(sp)
 80079f4:	9029d7fa 	srai	r20,r18,31
 80079f8:	a005883a 	mov	r2,r20
 80079fc:	003d7806 	br	8006fe0 <__alt_data_end+0xfc006fe0>
 8007a00:	8809883a 	mov	r4,r17
 8007a04:	da002d15 	stw	r8,180(sp)
 8007a08:	8000d0c0 	call	8000d0c <strlen>
 8007a0c:	1029883a 	mov	r20,r2
 8007a10:	dd401d83 	ldbu	r21,118(sp)
 8007a14:	ddc02415 	stw	r23,144(sp)
 8007a18:	d8002015 	stw	zero,128(sp)
 8007a1c:	da002d17 	ldw	r8,180(sp)
 8007a20:	003caf06 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007a24:	013fffc4 	movi	r4,-1
 8007a28:	003df206 	br	80071f4 <__alt_data_end+0xfc0071f4>
 8007a2c:	dd002017 	ldw	r20,128(sp)
 8007a30:	00800184 	movi	r2,6
 8007a34:	1500012e 	bgeu	r2,r20,8007a3c <___svfiprintf_internal_r+0x11ec>
 8007a38:	1029883a 	mov	r20,r2
 8007a3c:	a025883a 	mov	r18,r20
 8007a40:	a0004116 	blt	r20,zero,8007b48 <___svfiprintf_internal_r+0x12f8>
 8007a44:	04420074 	movhi	r17,2049
 8007a48:	ddc02415 	stw	r23,144(sp)
 8007a4c:	8c78a804 	addi	r17,r17,-7520
 8007a50:	003ce806 	br	8006df4 <__alt_data_end+0xfc006df4>
 8007a54:	04001004 	movi	r16,64
 8007a58:	800b883a 	mov	r5,r16
 8007a5c:	80049ec0 	call	80049ec <_malloc_r>
 8007a60:	d8c02317 	ldw	r3,140(sp)
 8007a64:	18800015 	stw	r2,0(r3)
 8007a68:	18800415 	stw	r2,16(r3)
 8007a6c:	10004d26 	beq	r2,zero,8007ba4 <___svfiprintf_internal_r+0x1354>
 8007a70:	d9402317 	ldw	r5,140(sp)
 8007a74:	2c000515 	stw	r16,20(r5)
 8007a78:	003b8906 	br	80068a0 <__alt_data_end+0xfc0068a0>
 8007a7c:	d9002417 	ldw	r4,144(sp)
 8007a80:	d9402617 	ldw	r5,152(sp)
 8007a84:	20800017 	ldw	r2,0(r4)
 8007a88:	21000104 	addi	r4,r4,4
 8007a8c:	d9002415 	stw	r4,144(sp)
 8007a90:	11400015 	stw	r5,0(r2)
 8007a94:	003b9006 	br	80068d8 <__alt_data_end+0xfc0068d8>
 8007a98:	8080004c 	andi	r2,r16,1
 8007a9c:	002b883a 	mov	r21,zero
 8007aa0:	10000526 	beq	r2,zero,8007ab8 <___svfiprintf_internal_r+0x1268>
 8007aa4:	00800c04 	movi	r2,48
 8007aa8:	d88019c5 	stb	r2,103(sp)
 8007aac:	dd002c17 	ldw	r20,176(sp)
 8007ab0:	dc4019c4 	addi	r17,sp,103
 8007ab4:	003c8a06 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007ab8:	0029883a 	mov	r20,zero
 8007abc:	dc401a04 	addi	r17,sp,104
 8007ac0:	003c8706 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007ac4:	01420074 	movhi	r5,2049
 8007ac8:	29790804 	addi	r5,r5,-7136
 8007acc:	d9402815 	stw	r5,160(sp)
 8007ad0:	003cff06 	br	8006ed0 <__alt_data_end+0xfc006ed0>
 8007ad4:	00bfffc4 	movi	r2,-1
 8007ad8:	003ea206 	br	8007564 <__alt_data_end+0xfc007564>
 8007adc:	00800044 	movi	r2,1
 8007ae0:	10803fcc 	andi	r2,r2,255
 8007ae4:	00c00044 	movi	r3,1
 8007ae8:	10fd4526 	beq	r2,r3,8007000 <__alt_data_end+0xfc007000>
 8007aec:	00c00084 	movi	r3,2
 8007af0:	10fc5226 	beq	r2,r3,8006c3c <__alt_data_end+0xfc006c3c>
 8007af4:	003c9c06 	br	8006d68 <__alt_data_end+0xfc006d68>
 8007af8:	1021883a 	mov	r16,r2
 8007afc:	002b883a 	mov	r21,zero
 8007b00:	00800084 	movi	r2,2
 8007b04:	003ff606 	br	8007ae0 <__alt_data_end+0xfc007ae0>
 8007b08:	01020074 	movhi	r4,2049
 8007b0c:	21390804 	addi	r4,r4,-7136
 8007b10:	d9002815 	stw	r4,160(sp)
 8007b14:	003e7206 	br	80074e0 <__alt_data_end+0xfc0074e0>
 8007b18:	01420074 	movhi	r5,2049
 8007b1c:	29790404 	addi	r5,r5,-7152
 8007b20:	d9402115 	stw	r5,132(sp)
 8007b24:	003ec506 	br	800763c <__alt_data_end+0xfc00763c>
 8007b28:	e027883a 	mov	r19,fp
 8007b2c:	d8002015 	stw	zero,128(sp)
 8007b30:	003b9406 	br	8006984 <__alt_data_end+0xfc006984>
 8007b34:	dd002017 	ldw	r20,128(sp)
 8007b38:	dd401d83 	ldbu	r21,118(sp)
 8007b3c:	ddc02415 	stw	r23,144(sp)
 8007b40:	d8002015 	stw	zero,128(sp)
 8007b44:	003c6606 	br	8006ce0 <__alt_data_end+0xfc006ce0>
 8007b48:	0025883a 	mov	r18,zero
 8007b4c:	003fbd06 	br	8007a44 <__alt_data_end+0xfc007a44>
 8007b50:	d9402417 	ldw	r5,144(sp)
 8007b54:	d8c02417 	ldw	r3,144(sp)
 8007b58:	29400017 	ldw	r5,0(r5)
 8007b5c:	19000104 	addi	r4,r3,4
 8007b60:	d9002415 	stw	r4,144(sp)
 8007b64:	d9402015 	stw	r5,128(sp)
 8007b68:	98c00043 	ldbu	r3,1(r19)
 8007b6c:	e027883a 	mov	r19,fp
 8007b70:	283f5b0e 	bge	r5,zero,80078e0 <__alt_data_end+0xfc0078e0>
 8007b74:	18c03fcc 	andi	r3,r3,255
 8007b78:	013fffc4 	movi	r4,-1
 8007b7c:	18c0201c 	xori	r3,r3,128
 8007b80:	d9002015 	stw	r4,128(sp)
 8007b84:	18ffe004 	addi	r3,r3,-128
 8007b88:	003b7d06 	br	8006980 <__alt_data_end+0xfc006980>
 8007b8c:	dd401d85 	stb	r21,118(sp)
 8007b90:	003cf306 	br	8006f60 <__alt_data_end+0xfc006f60>
 8007b94:	dd401d85 	stb	r21,118(sp)
 8007b98:	003d4e06 	br	80070d4 <__alt_data_end+0xfc0070d4>
 8007b9c:	dd401d85 	stb	r21,118(sp)
 8007ba0:	003c0e06 	br	8006bdc <__alt_data_end+0xfc006bdc>
 8007ba4:	d9002717 	ldw	r4,156(sp)
 8007ba8:	00800304 	movi	r2,12
 8007bac:	20800015 	stw	r2,0(r4)
 8007bb0:	00bfffc4 	movi	r2,-1
 8007bb4:	003e6b06 	br	8007564 <__alt_data_end+0xfc007564>
 8007bb8:	dd401d85 	stb	r21,118(sp)
 8007bbc:	003d0006 	br	8006fc0 <__alt_data_end+0xfc006fc0>
 8007bc0:	dd401d85 	stb	r21,118(sp)
 8007bc4:	003d7106 	br	800718c <__alt_data_end+0xfc00718c>
 8007bc8:	dd401d85 	stb	r21,118(sp)
 8007bcc:	003c5706 	br	8006d2c <__alt_data_end+0xfc006d2c>
 8007bd0:	dd401d85 	stb	r21,118(sp)
 8007bd4:	003c2e06 	br	8006c90 <__alt_data_end+0xfc006c90>
 8007bd8:	dd401d85 	stb	r21,118(sp)
 8007bdc:	003d8c06 	br	8007210 <__alt_data_end+0xfc007210>
 8007be0:	dd401d85 	stb	r21,118(sp)
 8007be4:	003da706 	br	8007284 <__alt_data_end+0xfc007284>
 8007be8:	dd401d85 	stb	r21,118(sp)
 8007bec:	003cc806 	br	8006f10 <__alt_data_end+0xfc006f10>

08007bf0 <_calloc_r>:
 8007bf0:	defffe04 	addi	sp,sp,-8
 8007bf4:	2805883a 	mov	r2,r5
 8007bf8:	dc000015 	stw	r16,0(sp)
 8007bfc:	300b883a 	mov	r5,r6
 8007c00:	2021883a 	mov	r16,r4
 8007c04:	1009883a 	mov	r4,r2
 8007c08:	dfc00115 	stw	ra,4(sp)
 8007c0c:	8000ba40 	call	8000ba4 <__mulsi3>
 8007c10:	100b883a 	mov	r5,r2
 8007c14:	8009883a 	mov	r4,r16
 8007c18:	80049ec0 	call	80049ec <_malloc_r>
 8007c1c:	10002926 	beq	r2,zero,8007cc4 <_calloc_r+0xd4>
 8007c20:	11bfff17 	ldw	r6,-4(r2)
 8007c24:	1021883a 	mov	r16,r2
 8007c28:	00bfff04 	movi	r2,-4
 8007c2c:	308c703a 	and	r6,r6,r2
 8007c30:	00c00904 	movi	r3,36
 8007c34:	308d883a 	add	r6,r6,r2
 8007c38:	19801636 	bltu	r3,r6,8007c94 <_calloc_r+0xa4>
 8007c3c:	008004c4 	movi	r2,19
 8007c40:	11800b2e 	bgeu	r2,r6,8007c70 <_calloc_r+0x80>
 8007c44:	80000015 	stw	zero,0(r16)
 8007c48:	80000115 	stw	zero,4(r16)
 8007c4c:	008006c4 	movi	r2,27
 8007c50:	11801a2e 	bgeu	r2,r6,8007cbc <_calloc_r+0xcc>
 8007c54:	80000215 	stw	zero,8(r16)
 8007c58:	80000315 	stw	zero,12(r16)
 8007c5c:	30c0151e 	bne	r6,r3,8007cb4 <_calloc_r+0xc4>
 8007c60:	80000415 	stw	zero,16(r16)
 8007c64:	80800604 	addi	r2,r16,24
 8007c68:	80000515 	stw	zero,20(r16)
 8007c6c:	00000106 	br	8007c74 <_calloc_r+0x84>
 8007c70:	8005883a 	mov	r2,r16
 8007c74:	10000015 	stw	zero,0(r2)
 8007c78:	10000115 	stw	zero,4(r2)
 8007c7c:	10000215 	stw	zero,8(r2)
 8007c80:	8005883a 	mov	r2,r16
 8007c84:	dfc00117 	ldw	ra,4(sp)
 8007c88:	dc000017 	ldw	r16,0(sp)
 8007c8c:	dec00204 	addi	sp,sp,8
 8007c90:	f800283a 	ret
 8007c94:	000b883a 	mov	r5,zero
 8007c98:	8009883a 	mov	r4,r16
 8007c9c:	800825c0 	call	800825c <memset>
 8007ca0:	8005883a 	mov	r2,r16
 8007ca4:	dfc00117 	ldw	ra,4(sp)
 8007ca8:	dc000017 	ldw	r16,0(sp)
 8007cac:	dec00204 	addi	sp,sp,8
 8007cb0:	f800283a 	ret
 8007cb4:	80800404 	addi	r2,r16,16
 8007cb8:	003fee06 	br	8007c74 <__alt_data_end+0xfc007c74>
 8007cbc:	80800204 	addi	r2,r16,8
 8007cc0:	003fec06 	br	8007c74 <__alt_data_end+0xfc007c74>
 8007cc4:	0005883a 	mov	r2,zero
 8007cc8:	003fee06 	br	8007c84 <__alt_data_end+0xfc007c84>

08007ccc <_malloc_trim_r>:
 8007ccc:	defffb04 	addi	sp,sp,-20
 8007cd0:	dcc00315 	stw	r19,12(sp)
 8007cd4:	04c20074 	movhi	r19,2049
 8007cd8:	dc800215 	stw	r18,8(sp)
 8007cdc:	dc400115 	stw	r17,4(sp)
 8007ce0:	dc000015 	stw	r16,0(sp)
 8007ce4:	dfc00415 	stw	ra,16(sp)
 8007ce8:	2821883a 	mov	r16,r5
 8007cec:	9cfb9204 	addi	r19,r19,-4536
 8007cf0:	2025883a 	mov	r18,r4
 8007cf4:	800bfc00 	call	800bfc0 <__malloc_lock>
 8007cf8:	98800217 	ldw	r2,8(r19)
 8007cfc:	14400117 	ldw	r17,4(r2)
 8007d00:	00bfff04 	movi	r2,-4
 8007d04:	88a2703a 	and	r17,r17,r2
 8007d08:	8c21c83a 	sub	r16,r17,r16
 8007d0c:	8403fbc4 	addi	r16,r16,4079
 8007d10:	8020d33a 	srli	r16,r16,12
 8007d14:	0083ffc4 	movi	r2,4095
 8007d18:	843fffc4 	addi	r16,r16,-1
 8007d1c:	8020933a 	slli	r16,r16,12
 8007d20:	1400060e 	bge	r2,r16,8007d3c <_malloc_trim_r+0x70>
 8007d24:	000b883a 	mov	r5,zero
 8007d28:	9009883a 	mov	r4,r18
 8007d2c:	80065500 	call	8006550 <_sbrk_r>
 8007d30:	98c00217 	ldw	r3,8(r19)
 8007d34:	1c47883a 	add	r3,r3,r17
 8007d38:	10c00a26 	beq	r2,r3,8007d64 <_malloc_trim_r+0x98>
 8007d3c:	9009883a 	mov	r4,r18
 8007d40:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8007d44:	0005883a 	mov	r2,zero
 8007d48:	dfc00417 	ldw	ra,16(sp)
 8007d4c:	dcc00317 	ldw	r19,12(sp)
 8007d50:	dc800217 	ldw	r18,8(sp)
 8007d54:	dc400117 	ldw	r17,4(sp)
 8007d58:	dc000017 	ldw	r16,0(sp)
 8007d5c:	dec00504 	addi	sp,sp,20
 8007d60:	f800283a 	ret
 8007d64:	040bc83a 	sub	r5,zero,r16
 8007d68:	9009883a 	mov	r4,r18
 8007d6c:	80065500 	call	8006550 <_sbrk_r>
 8007d70:	00ffffc4 	movi	r3,-1
 8007d74:	10c00d26 	beq	r2,r3,8007dac <_malloc_trim_r+0xe0>
 8007d78:	00c20074 	movhi	r3,2049
 8007d7c:	18c90704 	addi	r3,r3,9244
 8007d80:	18800017 	ldw	r2,0(r3)
 8007d84:	99000217 	ldw	r4,8(r19)
 8007d88:	8c23c83a 	sub	r17,r17,r16
 8007d8c:	8c400054 	ori	r17,r17,1
 8007d90:	1421c83a 	sub	r16,r2,r16
 8007d94:	24400115 	stw	r17,4(r4)
 8007d98:	9009883a 	mov	r4,r18
 8007d9c:	1c000015 	stw	r16,0(r3)
 8007da0:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8007da4:	00800044 	movi	r2,1
 8007da8:	003fe706 	br	8007d48 <__alt_data_end+0xfc007d48>
 8007dac:	000b883a 	mov	r5,zero
 8007db0:	9009883a 	mov	r4,r18
 8007db4:	80065500 	call	8006550 <_sbrk_r>
 8007db8:	99000217 	ldw	r4,8(r19)
 8007dbc:	014003c4 	movi	r5,15
 8007dc0:	1107c83a 	sub	r3,r2,r4
 8007dc4:	28ffdd0e 	bge	r5,r3,8007d3c <__alt_data_end+0xfc007d3c>
 8007dc8:	01420074 	movhi	r5,2049
 8007dcc:	29411c04 	addi	r5,r5,1136
 8007dd0:	29400017 	ldw	r5,0(r5)
 8007dd4:	18c00054 	ori	r3,r3,1
 8007dd8:	20c00115 	stw	r3,4(r4)
 8007ddc:	00c20074 	movhi	r3,2049
 8007de0:	1145c83a 	sub	r2,r2,r5
 8007de4:	18c90704 	addi	r3,r3,9244
 8007de8:	18800015 	stw	r2,0(r3)
 8007dec:	003fd306 	br	8007d3c <__alt_data_end+0xfc007d3c>

08007df0 <_free_r>:
 8007df0:	28004126 	beq	r5,zero,8007ef8 <_free_r+0x108>
 8007df4:	defffd04 	addi	sp,sp,-12
 8007df8:	dc400115 	stw	r17,4(sp)
 8007dfc:	dc000015 	stw	r16,0(sp)
 8007e00:	2023883a 	mov	r17,r4
 8007e04:	2821883a 	mov	r16,r5
 8007e08:	dfc00215 	stw	ra,8(sp)
 8007e0c:	800bfc00 	call	800bfc0 <__malloc_lock>
 8007e10:	81ffff17 	ldw	r7,-4(r16)
 8007e14:	00bfff84 	movi	r2,-2
 8007e18:	01020074 	movhi	r4,2049
 8007e1c:	81bffe04 	addi	r6,r16,-8
 8007e20:	3884703a 	and	r2,r7,r2
 8007e24:	213b9204 	addi	r4,r4,-4536
 8007e28:	308b883a 	add	r5,r6,r2
 8007e2c:	2a400117 	ldw	r9,4(r5)
 8007e30:	22000217 	ldw	r8,8(r4)
 8007e34:	00ffff04 	movi	r3,-4
 8007e38:	48c6703a 	and	r3,r9,r3
 8007e3c:	2a005726 	beq	r5,r8,8007f9c <_free_r+0x1ac>
 8007e40:	28c00115 	stw	r3,4(r5)
 8007e44:	39c0004c 	andi	r7,r7,1
 8007e48:	3800091e 	bne	r7,zero,8007e70 <_free_r+0x80>
 8007e4c:	823ffe17 	ldw	r8,-8(r16)
 8007e50:	22400204 	addi	r9,r4,8
 8007e54:	320dc83a 	sub	r6,r6,r8
 8007e58:	31c00217 	ldw	r7,8(r6)
 8007e5c:	1205883a 	add	r2,r2,r8
 8007e60:	3a406526 	beq	r7,r9,8007ff8 <_free_r+0x208>
 8007e64:	32000317 	ldw	r8,12(r6)
 8007e68:	3a000315 	stw	r8,12(r7)
 8007e6c:	41c00215 	stw	r7,8(r8)
 8007e70:	28cf883a 	add	r7,r5,r3
 8007e74:	39c00117 	ldw	r7,4(r7)
 8007e78:	39c0004c 	andi	r7,r7,1
 8007e7c:	38003a26 	beq	r7,zero,8007f68 <_free_r+0x178>
 8007e80:	10c00054 	ori	r3,r2,1
 8007e84:	30c00115 	stw	r3,4(r6)
 8007e88:	3087883a 	add	r3,r6,r2
 8007e8c:	18800015 	stw	r2,0(r3)
 8007e90:	00c07fc4 	movi	r3,511
 8007e94:	18801936 	bltu	r3,r2,8007efc <_free_r+0x10c>
 8007e98:	1004d0fa 	srli	r2,r2,3
 8007e9c:	01c00044 	movi	r7,1
 8007ea0:	21400117 	ldw	r5,4(r4)
 8007ea4:	10c00044 	addi	r3,r2,1
 8007ea8:	18c7883a 	add	r3,r3,r3
 8007eac:	1005d0ba 	srai	r2,r2,2
 8007eb0:	18c7883a 	add	r3,r3,r3
 8007eb4:	18c7883a 	add	r3,r3,r3
 8007eb8:	1907883a 	add	r3,r3,r4
 8007ebc:	3884983a 	sll	r2,r7,r2
 8007ec0:	19c00017 	ldw	r7,0(r3)
 8007ec4:	1a3ffe04 	addi	r8,r3,-8
 8007ec8:	1144b03a 	or	r2,r2,r5
 8007ecc:	32000315 	stw	r8,12(r6)
 8007ed0:	31c00215 	stw	r7,8(r6)
 8007ed4:	20800115 	stw	r2,4(r4)
 8007ed8:	19800015 	stw	r6,0(r3)
 8007edc:	39800315 	stw	r6,12(r7)
 8007ee0:	8809883a 	mov	r4,r17
 8007ee4:	dfc00217 	ldw	ra,8(sp)
 8007ee8:	dc400117 	ldw	r17,4(sp)
 8007eec:	dc000017 	ldw	r16,0(sp)
 8007ef0:	dec00304 	addi	sp,sp,12
 8007ef4:	800bfe41 	jmpi	800bfe4 <__malloc_unlock>
 8007ef8:	f800283a 	ret
 8007efc:	100ad27a 	srli	r5,r2,9
 8007f00:	00c00104 	movi	r3,4
 8007f04:	19404a36 	bltu	r3,r5,8008030 <_free_r+0x240>
 8007f08:	100ad1ba 	srli	r5,r2,6
 8007f0c:	28c00e44 	addi	r3,r5,57
 8007f10:	18c7883a 	add	r3,r3,r3
 8007f14:	29400e04 	addi	r5,r5,56
 8007f18:	18c7883a 	add	r3,r3,r3
 8007f1c:	18c7883a 	add	r3,r3,r3
 8007f20:	1909883a 	add	r4,r3,r4
 8007f24:	20c00017 	ldw	r3,0(r4)
 8007f28:	01c20074 	movhi	r7,2049
 8007f2c:	213ffe04 	addi	r4,r4,-8
 8007f30:	39fb9204 	addi	r7,r7,-4536
 8007f34:	20c04426 	beq	r4,r3,8008048 <_free_r+0x258>
 8007f38:	01ffff04 	movi	r7,-4
 8007f3c:	19400117 	ldw	r5,4(r3)
 8007f40:	29ca703a 	and	r5,r5,r7
 8007f44:	1140022e 	bgeu	r2,r5,8007f50 <_free_r+0x160>
 8007f48:	18c00217 	ldw	r3,8(r3)
 8007f4c:	20fffb1e 	bne	r4,r3,8007f3c <__alt_data_end+0xfc007f3c>
 8007f50:	19000317 	ldw	r4,12(r3)
 8007f54:	31000315 	stw	r4,12(r6)
 8007f58:	30c00215 	stw	r3,8(r6)
 8007f5c:	21800215 	stw	r6,8(r4)
 8007f60:	19800315 	stw	r6,12(r3)
 8007f64:	003fde06 	br	8007ee0 <__alt_data_end+0xfc007ee0>
 8007f68:	29c00217 	ldw	r7,8(r5)
 8007f6c:	10c5883a 	add	r2,r2,r3
 8007f70:	00c20074 	movhi	r3,2049
 8007f74:	18fb9404 	addi	r3,r3,-4528
 8007f78:	38c03b26 	beq	r7,r3,8008068 <_free_r+0x278>
 8007f7c:	2a000317 	ldw	r8,12(r5)
 8007f80:	11400054 	ori	r5,r2,1
 8007f84:	3087883a 	add	r3,r6,r2
 8007f88:	3a000315 	stw	r8,12(r7)
 8007f8c:	41c00215 	stw	r7,8(r8)
 8007f90:	31400115 	stw	r5,4(r6)
 8007f94:	18800015 	stw	r2,0(r3)
 8007f98:	003fbd06 	br	8007e90 <__alt_data_end+0xfc007e90>
 8007f9c:	39c0004c 	andi	r7,r7,1
 8007fa0:	10c5883a 	add	r2,r2,r3
 8007fa4:	3800071e 	bne	r7,zero,8007fc4 <_free_r+0x1d4>
 8007fa8:	81fffe17 	ldw	r7,-8(r16)
 8007fac:	31cdc83a 	sub	r6,r6,r7
 8007fb0:	30c00317 	ldw	r3,12(r6)
 8007fb4:	31400217 	ldw	r5,8(r6)
 8007fb8:	11c5883a 	add	r2,r2,r7
 8007fbc:	28c00315 	stw	r3,12(r5)
 8007fc0:	19400215 	stw	r5,8(r3)
 8007fc4:	10c00054 	ori	r3,r2,1
 8007fc8:	30c00115 	stw	r3,4(r6)
 8007fcc:	00c20074 	movhi	r3,2049
 8007fd0:	18c11d04 	addi	r3,r3,1140
 8007fd4:	18c00017 	ldw	r3,0(r3)
 8007fd8:	21800215 	stw	r6,8(r4)
 8007fdc:	10ffc036 	bltu	r2,r3,8007ee0 <__alt_data_end+0xfc007ee0>
 8007fe0:	00820074 	movhi	r2,2049
 8007fe4:	1088fe04 	addi	r2,r2,9208
 8007fe8:	11400017 	ldw	r5,0(r2)
 8007fec:	8809883a 	mov	r4,r17
 8007ff0:	8007ccc0 	call	8007ccc <_malloc_trim_r>
 8007ff4:	003fba06 	br	8007ee0 <__alt_data_end+0xfc007ee0>
 8007ff8:	28c9883a 	add	r4,r5,r3
 8007ffc:	21000117 	ldw	r4,4(r4)
 8008000:	2100004c 	andi	r4,r4,1
 8008004:	2000391e 	bne	r4,zero,80080ec <_free_r+0x2fc>
 8008008:	29c00217 	ldw	r7,8(r5)
 800800c:	29000317 	ldw	r4,12(r5)
 8008010:	1885883a 	add	r2,r3,r2
 8008014:	10c00054 	ori	r3,r2,1
 8008018:	39000315 	stw	r4,12(r7)
 800801c:	21c00215 	stw	r7,8(r4)
 8008020:	30c00115 	stw	r3,4(r6)
 8008024:	308d883a 	add	r6,r6,r2
 8008028:	30800015 	stw	r2,0(r6)
 800802c:	003fac06 	br	8007ee0 <__alt_data_end+0xfc007ee0>
 8008030:	00c00504 	movi	r3,20
 8008034:	19401536 	bltu	r3,r5,800808c <_free_r+0x29c>
 8008038:	28c01704 	addi	r3,r5,92
 800803c:	18c7883a 	add	r3,r3,r3
 8008040:	294016c4 	addi	r5,r5,91
 8008044:	003fb406 	br	8007f18 <__alt_data_end+0xfc007f18>
 8008048:	280bd0ba 	srai	r5,r5,2
 800804c:	00c00044 	movi	r3,1
 8008050:	38800117 	ldw	r2,4(r7)
 8008054:	194a983a 	sll	r5,r3,r5
 8008058:	2007883a 	mov	r3,r4
 800805c:	2884b03a 	or	r2,r5,r2
 8008060:	38800115 	stw	r2,4(r7)
 8008064:	003fbb06 	br	8007f54 <__alt_data_end+0xfc007f54>
 8008068:	21800515 	stw	r6,20(r4)
 800806c:	21800415 	stw	r6,16(r4)
 8008070:	10c00054 	ori	r3,r2,1
 8008074:	31c00315 	stw	r7,12(r6)
 8008078:	31c00215 	stw	r7,8(r6)
 800807c:	30c00115 	stw	r3,4(r6)
 8008080:	308d883a 	add	r6,r6,r2
 8008084:	30800015 	stw	r2,0(r6)
 8008088:	003f9506 	br	8007ee0 <__alt_data_end+0xfc007ee0>
 800808c:	00c01504 	movi	r3,84
 8008090:	19400536 	bltu	r3,r5,80080a8 <_free_r+0x2b8>
 8008094:	100ad33a 	srli	r5,r2,12
 8008098:	28c01bc4 	addi	r3,r5,111
 800809c:	18c7883a 	add	r3,r3,r3
 80080a0:	29401b84 	addi	r5,r5,110
 80080a4:	003f9c06 	br	8007f18 <__alt_data_end+0xfc007f18>
 80080a8:	00c05504 	movi	r3,340
 80080ac:	19400536 	bltu	r3,r5,80080c4 <_free_r+0x2d4>
 80080b0:	100ad3fa 	srli	r5,r2,15
 80080b4:	28c01e04 	addi	r3,r5,120
 80080b8:	18c7883a 	add	r3,r3,r3
 80080bc:	29401dc4 	addi	r5,r5,119
 80080c0:	003f9506 	br	8007f18 <__alt_data_end+0xfc007f18>
 80080c4:	00c15504 	movi	r3,1364
 80080c8:	19400536 	bltu	r3,r5,80080e0 <_free_r+0x2f0>
 80080cc:	100ad4ba 	srli	r5,r2,18
 80080d0:	28c01f44 	addi	r3,r5,125
 80080d4:	18c7883a 	add	r3,r3,r3
 80080d8:	29401f04 	addi	r5,r5,124
 80080dc:	003f8e06 	br	8007f18 <__alt_data_end+0xfc007f18>
 80080e0:	00c03f84 	movi	r3,254
 80080e4:	01401f84 	movi	r5,126
 80080e8:	003f8b06 	br	8007f18 <__alt_data_end+0xfc007f18>
 80080ec:	10c00054 	ori	r3,r2,1
 80080f0:	30c00115 	stw	r3,4(r6)
 80080f4:	308d883a 	add	r6,r6,r2
 80080f8:	30800015 	stw	r2,0(r6)
 80080fc:	003f7806 	br	8007ee0 <__alt_data_end+0xfc007ee0>

08008100 <memmove>:
 8008100:	2005883a 	mov	r2,r4
 8008104:	29000b2e 	bgeu	r5,r4,8008134 <memmove+0x34>
 8008108:	298f883a 	add	r7,r5,r6
 800810c:	21c0092e 	bgeu	r4,r7,8008134 <memmove+0x34>
 8008110:	2187883a 	add	r3,r4,r6
 8008114:	198bc83a 	sub	r5,r3,r6
 8008118:	30004826 	beq	r6,zero,800823c <memmove+0x13c>
 800811c:	39ffffc4 	addi	r7,r7,-1
 8008120:	39000003 	ldbu	r4,0(r7)
 8008124:	18ffffc4 	addi	r3,r3,-1
 8008128:	19000005 	stb	r4,0(r3)
 800812c:	28fffb1e 	bne	r5,r3,800811c <__alt_data_end+0xfc00811c>
 8008130:	f800283a 	ret
 8008134:	00c003c4 	movi	r3,15
 8008138:	1980412e 	bgeu	r3,r6,8008240 <memmove+0x140>
 800813c:	2886b03a 	or	r3,r5,r2
 8008140:	18c000cc 	andi	r3,r3,3
 8008144:	1800401e 	bne	r3,zero,8008248 <memmove+0x148>
 8008148:	33fffc04 	addi	r15,r6,-16
 800814c:	781ed13a 	srli	r15,r15,4
 8008150:	28c00104 	addi	r3,r5,4
 8008154:	13400104 	addi	r13,r2,4
 8008158:	781c913a 	slli	r14,r15,4
 800815c:	2b000204 	addi	r12,r5,8
 8008160:	12c00204 	addi	r11,r2,8
 8008164:	73800504 	addi	r14,r14,20
 8008168:	2a800304 	addi	r10,r5,12
 800816c:	12400304 	addi	r9,r2,12
 8008170:	2b9d883a 	add	r14,r5,r14
 8008174:	2811883a 	mov	r8,r5
 8008178:	100f883a 	mov	r7,r2
 800817c:	41000017 	ldw	r4,0(r8)
 8008180:	39c00404 	addi	r7,r7,16
 8008184:	18c00404 	addi	r3,r3,16
 8008188:	393ffc15 	stw	r4,-16(r7)
 800818c:	193ffc17 	ldw	r4,-16(r3)
 8008190:	6b400404 	addi	r13,r13,16
 8008194:	5ac00404 	addi	r11,r11,16
 8008198:	693ffc15 	stw	r4,-16(r13)
 800819c:	61000017 	ldw	r4,0(r12)
 80081a0:	4a400404 	addi	r9,r9,16
 80081a4:	42000404 	addi	r8,r8,16
 80081a8:	593ffc15 	stw	r4,-16(r11)
 80081ac:	51000017 	ldw	r4,0(r10)
 80081b0:	63000404 	addi	r12,r12,16
 80081b4:	52800404 	addi	r10,r10,16
 80081b8:	493ffc15 	stw	r4,-16(r9)
 80081bc:	1bbfef1e 	bne	r3,r14,800817c <__alt_data_end+0xfc00817c>
 80081c0:	79000044 	addi	r4,r15,1
 80081c4:	2008913a 	slli	r4,r4,4
 80081c8:	328003cc 	andi	r10,r6,15
 80081cc:	02c000c4 	movi	r11,3
 80081d0:	1107883a 	add	r3,r2,r4
 80081d4:	290b883a 	add	r5,r5,r4
 80081d8:	5a801e2e 	bgeu	r11,r10,8008254 <memmove+0x154>
 80081dc:	1813883a 	mov	r9,r3
 80081e0:	2811883a 	mov	r8,r5
 80081e4:	500f883a 	mov	r7,r10
 80081e8:	41000017 	ldw	r4,0(r8)
 80081ec:	4a400104 	addi	r9,r9,4
 80081f0:	39ffff04 	addi	r7,r7,-4
 80081f4:	493fff15 	stw	r4,-4(r9)
 80081f8:	42000104 	addi	r8,r8,4
 80081fc:	59fffa36 	bltu	r11,r7,80081e8 <__alt_data_end+0xfc0081e8>
 8008200:	513fff04 	addi	r4,r10,-4
 8008204:	2008d0ba 	srli	r4,r4,2
 8008208:	318000cc 	andi	r6,r6,3
 800820c:	21000044 	addi	r4,r4,1
 8008210:	2109883a 	add	r4,r4,r4
 8008214:	2109883a 	add	r4,r4,r4
 8008218:	1907883a 	add	r3,r3,r4
 800821c:	290b883a 	add	r5,r5,r4
 8008220:	30000b26 	beq	r6,zero,8008250 <memmove+0x150>
 8008224:	198d883a 	add	r6,r3,r6
 8008228:	29c00003 	ldbu	r7,0(r5)
 800822c:	18c00044 	addi	r3,r3,1
 8008230:	29400044 	addi	r5,r5,1
 8008234:	19ffffc5 	stb	r7,-1(r3)
 8008238:	19bffb1e 	bne	r3,r6,8008228 <__alt_data_end+0xfc008228>
 800823c:	f800283a 	ret
 8008240:	1007883a 	mov	r3,r2
 8008244:	003ff606 	br	8008220 <__alt_data_end+0xfc008220>
 8008248:	1007883a 	mov	r3,r2
 800824c:	003ff506 	br	8008224 <__alt_data_end+0xfc008224>
 8008250:	f800283a 	ret
 8008254:	500d883a 	mov	r6,r10
 8008258:	003ff106 	br	8008220 <__alt_data_end+0xfc008220>

0800825c <memset>:
 800825c:	20c000cc 	andi	r3,r4,3
 8008260:	2005883a 	mov	r2,r4
 8008264:	18004426 	beq	r3,zero,8008378 <memset+0x11c>
 8008268:	31ffffc4 	addi	r7,r6,-1
 800826c:	30004026 	beq	r6,zero,8008370 <memset+0x114>
 8008270:	2813883a 	mov	r9,r5
 8008274:	200d883a 	mov	r6,r4
 8008278:	2007883a 	mov	r3,r4
 800827c:	00000406 	br	8008290 <memset+0x34>
 8008280:	3a3fffc4 	addi	r8,r7,-1
 8008284:	31800044 	addi	r6,r6,1
 8008288:	38003926 	beq	r7,zero,8008370 <memset+0x114>
 800828c:	400f883a 	mov	r7,r8
 8008290:	18c00044 	addi	r3,r3,1
 8008294:	32400005 	stb	r9,0(r6)
 8008298:	1a0000cc 	andi	r8,r3,3
 800829c:	403ff81e 	bne	r8,zero,8008280 <__alt_data_end+0xfc008280>
 80082a0:	010000c4 	movi	r4,3
 80082a4:	21c02d2e 	bgeu	r4,r7,800835c <memset+0x100>
 80082a8:	29003fcc 	andi	r4,r5,255
 80082ac:	200c923a 	slli	r6,r4,8
 80082b0:	3108b03a 	or	r4,r6,r4
 80082b4:	200c943a 	slli	r6,r4,16
 80082b8:	218cb03a 	or	r6,r4,r6
 80082bc:	010003c4 	movi	r4,15
 80082c0:	21c0182e 	bgeu	r4,r7,8008324 <memset+0xc8>
 80082c4:	3b3ffc04 	addi	r12,r7,-16
 80082c8:	6018d13a 	srli	r12,r12,4
 80082cc:	1a000104 	addi	r8,r3,4
 80082d0:	1ac00204 	addi	r11,r3,8
 80082d4:	6008913a 	slli	r4,r12,4
 80082d8:	1a800304 	addi	r10,r3,12
 80082dc:	1813883a 	mov	r9,r3
 80082e0:	21000504 	addi	r4,r4,20
 80082e4:	1909883a 	add	r4,r3,r4
 80082e8:	49800015 	stw	r6,0(r9)
 80082ec:	41800015 	stw	r6,0(r8)
 80082f0:	59800015 	stw	r6,0(r11)
 80082f4:	51800015 	stw	r6,0(r10)
 80082f8:	42000404 	addi	r8,r8,16
 80082fc:	4a400404 	addi	r9,r9,16
 8008300:	5ac00404 	addi	r11,r11,16
 8008304:	52800404 	addi	r10,r10,16
 8008308:	413ff71e 	bne	r8,r4,80082e8 <__alt_data_end+0xfc0082e8>
 800830c:	63000044 	addi	r12,r12,1
 8008310:	6018913a 	slli	r12,r12,4
 8008314:	39c003cc 	andi	r7,r7,15
 8008318:	010000c4 	movi	r4,3
 800831c:	1b07883a 	add	r3,r3,r12
 8008320:	21c00e2e 	bgeu	r4,r7,800835c <memset+0x100>
 8008324:	1813883a 	mov	r9,r3
 8008328:	3811883a 	mov	r8,r7
 800832c:	010000c4 	movi	r4,3
 8008330:	49800015 	stw	r6,0(r9)
 8008334:	423fff04 	addi	r8,r8,-4
 8008338:	4a400104 	addi	r9,r9,4
 800833c:	223ffc36 	bltu	r4,r8,8008330 <__alt_data_end+0xfc008330>
 8008340:	393fff04 	addi	r4,r7,-4
 8008344:	2008d0ba 	srli	r4,r4,2
 8008348:	39c000cc 	andi	r7,r7,3
 800834c:	21000044 	addi	r4,r4,1
 8008350:	2109883a 	add	r4,r4,r4
 8008354:	2109883a 	add	r4,r4,r4
 8008358:	1907883a 	add	r3,r3,r4
 800835c:	38000526 	beq	r7,zero,8008374 <memset+0x118>
 8008360:	19cf883a 	add	r7,r3,r7
 8008364:	19400005 	stb	r5,0(r3)
 8008368:	18c00044 	addi	r3,r3,1
 800836c:	38fffd1e 	bne	r7,r3,8008364 <__alt_data_end+0xfc008364>
 8008370:	f800283a 	ret
 8008374:	f800283a 	ret
 8008378:	2007883a 	mov	r3,r4
 800837c:	300f883a 	mov	r7,r6
 8008380:	003fc706 	br	80082a0 <__alt_data_end+0xfc0082a0>

08008384 <_realloc_r>:
 8008384:	defff604 	addi	sp,sp,-40
 8008388:	dc800215 	stw	r18,8(sp)
 800838c:	dfc00915 	stw	ra,36(sp)
 8008390:	df000815 	stw	fp,32(sp)
 8008394:	ddc00715 	stw	r23,28(sp)
 8008398:	dd800615 	stw	r22,24(sp)
 800839c:	dd400515 	stw	r21,20(sp)
 80083a0:	dd000415 	stw	r20,16(sp)
 80083a4:	dcc00315 	stw	r19,12(sp)
 80083a8:	dc400115 	stw	r17,4(sp)
 80083ac:	dc000015 	stw	r16,0(sp)
 80083b0:	3025883a 	mov	r18,r6
 80083b4:	2800b726 	beq	r5,zero,8008694 <_realloc_r+0x310>
 80083b8:	282b883a 	mov	r21,r5
 80083bc:	2029883a 	mov	r20,r4
 80083c0:	800bfc00 	call	800bfc0 <__malloc_lock>
 80083c4:	a8bfff17 	ldw	r2,-4(r21)
 80083c8:	043fff04 	movi	r16,-4
 80083cc:	90c002c4 	addi	r3,r18,11
 80083d0:	01000584 	movi	r4,22
 80083d4:	acfffe04 	addi	r19,r21,-8
 80083d8:	1420703a 	and	r16,r2,r16
 80083dc:	20c0332e 	bgeu	r4,r3,80084ac <_realloc_r+0x128>
 80083e0:	047ffe04 	movi	r17,-8
 80083e4:	1c62703a 	and	r17,r3,r17
 80083e8:	8807883a 	mov	r3,r17
 80083ec:	88005816 	blt	r17,zero,8008550 <_realloc_r+0x1cc>
 80083f0:	8c805736 	bltu	r17,r18,8008550 <_realloc_r+0x1cc>
 80083f4:	80c0300e 	bge	r16,r3,80084b8 <_realloc_r+0x134>
 80083f8:	07020074 	movhi	fp,2049
 80083fc:	e73b9204 	addi	fp,fp,-4536
 8008400:	e1c00217 	ldw	r7,8(fp)
 8008404:	9c09883a 	add	r4,r19,r16
 8008408:	22000117 	ldw	r8,4(r4)
 800840c:	21c06326 	beq	r4,r7,800859c <_realloc_r+0x218>
 8008410:	017fff84 	movi	r5,-2
 8008414:	414a703a 	and	r5,r8,r5
 8008418:	214b883a 	add	r5,r4,r5
 800841c:	29800117 	ldw	r6,4(r5)
 8008420:	3180004c 	andi	r6,r6,1
 8008424:	30003f26 	beq	r6,zero,8008524 <_realloc_r+0x1a0>
 8008428:	1080004c 	andi	r2,r2,1
 800842c:	10008326 	beq	r2,zero,800863c <_realloc_r+0x2b8>
 8008430:	900b883a 	mov	r5,r18
 8008434:	a009883a 	mov	r4,r20
 8008438:	80049ec0 	call	80049ec <_malloc_r>
 800843c:	1025883a 	mov	r18,r2
 8008440:	10011e26 	beq	r2,zero,80088bc <_realloc_r+0x538>
 8008444:	a93fff17 	ldw	r4,-4(r21)
 8008448:	10fffe04 	addi	r3,r2,-8
 800844c:	00bfff84 	movi	r2,-2
 8008450:	2084703a 	and	r2,r4,r2
 8008454:	9885883a 	add	r2,r19,r2
 8008458:	1880ee26 	beq	r3,r2,8008814 <_realloc_r+0x490>
 800845c:	81bfff04 	addi	r6,r16,-4
 8008460:	00800904 	movi	r2,36
 8008464:	1180b836 	bltu	r2,r6,8008748 <_realloc_r+0x3c4>
 8008468:	00c004c4 	movi	r3,19
 800846c:	19809636 	bltu	r3,r6,80086c8 <_realloc_r+0x344>
 8008470:	9005883a 	mov	r2,r18
 8008474:	a807883a 	mov	r3,r21
 8008478:	19000017 	ldw	r4,0(r3)
 800847c:	11000015 	stw	r4,0(r2)
 8008480:	19000117 	ldw	r4,4(r3)
 8008484:	11000115 	stw	r4,4(r2)
 8008488:	18c00217 	ldw	r3,8(r3)
 800848c:	10c00215 	stw	r3,8(r2)
 8008490:	a80b883a 	mov	r5,r21
 8008494:	a009883a 	mov	r4,r20
 8008498:	8007df00 	call	8007df0 <_free_r>
 800849c:	a009883a 	mov	r4,r20
 80084a0:	800bfe40 	call	800bfe4 <__malloc_unlock>
 80084a4:	9005883a 	mov	r2,r18
 80084a8:	00001206 	br	80084f4 <_realloc_r+0x170>
 80084ac:	00c00404 	movi	r3,16
 80084b0:	1823883a 	mov	r17,r3
 80084b4:	003fce06 	br	80083f0 <__alt_data_end+0xfc0083f0>
 80084b8:	a825883a 	mov	r18,r21
 80084bc:	8445c83a 	sub	r2,r16,r17
 80084c0:	00c003c4 	movi	r3,15
 80084c4:	18802636 	bltu	r3,r2,8008560 <_realloc_r+0x1dc>
 80084c8:	99800117 	ldw	r6,4(r19)
 80084cc:	9c07883a 	add	r3,r19,r16
 80084d0:	3180004c 	andi	r6,r6,1
 80084d4:	3420b03a 	or	r16,r6,r16
 80084d8:	9c000115 	stw	r16,4(r19)
 80084dc:	18800117 	ldw	r2,4(r3)
 80084e0:	10800054 	ori	r2,r2,1
 80084e4:	18800115 	stw	r2,4(r3)
 80084e8:	a009883a 	mov	r4,r20
 80084ec:	800bfe40 	call	800bfe4 <__malloc_unlock>
 80084f0:	9005883a 	mov	r2,r18
 80084f4:	dfc00917 	ldw	ra,36(sp)
 80084f8:	df000817 	ldw	fp,32(sp)
 80084fc:	ddc00717 	ldw	r23,28(sp)
 8008500:	dd800617 	ldw	r22,24(sp)
 8008504:	dd400517 	ldw	r21,20(sp)
 8008508:	dd000417 	ldw	r20,16(sp)
 800850c:	dcc00317 	ldw	r19,12(sp)
 8008510:	dc800217 	ldw	r18,8(sp)
 8008514:	dc400117 	ldw	r17,4(sp)
 8008518:	dc000017 	ldw	r16,0(sp)
 800851c:	dec00a04 	addi	sp,sp,40
 8008520:	f800283a 	ret
 8008524:	017fff04 	movi	r5,-4
 8008528:	414a703a 	and	r5,r8,r5
 800852c:	814d883a 	add	r6,r16,r5
 8008530:	30c01f16 	blt	r6,r3,80085b0 <_realloc_r+0x22c>
 8008534:	20800317 	ldw	r2,12(r4)
 8008538:	20c00217 	ldw	r3,8(r4)
 800853c:	a825883a 	mov	r18,r21
 8008540:	3021883a 	mov	r16,r6
 8008544:	18800315 	stw	r2,12(r3)
 8008548:	10c00215 	stw	r3,8(r2)
 800854c:	003fdb06 	br	80084bc <__alt_data_end+0xfc0084bc>
 8008550:	00800304 	movi	r2,12
 8008554:	a0800015 	stw	r2,0(r20)
 8008558:	0005883a 	mov	r2,zero
 800855c:	003fe506 	br	80084f4 <__alt_data_end+0xfc0084f4>
 8008560:	98c00117 	ldw	r3,4(r19)
 8008564:	9c4b883a 	add	r5,r19,r17
 8008568:	11000054 	ori	r4,r2,1
 800856c:	18c0004c 	andi	r3,r3,1
 8008570:	1c62b03a 	or	r17,r3,r17
 8008574:	9c400115 	stw	r17,4(r19)
 8008578:	29000115 	stw	r4,4(r5)
 800857c:	2885883a 	add	r2,r5,r2
 8008580:	10c00117 	ldw	r3,4(r2)
 8008584:	29400204 	addi	r5,r5,8
 8008588:	a009883a 	mov	r4,r20
 800858c:	18c00054 	ori	r3,r3,1
 8008590:	10c00115 	stw	r3,4(r2)
 8008594:	8007df00 	call	8007df0 <_free_r>
 8008598:	003fd306 	br	80084e8 <__alt_data_end+0xfc0084e8>
 800859c:	017fff04 	movi	r5,-4
 80085a0:	414a703a 	and	r5,r8,r5
 80085a4:	89800404 	addi	r6,r17,16
 80085a8:	8151883a 	add	r8,r16,r5
 80085ac:	4180590e 	bge	r8,r6,8008714 <_realloc_r+0x390>
 80085b0:	1080004c 	andi	r2,r2,1
 80085b4:	103f9e1e 	bne	r2,zero,8008430 <__alt_data_end+0xfc008430>
 80085b8:	adbffe17 	ldw	r22,-8(r21)
 80085bc:	00bfff04 	movi	r2,-4
 80085c0:	9dadc83a 	sub	r22,r19,r22
 80085c4:	b1800117 	ldw	r6,4(r22)
 80085c8:	3084703a 	and	r2,r6,r2
 80085cc:	20002026 	beq	r4,zero,8008650 <_realloc_r+0x2cc>
 80085d0:	80af883a 	add	r23,r16,r2
 80085d4:	b96f883a 	add	r23,r23,r5
 80085d8:	21c05f26 	beq	r4,r7,8008758 <_realloc_r+0x3d4>
 80085dc:	b8c01c16 	blt	r23,r3,8008650 <_realloc_r+0x2cc>
 80085e0:	20800317 	ldw	r2,12(r4)
 80085e4:	20c00217 	ldw	r3,8(r4)
 80085e8:	81bfff04 	addi	r6,r16,-4
 80085ec:	01000904 	movi	r4,36
 80085f0:	18800315 	stw	r2,12(r3)
 80085f4:	10c00215 	stw	r3,8(r2)
 80085f8:	b0c00217 	ldw	r3,8(r22)
 80085fc:	b0800317 	ldw	r2,12(r22)
 8008600:	b4800204 	addi	r18,r22,8
 8008604:	18800315 	stw	r2,12(r3)
 8008608:	10c00215 	stw	r3,8(r2)
 800860c:	21801b36 	bltu	r4,r6,800867c <_realloc_r+0x2f8>
 8008610:	008004c4 	movi	r2,19
 8008614:	1180352e 	bgeu	r2,r6,80086ec <_realloc_r+0x368>
 8008618:	a8800017 	ldw	r2,0(r21)
 800861c:	b0800215 	stw	r2,8(r22)
 8008620:	a8800117 	ldw	r2,4(r21)
 8008624:	b0800315 	stw	r2,12(r22)
 8008628:	008006c4 	movi	r2,27
 800862c:	11807f36 	bltu	r2,r6,800882c <_realloc_r+0x4a8>
 8008630:	b0800404 	addi	r2,r22,16
 8008634:	ad400204 	addi	r21,r21,8
 8008638:	00002d06 	br	80086f0 <_realloc_r+0x36c>
 800863c:	adbffe17 	ldw	r22,-8(r21)
 8008640:	00bfff04 	movi	r2,-4
 8008644:	9dadc83a 	sub	r22,r19,r22
 8008648:	b1000117 	ldw	r4,4(r22)
 800864c:	2084703a 	and	r2,r4,r2
 8008650:	b03f7726 	beq	r22,zero,8008430 <__alt_data_end+0xfc008430>
 8008654:	80af883a 	add	r23,r16,r2
 8008658:	b8ff7516 	blt	r23,r3,8008430 <__alt_data_end+0xfc008430>
 800865c:	b0800317 	ldw	r2,12(r22)
 8008660:	b0c00217 	ldw	r3,8(r22)
 8008664:	81bfff04 	addi	r6,r16,-4
 8008668:	01000904 	movi	r4,36
 800866c:	18800315 	stw	r2,12(r3)
 8008670:	10c00215 	stw	r3,8(r2)
 8008674:	b4800204 	addi	r18,r22,8
 8008678:	21bfe52e 	bgeu	r4,r6,8008610 <__alt_data_end+0xfc008610>
 800867c:	a80b883a 	mov	r5,r21
 8008680:	9009883a 	mov	r4,r18
 8008684:	80081000 	call	8008100 <memmove>
 8008688:	b821883a 	mov	r16,r23
 800868c:	b027883a 	mov	r19,r22
 8008690:	003f8a06 	br	80084bc <__alt_data_end+0xfc0084bc>
 8008694:	300b883a 	mov	r5,r6
 8008698:	dfc00917 	ldw	ra,36(sp)
 800869c:	df000817 	ldw	fp,32(sp)
 80086a0:	ddc00717 	ldw	r23,28(sp)
 80086a4:	dd800617 	ldw	r22,24(sp)
 80086a8:	dd400517 	ldw	r21,20(sp)
 80086ac:	dd000417 	ldw	r20,16(sp)
 80086b0:	dcc00317 	ldw	r19,12(sp)
 80086b4:	dc800217 	ldw	r18,8(sp)
 80086b8:	dc400117 	ldw	r17,4(sp)
 80086bc:	dc000017 	ldw	r16,0(sp)
 80086c0:	dec00a04 	addi	sp,sp,40
 80086c4:	80049ec1 	jmpi	80049ec <_malloc_r>
 80086c8:	a8c00017 	ldw	r3,0(r21)
 80086cc:	90c00015 	stw	r3,0(r18)
 80086d0:	a8c00117 	ldw	r3,4(r21)
 80086d4:	90c00115 	stw	r3,4(r18)
 80086d8:	00c006c4 	movi	r3,27
 80086dc:	19804536 	bltu	r3,r6,80087f4 <_realloc_r+0x470>
 80086e0:	90800204 	addi	r2,r18,8
 80086e4:	a8c00204 	addi	r3,r21,8
 80086e8:	003f6306 	br	8008478 <__alt_data_end+0xfc008478>
 80086ec:	9005883a 	mov	r2,r18
 80086f0:	a8c00017 	ldw	r3,0(r21)
 80086f4:	b821883a 	mov	r16,r23
 80086f8:	b027883a 	mov	r19,r22
 80086fc:	10c00015 	stw	r3,0(r2)
 8008700:	a8c00117 	ldw	r3,4(r21)
 8008704:	10c00115 	stw	r3,4(r2)
 8008708:	a8c00217 	ldw	r3,8(r21)
 800870c:	10c00215 	stw	r3,8(r2)
 8008710:	003f6a06 	br	80084bc <__alt_data_end+0xfc0084bc>
 8008714:	9c67883a 	add	r19,r19,r17
 8008718:	4445c83a 	sub	r2,r8,r17
 800871c:	e4c00215 	stw	r19,8(fp)
 8008720:	10800054 	ori	r2,r2,1
 8008724:	98800115 	stw	r2,4(r19)
 8008728:	a8bfff17 	ldw	r2,-4(r21)
 800872c:	a009883a 	mov	r4,r20
 8008730:	1080004c 	andi	r2,r2,1
 8008734:	1462b03a 	or	r17,r2,r17
 8008738:	ac7fff15 	stw	r17,-4(r21)
 800873c:	800bfe40 	call	800bfe4 <__malloc_unlock>
 8008740:	a805883a 	mov	r2,r21
 8008744:	003f6b06 	br	80084f4 <__alt_data_end+0xfc0084f4>
 8008748:	a80b883a 	mov	r5,r21
 800874c:	9009883a 	mov	r4,r18
 8008750:	80081000 	call	8008100 <memmove>
 8008754:	003f4e06 	br	8008490 <__alt_data_end+0xfc008490>
 8008758:	89000404 	addi	r4,r17,16
 800875c:	b93fbc16 	blt	r23,r4,8008650 <__alt_data_end+0xfc008650>
 8008760:	b0800317 	ldw	r2,12(r22)
 8008764:	b0c00217 	ldw	r3,8(r22)
 8008768:	81bfff04 	addi	r6,r16,-4
 800876c:	01000904 	movi	r4,36
 8008770:	18800315 	stw	r2,12(r3)
 8008774:	10c00215 	stw	r3,8(r2)
 8008778:	b4800204 	addi	r18,r22,8
 800877c:	21804336 	bltu	r4,r6,800888c <_realloc_r+0x508>
 8008780:	008004c4 	movi	r2,19
 8008784:	11803f2e 	bgeu	r2,r6,8008884 <_realloc_r+0x500>
 8008788:	a8800017 	ldw	r2,0(r21)
 800878c:	b0800215 	stw	r2,8(r22)
 8008790:	a8800117 	ldw	r2,4(r21)
 8008794:	b0800315 	stw	r2,12(r22)
 8008798:	008006c4 	movi	r2,27
 800879c:	11803f36 	bltu	r2,r6,800889c <_realloc_r+0x518>
 80087a0:	b0800404 	addi	r2,r22,16
 80087a4:	ad400204 	addi	r21,r21,8
 80087a8:	a8c00017 	ldw	r3,0(r21)
 80087ac:	10c00015 	stw	r3,0(r2)
 80087b0:	a8c00117 	ldw	r3,4(r21)
 80087b4:	10c00115 	stw	r3,4(r2)
 80087b8:	a8c00217 	ldw	r3,8(r21)
 80087bc:	10c00215 	stw	r3,8(r2)
 80087c0:	b447883a 	add	r3,r22,r17
 80087c4:	bc45c83a 	sub	r2,r23,r17
 80087c8:	e0c00215 	stw	r3,8(fp)
 80087cc:	10800054 	ori	r2,r2,1
 80087d0:	18800115 	stw	r2,4(r3)
 80087d4:	b0800117 	ldw	r2,4(r22)
 80087d8:	a009883a 	mov	r4,r20
 80087dc:	1080004c 	andi	r2,r2,1
 80087e0:	1462b03a 	or	r17,r2,r17
 80087e4:	b4400115 	stw	r17,4(r22)
 80087e8:	800bfe40 	call	800bfe4 <__malloc_unlock>
 80087ec:	9005883a 	mov	r2,r18
 80087f0:	003f4006 	br	80084f4 <__alt_data_end+0xfc0084f4>
 80087f4:	a8c00217 	ldw	r3,8(r21)
 80087f8:	90c00215 	stw	r3,8(r18)
 80087fc:	a8c00317 	ldw	r3,12(r21)
 8008800:	90c00315 	stw	r3,12(r18)
 8008804:	30801126 	beq	r6,r2,800884c <_realloc_r+0x4c8>
 8008808:	90800404 	addi	r2,r18,16
 800880c:	a8c00404 	addi	r3,r21,16
 8008810:	003f1906 	br	8008478 <__alt_data_end+0xfc008478>
 8008814:	90ffff17 	ldw	r3,-4(r18)
 8008818:	00bfff04 	movi	r2,-4
 800881c:	a825883a 	mov	r18,r21
 8008820:	1884703a 	and	r2,r3,r2
 8008824:	80a1883a 	add	r16,r16,r2
 8008828:	003f2406 	br	80084bc <__alt_data_end+0xfc0084bc>
 800882c:	a8800217 	ldw	r2,8(r21)
 8008830:	b0800415 	stw	r2,16(r22)
 8008834:	a8800317 	ldw	r2,12(r21)
 8008838:	b0800515 	stw	r2,20(r22)
 800883c:	31000a26 	beq	r6,r4,8008868 <_realloc_r+0x4e4>
 8008840:	b0800604 	addi	r2,r22,24
 8008844:	ad400404 	addi	r21,r21,16
 8008848:	003fa906 	br	80086f0 <__alt_data_end+0xfc0086f0>
 800884c:	a9000417 	ldw	r4,16(r21)
 8008850:	90800604 	addi	r2,r18,24
 8008854:	a8c00604 	addi	r3,r21,24
 8008858:	91000415 	stw	r4,16(r18)
 800885c:	a9000517 	ldw	r4,20(r21)
 8008860:	91000515 	stw	r4,20(r18)
 8008864:	003f0406 	br	8008478 <__alt_data_end+0xfc008478>
 8008868:	a8c00417 	ldw	r3,16(r21)
 800886c:	ad400604 	addi	r21,r21,24
 8008870:	b0800804 	addi	r2,r22,32
 8008874:	b0c00615 	stw	r3,24(r22)
 8008878:	a8ffff17 	ldw	r3,-4(r21)
 800887c:	b0c00715 	stw	r3,28(r22)
 8008880:	003f9b06 	br	80086f0 <__alt_data_end+0xfc0086f0>
 8008884:	9005883a 	mov	r2,r18
 8008888:	003fc706 	br	80087a8 <__alt_data_end+0xfc0087a8>
 800888c:	a80b883a 	mov	r5,r21
 8008890:	9009883a 	mov	r4,r18
 8008894:	80081000 	call	8008100 <memmove>
 8008898:	003fc906 	br	80087c0 <__alt_data_end+0xfc0087c0>
 800889c:	a8800217 	ldw	r2,8(r21)
 80088a0:	b0800415 	stw	r2,16(r22)
 80088a4:	a8800317 	ldw	r2,12(r21)
 80088a8:	b0800515 	stw	r2,20(r22)
 80088ac:	31000726 	beq	r6,r4,80088cc <_realloc_r+0x548>
 80088b0:	b0800604 	addi	r2,r22,24
 80088b4:	ad400404 	addi	r21,r21,16
 80088b8:	003fbb06 	br	80087a8 <__alt_data_end+0xfc0087a8>
 80088bc:	a009883a 	mov	r4,r20
 80088c0:	800bfe40 	call	800bfe4 <__malloc_unlock>
 80088c4:	0005883a 	mov	r2,zero
 80088c8:	003f0a06 	br	80084f4 <__alt_data_end+0xfc0084f4>
 80088cc:	a8c00417 	ldw	r3,16(r21)
 80088d0:	ad400604 	addi	r21,r21,24
 80088d4:	b0800804 	addi	r2,r22,32
 80088d8:	b0c00615 	stw	r3,24(r22)
 80088dc:	a8ffff17 	ldw	r3,-4(r21)
 80088e0:	b0c00715 	stw	r3,28(r22)
 80088e4:	003fb006 	br	80087a8 <__alt_data_end+0xfc0087a8>

080088e8 <__muldi3>:
 80088e8:	defff604 	addi	sp,sp,-40
 80088ec:	dd800615 	stw	r22,24(sp)
 80088f0:	dd400515 	stw	r21,20(sp)
 80088f4:	dc400115 	stw	r17,4(sp)
 80088f8:	357fffcc 	andi	r21,r6,65535
 80088fc:	2022d43a 	srli	r17,r4,16
 8008900:	25bfffcc 	andi	r22,r4,65535
 8008904:	dcc00315 	stw	r19,12(sp)
 8008908:	dc800215 	stw	r18,8(sp)
 800890c:	2027883a 	mov	r19,r4
 8008910:	2825883a 	mov	r18,r5
 8008914:	b009883a 	mov	r4,r22
 8008918:	a80b883a 	mov	r5,r21
 800891c:	dfc00915 	stw	ra,36(sp)
 8008920:	df000815 	stw	fp,32(sp)
 8008924:	ddc00715 	stw	r23,28(sp)
 8008928:	3839883a 	mov	fp,r7
 800892c:	302ed43a 	srli	r23,r6,16
 8008930:	dd000415 	stw	r20,16(sp)
 8008934:	dc000015 	stw	r16,0(sp)
 8008938:	3029883a 	mov	r20,r6
 800893c:	8000ba40 	call	8000ba4 <__mulsi3>
 8008940:	a80b883a 	mov	r5,r21
 8008944:	8809883a 	mov	r4,r17
 8008948:	1021883a 	mov	r16,r2
 800894c:	8000ba40 	call	8000ba4 <__mulsi3>
 8008950:	8809883a 	mov	r4,r17
 8008954:	b80b883a 	mov	r5,r23
 8008958:	102b883a 	mov	r21,r2
 800895c:	8000ba40 	call	8000ba4 <__mulsi3>
 8008960:	b80b883a 	mov	r5,r23
 8008964:	b009883a 	mov	r4,r22
 8008968:	1023883a 	mov	r17,r2
 800896c:	8000ba40 	call	8000ba4 <__mulsi3>
 8008970:	8006d43a 	srli	r3,r16,16
 8008974:	1545883a 	add	r2,r2,r21
 8008978:	1885883a 	add	r2,r3,r2
 800897c:	1540022e 	bgeu	r2,r21,8008988 <__muldi3+0xa0>
 8008980:	00c00074 	movhi	r3,1
 8008984:	88e3883a 	add	r17,r17,r3
 8008988:	1006d43a 	srli	r3,r2,16
 800898c:	1004943a 	slli	r2,r2,16
 8008990:	e00b883a 	mov	r5,fp
 8008994:	9809883a 	mov	r4,r19
 8008998:	843fffcc 	andi	r16,r16,65535
 800899c:	1c63883a 	add	r17,r3,r17
 80089a0:	1421883a 	add	r16,r2,r16
 80089a4:	8000ba40 	call	8000ba4 <__mulsi3>
 80089a8:	900b883a 	mov	r5,r18
 80089ac:	a009883a 	mov	r4,r20
 80089b0:	1027883a 	mov	r19,r2
 80089b4:	8000ba40 	call	8000ba4 <__mulsi3>
 80089b8:	9885883a 	add	r2,r19,r2
 80089bc:	1447883a 	add	r3,r2,r17
 80089c0:	8005883a 	mov	r2,r16
 80089c4:	dfc00917 	ldw	ra,36(sp)
 80089c8:	df000817 	ldw	fp,32(sp)
 80089cc:	ddc00717 	ldw	r23,28(sp)
 80089d0:	dd800617 	ldw	r22,24(sp)
 80089d4:	dd400517 	ldw	r21,20(sp)
 80089d8:	dd000417 	ldw	r20,16(sp)
 80089dc:	dcc00317 	ldw	r19,12(sp)
 80089e0:	dc800217 	ldw	r18,8(sp)
 80089e4:	dc400117 	ldw	r17,4(sp)
 80089e8:	dc000017 	ldw	r16,0(sp)
 80089ec:	dec00a04 	addi	sp,sp,40
 80089f0:	f800283a 	ret

080089f4 <__udivdi3>:
 80089f4:	defff404 	addi	sp,sp,-48
 80089f8:	dcc00515 	stw	r19,20(sp)
 80089fc:	dc000215 	stw	r16,8(sp)
 8008a00:	dfc00b15 	stw	ra,44(sp)
 8008a04:	df000a15 	stw	fp,40(sp)
 8008a08:	ddc00915 	stw	r23,36(sp)
 8008a0c:	dd800815 	stw	r22,32(sp)
 8008a10:	dd400715 	stw	r21,28(sp)
 8008a14:	dd000615 	stw	r20,24(sp)
 8008a18:	dc800415 	stw	r18,16(sp)
 8008a1c:	dc400315 	stw	r17,12(sp)
 8008a20:	2027883a 	mov	r19,r4
 8008a24:	2821883a 	mov	r16,r5
 8008a28:	3800461e 	bne	r7,zero,8008b44 <__udivdi3+0x150>
 8008a2c:	3023883a 	mov	r17,r6
 8008a30:	2025883a 	mov	r18,r4
 8008a34:	2980572e 	bgeu	r5,r6,8008b94 <__udivdi3+0x1a0>
 8008a38:	00bfffd4 	movui	r2,65535
 8008a3c:	282d883a 	mov	r22,r5
 8008a40:	1180b236 	bltu	r2,r6,8008d0c <__udivdi3+0x318>
 8008a44:	00803fc4 	movi	r2,255
 8008a48:	1185803a 	cmpltu	r2,r2,r6
 8008a4c:	100490fa 	slli	r2,r2,3
 8008a50:	3086d83a 	srl	r3,r6,r2
 8008a54:	01020074 	movhi	r4,2049
 8008a58:	21390c04 	addi	r4,r4,-7120
 8008a5c:	20c7883a 	add	r3,r4,r3
 8008a60:	18c00003 	ldbu	r3,0(r3)
 8008a64:	1885883a 	add	r2,r3,r2
 8008a68:	00c00804 	movi	r3,32
 8008a6c:	1887c83a 	sub	r3,r3,r2
 8008a70:	18000526 	beq	r3,zero,8008a88 <__udivdi3+0x94>
 8008a74:	80e0983a 	sll	r16,r16,r3
 8008a78:	9884d83a 	srl	r2,r19,r2
 8008a7c:	30e2983a 	sll	r17,r6,r3
 8008a80:	98e4983a 	sll	r18,r19,r3
 8008a84:	142cb03a 	or	r22,r2,r16
 8008a88:	882ad43a 	srli	r21,r17,16
 8008a8c:	b009883a 	mov	r4,r22
 8008a90:	8d3fffcc 	andi	r20,r17,65535
 8008a94:	a80b883a 	mov	r5,r21
 8008a98:	8000b4c0 	call	8000b4c <__umodsi3>
 8008a9c:	b009883a 	mov	r4,r22
 8008aa0:	a80b883a 	mov	r5,r21
 8008aa4:	1027883a 	mov	r19,r2
 8008aa8:	8000ae80 	call	8000ae8 <__udivsi3>
 8008aac:	100b883a 	mov	r5,r2
 8008ab0:	a009883a 	mov	r4,r20
 8008ab4:	102d883a 	mov	r22,r2
 8008ab8:	8000ba40 	call	8000ba4 <__mulsi3>
 8008abc:	9826943a 	slli	r19,r19,16
 8008ac0:	9006d43a 	srli	r3,r18,16
 8008ac4:	1cc6b03a 	or	r3,r3,r19
 8008ac8:	1880052e 	bgeu	r3,r2,8008ae0 <__udivdi3+0xec>
 8008acc:	1c47883a 	add	r3,r3,r17
 8008ad0:	b13fffc4 	addi	r4,r22,-1
 8008ad4:	1c400136 	bltu	r3,r17,8008adc <__udivdi3+0xe8>
 8008ad8:	18814236 	bltu	r3,r2,8008fe4 <__udivdi3+0x5f0>
 8008adc:	202d883a 	mov	r22,r4
 8008ae0:	18a1c83a 	sub	r16,r3,r2
 8008ae4:	8009883a 	mov	r4,r16
 8008ae8:	a80b883a 	mov	r5,r21
 8008aec:	8000b4c0 	call	8000b4c <__umodsi3>
 8008af0:	1027883a 	mov	r19,r2
 8008af4:	8009883a 	mov	r4,r16
 8008af8:	a80b883a 	mov	r5,r21
 8008afc:	9826943a 	slli	r19,r19,16
 8008b00:	8000ae80 	call	8000ae8 <__udivsi3>
 8008b04:	100b883a 	mov	r5,r2
 8008b08:	a009883a 	mov	r4,r20
 8008b0c:	94bfffcc 	andi	r18,r18,65535
 8008b10:	1021883a 	mov	r16,r2
 8008b14:	94e4b03a 	or	r18,r18,r19
 8008b18:	8000ba40 	call	8000ba4 <__mulsi3>
 8008b1c:	9080052e 	bgeu	r18,r2,8008b34 <__udivdi3+0x140>
 8008b20:	8ca5883a 	add	r18,r17,r18
 8008b24:	80ffffc4 	addi	r3,r16,-1
 8008b28:	94410c36 	bltu	r18,r17,8008f5c <__udivdi3+0x568>
 8008b2c:	90810b2e 	bgeu	r18,r2,8008f5c <__udivdi3+0x568>
 8008b30:	843fff84 	addi	r16,r16,-2
 8008b34:	b004943a 	slli	r2,r22,16
 8008b38:	0007883a 	mov	r3,zero
 8008b3c:	1404b03a 	or	r2,r2,r16
 8008b40:	00005e06 	br	8008cbc <__udivdi3+0x2c8>
 8008b44:	29c05b36 	bltu	r5,r7,8008cb4 <__udivdi3+0x2c0>
 8008b48:	00bfffd4 	movui	r2,65535
 8008b4c:	11c0672e 	bgeu	r2,r7,8008cec <__udivdi3+0x2f8>
 8008b50:	00804034 	movhi	r2,256
 8008b54:	10bfffc4 	addi	r2,r2,-1
 8008b58:	11c10a36 	bltu	r2,r7,8008f84 <__udivdi3+0x590>
 8008b5c:	00800404 	movi	r2,16
 8008b60:	3886d83a 	srl	r3,r7,r2
 8008b64:	01020074 	movhi	r4,2049
 8008b68:	21390c04 	addi	r4,r4,-7120
 8008b6c:	20c7883a 	add	r3,r4,r3
 8008b70:	18c00003 	ldbu	r3,0(r3)
 8008b74:	05c00804 	movi	r23,32
 8008b78:	1885883a 	add	r2,r3,r2
 8008b7c:	b8afc83a 	sub	r23,r23,r2
 8008b80:	b800671e 	bne	r23,zero,8008d20 <__udivdi3+0x32c>
 8008b84:	3c010536 	bltu	r7,r16,8008f9c <__udivdi3+0x5a8>
 8008b88:	9985403a 	cmpgeu	r2,r19,r6
 8008b8c:	0007883a 	mov	r3,zero
 8008b90:	00004a06 	br	8008cbc <__udivdi3+0x2c8>
 8008b94:	3000041e 	bne	r6,zero,8008ba8 <__udivdi3+0x1b4>
 8008b98:	000b883a 	mov	r5,zero
 8008b9c:	01000044 	movi	r4,1
 8008ba0:	8000ae80 	call	8000ae8 <__udivsi3>
 8008ba4:	1023883a 	mov	r17,r2
 8008ba8:	00bfffd4 	movui	r2,65535
 8008bac:	1440532e 	bgeu	r2,r17,8008cfc <__udivdi3+0x308>
 8008bb0:	00804034 	movhi	r2,256
 8008bb4:	10bfffc4 	addi	r2,r2,-1
 8008bb8:	1440f436 	bltu	r2,r17,8008f8c <__udivdi3+0x598>
 8008bbc:	00800404 	movi	r2,16
 8008bc0:	8886d83a 	srl	r3,r17,r2
 8008bc4:	01020074 	movhi	r4,2049
 8008bc8:	21390c04 	addi	r4,r4,-7120
 8008bcc:	20c7883a 	add	r3,r4,r3
 8008bd0:	18c00003 	ldbu	r3,0(r3)
 8008bd4:	1885883a 	add	r2,r3,r2
 8008bd8:	00c00804 	movi	r3,32
 8008bdc:	1887c83a 	sub	r3,r3,r2
 8008be0:	1800a51e 	bne	r3,zero,8008e78 <__udivdi3+0x484>
 8008be4:	882ad43a 	srli	r21,r17,16
 8008be8:	8461c83a 	sub	r16,r16,r17
 8008bec:	8d3fffcc 	andi	r20,r17,65535
 8008bf0:	00c00044 	movi	r3,1
 8008bf4:	a80b883a 	mov	r5,r21
 8008bf8:	8009883a 	mov	r4,r16
 8008bfc:	d8c00115 	stw	r3,4(sp)
 8008c00:	8000b4c0 	call	8000b4c <__umodsi3>
 8008c04:	a80b883a 	mov	r5,r21
 8008c08:	8009883a 	mov	r4,r16
 8008c0c:	1027883a 	mov	r19,r2
 8008c10:	8000ae80 	call	8000ae8 <__udivsi3>
 8008c14:	a00b883a 	mov	r5,r20
 8008c18:	1009883a 	mov	r4,r2
 8008c1c:	102d883a 	mov	r22,r2
 8008c20:	8000ba40 	call	8000ba4 <__mulsi3>
 8008c24:	9826943a 	slli	r19,r19,16
 8008c28:	900ed43a 	srli	r7,r18,16
 8008c2c:	d8c00117 	ldw	r3,4(sp)
 8008c30:	3cceb03a 	or	r7,r7,r19
 8008c34:	3880052e 	bgeu	r7,r2,8008c4c <__udivdi3+0x258>
 8008c38:	3c4f883a 	add	r7,r7,r17
 8008c3c:	b13fffc4 	addi	r4,r22,-1
 8008c40:	3c400136 	bltu	r7,r17,8008c48 <__udivdi3+0x254>
 8008c44:	3880e436 	bltu	r7,r2,8008fd8 <__udivdi3+0x5e4>
 8008c48:	202d883a 	mov	r22,r4
 8008c4c:	38a1c83a 	sub	r16,r7,r2
 8008c50:	8009883a 	mov	r4,r16
 8008c54:	a80b883a 	mov	r5,r21
 8008c58:	d8c00115 	stw	r3,4(sp)
 8008c5c:	8000b4c0 	call	8000b4c <__umodsi3>
 8008c60:	1027883a 	mov	r19,r2
 8008c64:	8009883a 	mov	r4,r16
 8008c68:	a80b883a 	mov	r5,r21
 8008c6c:	9826943a 	slli	r19,r19,16
 8008c70:	8000ae80 	call	8000ae8 <__udivsi3>
 8008c74:	a00b883a 	mov	r5,r20
 8008c78:	1009883a 	mov	r4,r2
 8008c7c:	94bfffcc 	andi	r18,r18,65535
 8008c80:	1021883a 	mov	r16,r2
 8008c84:	94e4b03a 	or	r18,r18,r19
 8008c88:	8000ba40 	call	8000ba4 <__mulsi3>
 8008c8c:	d8c00117 	ldw	r3,4(sp)
 8008c90:	9080052e 	bgeu	r18,r2,8008ca8 <__udivdi3+0x2b4>
 8008c94:	8ca5883a 	add	r18,r17,r18
 8008c98:	813fffc4 	addi	r4,r16,-1
 8008c9c:	9440ad36 	bltu	r18,r17,8008f54 <__udivdi3+0x560>
 8008ca0:	9080ac2e 	bgeu	r18,r2,8008f54 <__udivdi3+0x560>
 8008ca4:	843fff84 	addi	r16,r16,-2
 8008ca8:	b004943a 	slli	r2,r22,16
 8008cac:	1404b03a 	or	r2,r2,r16
 8008cb0:	00000206 	br	8008cbc <__udivdi3+0x2c8>
 8008cb4:	0007883a 	mov	r3,zero
 8008cb8:	0005883a 	mov	r2,zero
 8008cbc:	dfc00b17 	ldw	ra,44(sp)
 8008cc0:	df000a17 	ldw	fp,40(sp)
 8008cc4:	ddc00917 	ldw	r23,36(sp)
 8008cc8:	dd800817 	ldw	r22,32(sp)
 8008ccc:	dd400717 	ldw	r21,28(sp)
 8008cd0:	dd000617 	ldw	r20,24(sp)
 8008cd4:	dcc00517 	ldw	r19,20(sp)
 8008cd8:	dc800417 	ldw	r18,16(sp)
 8008cdc:	dc400317 	ldw	r17,12(sp)
 8008ce0:	dc000217 	ldw	r16,8(sp)
 8008ce4:	dec00c04 	addi	sp,sp,48
 8008ce8:	f800283a 	ret
 8008cec:	00803fc4 	movi	r2,255
 8008cf0:	11c5803a 	cmpltu	r2,r2,r7
 8008cf4:	100490fa 	slli	r2,r2,3
 8008cf8:	003f9906 	br	8008b60 <__alt_data_end+0xfc008b60>
 8008cfc:	00803fc4 	movi	r2,255
 8008d00:	1445803a 	cmpltu	r2,r2,r17
 8008d04:	100490fa 	slli	r2,r2,3
 8008d08:	003fad06 	br	8008bc0 <__alt_data_end+0xfc008bc0>
 8008d0c:	00804034 	movhi	r2,256
 8008d10:	10bfffc4 	addi	r2,r2,-1
 8008d14:	11809f36 	bltu	r2,r6,8008f94 <__udivdi3+0x5a0>
 8008d18:	00800404 	movi	r2,16
 8008d1c:	003f4c06 	br	8008a50 <__alt_data_end+0xfc008a50>
 8008d20:	3dce983a 	sll	r7,r7,r23
 8008d24:	30b8d83a 	srl	fp,r6,r2
 8008d28:	80a2d83a 	srl	r17,r16,r2
 8008d2c:	35cc983a 	sll	r6,r6,r23
 8008d30:	3f38b03a 	or	fp,r7,fp
 8008d34:	e024d43a 	srli	r18,fp,16
 8008d38:	9884d83a 	srl	r2,r19,r2
 8008d3c:	85e0983a 	sll	r16,r16,r23
 8008d40:	8809883a 	mov	r4,r17
 8008d44:	900b883a 	mov	r5,r18
 8008d48:	d9800015 	stw	r6,0(sp)
 8008d4c:	1420b03a 	or	r16,r2,r16
 8008d50:	8000b4c0 	call	8000b4c <__umodsi3>
 8008d54:	900b883a 	mov	r5,r18
 8008d58:	8809883a 	mov	r4,r17
 8008d5c:	1029883a 	mov	r20,r2
 8008d60:	e5bfffcc 	andi	r22,fp,65535
 8008d64:	8000ae80 	call	8000ae8 <__udivsi3>
 8008d68:	100b883a 	mov	r5,r2
 8008d6c:	b009883a 	mov	r4,r22
 8008d70:	102b883a 	mov	r21,r2
 8008d74:	8000ba40 	call	8000ba4 <__mulsi3>
 8008d78:	a028943a 	slli	r20,r20,16
 8008d7c:	8006d43a 	srli	r3,r16,16
 8008d80:	1d06b03a 	or	r3,r3,r20
 8008d84:	1880042e 	bgeu	r3,r2,8008d98 <__udivdi3+0x3a4>
 8008d88:	1f07883a 	add	r3,r3,fp
 8008d8c:	a93fffc4 	addi	r4,r21,-1
 8008d90:	1f00892e 	bgeu	r3,fp,8008fb8 <__udivdi3+0x5c4>
 8008d94:	202b883a 	mov	r21,r4
 8008d98:	18a3c83a 	sub	r17,r3,r2
 8008d9c:	8809883a 	mov	r4,r17
 8008da0:	900b883a 	mov	r5,r18
 8008da4:	8000b4c0 	call	8000b4c <__umodsi3>
 8008da8:	1029883a 	mov	r20,r2
 8008dac:	8809883a 	mov	r4,r17
 8008db0:	900b883a 	mov	r5,r18
 8008db4:	a028943a 	slli	r20,r20,16
 8008db8:	8000ae80 	call	8000ae8 <__udivsi3>
 8008dbc:	100b883a 	mov	r5,r2
 8008dc0:	b009883a 	mov	r4,r22
 8008dc4:	843fffcc 	andi	r16,r16,65535
 8008dc8:	1023883a 	mov	r17,r2
 8008dcc:	8520b03a 	or	r16,r16,r20
 8008dd0:	8000ba40 	call	8000ba4 <__mulsi3>
 8008dd4:	8080042e 	bgeu	r16,r2,8008de8 <__udivdi3+0x3f4>
 8008dd8:	8721883a 	add	r16,r16,fp
 8008ddc:	88ffffc4 	addi	r3,r17,-1
 8008de0:	8700712e 	bgeu	r16,fp,8008fa8 <__udivdi3+0x5b4>
 8008de4:	1823883a 	mov	r17,r3
 8008de8:	a80e943a 	slli	r7,r21,16
 8008dec:	d8c00017 	ldw	r3,0(sp)
 8008df0:	80a1c83a 	sub	r16,r16,r2
 8008df4:	3c64b03a 	or	r18,r7,r17
 8008df8:	1d3fffcc 	andi	r20,r3,65535
 8008dfc:	9022d43a 	srli	r17,r18,16
 8008e00:	95bfffcc 	andi	r22,r18,65535
 8008e04:	a00b883a 	mov	r5,r20
 8008e08:	b009883a 	mov	r4,r22
 8008e0c:	182ad43a 	srli	r21,r3,16
 8008e10:	8000ba40 	call	8000ba4 <__mulsi3>
 8008e14:	a00b883a 	mov	r5,r20
 8008e18:	8809883a 	mov	r4,r17
 8008e1c:	1039883a 	mov	fp,r2
 8008e20:	8000ba40 	call	8000ba4 <__mulsi3>
 8008e24:	8809883a 	mov	r4,r17
 8008e28:	a80b883a 	mov	r5,r21
 8008e2c:	1029883a 	mov	r20,r2
 8008e30:	8000ba40 	call	8000ba4 <__mulsi3>
 8008e34:	a80b883a 	mov	r5,r21
 8008e38:	b009883a 	mov	r4,r22
 8008e3c:	1023883a 	mov	r17,r2
 8008e40:	8000ba40 	call	8000ba4 <__mulsi3>
 8008e44:	e006d43a 	srli	r3,fp,16
 8008e48:	1505883a 	add	r2,r2,r20
 8008e4c:	1887883a 	add	r3,r3,r2
 8008e50:	1d00022e 	bgeu	r3,r20,8008e5c <__udivdi3+0x468>
 8008e54:	00800074 	movhi	r2,1
 8008e58:	88a3883a 	add	r17,r17,r2
 8008e5c:	1804d43a 	srli	r2,r3,16
 8008e60:	1463883a 	add	r17,r2,r17
 8008e64:	84404436 	bltu	r16,r17,8008f78 <__udivdi3+0x584>
 8008e68:	84403e26 	beq	r16,r17,8008f64 <__udivdi3+0x570>
 8008e6c:	9005883a 	mov	r2,r18
 8008e70:	0007883a 	mov	r3,zero
 8008e74:	003f9106 	br	8008cbc <__alt_data_end+0xfc008cbc>
 8008e78:	88e2983a 	sll	r17,r17,r3
 8008e7c:	80aed83a 	srl	r23,r16,r2
 8008e80:	80e0983a 	sll	r16,r16,r3
 8008e84:	882ad43a 	srli	r21,r17,16
 8008e88:	9884d83a 	srl	r2,r19,r2
 8008e8c:	b809883a 	mov	r4,r23
 8008e90:	a80b883a 	mov	r5,r21
 8008e94:	98e4983a 	sll	r18,r19,r3
 8008e98:	142cb03a 	or	r22,r2,r16
 8008e9c:	8000b4c0 	call	8000b4c <__umodsi3>
 8008ea0:	b809883a 	mov	r4,r23
 8008ea4:	a80b883a 	mov	r5,r21
 8008ea8:	1027883a 	mov	r19,r2
 8008eac:	8d3fffcc 	andi	r20,r17,65535
 8008eb0:	8000ae80 	call	8000ae8 <__udivsi3>
 8008eb4:	a009883a 	mov	r4,r20
 8008eb8:	100b883a 	mov	r5,r2
 8008ebc:	102f883a 	mov	r23,r2
 8008ec0:	8000ba40 	call	8000ba4 <__mulsi3>
 8008ec4:	9826943a 	slli	r19,r19,16
 8008ec8:	b008d43a 	srli	r4,r22,16
 8008ecc:	24c8b03a 	or	r4,r4,r19
 8008ed0:	2080062e 	bgeu	r4,r2,8008eec <__udivdi3+0x4f8>
 8008ed4:	2449883a 	add	r4,r4,r17
 8008ed8:	b8ffffc4 	addi	r3,r23,-1
 8008edc:	24403c36 	bltu	r4,r17,8008fd0 <__udivdi3+0x5dc>
 8008ee0:	20803b2e 	bgeu	r4,r2,8008fd0 <__udivdi3+0x5dc>
 8008ee4:	bdffff84 	addi	r23,r23,-2
 8008ee8:	2449883a 	add	r4,r4,r17
 8008eec:	20a1c83a 	sub	r16,r4,r2
 8008ef0:	a80b883a 	mov	r5,r21
 8008ef4:	8009883a 	mov	r4,r16
 8008ef8:	8000b4c0 	call	8000b4c <__umodsi3>
 8008efc:	a80b883a 	mov	r5,r21
 8008f00:	8009883a 	mov	r4,r16
 8008f04:	1027883a 	mov	r19,r2
 8008f08:	8000ae80 	call	8000ae8 <__udivsi3>
 8008f0c:	a009883a 	mov	r4,r20
 8008f10:	100b883a 	mov	r5,r2
 8008f14:	9826943a 	slli	r19,r19,16
 8008f18:	1039883a 	mov	fp,r2
 8008f1c:	8000ba40 	call	8000ba4 <__mulsi3>
 8008f20:	b13fffcc 	andi	r4,r22,65535
 8008f24:	24c8b03a 	or	r4,r4,r19
 8008f28:	2080062e 	bgeu	r4,r2,8008f44 <__udivdi3+0x550>
 8008f2c:	2449883a 	add	r4,r4,r17
 8008f30:	e0ffffc4 	addi	r3,fp,-1
 8008f34:	24402436 	bltu	r4,r17,8008fc8 <__udivdi3+0x5d4>
 8008f38:	2080232e 	bgeu	r4,r2,8008fc8 <__udivdi3+0x5d4>
 8008f3c:	e73fff84 	addi	fp,fp,-2
 8008f40:	2449883a 	add	r4,r4,r17
 8008f44:	b82e943a 	slli	r23,r23,16
 8008f48:	20a1c83a 	sub	r16,r4,r2
 8008f4c:	bf06b03a 	or	r3,r23,fp
 8008f50:	003f2806 	br	8008bf4 <__alt_data_end+0xfc008bf4>
 8008f54:	2021883a 	mov	r16,r4
 8008f58:	003f5306 	br	8008ca8 <__alt_data_end+0xfc008ca8>
 8008f5c:	1821883a 	mov	r16,r3
 8008f60:	003ef406 	br	8008b34 <__alt_data_end+0xfc008b34>
 8008f64:	1806943a 	slli	r3,r3,16
 8008f68:	9de6983a 	sll	r19,r19,r23
 8008f6c:	e73fffcc 	andi	fp,fp,65535
 8008f70:	1f07883a 	add	r3,r3,fp
 8008f74:	98ffbd2e 	bgeu	r19,r3,8008e6c <__alt_data_end+0xfc008e6c>
 8008f78:	90bfffc4 	addi	r2,r18,-1
 8008f7c:	0007883a 	mov	r3,zero
 8008f80:	003f4e06 	br	8008cbc <__alt_data_end+0xfc008cbc>
 8008f84:	00800604 	movi	r2,24
 8008f88:	003ef506 	br	8008b60 <__alt_data_end+0xfc008b60>
 8008f8c:	00800604 	movi	r2,24
 8008f90:	003f0b06 	br	8008bc0 <__alt_data_end+0xfc008bc0>
 8008f94:	00800604 	movi	r2,24
 8008f98:	003ead06 	br	8008a50 <__alt_data_end+0xfc008a50>
 8008f9c:	0007883a 	mov	r3,zero
 8008fa0:	00800044 	movi	r2,1
 8008fa4:	003f4506 	br	8008cbc <__alt_data_end+0xfc008cbc>
 8008fa8:	80bf8e2e 	bgeu	r16,r2,8008de4 <__alt_data_end+0xfc008de4>
 8008fac:	8c7fff84 	addi	r17,r17,-2
 8008fb0:	8721883a 	add	r16,r16,fp
 8008fb4:	003f8c06 	br	8008de8 <__alt_data_end+0xfc008de8>
 8008fb8:	18bf762e 	bgeu	r3,r2,8008d94 <__alt_data_end+0xfc008d94>
 8008fbc:	ad7fff84 	addi	r21,r21,-2
 8008fc0:	1f07883a 	add	r3,r3,fp
 8008fc4:	003f7406 	br	8008d98 <__alt_data_end+0xfc008d98>
 8008fc8:	1839883a 	mov	fp,r3
 8008fcc:	003fdd06 	br	8008f44 <__alt_data_end+0xfc008f44>
 8008fd0:	182f883a 	mov	r23,r3
 8008fd4:	003fc506 	br	8008eec <__alt_data_end+0xfc008eec>
 8008fd8:	b5bfff84 	addi	r22,r22,-2
 8008fdc:	3c4f883a 	add	r7,r7,r17
 8008fe0:	003f1a06 	br	8008c4c <__alt_data_end+0xfc008c4c>
 8008fe4:	b5bfff84 	addi	r22,r22,-2
 8008fe8:	1c47883a 	add	r3,r3,r17
 8008fec:	003ebc06 	br	8008ae0 <__alt_data_end+0xfc008ae0>

08008ff0 <__umoddi3>:
 8008ff0:	defff304 	addi	sp,sp,-52
 8008ff4:	df000b15 	stw	fp,44(sp)
 8008ff8:	dc400415 	stw	r17,16(sp)
 8008ffc:	dc000315 	stw	r16,12(sp)
 8009000:	dfc00c15 	stw	ra,48(sp)
 8009004:	ddc00a15 	stw	r23,40(sp)
 8009008:	dd800915 	stw	r22,36(sp)
 800900c:	dd400815 	stw	r21,32(sp)
 8009010:	dd000715 	stw	r20,28(sp)
 8009014:	dcc00615 	stw	r19,24(sp)
 8009018:	dc800515 	stw	r18,20(sp)
 800901c:	2021883a 	mov	r16,r4
 8009020:	2823883a 	mov	r17,r5
 8009024:	2839883a 	mov	fp,r5
 8009028:	3800401e 	bne	r7,zero,800912c <__umoddi3+0x13c>
 800902c:	3027883a 	mov	r19,r6
 8009030:	2029883a 	mov	r20,r4
 8009034:	2980552e 	bgeu	r5,r6,800918c <__umoddi3+0x19c>
 8009038:	00bfffd4 	movui	r2,65535
 800903c:	1180a236 	bltu	r2,r6,80092c8 <__umoddi3+0x2d8>
 8009040:	01003fc4 	movi	r4,255
 8009044:	2189803a 	cmpltu	r4,r4,r6
 8009048:	200890fa 	slli	r4,r4,3
 800904c:	3104d83a 	srl	r2,r6,r4
 8009050:	00c20074 	movhi	r3,2049
 8009054:	18f90c04 	addi	r3,r3,-7120
 8009058:	1885883a 	add	r2,r3,r2
 800905c:	10c00003 	ldbu	r3,0(r2)
 8009060:	00800804 	movi	r2,32
 8009064:	1909883a 	add	r4,r3,r4
 8009068:	1125c83a 	sub	r18,r2,r4
 800906c:	90000526 	beq	r18,zero,8009084 <__umoddi3+0x94>
 8009070:	8ca2983a 	sll	r17,r17,r18
 8009074:	8108d83a 	srl	r4,r16,r4
 8009078:	34a6983a 	sll	r19,r6,r18
 800907c:	84a8983a 	sll	r20,r16,r18
 8009080:	2478b03a 	or	fp,r4,r17
 8009084:	982cd43a 	srli	r22,r19,16
 8009088:	e009883a 	mov	r4,fp
 800908c:	9dffffcc 	andi	r23,r19,65535
 8009090:	b00b883a 	mov	r5,r22
 8009094:	8000b4c0 	call	8000b4c <__umodsi3>
 8009098:	b00b883a 	mov	r5,r22
 800909c:	e009883a 	mov	r4,fp
 80090a0:	102b883a 	mov	r21,r2
 80090a4:	8000ae80 	call	8000ae8 <__udivsi3>
 80090a8:	100b883a 	mov	r5,r2
 80090ac:	b809883a 	mov	r4,r23
 80090b0:	8000ba40 	call	8000ba4 <__mulsi3>
 80090b4:	a82a943a 	slli	r21,r21,16
 80090b8:	a006d43a 	srli	r3,r20,16
 80090bc:	1d46b03a 	or	r3,r3,r21
 80090c0:	1880032e 	bgeu	r3,r2,80090d0 <__umoddi3+0xe0>
 80090c4:	1cc7883a 	add	r3,r3,r19
 80090c8:	1cc00136 	bltu	r3,r19,80090d0 <__umoddi3+0xe0>
 80090cc:	18813136 	bltu	r3,r2,8009594 <__umoddi3+0x5a4>
 80090d0:	18a1c83a 	sub	r16,r3,r2
 80090d4:	b00b883a 	mov	r5,r22
 80090d8:	8009883a 	mov	r4,r16
 80090dc:	8000b4c0 	call	8000b4c <__umodsi3>
 80090e0:	b00b883a 	mov	r5,r22
 80090e4:	8009883a 	mov	r4,r16
 80090e8:	1023883a 	mov	r17,r2
 80090ec:	8000ae80 	call	8000ae8 <__udivsi3>
 80090f0:	100b883a 	mov	r5,r2
 80090f4:	b809883a 	mov	r4,r23
 80090f8:	8822943a 	slli	r17,r17,16
 80090fc:	8000ba40 	call	8000ba4 <__mulsi3>
 8009100:	a0ffffcc 	andi	r3,r20,65535
 8009104:	1c46b03a 	or	r3,r3,r17
 8009108:	1880042e 	bgeu	r3,r2,800911c <__umoddi3+0x12c>
 800910c:	1cc7883a 	add	r3,r3,r19
 8009110:	1cc00236 	bltu	r3,r19,800911c <__umoddi3+0x12c>
 8009114:	1880012e 	bgeu	r3,r2,800911c <__umoddi3+0x12c>
 8009118:	1cc7883a 	add	r3,r3,r19
 800911c:	1885c83a 	sub	r2,r3,r2
 8009120:	1484d83a 	srl	r2,r2,r18
 8009124:	0007883a 	mov	r3,zero
 8009128:	00005306 	br	8009278 <__umoddi3+0x288>
 800912c:	29c05036 	bltu	r5,r7,8009270 <__umoddi3+0x280>
 8009130:	00bfffd4 	movui	r2,65535
 8009134:	11c05c2e 	bgeu	r2,r7,80092a8 <__umoddi3+0x2b8>
 8009138:	00804034 	movhi	r2,256
 800913c:	10bfffc4 	addi	r2,r2,-1
 8009140:	11c10636 	bltu	r2,r7,800955c <__umoddi3+0x56c>
 8009144:	01000404 	movi	r4,16
 8009148:	3904d83a 	srl	r2,r7,r4
 800914c:	00c20074 	movhi	r3,2049
 8009150:	18f90c04 	addi	r3,r3,-7120
 8009154:	1885883a 	add	r2,r3,r2
 8009158:	14c00003 	ldbu	r19,0(r2)
 800915c:	00c00804 	movi	r3,32
 8009160:	9927883a 	add	r19,r19,r4
 8009164:	1ce9c83a 	sub	r20,r3,r19
 8009168:	a0005c1e 	bne	r20,zero,80092dc <__umoddi3+0x2ec>
 800916c:	3c400136 	bltu	r7,r17,8009174 <__umoddi3+0x184>
 8009170:	81810a36 	bltu	r16,r6,800959c <__umoddi3+0x5ac>
 8009174:	8185c83a 	sub	r2,r16,r6
 8009178:	89e3c83a 	sub	r17,r17,r7
 800917c:	8089803a 	cmpltu	r4,r16,r2
 8009180:	8939c83a 	sub	fp,r17,r4
 8009184:	e007883a 	mov	r3,fp
 8009188:	00003b06 	br	8009278 <__umoddi3+0x288>
 800918c:	3000041e 	bne	r6,zero,80091a0 <__umoddi3+0x1b0>
 8009190:	000b883a 	mov	r5,zero
 8009194:	01000044 	movi	r4,1
 8009198:	8000ae80 	call	8000ae8 <__udivsi3>
 800919c:	1027883a 	mov	r19,r2
 80091a0:	00bfffd4 	movui	r2,65535
 80091a4:	14c0442e 	bgeu	r2,r19,80092b8 <__umoddi3+0x2c8>
 80091a8:	00804034 	movhi	r2,256
 80091ac:	10bfffc4 	addi	r2,r2,-1
 80091b0:	14c0ec36 	bltu	r2,r19,8009564 <__umoddi3+0x574>
 80091b4:	00800404 	movi	r2,16
 80091b8:	9886d83a 	srl	r3,r19,r2
 80091bc:	01020074 	movhi	r4,2049
 80091c0:	21390c04 	addi	r4,r4,-7120
 80091c4:	20c7883a 	add	r3,r4,r3
 80091c8:	18c00003 	ldbu	r3,0(r3)
 80091cc:	1887883a 	add	r3,r3,r2
 80091d0:	00800804 	movi	r2,32
 80091d4:	10e5c83a 	sub	r18,r2,r3
 80091d8:	9000ab1e 	bne	r18,zero,8009488 <__umoddi3+0x498>
 80091dc:	982cd43a 	srli	r22,r19,16
 80091e0:	8ce3c83a 	sub	r17,r17,r19
 80091e4:	9dffffcc 	andi	r23,r19,65535
 80091e8:	b00b883a 	mov	r5,r22
 80091ec:	8809883a 	mov	r4,r17
 80091f0:	8000b4c0 	call	8000b4c <__umodsi3>
 80091f4:	b00b883a 	mov	r5,r22
 80091f8:	8809883a 	mov	r4,r17
 80091fc:	102b883a 	mov	r21,r2
 8009200:	8000ae80 	call	8000ae8 <__udivsi3>
 8009204:	b80b883a 	mov	r5,r23
 8009208:	1009883a 	mov	r4,r2
 800920c:	8000ba40 	call	8000ba4 <__mulsi3>
 8009210:	a82a943a 	slli	r21,r21,16
 8009214:	a006d43a 	srli	r3,r20,16
 8009218:	1d46b03a 	or	r3,r3,r21
 800921c:	1880042e 	bgeu	r3,r2,8009230 <__umoddi3+0x240>
 8009220:	1cc7883a 	add	r3,r3,r19
 8009224:	1cc00236 	bltu	r3,r19,8009230 <__umoddi3+0x240>
 8009228:	1880012e 	bgeu	r3,r2,8009230 <__umoddi3+0x240>
 800922c:	1cc7883a 	add	r3,r3,r19
 8009230:	18a1c83a 	sub	r16,r3,r2
 8009234:	b00b883a 	mov	r5,r22
 8009238:	8009883a 	mov	r4,r16
 800923c:	8000b4c0 	call	8000b4c <__umodsi3>
 8009240:	1023883a 	mov	r17,r2
 8009244:	b00b883a 	mov	r5,r22
 8009248:	8009883a 	mov	r4,r16
 800924c:	8000ae80 	call	8000ae8 <__udivsi3>
 8009250:	8822943a 	slli	r17,r17,16
 8009254:	b80b883a 	mov	r5,r23
 8009258:	1009883a 	mov	r4,r2
 800925c:	8000ba40 	call	8000ba4 <__mulsi3>
 8009260:	a53fffcc 	andi	r20,r20,65535
 8009264:	a446b03a 	or	r3,r20,r17
 8009268:	18bfac2e 	bgeu	r3,r2,800911c <__alt_data_end+0xfc00911c>
 800926c:	003fa706 	br	800910c <__alt_data_end+0xfc00910c>
 8009270:	2005883a 	mov	r2,r4
 8009274:	2807883a 	mov	r3,r5
 8009278:	dfc00c17 	ldw	ra,48(sp)
 800927c:	df000b17 	ldw	fp,44(sp)
 8009280:	ddc00a17 	ldw	r23,40(sp)
 8009284:	dd800917 	ldw	r22,36(sp)
 8009288:	dd400817 	ldw	r21,32(sp)
 800928c:	dd000717 	ldw	r20,28(sp)
 8009290:	dcc00617 	ldw	r19,24(sp)
 8009294:	dc800517 	ldw	r18,20(sp)
 8009298:	dc400417 	ldw	r17,16(sp)
 800929c:	dc000317 	ldw	r16,12(sp)
 80092a0:	dec00d04 	addi	sp,sp,52
 80092a4:	f800283a 	ret
 80092a8:	04c03fc4 	movi	r19,255
 80092ac:	99c9803a 	cmpltu	r4,r19,r7
 80092b0:	200890fa 	slli	r4,r4,3
 80092b4:	003fa406 	br	8009148 <__alt_data_end+0xfc009148>
 80092b8:	00803fc4 	movi	r2,255
 80092bc:	14c5803a 	cmpltu	r2,r2,r19
 80092c0:	100490fa 	slli	r2,r2,3
 80092c4:	003fbc06 	br	80091b8 <__alt_data_end+0xfc0091b8>
 80092c8:	00804034 	movhi	r2,256
 80092cc:	10bfffc4 	addi	r2,r2,-1
 80092d0:	1180a636 	bltu	r2,r6,800956c <__umoddi3+0x57c>
 80092d4:	01000404 	movi	r4,16
 80092d8:	003f5c06 	br	800904c <__alt_data_end+0xfc00904c>
 80092dc:	3d0e983a 	sll	r7,r7,r20
 80092e0:	34ead83a 	srl	r21,r6,r19
 80092e4:	8cc6d83a 	srl	r3,r17,r19
 80092e8:	8d10983a 	sll	r8,r17,r20
 80092ec:	3d6ab03a 	or	r21,r7,r21
 80092f0:	a82cd43a 	srli	r22,r21,16
 80092f4:	84e2d83a 	srl	r17,r16,r19
 80092f8:	1809883a 	mov	r4,r3
 80092fc:	b00b883a 	mov	r5,r22
 8009300:	8a22b03a 	or	r17,r17,r8
 8009304:	3524983a 	sll	r18,r6,r20
 8009308:	dc400015 	stw	r17,0(sp)
 800930c:	d8c00115 	stw	r3,4(sp)
 8009310:	8000b4c0 	call	8000b4c <__umodsi3>
 8009314:	d8c00117 	ldw	r3,4(sp)
 8009318:	b00b883a 	mov	r5,r22
 800931c:	1039883a 	mov	fp,r2
 8009320:	1809883a 	mov	r4,r3
 8009324:	8000ae80 	call	8000ae8 <__udivsi3>
 8009328:	adffffcc 	andi	r23,r21,65535
 800932c:	100b883a 	mov	r5,r2
 8009330:	b809883a 	mov	r4,r23
 8009334:	1023883a 	mov	r17,r2
 8009338:	8000ba40 	call	8000ba4 <__mulsi3>
 800933c:	d9400017 	ldw	r5,0(sp)
 8009340:	e008943a 	slli	r4,fp,16
 8009344:	8520983a 	sll	r16,r16,r20
 8009348:	2806d43a 	srli	r3,r5,16
 800934c:	1906b03a 	or	r3,r3,r4
 8009350:	1880042e 	bgeu	r3,r2,8009364 <__umoddi3+0x374>
 8009354:	1d47883a 	add	r3,r3,r21
 8009358:	893fffc4 	addi	r4,r17,-1
 800935c:	1d40892e 	bgeu	r3,r21,8009584 <__umoddi3+0x594>
 8009360:	2023883a 	mov	r17,r4
 8009364:	18b9c83a 	sub	fp,r3,r2
 8009368:	b00b883a 	mov	r5,r22
 800936c:	e009883a 	mov	r4,fp
 8009370:	8000b4c0 	call	8000b4c <__umodsi3>
 8009374:	b00b883a 	mov	r5,r22
 8009378:	e009883a 	mov	r4,fp
 800937c:	d8800215 	stw	r2,8(sp)
 8009380:	8000ae80 	call	8000ae8 <__udivsi3>
 8009384:	100b883a 	mov	r5,r2
 8009388:	b809883a 	mov	r4,r23
 800938c:	102d883a 	mov	r22,r2
 8009390:	8000ba40 	call	8000ba4 <__mulsi3>
 8009394:	d9800217 	ldw	r6,8(sp)
 8009398:	d8c00017 	ldw	r3,0(sp)
 800939c:	300c943a 	slli	r6,r6,16
 80093a0:	1a3fffcc 	andi	r8,r3,65535
 80093a4:	4190b03a 	or	r8,r8,r6
 80093a8:	4080042e 	bgeu	r8,r2,80093bc <__umoddi3+0x3cc>
 80093ac:	4551883a 	add	r8,r8,r21
 80093b0:	b0ffffc4 	addi	r3,r22,-1
 80093b4:	45406f2e 	bgeu	r8,r21,8009574 <__umoddi3+0x584>
 80093b8:	182d883a 	mov	r22,r3
 80093bc:	880e943a 	slli	r7,r17,16
 80093c0:	9006d43a 	srli	r3,r18,16
 80093c4:	91bfffcc 	andi	r6,r18,65535
 80093c8:	3dacb03a 	or	r22,r7,r22
 80093cc:	b02ed43a 	srli	r23,r22,16
 80093d0:	b5bfffcc 	andi	r22,r22,65535
 80093d4:	300b883a 	mov	r5,r6
 80093d8:	b009883a 	mov	r4,r22
 80093dc:	40a3c83a 	sub	r17,r8,r2
 80093e0:	d8c00115 	stw	r3,4(sp)
 80093e4:	d9800215 	stw	r6,8(sp)
 80093e8:	8000ba40 	call	8000ba4 <__mulsi3>
 80093ec:	d9800217 	ldw	r6,8(sp)
 80093f0:	b809883a 	mov	r4,r23
 80093f4:	1039883a 	mov	fp,r2
 80093f8:	300b883a 	mov	r5,r6
 80093fc:	8000ba40 	call	8000ba4 <__mulsi3>
 8009400:	d8c00117 	ldw	r3,4(sp)
 8009404:	b809883a 	mov	r4,r23
 8009408:	d8800215 	stw	r2,8(sp)
 800940c:	180b883a 	mov	r5,r3
 8009410:	8000ba40 	call	8000ba4 <__mulsi3>
 8009414:	d8c00117 	ldw	r3,4(sp)
 8009418:	b009883a 	mov	r4,r22
 800941c:	102f883a 	mov	r23,r2
 8009420:	180b883a 	mov	r5,r3
 8009424:	8000ba40 	call	8000ba4 <__mulsi3>
 8009428:	d9800217 	ldw	r6,8(sp)
 800942c:	e006d43a 	srli	r3,fp,16
 8009430:	1185883a 	add	r2,r2,r6
 8009434:	1885883a 	add	r2,r3,r2
 8009438:	1180022e 	bgeu	r2,r6,8009444 <__umoddi3+0x454>
 800943c:	00c00074 	movhi	r3,1
 8009440:	b8ef883a 	add	r23,r23,r3
 8009444:	1006d43a 	srli	r3,r2,16
 8009448:	1004943a 	slli	r2,r2,16
 800944c:	e73fffcc 	andi	fp,fp,65535
 8009450:	1dc7883a 	add	r3,r3,r23
 8009454:	1739883a 	add	fp,r2,fp
 8009458:	88c03a36 	bltu	r17,r3,8009544 <__umoddi3+0x554>
 800945c:	88c05126 	beq	r17,r3,80095a4 <__umoddi3+0x5b4>
 8009460:	88c9c83a 	sub	r4,r17,r3
 8009464:	e00f883a 	mov	r7,fp
 8009468:	81cfc83a 	sub	r7,r16,r7
 800946c:	81c7803a 	cmpltu	r3,r16,r7
 8009470:	20c7c83a 	sub	r3,r4,r3
 8009474:	1cc4983a 	sll	r2,r3,r19
 8009478:	3d0ed83a 	srl	r7,r7,r20
 800947c:	1d06d83a 	srl	r3,r3,r20
 8009480:	11c4b03a 	or	r2,r2,r7
 8009484:	003f7c06 	br	8009278 <__alt_data_end+0xfc009278>
 8009488:	9ca6983a 	sll	r19,r19,r18
 800948c:	88f8d83a 	srl	fp,r17,r3
 8009490:	80c4d83a 	srl	r2,r16,r3
 8009494:	982cd43a 	srli	r22,r19,16
 8009498:	8ca2983a 	sll	r17,r17,r18
 800949c:	e009883a 	mov	r4,fp
 80094a0:	b00b883a 	mov	r5,r22
 80094a4:	146ab03a 	or	r21,r2,r17
 80094a8:	8000b4c0 	call	8000b4c <__umodsi3>
 80094ac:	b00b883a 	mov	r5,r22
 80094b0:	e009883a 	mov	r4,fp
 80094b4:	1029883a 	mov	r20,r2
 80094b8:	9dffffcc 	andi	r23,r19,65535
 80094bc:	8000ae80 	call	8000ae8 <__udivsi3>
 80094c0:	b809883a 	mov	r4,r23
 80094c4:	100b883a 	mov	r5,r2
 80094c8:	8000ba40 	call	8000ba4 <__mulsi3>
 80094cc:	a008943a 	slli	r4,r20,16
 80094d0:	a806d43a 	srli	r3,r21,16
 80094d4:	84a8983a 	sll	r20,r16,r18
 80094d8:	1906b03a 	or	r3,r3,r4
 80094dc:	1880042e 	bgeu	r3,r2,80094f0 <__umoddi3+0x500>
 80094e0:	1cc7883a 	add	r3,r3,r19
 80094e4:	1cc00236 	bltu	r3,r19,80094f0 <__umoddi3+0x500>
 80094e8:	1880012e 	bgeu	r3,r2,80094f0 <__umoddi3+0x500>
 80094ec:	1cc7883a 	add	r3,r3,r19
 80094f0:	18a3c83a 	sub	r17,r3,r2
 80094f4:	b00b883a 	mov	r5,r22
 80094f8:	8809883a 	mov	r4,r17
 80094fc:	8000b4c0 	call	8000b4c <__umodsi3>
 8009500:	b00b883a 	mov	r5,r22
 8009504:	8809883a 	mov	r4,r17
 8009508:	1021883a 	mov	r16,r2
 800950c:	8000ae80 	call	8000ae8 <__udivsi3>
 8009510:	100b883a 	mov	r5,r2
 8009514:	b809883a 	mov	r4,r23
 8009518:	8020943a 	slli	r16,r16,16
 800951c:	8000ba40 	call	8000ba4 <__mulsi3>
 8009520:	a8ffffcc 	andi	r3,r21,65535
 8009524:	1c06b03a 	or	r3,r3,r16
 8009528:	1880042e 	bgeu	r3,r2,800953c <__umoddi3+0x54c>
 800952c:	1cc7883a 	add	r3,r3,r19
 8009530:	1cc00236 	bltu	r3,r19,800953c <__umoddi3+0x54c>
 8009534:	1880012e 	bgeu	r3,r2,800953c <__umoddi3+0x54c>
 8009538:	1cc7883a 	add	r3,r3,r19
 800953c:	18a3c83a 	sub	r17,r3,r2
 8009540:	003f2906 	br	80091e8 <__alt_data_end+0xfc0091e8>
 8009544:	e48fc83a 	sub	r7,fp,r18
 8009548:	1d49c83a 	sub	r4,r3,r21
 800954c:	e1f9803a 	cmpltu	fp,fp,r7
 8009550:	2739c83a 	sub	fp,r4,fp
 8009554:	8f09c83a 	sub	r4,r17,fp
 8009558:	003fc306 	br	8009468 <__alt_data_end+0xfc009468>
 800955c:	01000604 	movi	r4,24
 8009560:	003ef906 	br	8009148 <__alt_data_end+0xfc009148>
 8009564:	00800604 	movi	r2,24
 8009568:	003f1306 	br	80091b8 <__alt_data_end+0xfc0091b8>
 800956c:	01000604 	movi	r4,24
 8009570:	003eb606 	br	800904c <__alt_data_end+0xfc00904c>
 8009574:	40bf902e 	bgeu	r8,r2,80093b8 <__alt_data_end+0xfc0093b8>
 8009578:	b5bfff84 	addi	r22,r22,-2
 800957c:	4551883a 	add	r8,r8,r21
 8009580:	003f8e06 	br	80093bc <__alt_data_end+0xfc0093bc>
 8009584:	18bf762e 	bgeu	r3,r2,8009360 <__alt_data_end+0xfc009360>
 8009588:	8c7fff84 	addi	r17,r17,-2
 800958c:	1d47883a 	add	r3,r3,r21
 8009590:	003f7406 	br	8009364 <__alt_data_end+0xfc009364>
 8009594:	1cc7883a 	add	r3,r3,r19
 8009598:	003ecd06 	br	80090d0 <__alt_data_end+0xfc0090d0>
 800959c:	8005883a 	mov	r2,r16
 80095a0:	003ef806 	br	8009184 <__alt_data_end+0xfc009184>
 80095a4:	873fe736 	bltu	r16,fp,8009544 <__alt_data_end+0xfc009544>
 80095a8:	e00f883a 	mov	r7,fp
 80095ac:	0009883a 	mov	r4,zero
 80095b0:	003fad06 	br	8009468 <__alt_data_end+0xfc009468>

080095b4 <__adddf3>:
 80095b4:	02c00434 	movhi	r11,16
 80095b8:	5affffc4 	addi	r11,r11,-1
 80095bc:	2806d7fa 	srli	r3,r5,31
 80095c0:	2ad4703a 	and	r10,r5,r11
 80095c4:	3ad2703a 	and	r9,r7,r11
 80095c8:	3804d53a 	srli	r2,r7,20
 80095cc:	3018d77a 	srli	r12,r6,29
 80095d0:	280ad53a 	srli	r5,r5,20
 80095d4:	501490fa 	slli	r10,r10,3
 80095d8:	2010d77a 	srli	r8,r4,29
 80095dc:	481290fa 	slli	r9,r9,3
 80095e0:	380ed7fa 	srli	r7,r7,31
 80095e4:	defffb04 	addi	sp,sp,-20
 80095e8:	dc800215 	stw	r18,8(sp)
 80095ec:	dc400115 	stw	r17,4(sp)
 80095f0:	dc000015 	stw	r16,0(sp)
 80095f4:	dfc00415 	stw	ra,16(sp)
 80095f8:	dcc00315 	stw	r19,12(sp)
 80095fc:	1c803fcc 	andi	r18,r3,255
 8009600:	2c01ffcc 	andi	r16,r5,2047
 8009604:	5210b03a 	or	r8,r10,r8
 8009608:	202290fa 	slli	r17,r4,3
 800960c:	1081ffcc 	andi	r2,r2,2047
 8009610:	4b12b03a 	or	r9,r9,r12
 8009614:	300c90fa 	slli	r6,r6,3
 8009618:	91c07526 	beq	r18,r7,80097f0 <__adddf3+0x23c>
 800961c:	8087c83a 	sub	r3,r16,r2
 8009620:	00c0ab0e 	bge	zero,r3,80098d0 <__adddf3+0x31c>
 8009624:	10002a1e 	bne	r2,zero,80096d0 <__adddf3+0x11c>
 8009628:	4984b03a 	or	r2,r9,r6
 800962c:	1000961e 	bne	r2,zero,8009888 <__adddf3+0x2d4>
 8009630:	888001cc 	andi	r2,r17,7
 8009634:	10000726 	beq	r2,zero,8009654 <__adddf3+0xa0>
 8009638:	888003cc 	andi	r2,r17,15
 800963c:	00c00104 	movi	r3,4
 8009640:	10c00426 	beq	r2,r3,8009654 <__adddf3+0xa0>
 8009644:	88c7883a 	add	r3,r17,r3
 8009648:	1c63803a 	cmpltu	r17,r3,r17
 800964c:	4451883a 	add	r8,r8,r17
 8009650:	1823883a 	mov	r17,r3
 8009654:	4080202c 	andhi	r2,r8,128
 8009658:	10005926 	beq	r2,zero,80097c0 <__adddf3+0x20c>
 800965c:	84000044 	addi	r16,r16,1
 8009660:	0081ffc4 	movi	r2,2047
 8009664:	8080ba26 	beq	r16,r2,8009950 <__adddf3+0x39c>
 8009668:	00bfe034 	movhi	r2,65408
 800966c:	10bfffc4 	addi	r2,r2,-1
 8009670:	4090703a 	and	r8,r8,r2
 8009674:	4004977a 	slli	r2,r8,29
 8009678:	4010927a 	slli	r8,r8,9
 800967c:	8822d0fa 	srli	r17,r17,3
 8009680:	8401ffcc 	andi	r16,r16,2047
 8009684:	4010d33a 	srli	r8,r8,12
 8009688:	9007883a 	mov	r3,r18
 800968c:	1444b03a 	or	r2,r2,r17
 8009690:	8401ffcc 	andi	r16,r16,2047
 8009694:	8020953a 	slli	r16,r16,20
 8009698:	18c03fcc 	andi	r3,r3,255
 800969c:	01000434 	movhi	r4,16
 80096a0:	213fffc4 	addi	r4,r4,-1
 80096a4:	180697fa 	slli	r3,r3,31
 80096a8:	4110703a 	and	r8,r8,r4
 80096ac:	4410b03a 	or	r8,r8,r16
 80096b0:	40c6b03a 	or	r3,r8,r3
 80096b4:	dfc00417 	ldw	ra,16(sp)
 80096b8:	dcc00317 	ldw	r19,12(sp)
 80096bc:	dc800217 	ldw	r18,8(sp)
 80096c0:	dc400117 	ldw	r17,4(sp)
 80096c4:	dc000017 	ldw	r16,0(sp)
 80096c8:	dec00504 	addi	sp,sp,20
 80096cc:	f800283a 	ret
 80096d0:	0081ffc4 	movi	r2,2047
 80096d4:	80bfd626 	beq	r16,r2,8009630 <__alt_data_end+0xfc009630>
 80096d8:	4a402034 	orhi	r9,r9,128
 80096dc:	00800e04 	movi	r2,56
 80096e0:	10c09f16 	blt	r2,r3,8009960 <__adddf3+0x3ac>
 80096e4:	008007c4 	movi	r2,31
 80096e8:	10c0c216 	blt	r2,r3,80099f4 <__adddf3+0x440>
 80096ec:	00800804 	movi	r2,32
 80096f0:	10c5c83a 	sub	r2,r2,r3
 80096f4:	488a983a 	sll	r5,r9,r2
 80096f8:	30c8d83a 	srl	r4,r6,r3
 80096fc:	3084983a 	sll	r2,r6,r2
 8009700:	48c6d83a 	srl	r3,r9,r3
 8009704:	290cb03a 	or	r6,r5,r4
 8009708:	1004c03a 	cmpne	r2,r2,zero
 800970c:	308cb03a 	or	r6,r6,r2
 8009710:	898dc83a 	sub	r6,r17,r6
 8009714:	89a3803a 	cmpltu	r17,r17,r6
 8009718:	40d1c83a 	sub	r8,r8,r3
 800971c:	4451c83a 	sub	r8,r8,r17
 8009720:	3023883a 	mov	r17,r6
 8009724:	4080202c 	andhi	r2,r8,128
 8009728:	10002326 	beq	r2,zero,80097b8 <__adddf3+0x204>
 800972c:	04c02034 	movhi	r19,128
 8009730:	9cffffc4 	addi	r19,r19,-1
 8009734:	44e6703a 	and	r19,r8,r19
 8009738:	98007626 	beq	r19,zero,8009914 <__adddf3+0x360>
 800973c:	9809883a 	mov	r4,r19
 8009740:	800bdf40 	call	800bdf4 <__clzsi2>
 8009744:	10fffe04 	addi	r3,r2,-8
 8009748:	010007c4 	movi	r4,31
 800974c:	20c07716 	blt	r4,r3,800992c <__adddf3+0x378>
 8009750:	00800804 	movi	r2,32
 8009754:	10c5c83a 	sub	r2,r2,r3
 8009758:	8884d83a 	srl	r2,r17,r2
 800975c:	98d0983a 	sll	r8,r19,r3
 8009760:	88e2983a 	sll	r17,r17,r3
 8009764:	1204b03a 	or	r2,r2,r8
 8009768:	1c007416 	blt	r3,r16,800993c <__adddf3+0x388>
 800976c:	1c21c83a 	sub	r16,r3,r16
 8009770:	82000044 	addi	r8,r16,1
 8009774:	00c007c4 	movi	r3,31
 8009778:	1a009116 	blt	r3,r8,80099c0 <__adddf3+0x40c>
 800977c:	00c00804 	movi	r3,32
 8009780:	1a07c83a 	sub	r3,r3,r8
 8009784:	8a08d83a 	srl	r4,r17,r8
 8009788:	88e2983a 	sll	r17,r17,r3
 800978c:	10c6983a 	sll	r3,r2,r3
 8009790:	1210d83a 	srl	r8,r2,r8
 8009794:	8804c03a 	cmpne	r2,r17,zero
 8009798:	1906b03a 	or	r3,r3,r4
 800979c:	18a2b03a 	or	r17,r3,r2
 80097a0:	0021883a 	mov	r16,zero
 80097a4:	003fa206 	br	8009630 <__alt_data_end+0xfc009630>
 80097a8:	1890b03a 	or	r8,r3,r2
 80097ac:	40017d26 	beq	r8,zero,8009da4 <__adddf3+0x7f0>
 80097b0:	1011883a 	mov	r8,r2
 80097b4:	1823883a 	mov	r17,r3
 80097b8:	888001cc 	andi	r2,r17,7
 80097bc:	103f9e1e 	bne	r2,zero,8009638 <__alt_data_end+0xfc009638>
 80097c0:	4004977a 	slli	r2,r8,29
 80097c4:	8822d0fa 	srli	r17,r17,3
 80097c8:	4010d0fa 	srli	r8,r8,3
 80097cc:	9007883a 	mov	r3,r18
 80097d0:	1444b03a 	or	r2,r2,r17
 80097d4:	0101ffc4 	movi	r4,2047
 80097d8:	81002426 	beq	r16,r4,800986c <__adddf3+0x2b8>
 80097dc:	8120703a 	and	r16,r16,r4
 80097e0:	01000434 	movhi	r4,16
 80097e4:	213fffc4 	addi	r4,r4,-1
 80097e8:	4110703a 	and	r8,r8,r4
 80097ec:	003fa806 	br	8009690 <__alt_data_end+0xfc009690>
 80097f0:	8089c83a 	sub	r4,r16,r2
 80097f4:	01005e0e 	bge	zero,r4,8009970 <__adddf3+0x3bc>
 80097f8:	10002b26 	beq	r2,zero,80098a8 <__adddf3+0x2f4>
 80097fc:	0081ffc4 	movi	r2,2047
 8009800:	80bf8b26 	beq	r16,r2,8009630 <__alt_data_end+0xfc009630>
 8009804:	4a402034 	orhi	r9,r9,128
 8009808:	00800e04 	movi	r2,56
 800980c:	1100a40e 	bge	r2,r4,8009aa0 <__adddf3+0x4ec>
 8009810:	498cb03a 	or	r6,r9,r6
 8009814:	300ac03a 	cmpne	r5,r6,zero
 8009818:	0013883a 	mov	r9,zero
 800981c:	2c4b883a 	add	r5,r5,r17
 8009820:	2c63803a 	cmpltu	r17,r5,r17
 8009824:	4a11883a 	add	r8,r9,r8
 8009828:	8a11883a 	add	r8,r17,r8
 800982c:	2823883a 	mov	r17,r5
 8009830:	4080202c 	andhi	r2,r8,128
 8009834:	103fe026 	beq	r2,zero,80097b8 <__alt_data_end+0xfc0097b8>
 8009838:	84000044 	addi	r16,r16,1
 800983c:	0081ffc4 	movi	r2,2047
 8009840:	8080d226 	beq	r16,r2,8009b8c <__adddf3+0x5d8>
 8009844:	00bfe034 	movhi	r2,65408
 8009848:	10bfffc4 	addi	r2,r2,-1
 800984c:	4090703a 	and	r8,r8,r2
 8009850:	880ad07a 	srli	r5,r17,1
 8009854:	400897fa 	slli	r4,r8,31
 8009858:	88c0004c 	andi	r3,r17,1
 800985c:	28e2b03a 	or	r17,r5,r3
 8009860:	4010d07a 	srli	r8,r8,1
 8009864:	2462b03a 	or	r17,r4,r17
 8009868:	003f7106 	br	8009630 <__alt_data_end+0xfc009630>
 800986c:	4088b03a 	or	r4,r8,r2
 8009870:	20014526 	beq	r4,zero,8009d88 <__adddf3+0x7d4>
 8009874:	01000434 	movhi	r4,16
 8009878:	42000234 	orhi	r8,r8,8
 800987c:	213fffc4 	addi	r4,r4,-1
 8009880:	4110703a 	and	r8,r8,r4
 8009884:	003f8206 	br	8009690 <__alt_data_end+0xfc009690>
 8009888:	18ffffc4 	addi	r3,r3,-1
 800988c:	1800491e 	bne	r3,zero,80099b4 <__adddf3+0x400>
 8009890:	898bc83a 	sub	r5,r17,r6
 8009894:	8963803a 	cmpltu	r17,r17,r5
 8009898:	4251c83a 	sub	r8,r8,r9
 800989c:	4451c83a 	sub	r8,r8,r17
 80098a0:	2823883a 	mov	r17,r5
 80098a4:	003f9f06 	br	8009724 <__alt_data_end+0xfc009724>
 80098a8:	4984b03a 	or	r2,r9,r6
 80098ac:	103f6026 	beq	r2,zero,8009630 <__alt_data_end+0xfc009630>
 80098b0:	213fffc4 	addi	r4,r4,-1
 80098b4:	2000931e 	bne	r4,zero,8009b04 <__adddf3+0x550>
 80098b8:	898d883a 	add	r6,r17,r6
 80098bc:	3463803a 	cmpltu	r17,r6,r17
 80098c0:	4251883a 	add	r8,r8,r9
 80098c4:	8a11883a 	add	r8,r17,r8
 80098c8:	3023883a 	mov	r17,r6
 80098cc:	003fd806 	br	8009830 <__alt_data_end+0xfc009830>
 80098d0:	1800541e 	bne	r3,zero,8009a24 <__adddf3+0x470>
 80098d4:	80800044 	addi	r2,r16,1
 80098d8:	1081ffcc 	andi	r2,r2,2047
 80098dc:	00c00044 	movi	r3,1
 80098e0:	1880a00e 	bge	r3,r2,8009b64 <__adddf3+0x5b0>
 80098e4:	8989c83a 	sub	r4,r17,r6
 80098e8:	8905803a 	cmpltu	r2,r17,r4
 80098ec:	4267c83a 	sub	r19,r8,r9
 80098f0:	98a7c83a 	sub	r19,r19,r2
 80098f4:	9880202c 	andhi	r2,r19,128
 80098f8:	10006326 	beq	r2,zero,8009a88 <__adddf3+0x4d4>
 80098fc:	3463c83a 	sub	r17,r6,r17
 8009900:	4a07c83a 	sub	r3,r9,r8
 8009904:	344d803a 	cmpltu	r6,r6,r17
 8009908:	19a7c83a 	sub	r19,r3,r6
 800990c:	3825883a 	mov	r18,r7
 8009910:	983f8a1e 	bne	r19,zero,800973c <__alt_data_end+0xfc00973c>
 8009914:	8809883a 	mov	r4,r17
 8009918:	800bdf40 	call	800bdf4 <__clzsi2>
 800991c:	10800804 	addi	r2,r2,32
 8009920:	10fffe04 	addi	r3,r2,-8
 8009924:	010007c4 	movi	r4,31
 8009928:	20ff890e 	bge	r4,r3,8009750 <__alt_data_end+0xfc009750>
 800992c:	10bff604 	addi	r2,r2,-40
 8009930:	8884983a 	sll	r2,r17,r2
 8009934:	0023883a 	mov	r17,zero
 8009938:	1c3f8c0e 	bge	r3,r16,800976c <__alt_data_end+0xfc00976c>
 800993c:	023fe034 	movhi	r8,65408
 8009940:	423fffc4 	addi	r8,r8,-1
 8009944:	80e1c83a 	sub	r16,r16,r3
 8009948:	1210703a 	and	r8,r2,r8
 800994c:	003f3806 	br	8009630 <__alt_data_end+0xfc009630>
 8009950:	9007883a 	mov	r3,r18
 8009954:	0011883a 	mov	r8,zero
 8009958:	0005883a 	mov	r2,zero
 800995c:	003f4c06 	br	8009690 <__alt_data_end+0xfc009690>
 8009960:	498cb03a 	or	r6,r9,r6
 8009964:	300cc03a 	cmpne	r6,r6,zero
 8009968:	0007883a 	mov	r3,zero
 800996c:	003f6806 	br	8009710 <__alt_data_end+0xfc009710>
 8009970:	20009c1e 	bne	r4,zero,8009be4 <__adddf3+0x630>
 8009974:	80800044 	addi	r2,r16,1
 8009978:	1141ffcc 	andi	r5,r2,2047
 800997c:	01000044 	movi	r4,1
 8009980:	2140670e 	bge	r4,r5,8009b20 <__adddf3+0x56c>
 8009984:	0101ffc4 	movi	r4,2047
 8009988:	11007f26 	beq	r2,r4,8009b88 <__adddf3+0x5d4>
 800998c:	898d883a 	add	r6,r17,r6
 8009990:	4247883a 	add	r3,r8,r9
 8009994:	3451803a 	cmpltu	r8,r6,r17
 8009998:	40d1883a 	add	r8,r8,r3
 800999c:	402297fa 	slli	r17,r8,31
 80099a0:	300cd07a 	srli	r6,r6,1
 80099a4:	4010d07a 	srli	r8,r8,1
 80099a8:	1021883a 	mov	r16,r2
 80099ac:	89a2b03a 	or	r17,r17,r6
 80099b0:	003f1f06 	br	8009630 <__alt_data_end+0xfc009630>
 80099b4:	0081ffc4 	movi	r2,2047
 80099b8:	80bf481e 	bne	r16,r2,80096dc <__alt_data_end+0xfc0096dc>
 80099bc:	003f1c06 	br	8009630 <__alt_data_end+0xfc009630>
 80099c0:	843ff844 	addi	r16,r16,-31
 80099c4:	01000804 	movi	r4,32
 80099c8:	1406d83a 	srl	r3,r2,r16
 80099cc:	41005026 	beq	r8,r4,8009b10 <__adddf3+0x55c>
 80099d0:	01001004 	movi	r4,64
 80099d4:	2211c83a 	sub	r8,r4,r8
 80099d8:	1204983a 	sll	r2,r2,r8
 80099dc:	88a2b03a 	or	r17,r17,r2
 80099e0:	8822c03a 	cmpne	r17,r17,zero
 80099e4:	1c62b03a 	or	r17,r3,r17
 80099e8:	0011883a 	mov	r8,zero
 80099ec:	0021883a 	mov	r16,zero
 80099f0:	003f7106 	br	80097b8 <__alt_data_end+0xfc0097b8>
 80099f4:	193ff804 	addi	r4,r3,-32
 80099f8:	00800804 	movi	r2,32
 80099fc:	4908d83a 	srl	r4,r9,r4
 8009a00:	18804526 	beq	r3,r2,8009b18 <__adddf3+0x564>
 8009a04:	00801004 	movi	r2,64
 8009a08:	10c5c83a 	sub	r2,r2,r3
 8009a0c:	4886983a 	sll	r3,r9,r2
 8009a10:	198cb03a 	or	r6,r3,r6
 8009a14:	300cc03a 	cmpne	r6,r6,zero
 8009a18:	218cb03a 	or	r6,r4,r6
 8009a1c:	0007883a 	mov	r3,zero
 8009a20:	003f3b06 	br	8009710 <__alt_data_end+0xfc009710>
 8009a24:	80002a26 	beq	r16,zero,8009ad0 <__adddf3+0x51c>
 8009a28:	0101ffc4 	movi	r4,2047
 8009a2c:	11006826 	beq	r2,r4,8009bd0 <__adddf3+0x61c>
 8009a30:	00c7c83a 	sub	r3,zero,r3
 8009a34:	42002034 	orhi	r8,r8,128
 8009a38:	01000e04 	movi	r4,56
 8009a3c:	20c07c16 	blt	r4,r3,8009c30 <__adddf3+0x67c>
 8009a40:	010007c4 	movi	r4,31
 8009a44:	20c0da16 	blt	r4,r3,8009db0 <__adddf3+0x7fc>
 8009a48:	01000804 	movi	r4,32
 8009a4c:	20c9c83a 	sub	r4,r4,r3
 8009a50:	4114983a 	sll	r10,r8,r4
 8009a54:	88cad83a 	srl	r5,r17,r3
 8009a58:	8908983a 	sll	r4,r17,r4
 8009a5c:	40c6d83a 	srl	r3,r8,r3
 8009a60:	5162b03a 	or	r17,r10,r5
 8009a64:	2008c03a 	cmpne	r4,r4,zero
 8009a68:	8922b03a 	or	r17,r17,r4
 8009a6c:	3463c83a 	sub	r17,r6,r17
 8009a70:	48c7c83a 	sub	r3,r9,r3
 8009a74:	344d803a 	cmpltu	r6,r6,r17
 8009a78:	1991c83a 	sub	r8,r3,r6
 8009a7c:	1021883a 	mov	r16,r2
 8009a80:	3825883a 	mov	r18,r7
 8009a84:	003f2706 	br	8009724 <__alt_data_end+0xfc009724>
 8009a88:	24d0b03a 	or	r8,r4,r19
 8009a8c:	40001b1e 	bne	r8,zero,8009afc <__adddf3+0x548>
 8009a90:	0005883a 	mov	r2,zero
 8009a94:	0007883a 	mov	r3,zero
 8009a98:	0021883a 	mov	r16,zero
 8009a9c:	003f4d06 	br	80097d4 <__alt_data_end+0xfc0097d4>
 8009aa0:	008007c4 	movi	r2,31
 8009aa4:	11003c16 	blt	r2,r4,8009b98 <__adddf3+0x5e4>
 8009aa8:	00800804 	movi	r2,32
 8009aac:	1105c83a 	sub	r2,r2,r4
 8009ab0:	488e983a 	sll	r7,r9,r2
 8009ab4:	310ad83a 	srl	r5,r6,r4
 8009ab8:	3084983a 	sll	r2,r6,r2
 8009abc:	4912d83a 	srl	r9,r9,r4
 8009ac0:	394ab03a 	or	r5,r7,r5
 8009ac4:	1004c03a 	cmpne	r2,r2,zero
 8009ac8:	288ab03a 	or	r5,r5,r2
 8009acc:	003f5306 	br	800981c <__alt_data_end+0xfc00981c>
 8009ad0:	4448b03a 	or	r4,r8,r17
 8009ad4:	20003e26 	beq	r4,zero,8009bd0 <__adddf3+0x61c>
 8009ad8:	00c6303a 	nor	r3,zero,r3
 8009adc:	18003a1e 	bne	r3,zero,8009bc8 <__adddf3+0x614>
 8009ae0:	3463c83a 	sub	r17,r6,r17
 8009ae4:	4a07c83a 	sub	r3,r9,r8
 8009ae8:	344d803a 	cmpltu	r6,r6,r17
 8009aec:	1991c83a 	sub	r8,r3,r6
 8009af0:	1021883a 	mov	r16,r2
 8009af4:	3825883a 	mov	r18,r7
 8009af8:	003f0a06 	br	8009724 <__alt_data_end+0xfc009724>
 8009afc:	2023883a 	mov	r17,r4
 8009b00:	003f0d06 	br	8009738 <__alt_data_end+0xfc009738>
 8009b04:	0081ffc4 	movi	r2,2047
 8009b08:	80bf3f1e 	bne	r16,r2,8009808 <__alt_data_end+0xfc009808>
 8009b0c:	003ec806 	br	8009630 <__alt_data_end+0xfc009630>
 8009b10:	0005883a 	mov	r2,zero
 8009b14:	003fb106 	br	80099dc <__alt_data_end+0xfc0099dc>
 8009b18:	0007883a 	mov	r3,zero
 8009b1c:	003fbc06 	br	8009a10 <__alt_data_end+0xfc009a10>
 8009b20:	4444b03a 	or	r2,r8,r17
 8009b24:	8000871e 	bne	r16,zero,8009d44 <__adddf3+0x790>
 8009b28:	1000ba26 	beq	r2,zero,8009e14 <__adddf3+0x860>
 8009b2c:	4984b03a 	or	r2,r9,r6
 8009b30:	103ebf26 	beq	r2,zero,8009630 <__alt_data_end+0xfc009630>
 8009b34:	8985883a 	add	r2,r17,r6
 8009b38:	4247883a 	add	r3,r8,r9
 8009b3c:	1451803a 	cmpltu	r8,r2,r17
 8009b40:	40d1883a 	add	r8,r8,r3
 8009b44:	40c0202c 	andhi	r3,r8,128
 8009b48:	1023883a 	mov	r17,r2
 8009b4c:	183f1a26 	beq	r3,zero,80097b8 <__alt_data_end+0xfc0097b8>
 8009b50:	00bfe034 	movhi	r2,65408
 8009b54:	10bfffc4 	addi	r2,r2,-1
 8009b58:	2021883a 	mov	r16,r4
 8009b5c:	4090703a 	and	r8,r8,r2
 8009b60:	003eb306 	br	8009630 <__alt_data_end+0xfc009630>
 8009b64:	4444b03a 	or	r2,r8,r17
 8009b68:	8000291e 	bne	r16,zero,8009c10 <__adddf3+0x65c>
 8009b6c:	10004b1e 	bne	r2,zero,8009c9c <__adddf3+0x6e8>
 8009b70:	4990b03a 	or	r8,r9,r6
 8009b74:	40008b26 	beq	r8,zero,8009da4 <__adddf3+0x7f0>
 8009b78:	4811883a 	mov	r8,r9
 8009b7c:	3023883a 	mov	r17,r6
 8009b80:	3825883a 	mov	r18,r7
 8009b84:	003eaa06 	br	8009630 <__alt_data_end+0xfc009630>
 8009b88:	1021883a 	mov	r16,r2
 8009b8c:	0011883a 	mov	r8,zero
 8009b90:	0005883a 	mov	r2,zero
 8009b94:	003f0f06 	br	80097d4 <__alt_data_end+0xfc0097d4>
 8009b98:	217ff804 	addi	r5,r4,-32
 8009b9c:	00800804 	movi	r2,32
 8009ba0:	494ad83a 	srl	r5,r9,r5
 8009ba4:	20807d26 	beq	r4,r2,8009d9c <__adddf3+0x7e8>
 8009ba8:	00801004 	movi	r2,64
 8009bac:	1109c83a 	sub	r4,r2,r4
 8009bb0:	4912983a 	sll	r9,r9,r4
 8009bb4:	498cb03a 	or	r6,r9,r6
 8009bb8:	300cc03a 	cmpne	r6,r6,zero
 8009bbc:	298ab03a 	or	r5,r5,r6
 8009bc0:	0013883a 	mov	r9,zero
 8009bc4:	003f1506 	br	800981c <__alt_data_end+0xfc00981c>
 8009bc8:	0101ffc4 	movi	r4,2047
 8009bcc:	113f9a1e 	bne	r2,r4,8009a38 <__alt_data_end+0xfc009a38>
 8009bd0:	4811883a 	mov	r8,r9
 8009bd4:	3023883a 	mov	r17,r6
 8009bd8:	1021883a 	mov	r16,r2
 8009bdc:	3825883a 	mov	r18,r7
 8009be0:	003e9306 	br	8009630 <__alt_data_end+0xfc009630>
 8009be4:	8000161e 	bne	r16,zero,8009c40 <__adddf3+0x68c>
 8009be8:	444ab03a 	or	r5,r8,r17
 8009bec:	28005126 	beq	r5,zero,8009d34 <__adddf3+0x780>
 8009bf0:	0108303a 	nor	r4,zero,r4
 8009bf4:	20004d1e 	bne	r4,zero,8009d2c <__adddf3+0x778>
 8009bf8:	89a3883a 	add	r17,r17,r6
 8009bfc:	4253883a 	add	r9,r8,r9
 8009c00:	898d803a 	cmpltu	r6,r17,r6
 8009c04:	3251883a 	add	r8,r6,r9
 8009c08:	1021883a 	mov	r16,r2
 8009c0c:	003f0806 	br	8009830 <__alt_data_end+0xfc009830>
 8009c10:	1000301e 	bne	r2,zero,8009cd4 <__adddf3+0x720>
 8009c14:	4984b03a 	or	r2,r9,r6
 8009c18:	10007126 	beq	r2,zero,8009de0 <__adddf3+0x82c>
 8009c1c:	4811883a 	mov	r8,r9
 8009c20:	3023883a 	mov	r17,r6
 8009c24:	3825883a 	mov	r18,r7
 8009c28:	0401ffc4 	movi	r16,2047
 8009c2c:	003e8006 	br	8009630 <__alt_data_end+0xfc009630>
 8009c30:	4462b03a 	or	r17,r8,r17
 8009c34:	8822c03a 	cmpne	r17,r17,zero
 8009c38:	0007883a 	mov	r3,zero
 8009c3c:	003f8b06 	br	8009a6c <__alt_data_end+0xfc009a6c>
 8009c40:	0141ffc4 	movi	r5,2047
 8009c44:	11403b26 	beq	r2,r5,8009d34 <__adddf3+0x780>
 8009c48:	0109c83a 	sub	r4,zero,r4
 8009c4c:	42002034 	orhi	r8,r8,128
 8009c50:	01400e04 	movi	r5,56
 8009c54:	29006716 	blt	r5,r4,8009df4 <__adddf3+0x840>
 8009c58:	014007c4 	movi	r5,31
 8009c5c:	29007016 	blt	r5,r4,8009e20 <__adddf3+0x86c>
 8009c60:	01400804 	movi	r5,32
 8009c64:	290bc83a 	sub	r5,r5,r4
 8009c68:	4154983a 	sll	r10,r8,r5
 8009c6c:	890ed83a 	srl	r7,r17,r4
 8009c70:	894a983a 	sll	r5,r17,r5
 8009c74:	4108d83a 	srl	r4,r8,r4
 8009c78:	51e2b03a 	or	r17,r10,r7
 8009c7c:	280ac03a 	cmpne	r5,r5,zero
 8009c80:	8962b03a 	or	r17,r17,r5
 8009c84:	89a3883a 	add	r17,r17,r6
 8009c88:	2253883a 	add	r9,r4,r9
 8009c8c:	898d803a 	cmpltu	r6,r17,r6
 8009c90:	3251883a 	add	r8,r6,r9
 8009c94:	1021883a 	mov	r16,r2
 8009c98:	003ee506 	br	8009830 <__alt_data_end+0xfc009830>
 8009c9c:	4984b03a 	or	r2,r9,r6
 8009ca0:	103e6326 	beq	r2,zero,8009630 <__alt_data_end+0xfc009630>
 8009ca4:	8987c83a 	sub	r3,r17,r6
 8009ca8:	88c9803a 	cmpltu	r4,r17,r3
 8009cac:	4245c83a 	sub	r2,r8,r9
 8009cb0:	1105c83a 	sub	r2,r2,r4
 8009cb4:	1100202c 	andhi	r4,r2,128
 8009cb8:	203ebb26 	beq	r4,zero,80097a8 <__alt_data_end+0xfc0097a8>
 8009cbc:	3463c83a 	sub	r17,r6,r17
 8009cc0:	4a07c83a 	sub	r3,r9,r8
 8009cc4:	344d803a 	cmpltu	r6,r6,r17
 8009cc8:	1991c83a 	sub	r8,r3,r6
 8009ccc:	3825883a 	mov	r18,r7
 8009cd0:	003e5706 	br	8009630 <__alt_data_end+0xfc009630>
 8009cd4:	4984b03a 	or	r2,r9,r6
 8009cd8:	10002e26 	beq	r2,zero,8009d94 <__adddf3+0x7e0>
 8009cdc:	4004d0fa 	srli	r2,r8,3
 8009ce0:	8822d0fa 	srli	r17,r17,3
 8009ce4:	4010977a 	slli	r8,r8,29
 8009ce8:	10c0022c 	andhi	r3,r2,8
 8009cec:	4462b03a 	or	r17,r8,r17
 8009cf0:	18000826 	beq	r3,zero,8009d14 <__adddf3+0x760>
 8009cf4:	4808d0fa 	srli	r4,r9,3
 8009cf8:	20c0022c 	andhi	r3,r4,8
 8009cfc:	1800051e 	bne	r3,zero,8009d14 <__adddf3+0x760>
 8009d00:	300cd0fa 	srli	r6,r6,3
 8009d04:	4806977a 	slli	r3,r9,29
 8009d08:	2005883a 	mov	r2,r4
 8009d0c:	3825883a 	mov	r18,r7
 8009d10:	19a2b03a 	or	r17,r3,r6
 8009d14:	8810d77a 	srli	r8,r17,29
 8009d18:	100490fa 	slli	r2,r2,3
 8009d1c:	882290fa 	slli	r17,r17,3
 8009d20:	0401ffc4 	movi	r16,2047
 8009d24:	4090b03a 	or	r8,r8,r2
 8009d28:	003e4106 	br	8009630 <__alt_data_end+0xfc009630>
 8009d2c:	0141ffc4 	movi	r5,2047
 8009d30:	117fc71e 	bne	r2,r5,8009c50 <__alt_data_end+0xfc009c50>
 8009d34:	4811883a 	mov	r8,r9
 8009d38:	3023883a 	mov	r17,r6
 8009d3c:	1021883a 	mov	r16,r2
 8009d40:	003e3b06 	br	8009630 <__alt_data_end+0xfc009630>
 8009d44:	10002f26 	beq	r2,zero,8009e04 <__adddf3+0x850>
 8009d48:	4984b03a 	or	r2,r9,r6
 8009d4c:	10001126 	beq	r2,zero,8009d94 <__adddf3+0x7e0>
 8009d50:	4004d0fa 	srli	r2,r8,3
 8009d54:	8822d0fa 	srli	r17,r17,3
 8009d58:	4010977a 	slli	r8,r8,29
 8009d5c:	10c0022c 	andhi	r3,r2,8
 8009d60:	4462b03a 	or	r17,r8,r17
 8009d64:	183feb26 	beq	r3,zero,8009d14 <__alt_data_end+0xfc009d14>
 8009d68:	4808d0fa 	srli	r4,r9,3
 8009d6c:	20c0022c 	andhi	r3,r4,8
 8009d70:	183fe81e 	bne	r3,zero,8009d14 <__alt_data_end+0xfc009d14>
 8009d74:	300cd0fa 	srli	r6,r6,3
 8009d78:	4806977a 	slli	r3,r9,29
 8009d7c:	2005883a 	mov	r2,r4
 8009d80:	19a2b03a 	or	r17,r3,r6
 8009d84:	003fe306 	br	8009d14 <__alt_data_end+0xfc009d14>
 8009d88:	0011883a 	mov	r8,zero
 8009d8c:	0005883a 	mov	r2,zero
 8009d90:	003e3f06 	br	8009690 <__alt_data_end+0xfc009690>
 8009d94:	0401ffc4 	movi	r16,2047
 8009d98:	003e2506 	br	8009630 <__alt_data_end+0xfc009630>
 8009d9c:	0013883a 	mov	r9,zero
 8009da0:	003f8406 	br	8009bb4 <__alt_data_end+0xfc009bb4>
 8009da4:	0005883a 	mov	r2,zero
 8009da8:	0007883a 	mov	r3,zero
 8009dac:	003e8906 	br	80097d4 <__alt_data_end+0xfc0097d4>
 8009db0:	197ff804 	addi	r5,r3,-32
 8009db4:	01000804 	movi	r4,32
 8009db8:	414ad83a 	srl	r5,r8,r5
 8009dbc:	19002426 	beq	r3,r4,8009e50 <__adddf3+0x89c>
 8009dc0:	01001004 	movi	r4,64
 8009dc4:	20c7c83a 	sub	r3,r4,r3
 8009dc8:	40c6983a 	sll	r3,r8,r3
 8009dcc:	1c46b03a 	or	r3,r3,r17
 8009dd0:	1806c03a 	cmpne	r3,r3,zero
 8009dd4:	28e2b03a 	or	r17,r5,r3
 8009dd8:	0007883a 	mov	r3,zero
 8009ddc:	003f2306 	br	8009a6c <__alt_data_end+0xfc009a6c>
 8009de0:	0007883a 	mov	r3,zero
 8009de4:	5811883a 	mov	r8,r11
 8009de8:	00bfffc4 	movi	r2,-1
 8009dec:	0401ffc4 	movi	r16,2047
 8009df0:	003e7806 	br	80097d4 <__alt_data_end+0xfc0097d4>
 8009df4:	4462b03a 	or	r17,r8,r17
 8009df8:	8822c03a 	cmpne	r17,r17,zero
 8009dfc:	0009883a 	mov	r4,zero
 8009e00:	003fa006 	br	8009c84 <__alt_data_end+0xfc009c84>
 8009e04:	4811883a 	mov	r8,r9
 8009e08:	3023883a 	mov	r17,r6
 8009e0c:	0401ffc4 	movi	r16,2047
 8009e10:	003e0706 	br	8009630 <__alt_data_end+0xfc009630>
 8009e14:	4811883a 	mov	r8,r9
 8009e18:	3023883a 	mov	r17,r6
 8009e1c:	003e0406 	br	8009630 <__alt_data_end+0xfc009630>
 8009e20:	21fff804 	addi	r7,r4,-32
 8009e24:	01400804 	movi	r5,32
 8009e28:	41ced83a 	srl	r7,r8,r7
 8009e2c:	21400a26 	beq	r4,r5,8009e58 <__adddf3+0x8a4>
 8009e30:	01401004 	movi	r5,64
 8009e34:	2909c83a 	sub	r4,r5,r4
 8009e38:	4108983a 	sll	r4,r8,r4
 8009e3c:	2448b03a 	or	r4,r4,r17
 8009e40:	2008c03a 	cmpne	r4,r4,zero
 8009e44:	3922b03a 	or	r17,r7,r4
 8009e48:	0009883a 	mov	r4,zero
 8009e4c:	003f8d06 	br	8009c84 <__alt_data_end+0xfc009c84>
 8009e50:	0007883a 	mov	r3,zero
 8009e54:	003fdd06 	br	8009dcc <__alt_data_end+0xfc009dcc>
 8009e58:	0009883a 	mov	r4,zero
 8009e5c:	003ff706 	br	8009e3c <__alt_data_end+0xfc009e3c>

08009e60 <__divdf3>:
 8009e60:	defff004 	addi	sp,sp,-64
 8009e64:	dc800815 	stw	r18,32(sp)
 8009e68:	2824d53a 	srli	r18,r5,20
 8009e6c:	dd800c15 	stw	r22,48(sp)
 8009e70:	282cd7fa 	srli	r22,r5,31
 8009e74:	dc000615 	stw	r16,24(sp)
 8009e78:	04000434 	movhi	r16,16
 8009e7c:	843fffc4 	addi	r16,r16,-1
 8009e80:	dfc00f15 	stw	ra,60(sp)
 8009e84:	df000e15 	stw	fp,56(sp)
 8009e88:	ddc00d15 	stw	r23,52(sp)
 8009e8c:	dd400b15 	stw	r21,44(sp)
 8009e90:	dd000a15 	stw	r20,40(sp)
 8009e94:	dcc00915 	stw	r19,36(sp)
 8009e98:	dc400715 	stw	r17,28(sp)
 8009e9c:	9481ffcc 	andi	r18,r18,2047
 8009ea0:	2c20703a 	and	r16,r5,r16
 8009ea4:	b2003fcc 	andi	r8,r22,255
 8009ea8:	90006126 	beq	r18,zero,800a030 <__divdf3+0x1d0>
 8009eac:	0081ffc4 	movi	r2,2047
 8009eb0:	202b883a 	mov	r21,r4
 8009eb4:	90803726 	beq	r18,r2,8009f94 <__divdf3+0x134>
 8009eb8:	80800434 	orhi	r2,r16,16
 8009ebc:	100490fa 	slli	r2,r2,3
 8009ec0:	2020d77a 	srli	r16,r4,29
 8009ec4:	202a90fa 	slli	r21,r4,3
 8009ec8:	94bf0044 	addi	r18,r18,-1023
 8009ecc:	80a0b03a 	or	r16,r16,r2
 8009ed0:	0013883a 	mov	r9,zero
 8009ed4:	000b883a 	mov	r5,zero
 8009ed8:	3806d53a 	srli	r3,r7,20
 8009edc:	382ed7fa 	srli	r23,r7,31
 8009ee0:	04400434 	movhi	r17,16
 8009ee4:	8c7fffc4 	addi	r17,r17,-1
 8009ee8:	18c1ffcc 	andi	r3,r3,2047
 8009eec:	3029883a 	mov	r20,r6
 8009ef0:	3c62703a 	and	r17,r7,r17
 8009ef4:	bf003fcc 	andi	fp,r23,255
 8009ef8:	18006e26 	beq	r3,zero,800a0b4 <__divdf3+0x254>
 8009efc:	0081ffc4 	movi	r2,2047
 8009f00:	18806626 	beq	r3,r2,800a09c <__divdf3+0x23c>
 8009f04:	88800434 	orhi	r2,r17,16
 8009f08:	100490fa 	slli	r2,r2,3
 8009f0c:	3022d77a 	srli	r17,r6,29
 8009f10:	302890fa 	slli	r20,r6,3
 8009f14:	18ff0044 	addi	r3,r3,-1023
 8009f18:	88a2b03a 	or	r17,r17,r2
 8009f1c:	000f883a 	mov	r7,zero
 8009f20:	b5e6f03a 	xor	r19,r22,r23
 8009f24:	3a4cb03a 	or	r6,r7,r9
 8009f28:	008003c4 	movi	r2,15
 8009f2c:	9809883a 	mov	r4,r19
 8009f30:	90c7c83a 	sub	r3,r18,r3
 8009f34:	9cc03fcc 	andi	r19,r19,255
 8009f38:	11809636 	bltu	r2,r6,800a194 <__divdf3+0x334>
 8009f3c:	300c90ba 	slli	r6,r6,2
 8009f40:	00820074 	movhi	r2,2049
 8009f44:	10a7d504 	addi	r2,r2,-24748
 8009f48:	308d883a 	add	r6,r6,r2
 8009f4c:	30800017 	ldw	r2,0(r6)
 8009f50:	1000683a 	jmp	r2
 8009f54:	0800a194 	ori	zero,at,646
 8009f58:	08009fcc 	andi	zero,at,639
 8009f5c:	0800a184 	addi	zero,at,646
 8009f60:	08009fc0 	call	8009fc <__alt_mem_onchip_memory2_0+0x8009fc>
 8009f64:	0800a184 	addi	zero,at,646
 8009f68:	0800a158 	cmpnei	zero,at,645
 8009f6c:	0800a184 	addi	zero,at,646
 8009f70:	08009fc0 	call	8009fc <__alt_mem_onchip_memory2_0+0x8009fc>
 8009f74:	08009fcc 	andi	zero,at,639
 8009f78:	08009fcc 	andi	zero,at,639
 8009f7c:	0800a158 	cmpnei	zero,at,645
 8009f80:	08009fc0 	call	8009fc <__alt_mem_onchip_memory2_0+0x8009fc>
 8009f84:	08009fb0 	cmpltui	zero,at,638
 8009f88:	08009fb0 	cmpltui	zero,at,638
 8009f8c:	08009fb0 	cmpltui	zero,at,638
 8009f90:	0800a51c 	xori	zero,at,660
 8009f94:	2404b03a 	or	r2,r4,r16
 8009f98:	10006c1e 	bne	r2,zero,800a14c <__divdf3+0x2ec>
 8009f9c:	02400204 	movi	r9,8
 8009fa0:	0021883a 	mov	r16,zero
 8009fa4:	002b883a 	mov	r21,zero
 8009fa8:	01400084 	movi	r5,2
 8009fac:	003fca06 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 8009fb0:	8023883a 	mov	r17,r16
 8009fb4:	a829883a 	mov	r20,r21
 8009fb8:	4039883a 	mov	fp,r8
 8009fbc:	280f883a 	mov	r7,r5
 8009fc0:	00800084 	movi	r2,2
 8009fc4:	3881601e 	bne	r7,r2,800a548 <__divdf3+0x6e8>
 8009fc8:	e027883a 	mov	r19,fp
 8009fcc:	9900004c 	andi	r4,r19,1
 8009fd0:	0081ffc4 	movi	r2,2047
 8009fd4:	0021883a 	mov	r16,zero
 8009fd8:	002b883a 	mov	r21,zero
 8009fdc:	1004953a 	slli	r2,r2,20
 8009fe0:	20c03fcc 	andi	r3,r4,255
 8009fe4:	01400434 	movhi	r5,16
 8009fe8:	297fffc4 	addi	r5,r5,-1
 8009fec:	180697fa 	slli	r3,r3,31
 8009ff0:	8160703a 	and	r16,r16,r5
 8009ff4:	80a0b03a 	or	r16,r16,r2
 8009ff8:	80c6b03a 	or	r3,r16,r3
 8009ffc:	a805883a 	mov	r2,r21
 800a000:	dfc00f17 	ldw	ra,60(sp)
 800a004:	df000e17 	ldw	fp,56(sp)
 800a008:	ddc00d17 	ldw	r23,52(sp)
 800a00c:	dd800c17 	ldw	r22,48(sp)
 800a010:	dd400b17 	ldw	r21,44(sp)
 800a014:	dd000a17 	ldw	r20,40(sp)
 800a018:	dcc00917 	ldw	r19,36(sp)
 800a01c:	dc800817 	ldw	r18,32(sp)
 800a020:	dc400717 	ldw	r17,28(sp)
 800a024:	dc000617 	ldw	r16,24(sp)
 800a028:	dec01004 	addi	sp,sp,64
 800a02c:	f800283a 	ret
 800a030:	2404b03a 	or	r2,r4,r16
 800a034:	2023883a 	mov	r17,r4
 800a038:	10003f26 	beq	r2,zero,800a138 <__divdf3+0x2d8>
 800a03c:	80015e26 	beq	r16,zero,800a5b8 <__divdf3+0x758>
 800a040:	8009883a 	mov	r4,r16
 800a044:	d9800215 	stw	r6,8(sp)
 800a048:	d9c00515 	stw	r7,20(sp)
 800a04c:	da000415 	stw	r8,16(sp)
 800a050:	800bdf40 	call	800bdf4 <__clzsi2>
 800a054:	d9800217 	ldw	r6,8(sp)
 800a058:	d9c00517 	ldw	r7,20(sp)
 800a05c:	da000417 	ldw	r8,16(sp)
 800a060:	113ffd44 	addi	r4,r2,-11
 800a064:	00c00704 	movi	r3,28
 800a068:	19014f16 	blt	r3,r4,800a5a8 <__divdf3+0x748>
 800a06c:	00c00744 	movi	r3,29
 800a070:	157ffe04 	addi	r21,r2,-8
 800a074:	1907c83a 	sub	r3,r3,r4
 800a078:	8560983a 	sll	r16,r16,r21
 800a07c:	88c6d83a 	srl	r3,r17,r3
 800a080:	8d6a983a 	sll	r21,r17,r21
 800a084:	1c20b03a 	or	r16,r3,r16
 800a088:	1080fcc4 	addi	r2,r2,1011
 800a08c:	00a5c83a 	sub	r18,zero,r2
 800a090:	0013883a 	mov	r9,zero
 800a094:	000b883a 	mov	r5,zero
 800a098:	003f8f06 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a09c:	3444b03a 	or	r2,r6,r17
 800a0a0:	1000231e 	bne	r2,zero,800a130 <__divdf3+0x2d0>
 800a0a4:	0023883a 	mov	r17,zero
 800a0a8:	0029883a 	mov	r20,zero
 800a0ac:	01c00084 	movi	r7,2
 800a0b0:	003f9b06 	br	8009f20 <__alt_data_end+0xfc009f20>
 800a0b4:	3444b03a 	or	r2,r6,r17
 800a0b8:	10001926 	beq	r2,zero,800a120 <__divdf3+0x2c0>
 800a0bc:	88014b26 	beq	r17,zero,800a5ec <__divdf3+0x78c>
 800a0c0:	8809883a 	mov	r4,r17
 800a0c4:	d9400115 	stw	r5,4(sp)
 800a0c8:	d9800215 	stw	r6,8(sp)
 800a0cc:	da000415 	stw	r8,16(sp)
 800a0d0:	da400315 	stw	r9,12(sp)
 800a0d4:	800bdf40 	call	800bdf4 <__clzsi2>
 800a0d8:	d9400117 	ldw	r5,4(sp)
 800a0dc:	d9800217 	ldw	r6,8(sp)
 800a0e0:	da000417 	ldw	r8,16(sp)
 800a0e4:	da400317 	ldw	r9,12(sp)
 800a0e8:	113ffd44 	addi	r4,r2,-11
 800a0ec:	00c00704 	movi	r3,28
 800a0f0:	19013a16 	blt	r3,r4,800a5dc <__divdf3+0x77c>
 800a0f4:	00c00744 	movi	r3,29
 800a0f8:	153ffe04 	addi	r20,r2,-8
 800a0fc:	1907c83a 	sub	r3,r3,r4
 800a100:	8d22983a 	sll	r17,r17,r20
 800a104:	30c6d83a 	srl	r3,r6,r3
 800a108:	3528983a 	sll	r20,r6,r20
 800a10c:	1c62b03a 	or	r17,r3,r17
 800a110:	1080fcc4 	addi	r2,r2,1011
 800a114:	0087c83a 	sub	r3,zero,r2
 800a118:	000f883a 	mov	r7,zero
 800a11c:	003f8006 	br	8009f20 <__alt_data_end+0xfc009f20>
 800a120:	0023883a 	mov	r17,zero
 800a124:	0029883a 	mov	r20,zero
 800a128:	01c00044 	movi	r7,1
 800a12c:	003f7c06 	br	8009f20 <__alt_data_end+0xfc009f20>
 800a130:	01c000c4 	movi	r7,3
 800a134:	003f7a06 	br	8009f20 <__alt_data_end+0xfc009f20>
 800a138:	02400104 	movi	r9,4
 800a13c:	0021883a 	mov	r16,zero
 800a140:	002b883a 	mov	r21,zero
 800a144:	01400044 	movi	r5,1
 800a148:	003f6306 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a14c:	02400304 	movi	r9,12
 800a150:	014000c4 	movi	r5,3
 800a154:	003f6006 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a158:	04000434 	movhi	r16,16
 800a15c:	0009883a 	mov	r4,zero
 800a160:	843fffc4 	addi	r16,r16,-1
 800a164:	057fffc4 	movi	r21,-1
 800a168:	0081ffc4 	movi	r2,2047
 800a16c:	003f9b06 	br	8009fdc <__alt_data_end+0xfc009fdc>
 800a170:	00c00044 	movi	r3,1
 800a174:	1887c83a 	sub	r3,r3,r2
 800a178:	01000e04 	movi	r4,56
 800a17c:	20c1530e 	bge	r4,r3,800a6cc <__divdf3+0x86c>
 800a180:	9900004c 	andi	r4,r19,1
 800a184:	0005883a 	mov	r2,zero
 800a188:	0021883a 	mov	r16,zero
 800a18c:	002b883a 	mov	r21,zero
 800a190:	003f9206 	br	8009fdc <__alt_data_end+0xfc009fdc>
 800a194:	8c012e36 	bltu	r17,r16,800a650 <__divdf3+0x7f0>
 800a198:	84412c26 	beq	r16,r17,800a64c <__divdf3+0x7ec>
 800a19c:	a82f883a 	mov	r23,r21
 800a1a0:	18ffffc4 	addi	r3,r3,-1
 800a1a4:	002b883a 	mov	r21,zero
 800a1a8:	a004d63a 	srli	r2,r20,24
 800a1ac:	8822923a 	slli	r17,r17,8
 800a1b0:	a028923a 	slli	r20,r20,8
 800a1b4:	8009883a 	mov	r4,r16
 800a1b8:	88acb03a 	or	r22,r17,r2
 800a1bc:	dd000015 	stw	r20,0(sp)
 800a1c0:	b028d43a 	srli	r20,r22,16
 800a1c4:	d8c00215 	stw	r3,8(sp)
 800a1c8:	b4bfffcc 	andi	r18,r22,65535
 800a1cc:	a00b883a 	mov	r5,r20
 800a1d0:	8000ae80 	call	8000ae8 <__udivsi3>
 800a1d4:	100b883a 	mov	r5,r2
 800a1d8:	9009883a 	mov	r4,r18
 800a1dc:	1023883a 	mov	r17,r2
 800a1e0:	8000ba40 	call	8000ba4 <__mulsi3>
 800a1e4:	8009883a 	mov	r4,r16
 800a1e8:	a00b883a 	mov	r5,r20
 800a1ec:	1039883a 	mov	fp,r2
 800a1f0:	8000b4c0 	call	8000b4c <__umodsi3>
 800a1f4:	1004943a 	slli	r2,r2,16
 800a1f8:	b808d43a 	srli	r4,r23,16
 800a1fc:	d8c00217 	ldw	r3,8(sp)
 800a200:	2084b03a 	or	r2,r4,r2
 800a204:	1700062e 	bgeu	r2,fp,800a220 <__divdf3+0x3c0>
 800a208:	1585883a 	add	r2,r2,r22
 800a20c:	893fffc4 	addi	r4,r17,-1
 800a210:	15811d36 	bltu	r2,r22,800a688 <__divdf3+0x828>
 800a214:	17011c2e 	bgeu	r2,fp,800a688 <__divdf3+0x828>
 800a218:	8c7fff84 	addi	r17,r17,-2
 800a21c:	1585883a 	add	r2,r2,r22
 800a220:	1739c83a 	sub	fp,r2,fp
 800a224:	a00b883a 	mov	r5,r20
 800a228:	e009883a 	mov	r4,fp
 800a22c:	d8c00215 	stw	r3,8(sp)
 800a230:	8000ae80 	call	8000ae8 <__udivsi3>
 800a234:	100b883a 	mov	r5,r2
 800a238:	9009883a 	mov	r4,r18
 800a23c:	1021883a 	mov	r16,r2
 800a240:	8000ba40 	call	8000ba4 <__mulsi3>
 800a244:	a00b883a 	mov	r5,r20
 800a248:	e009883a 	mov	r4,fp
 800a24c:	d8800415 	stw	r2,16(sp)
 800a250:	8000b4c0 	call	8000b4c <__umodsi3>
 800a254:	1004943a 	slli	r2,r2,16
 800a258:	da000417 	ldw	r8,16(sp)
 800a25c:	bdffffcc 	andi	r23,r23,65535
 800a260:	b884b03a 	or	r2,r23,r2
 800a264:	d8c00217 	ldw	r3,8(sp)
 800a268:	1200062e 	bgeu	r2,r8,800a284 <__divdf3+0x424>
 800a26c:	1585883a 	add	r2,r2,r22
 800a270:	813fffc4 	addi	r4,r16,-1
 800a274:	15810236 	bltu	r2,r22,800a680 <__divdf3+0x820>
 800a278:	1201012e 	bgeu	r2,r8,800a680 <__divdf3+0x820>
 800a27c:	843fff84 	addi	r16,r16,-2
 800a280:	1585883a 	add	r2,r2,r22
 800a284:	8822943a 	slli	r17,r17,16
 800a288:	d9800017 	ldw	r6,0(sp)
 800a28c:	1211c83a 	sub	r8,r2,r8
 800a290:	8c22b03a 	or	r17,r17,r16
 800a294:	373fffcc 	andi	fp,r6,65535
 800a298:	8abfffcc 	andi	r10,r17,65535
 800a29c:	8820d43a 	srli	r16,r17,16
 800a2a0:	5009883a 	mov	r4,r10
 800a2a4:	e00b883a 	mov	r5,fp
 800a2a8:	302ed43a 	srli	r23,r6,16
 800a2ac:	d8c00215 	stw	r3,8(sp)
 800a2b0:	da000415 	stw	r8,16(sp)
 800a2b4:	da800115 	stw	r10,4(sp)
 800a2b8:	8000ba40 	call	8000ba4 <__mulsi3>
 800a2bc:	800b883a 	mov	r5,r16
 800a2c0:	e009883a 	mov	r4,fp
 800a2c4:	d8800515 	stw	r2,20(sp)
 800a2c8:	8000ba40 	call	8000ba4 <__mulsi3>
 800a2cc:	8009883a 	mov	r4,r16
 800a2d0:	b80b883a 	mov	r5,r23
 800a2d4:	d8800315 	stw	r2,12(sp)
 800a2d8:	8000ba40 	call	8000ba4 <__mulsi3>
 800a2dc:	da800117 	ldw	r10,4(sp)
 800a2e0:	b80b883a 	mov	r5,r23
 800a2e4:	1021883a 	mov	r16,r2
 800a2e8:	5009883a 	mov	r4,r10
 800a2ec:	8000ba40 	call	8000ba4 <__mulsi3>
 800a2f0:	d9c00517 	ldw	r7,20(sp)
 800a2f4:	da400317 	ldw	r9,12(sp)
 800a2f8:	d8c00217 	ldw	r3,8(sp)
 800a2fc:	3808d43a 	srli	r4,r7,16
 800a300:	1245883a 	add	r2,r2,r9
 800a304:	da000417 	ldw	r8,16(sp)
 800a308:	2085883a 	add	r2,r4,r2
 800a30c:	1240022e 	bgeu	r2,r9,800a318 <__divdf3+0x4b8>
 800a310:	01000074 	movhi	r4,1
 800a314:	8121883a 	add	r16,r16,r4
 800a318:	1008d43a 	srli	r4,r2,16
 800a31c:	1004943a 	slli	r2,r2,16
 800a320:	39ffffcc 	andi	r7,r7,65535
 800a324:	2409883a 	add	r4,r4,r16
 800a328:	11c5883a 	add	r2,r2,r7
 800a32c:	4100bb36 	bltu	r8,r4,800a61c <__divdf3+0x7bc>
 800a330:	4100d726 	beq	r8,r4,800a690 <__divdf3+0x830>
 800a334:	4109c83a 	sub	r4,r8,r4
 800a338:	a8a1c83a 	sub	r16,r21,r2
 800a33c:	ac2b803a 	cmpltu	r21,r21,r16
 800a340:	256bc83a 	sub	r21,r4,r21
 800a344:	b540d926 	beq	r22,r21,800a6ac <__divdf3+0x84c>
 800a348:	a00b883a 	mov	r5,r20
 800a34c:	a809883a 	mov	r4,r21
 800a350:	d8c00215 	stw	r3,8(sp)
 800a354:	8000ae80 	call	8000ae8 <__udivsi3>
 800a358:	100b883a 	mov	r5,r2
 800a35c:	9009883a 	mov	r4,r18
 800a360:	d8800515 	stw	r2,20(sp)
 800a364:	8000ba40 	call	8000ba4 <__mulsi3>
 800a368:	a809883a 	mov	r4,r21
 800a36c:	a00b883a 	mov	r5,r20
 800a370:	d8800415 	stw	r2,16(sp)
 800a374:	8000b4c0 	call	8000b4c <__umodsi3>
 800a378:	1004943a 	slli	r2,r2,16
 800a37c:	8008d43a 	srli	r4,r16,16
 800a380:	da000417 	ldw	r8,16(sp)
 800a384:	d8c00217 	ldw	r3,8(sp)
 800a388:	2084b03a 	or	r2,r4,r2
 800a38c:	d9c00517 	ldw	r7,20(sp)
 800a390:	1200062e 	bgeu	r2,r8,800a3ac <__divdf3+0x54c>
 800a394:	1585883a 	add	r2,r2,r22
 800a398:	393fffc4 	addi	r4,r7,-1
 800a39c:	1580c536 	bltu	r2,r22,800a6b4 <__divdf3+0x854>
 800a3a0:	1200c42e 	bgeu	r2,r8,800a6b4 <__divdf3+0x854>
 800a3a4:	39ffff84 	addi	r7,r7,-2
 800a3a8:	1585883a 	add	r2,r2,r22
 800a3ac:	122bc83a 	sub	r21,r2,r8
 800a3b0:	a00b883a 	mov	r5,r20
 800a3b4:	a809883a 	mov	r4,r21
 800a3b8:	d8c00215 	stw	r3,8(sp)
 800a3bc:	d9c00515 	stw	r7,20(sp)
 800a3c0:	8000ae80 	call	8000ae8 <__udivsi3>
 800a3c4:	9009883a 	mov	r4,r18
 800a3c8:	100b883a 	mov	r5,r2
 800a3cc:	d8800415 	stw	r2,16(sp)
 800a3d0:	8000ba40 	call	8000ba4 <__mulsi3>
 800a3d4:	a809883a 	mov	r4,r21
 800a3d8:	a00b883a 	mov	r5,r20
 800a3dc:	1025883a 	mov	r18,r2
 800a3e0:	8000b4c0 	call	8000b4c <__umodsi3>
 800a3e4:	1004943a 	slli	r2,r2,16
 800a3e8:	813fffcc 	andi	r4,r16,65535
 800a3ec:	d8c00217 	ldw	r3,8(sp)
 800a3f0:	20a0b03a 	or	r16,r4,r2
 800a3f4:	d9c00517 	ldw	r7,20(sp)
 800a3f8:	da000417 	ldw	r8,16(sp)
 800a3fc:	8480062e 	bgeu	r16,r18,800a418 <__divdf3+0x5b8>
 800a400:	85a1883a 	add	r16,r16,r22
 800a404:	40bfffc4 	addi	r2,r8,-1
 800a408:	8580ac36 	bltu	r16,r22,800a6bc <__divdf3+0x85c>
 800a40c:	8480ab2e 	bgeu	r16,r18,800a6bc <__divdf3+0x85c>
 800a410:	423fff84 	addi	r8,r8,-2
 800a414:	85a1883a 	add	r16,r16,r22
 800a418:	3804943a 	slli	r2,r7,16
 800a41c:	84a1c83a 	sub	r16,r16,r18
 800a420:	e009883a 	mov	r4,fp
 800a424:	1228b03a 	or	r20,r2,r8
 800a428:	a1ffffcc 	andi	r7,r20,65535
 800a42c:	a024d43a 	srli	r18,r20,16
 800a430:	380b883a 	mov	r5,r7
 800a434:	d8c00215 	stw	r3,8(sp)
 800a438:	d9c00515 	stw	r7,20(sp)
 800a43c:	8000ba40 	call	8000ba4 <__mulsi3>
 800a440:	900b883a 	mov	r5,r18
 800a444:	e009883a 	mov	r4,fp
 800a448:	102b883a 	mov	r21,r2
 800a44c:	8000ba40 	call	8000ba4 <__mulsi3>
 800a450:	900b883a 	mov	r5,r18
 800a454:	b809883a 	mov	r4,r23
 800a458:	1039883a 	mov	fp,r2
 800a45c:	8000ba40 	call	8000ba4 <__mulsi3>
 800a460:	d9c00517 	ldw	r7,20(sp)
 800a464:	b80b883a 	mov	r5,r23
 800a468:	1025883a 	mov	r18,r2
 800a46c:	3809883a 	mov	r4,r7
 800a470:	8000ba40 	call	8000ba4 <__mulsi3>
 800a474:	a808d43a 	srli	r4,r21,16
 800a478:	1705883a 	add	r2,r2,fp
 800a47c:	d8c00217 	ldw	r3,8(sp)
 800a480:	2085883a 	add	r2,r4,r2
 800a484:	1700022e 	bgeu	r2,fp,800a490 <__divdf3+0x630>
 800a488:	01000074 	movhi	r4,1
 800a48c:	9125883a 	add	r18,r18,r4
 800a490:	1008d43a 	srli	r4,r2,16
 800a494:	1004943a 	slli	r2,r2,16
 800a498:	ad7fffcc 	andi	r21,r21,65535
 800a49c:	2489883a 	add	r4,r4,r18
 800a4a0:	1545883a 	add	r2,r2,r21
 800a4a4:	81003836 	bltu	r16,r4,800a588 <__divdf3+0x728>
 800a4a8:	81003626 	beq	r16,r4,800a584 <__divdf3+0x724>
 800a4ac:	a5000054 	ori	r20,r20,1
 800a4b0:	1880ffc4 	addi	r2,r3,1023
 800a4b4:	00bf2e0e 	bge	zero,r2,800a170 <__alt_data_end+0xfc00a170>
 800a4b8:	a10001cc 	andi	r4,r20,7
 800a4bc:	20000726 	beq	r4,zero,800a4dc <__divdf3+0x67c>
 800a4c0:	a10003cc 	andi	r4,r20,15
 800a4c4:	01400104 	movi	r5,4
 800a4c8:	21400426 	beq	r4,r5,800a4dc <__divdf3+0x67c>
 800a4cc:	a149883a 	add	r4,r20,r5
 800a4d0:	2529803a 	cmpltu	r20,r4,r20
 800a4d4:	8d23883a 	add	r17,r17,r20
 800a4d8:	2029883a 	mov	r20,r4
 800a4dc:	8900402c 	andhi	r4,r17,256
 800a4e0:	20000426 	beq	r4,zero,800a4f4 <__divdf3+0x694>
 800a4e4:	18810004 	addi	r2,r3,1024
 800a4e8:	00ffc034 	movhi	r3,65280
 800a4ec:	18ffffc4 	addi	r3,r3,-1
 800a4f0:	88e2703a 	and	r17,r17,r3
 800a4f4:	00c1ff84 	movi	r3,2046
 800a4f8:	18beb416 	blt	r3,r2,8009fcc <__alt_data_end+0xfc009fcc>
 800a4fc:	a028d0fa 	srli	r20,r20,3
 800a500:	882a977a 	slli	r21,r17,29
 800a504:	8820927a 	slli	r16,r17,9
 800a508:	1081ffcc 	andi	r2,r2,2047
 800a50c:	ad2ab03a 	or	r21,r21,r20
 800a510:	8020d33a 	srli	r16,r16,12
 800a514:	9900004c 	andi	r4,r19,1
 800a518:	003eb006 	br	8009fdc <__alt_data_end+0xfc009fdc>
 800a51c:	8080022c 	andhi	r2,r16,8
 800a520:	10001226 	beq	r2,zero,800a56c <__divdf3+0x70c>
 800a524:	8880022c 	andhi	r2,r17,8
 800a528:	1000101e 	bne	r2,zero,800a56c <__divdf3+0x70c>
 800a52c:	00800434 	movhi	r2,16
 800a530:	8c000234 	orhi	r16,r17,8
 800a534:	10bfffc4 	addi	r2,r2,-1
 800a538:	b809883a 	mov	r4,r23
 800a53c:	80a0703a 	and	r16,r16,r2
 800a540:	a02b883a 	mov	r21,r20
 800a544:	003f0806 	br	800a168 <__alt_data_end+0xfc00a168>
 800a548:	008000c4 	movi	r2,3
 800a54c:	3880b126 	beq	r7,r2,800a814 <__divdf3+0x9b4>
 800a550:	00800044 	movi	r2,1
 800a554:	38805b1e 	bne	r7,r2,800a6c4 <__divdf3+0x864>
 800a558:	e009883a 	mov	r4,fp
 800a55c:	0005883a 	mov	r2,zero
 800a560:	0021883a 	mov	r16,zero
 800a564:	002b883a 	mov	r21,zero
 800a568:	003e9c06 	br	8009fdc <__alt_data_end+0xfc009fdc>
 800a56c:	00800434 	movhi	r2,16
 800a570:	84000234 	orhi	r16,r16,8
 800a574:	10bfffc4 	addi	r2,r2,-1
 800a578:	b009883a 	mov	r4,r22
 800a57c:	80a0703a 	and	r16,r16,r2
 800a580:	003ef906 	br	800a168 <__alt_data_end+0xfc00a168>
 800a584:	103fca26 	beq	r2,zero,800a4b0 <__alt_data_end+0xfc00a4b0>
 800a588:	b421883a 	add	r16,r22,r16
 800a58c:	a17fffc4 	addi	r5,r20,-1
 800a590:	8580422e 	bgeu	r16,r22,800a69c <__divdf3+0x83c>
 800a594:	2829883a 	mov	r20,r5
 800a598:	813fc41e 	bne	r16,r4,800a4ac <__alt_data_end+0xfc00a4ac>
 800a59c:	d9800017 	ldw	r6,0(sp)
 800a5a0:	30bfc21e 	bne	r6,r2,800a4ac <__alt_data_end+0xfc00a4ac>
 800a5a4:	003fc206 	br	800a4b0 <__alt_data_end+0xfc00a4b0>
 800a5a8:	143ff604 	addi	r16,r2,-40
 800a5ac:	8c20983a 	sll	r16,r17,r16
 800a5b0:	002b883a 	mov	r21,zero
 800a5b4:	003eb406 	br	800a088 <__alt_data_end+0xfc00a088>
 800a5b8:	d9800215 	stw	r6,8(sp)
 800a5bc:	d9c00515 	stw	r7,20(sp)
 800a5c0:	da000415 	stw	r8,16(sp)
 800a5c4:	800bdf40 	call	800bdf4 <__clzsi2>
 800a5c8:	10800804 	addi	r2,r2,32
 800a5cc:	da000417 	ldw	r8,16(sp)
 800a5d0:	d9c00517 	ldw	r7,20(sp)
 800a5d4:	d9800217 	ldw	r6,8(sp)
 800a5d8:	003ea106 	br	800a060 <__alt_data_end+0xfc00a060>
 800a5dc:	147ff604 	addi	r17,r2,-40
 800a5e0:	3462983a 	sll	r17,r6,r17
 800a5e4:	0029883a 	mov	r20,zero
 800a5e8:	003ec906 	br	800a110 <__alt_data_end+0xfc00a110>
 800a5ec:	3009883a 	mov	r4,r6
 800a5f0:	d9400115 	stw	r5,4(sp)
 800a5f4:	d9800215 	stw	r6,8(sp)
 800a5f8:	da000415 	stw	r8,16(sp)
 800a5fc:	da400315 	stw	r9,12(sp)
 800a600:	800bdf40 	call	800bdf4 <__clzsi2>
 800a604:	10800804 	addi	r2,r2,32
 800a608:	da400317 	ldw	r9,12(sp)
 800a60c:	da000417 	ldw	r8,16(sp)
 800a610:	d9800217 	ldw	r6,8(sp)
 800a614:	d9400117 	ldw	r5,4(sp)
 800a618:	003eb306 	br	800a0e8 <__alt_data_end+0xfc00a0e8>
 800a61c:	d9800017 	ldw	r6,0(sp)
 800a620:	a9ab883a 	add	r21,r21,r6
 800a624:	a98b803a 	cmpltu	r5,r21,r6
 800a628:	2d8b883a 	add	r5,r5,r22
 800a62c:	2a11883a 	add	r8,r5,r8
 800a630:	897fffc4 	addi	r5,r17,-1
 800a634:	b2000c2e 	bgeu	r22,r8,800a668 <__divdf3+0x808>
 800a638:	41003f36 	bltu	r8,r4,800a738 <__divdf3+0x8d8>
 800a63c:	22006c26 	beq	r4,r8,800a7f0 <__divdf3+0x990>
 800a640:	4109c83a 	sub	r4,r8,r4
 800a644:	2823883a 	mov	r17,r5
 800a648:	003f3b06 	br	800a338 <__alt_data_end+0xfc00a338>
 800a64c:	ad3ed336 	bltu	r21,r20,800a19c <__alt_data_end+0xfc00a19c>
 800a650:	a804d07a 	srli	r2,r21,1
 800a654:	802e97fa 	slli	r23,r16,31
 800a658:	a82a97fa 	slli	r21,r21,31
 800a65c:	8020d07a 	srli	r16,r16,1
 800a660:	b8aeb03a 	or	r23,r23,r2
 800a664:	003ed006 	br	800a1a8 <__alt_data_end+0xfc00a1a8>
 800a668:	b23ff51e 	bne	r22,r8,800a640 <__alt_data_end+0xfc00a640>
 800a66c:	d9800017 	ldw	r6,0(sp)
 800a670:	a9bff12e 	bgeu	r21,r6,800a638 <__alt_data_end+0xfc00a638>
 800a674:	b109c83a 	sub	r4,r22,r4
 800a678:	2823883a 	mov	r17,r5
 800a67c:	003f2e06 	br	800a338 <__alt_data_end+0xfc00a338>
 800a680:	2021883a 	mov	r16,r4
 800a684:	003eff06 	br	800a284 <__alt_data_end+0xfc00a284>
 800a688:	2023883a 	mov	r17,r4
 800a68c:	003ee406 	br	800a220 <__alt_data_end+0xfc00a220>
 800a690:	a8bfe236 	bltu	r21,r2,800a61c <__alt_data_end+0xfc00a61c>
 800a694:	0009883a 	mov	r4,zero
 800a698:	003f2706 	br	800a338 <__alt_data_end+0xfc00a338>
 800a69c:	81002d36 	bltu	r16,r4,800a754 <__divdf3+0x8f4>
 800a6a0:	24005626 	beq	r4,r16,800a7fc <__divdf3+0x99c>
 800a6a4:	2829883a 	mov	r20,r5
 800a6a8:	003f8006 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800a6ac:	053fffc4 	movi	r20,-1
 800a6b0:	003f7f06 	br	800a4b0 <__alt_data_end+0xfc00a4b0>
 800a6b4:	200f883a 	mov	r7,r4
 800a6b8:	003f3c06 	br	800a3ac <__alt_data_end+0xfc00a3ac>
 800a6bc:	1011883a 	mov	r8,r2
 800a6c0:	003f5506 	br	800a418 <__alt_data_end+0xfc00a418>
 800a6c4:	e027883a 	mov	r19,fp
 800a6c8:	003f7906 	br	800a4b0 <__alt_data_end+0xfc00a4b0>
 800a6cc:	010007c4 	movi	r4,31
 800a6d0:	20c02816 	blt	r4,r3,800a774 <__divdf3+0x914>
 800a6d4:	00800804 	movi	r2,32
 800a6d8:	10c5c83a 	sub	r2,r2,r3
 800a6dc:	888a983a 	sll	r5,r17,r2
 800a6e0:	a0c8d83a 	srl	r4,r20,r3
 800a6e4:	a084983a 	sll	r2,r20,r2
 800a6e8:	88e2d83a 	srl	r17,r17,r3
 800a6ec:	2906b03a 	or	r3,r5,r4
 800a6f0:	1004c03a 	cmpne	r2,r2,zero
 800a6f4:	1886b03a 	or	r3,r3,r2
 800a6f8:	188001cc 	andi	r2,r3,7
 800a6fc:	10000726 	beq	r2,zero,800a71c <__divdf3+0x8bc>
 800a700:	188003cc 	andi	r2,r3,15
 800a704:	01000104 	movi	r4,4
 800a708:	11000426 	beq	r2,r4,800a71c <__divdf3+0x8bc>
 800a70c:	1805883a 	mov	r2,r3
 800a710:	10c00104 	addi	r3,r2,4
 800a714:	1885803a 	cmpltu	r2,r3,r2
 800a718:	88a3883a 	add	r17,r17,r2
 800a71c:	8880202c 	andhi	r2,r17,128
 800a720:	10002926 	beq	r2,zero,800a7c8 <__divdf3+0x968>
 800a724:	9900004c 	andi	r4,r19,1
 800a728:	00800044 	movi	r2,1
 800a72c:	0021883a 	mov	r16,zero
 800a730:	002b883a 	mov	r21,zero
 800a734:	003e2906 	br	8009fdc <__alt_data_end+0xfc009fdc>
 800a738:	d9800017 	ldw	r6,0(sp)
 800a73c:	8c7fff84 	addi	r17,r17,-2
 800a740:	a9ab883a 	add	r21,r21,r6
 800a744:	a98b803a 	cmpltu	r5,r21,r6
 800a748:	2d8b883a 	add	r5,r5,r22
 800a74c:	2a11883a 	add	r8,r5,r8
 800a750:	003ef806 	br	800a334 <__alt_data_end+0xfc00a334>
 800a754:	d9800017 	ldw	r6,0(sp)
 800a758:	318f883a 	add	r7,r6,r6
 800a75c:	398b803a 	cmpltu	r5,r7,r6
 800a760:	2d8d883a 	add	r6,r5,r22
 800a764:	81a1883a 	add	r16,r16,r6
 800a768:	a17fff84 	addi	r5,r20,-2
 800a76c:	d9c00015 	stw	r7,0(sp)
 800a770:	003f8806 	br	800a594 <__alt_data_end+0xfc00a594>
 800a774:	013ff844 	movi	r4,-31
 800a778:	2085c83a 	sub	r2,r4,r2
 800a77c:	8888d83a 	srl	r4,r17,r2
 800a780:	00800804 	movi	r2,32
 800a784:	18802126 	beq	r3,r2,800a80c <__divdf3+0x9ac>
 800a788:	04001004 	movi	r16,64
 800a78c:	80c7c83a 	sub	r3,r16,r3
 800a790:	88e0983a 	sll	r16,r17,r3
 800a794:	8504b03a 	or	r2,r16,r20
 800a798:	1004c03a 	cmpne	r2,r2,zero
 800a79c:	2084b03a 	or	r2,r4,r2
 800a7a0:	144001cc 	andi	r17,r2,7
 800a7a4:	88000d1e 	bne	r17,zero,800a7dc <__divdf3+0x97c>
 800a7a8:	0021883a 	mov	r16,zero
 800a7ac:	102ad0fa 	srli	r21,r2,3
 800a7b0:	9900004c 	andi	r4,r19,1
 800a7b4:	0005883a 	mov	r2,zero
 800a7b8:	ac6ab03a 	or	r21,r21,r17
 800a7bc:	003e0706 	br	8009fdc <__alt_data_end+0xfc009fdc>
 800a7c0:	1007883a 	mov	r3,r2
 800a7c4:	0023883a 	mov	r17,zero
 800a7c8:	8820927a 	slli	r16,r17,9
 800a7cc:	1805883a 	mov	r2,r3
 800a7d0:	8822977a 	slli	r17,r17,29
 800a7d4:	8020d33a 	srli	r16,r16,12
 800a7d8:	003ff406 	br	800a7ac <__alt_data_end+0xfc00a7ac>
 800a7dc:	10c003cc 	andi	r3,r2,15
 800a7e0:	01000104 	movi	r4,4
 800a7e4:	193ff626 	beq	r3,r4,800a7c0 <__alt_data_end+0xfc00a7c0>
 800a7e8:	0023883a 	mov	r17,zero
 800a7ec:	003fc806 	br	800a710 <__alt_data_end+0xfc00a710>
 800a7f0:	a8bfd136 	bltu	r21,r2,800a738 <__alt_data_end+0xfc00a738>
 800a7f4:	2823883a 	mov	r17,r5
 800a7f8:	003fa606 	br	800a694 <__alt_data_end+0xfc00a694>
 800a7fc:	d9800017 	ldw	r6,0(sp)
 800a800:	30bfd436 	bltu	r6,r2,800a754 <__alt_data_end+0xfc00a754>
 800a804:	2829883a 	mov	r20,r5
 800a808:	003f6406 	br	800a59c <__alt_data_end+0xfc00a59c>
 800a80c:	0021883a 	mov	r16,zero
 800a810:	003fe006 	br	800a794 <__alt_data_end+0xfc00a794>
 800a814:	00800434 	movhi	r2,16
 800a818:	8c000234 	orhi	r16,r17,8
 800a81c:	10bfffc4 	addi	r2,r2,-1
 800a820:	e009883a 	mov	r4,fp
 800a824:	80a0703a 	and	r16,r16,r2
 800a828:	a02b883a 	mov	r21,r20
 800a82c:	003e4e06 	br	800a168 <__alt_data_end+0xfc00a168>

0800a830 <__eqdf2>:
 800a830:	2804d53a 	srli	r2,r5,20
 800a834:	3806d53a 	srli	r3,r7,20
 800a838:	02000434 	movhi	r8,16
 800a83c:	423fffc4 	addi	r8,r8,-1
 800a840:	1081ffcc 	andi	r2,r2,2047
 800a844:	0281ffc4 	movi	r10,2047
 800a848:	2a12703a 	and	r9,r5,r8
 800a84c:	18c1ffcc 	andi	r3,r3,2047
 800a850:	3a10703a 	and	r8,r7,r8
 800a854:	280ad7fa 	srli	r5,r5,31
 800a858:	380ed7fa 	srli	r7,r7,31
 800a85c:	12801026 	beq	r2,r10,800a8a0 <__eqdf2+0x70>
 800a860:	0281ffc4 	movi	r10,2047
 800a864:	1a800a26 	beq	r3,r10,800a890 <__eqdf2+0x60>
 800a868:	10c00226 	beq	r2,r3,800a874 <__eqdf2+0x44>
 800a86c:	00800044 	movi	r2,1
 800a870:	f800283a 	ret
 800a874:	4a3ffd1e 	bne	r9,r8,800a86c <__alt_data_end+0xfc00a86c>
 800a878:	21bffc1e 	bne	r4,r6,800a86c <__alt_data_end+0xfc00a86c>
 800a87c:	29c00c26 	beq	r5,r7,800a8b0 <__eqdf2+0x80>
 800a880:	103ffa1e 	bne	r2,zero,800a86c <__alt_data_end+0xfc00a86c>
 800a884:	2244b03a 	or	r2,r4,r9
 800a888:	1004c03a 	cmpne	r2,r2,zero
 800a88c:	f800283a 	ret
 800a890:	3214b03a 	or	r10,r6,r8
 800a894:	503ff426 	beq	r10,zero,800a868 <__alt_data_end+0xfc00a868>
 800a898:	00800044 	movi	r2,1
 800a89c:	f800283a 	ret
 800a8a0:	2254b03a 	or	r10,r4,r9
 800a8a4:	503fee26 	beq	r10,zero,800a860 <__alt_data_end+0xfc00a860>
 800a8a8:	00800044 	movi	r2,1
 800a8ac:	f800283a 	ret
 800a8b0:	0005883a 	mov	r2,zero
 800a8b4:	f800283a 	ret

0800a8b8 <__gedf2>:
 800a8b8:	2804d53a 	srli	r2,r5,20
 800a8bc:	3806d53a 	srli	r3,r7,20
 800a8c0:	02000434 	movhi	r8,16
 800a8c4:	423fffc4 	addi	r8,r8,-1
 800a8c8:	1081ffcc 	andi	r2,r2,2047
 800a8cc:	0241ffc4 	movi	r9,2047
 800a8d0:	2a14703a 	and	r10,r5,r8
 800a8d4:	18c1ffcc 	andi	r3,r3,2047
 800a8d8:	3a10703a 	and	r8,r7,r8
 800a8dc:	280ad7fa 	srli	r5,r5,31
 800a8e0:	380ed7fa 	srli	r7,r7,31
 800a8e4:	12401d26 	beq	r2,r9,800a95c <__gedf2+0xa4>
 800a8e8:	0241ffc4 	movi	r9,2047
 800a8ec:	1a401226 	beq	r3,r9,800a938 <__gedf2+0x80>
 800a8f0:	1000081e 	bne	r2,zero,800a914 <__gedf2+0x5c>
 800a8f4:	2296b03a 	or	r11,r4,r10
 800a8f8:	5813003a 	cmpeq	r9,r11,zero
 800a8fc:	1800091e 	bne	r3,zero,800a924 <__gedf2+0x6c>
 800a900:	3218b03a 	or	r12,r6,r8
 800a904:	6000071e 	bne	r12,zero,800a924 <__gedf2+0x6c>
 800a908:	0005883a 	mov	r2,zero
 800a90c:	5800101e 	bne	r11,zero,800a950 <__gedf2+0x98>
 800a910:	f800283a 	ret
 800a914:	18000c1e 	bne	r3,zero,800a948 <__gedf2+0x90>
 800a918:	3212b03a 	or	r9,r6,r8
 800a91c:	48000c26 	beq	r9,zero,800a950 <__gedf2+0x98>
 800a920:	0013883a 	mov	r9,zero
 800a924:	39c03fcc 	andi	r7,r7,255
 800a928:	48000826 	beq	r9,zero,800a94c <__gedf2+0x94>
 800a92c:	38000926 	beq	r7,zero,800a954 <__gedf2+0x9c>
 800a930:	00800044 	movi	r2,1
 800a934:	f800283a 	ret
 800a938:	3212b03a 	or	r9,r6,r8
 800a93c:	483fec26 	beq	r9,zero,800a8f0 <__alt_data_end+0xfc00a8f0>
 800a940:	00bfff84 	movi	r2,-2
 800a944:	f800283a 	ret
 800a948:	39c03fcc 	andi	r7,r7,255
 800a94c:	29c00626 	beq	r5,r7,800a968 <__gedf2+0xb0>
 800a950:	283ff726 	beq	r5,zero,800a930 <__alt_data_end+0xfc00a930>
 800a954:	00bfffc4 	movi	r2,-1
 800a958:	f800283a 	ret
 800a95c:	2292b03a 	or	r9,r4,r10
 800a960:	483fe126 	beq	r9,zero,800a8e8 <__alt_data_end+0xfc00a8e8>
 800a964:	003ff606 	br	800a940 <__alt_data_end+0xfc00a940>
 800a968:	18bff916 	blt	r3,r2,800a950 <__alt_data_end+0xfc00a950>
 800a96c:	10c00316 	blt	r2,r3,800a97c <__gedf2+0xc4>
 800a970:	42bff736 	bltu	r8,r10,800a950 <__alt_data_end+0xfc00a950>
 800a974:	52000326 	beq	r10,r8,800a984 <__gedf2+0xcc>
 800a978:	5200042e 	bgeu	r10,r8,800a98c <__gedf2+0xd4>
 800a97c:	283fec1e 	bne	r5,zero,800a930 <__alt_data_end+0xfc00a930>
 800a980:	003ff406 	br	800a954 <__alt_data_end+0xfc00a954>
 800a984:	313ff236 	bltu	r6,r4,800a950 <__alt_data_end+0xfc00a950>
 800a988:	21bffc36 	bltu	r4,r6,800a97c <__alt_data_end+0xfc00a97c>
 800a98c:	0005883a 	mov	r2,zero
 800a990:	f800283a 	ret

0800a994 <__ledf2>:
 800a994:	2804d53a 	srli	r2,r5,20
 800a998:	3810d53a 	srli	r8,r7,20
 800a99c:	00c00434 	movhi	r3,16
 800a9a0:	18ffffc4 	addi	r3,r3,-1
 800a9a4:	1081ffcc 	andi	r2,r2,2047
 800a9a8:	0241ffc4 	movi	r9,2047
 800a9ac:	28d4703a 	and	r10,r5,r3
 800a9b0:	4201ffcc 	andi	r8,r8,2047
 800a9b4:	38c6703a 	and	r3,r7,r3
 800a9b8:	280ad7fa 	srli	r5,r5,31
 800a9bc:	380ed7fa 	srli	r7,r7,31
 800a9c0:	12401f26 	beq	r2,r9,800aa40 <__ledf2+0xac>
 800a9c4:	0241ffc4 	movi	r9,2047
 800a9c8:	42401426 	beq	r8,r9,800aa1c <__ledf2+0x88>
 800a9cc:	1000091e 	bne	r2,zero,800a9f4 <__ledf2+0x60>
 800a9d0:	2296b03a 	or	r11,r4,r10
 800a9d4:	5813003a 	cmpeq	r9,r11,zero
 800a9d8:	29403fcc 	andi	r5,r5,255
 800a9dc:	40000a1e 	bne	r8,zero,800aa08 <__ledf2+0x74>
 800a9e0:	30d8b03a 	or	r12,r6,r3
 800a9e4:	6000081e 	bne	r12,zero,800aa08 <__ledf2+0x74>
 800a9e8:	0005883a 	mov	r2,zero
 800a9ec:	5800111e 	bne	r11,zero,800aa34 <__ledf2+0xa0>
 800a9f0:	f800283a 	ret
 800a9f4:	29403fcc 	andi	r5,r5,255
 800a9f8:	40000c1e 	bne	r8,zero,800aa2c <__ledf2+0x98>
 800a9fc:	30d2b03a 	or	r9,r6,r3
 800aa00:	48000c26 	beq	r9,zero,800aa34 <__ledf2+0xa0>
 800aa04:	0013883a 	mov	r9,zero
 800aa08:	39c03fcc 	andi	r7,r7,255
 800aa0c:	48000826 	beq	r9,zero,800aa30 <__ledf2+0x9c>
 800aa10:	38001126 	beq	r7,zero,800aa58 <__ledf2+0xc4>
 800aa14:	00800044 	movi	r2,1
 800aa18:	f800283a 	ret
 800aa1c:	30d2b03a 	or	r9,r6,r3
 800aa20:	483fea26 	beq	r9,zero,800a9cc <__alt_data_end+0xfc00a9cc>
 800aa24:	00800084 	movi	r2,2
 800aa28:	f800283a 	ret
 800aa2c:	39c03fcc 	andi	r7,r7,255
 800aa30:	39400726 	beq	r7,r5,800aa50 <__ledf2+0xbc>
 800aa34:	2800081e 	bne	r5,zero,800aa58 <__ledf2+0xc4>
 800aa38:	00800044 	movi	r2,1
 800aa3c:	f800283a 	ret
 800aa40:	2292b03a 	or	r9,r4,r10
 800aa44:	483fdf26 	beq	r9,zero,800a9c4 <__alt_data_end+0xfc00a9c4>
 800aa48:	00800084 	movi	r2,2
 800aa4c:	f800283a 	ret
 800aa50:	4080030e 	bge	r8,r2,800aa60 <__ledf2+0xcc>
 800aa54:	383fef26 	beq	r7,zero,800aa14 <__alt_data_end+0xfc00aa14>
 800aa58:	00bfffc4 	movi	r2,-1
 800aa5c:	f800283a 	ret
 800aa60:	123feb16 	blt	r2,r8,800aa10 <__alt_data_end+0xfc00aa10>
 800aa64:	1abff336 	bltu	r3,r10,800aa34 <__alt_data_end+0xfc00aa34>
 800aa68:	50c00326 	beq	r10,r3,800aa78 <__ledf2+0xe4>
 800aa6c:	50c0042e 	bgeu	r10,r3,800aa80 <__ledf2+0xec>
 800aa70:	283fe81e 	bne	r5,zero,800aa14 <__alt_data_end+0xfc00aa14>
 800aa74:	003ff806 	br	800aa58 <__alt_data_end+0xfc00aa58>
 800aa78:	313fee36 	bltu	r6,r4,800aa34 <__alt_data_end+0xfc00aa34>
 800aa7c:	21bffc36 	bltu	r4,r6,800aa70 <__alt_data_end+0xfc00aa70>
 800aa80:	0005883a 	mov	r2,zero
 800aa84:	f800283a 	ret

0800aa88 <__muldf3>:
 800aa88:	deffee04 	addi	sp,sp,-72
 800aa8c:	dd000c15 	stw	r20,48(sp)
 800aa90:	2828d53a 	srli	r20,r5,20
 800aa94:	ddc00f15 	stw	r23,60(sp)
 800aa98:	282ed7fa 	srli	r23,r5,31
 800aa9c:	dc000815 	stw	r16,32(sp)
 800aaa0:	04000434 	movhi	r16,16
 800aaa4:	dcc00b15 	stw	r19,44(sp)
 800aaa8:	843fffc4 	addi	r16,r16,-1
 800aaac:	dfc01115 	stw	ra,68(sp)
 800aab0:	df001015 	stw	fp,64(sp)
 800aab4:	dd800e15 	stw	r22,56(sp)
 800aab8:	dd400d15 	stw	r21,52(sp)
 800aabc:	dc800a15 	stw	r18,40(sp)
 800aac0:	dc400915 	stw	r17,36(sp)
 800aac4:	a501ffcc 	andi	r20,r20,2047
 800aac8:	2c20703a 	and	r16,r5,r16
 800aacc:	b827883a 	mov	r19,r23
 800aad0:	ba403fcc 	andi	r9,r23,255
 800aad4:	a0006026 	beq	r20,zero,800ac58 <__muldf3+0x1d0>
 800aad8:	0081ffc4 	movi	r2,2047
 800aadc:	202d883a 	mov	r22,r4
 800aae0:	a0803626 	beq	r20,r2,800abbc <__muldf3+0x134>
 800aae4:	84000434 	orhi	r16,r16,16
 800aae8:	200ad77a 	srli	r5,r4,29
 800aaec:	800490fa 	slli	r2,r16,3
 800aaf0:	202c90fa 	slli	r22,r4,3
 800aaf4:	a53f0044 	addi	r20,r20,-1023
 800aaf8:	28a0b03a 	or	r16,r5,r2
 800aafc:	002b883a 	mov	r21,zero
 800ab00:	000b883a 	mov	r5,zero
 800ab04:	3804d53a 	srli	r2,r7,20
 800ab08:	3838d7fa 	srli	fp,r7,31
 800ab0c:	04400434 	movhi	r17,16
 800ab10:	8c7fffc4 	addi	r17,r17,-1
 800ab14:	1081ffcc 	andi	r2,r2,2047
 800ab18:	3025883a 	mov	r18,r6
 800ab1c:	3c62703a 	and	r17,r7,r17
 800ab20:	e2803fcc 	andi	r10,fp,255
 800ab24:	10006d26 	beq	r2,zero,800acdc <__muldf3+0x254>
 800ab28:	00c1ffc4 	movi	r3,2047
 800ab2c:	10c06526 	beq	r2,r3,800acc4 <__muldf3+0x23c>
 800ab30:	8c400434 	orhi	r17,r17,16
 800ab34:	300ed77a 	srli	r7,r6,29
 800ab38:	880690fa 	slli	r3,r17,3
 800ab3c:	302490fa 	slli	r18,r6,3
 800ab40:	10bf0044 	addi	r2,r2,-1023
 800ab44:	38e2b03a 	or	r17,r7,r3
 800ab48:	000f883a 	mov	r7,zero
 800ab4c:	a087883a 	add	r3,r20,r2
 800ab50:	010003c4 	movi	r4,15
 800ab54:	3d44b03a 	or	r2,r7,r21
 800ab58:	e5ccf03a 	xor	r6,fp,r23
 800ab5c:	1a000044 	addi	r8,r3,1
 800ab60:	20809b36 	bltu	r4,r2,800add0 <__muldf3+0x348>
 800ab64:	100490ba 	slli	r2,r2,2
 800ab68:	01020074 	movhi	r4,2049
 800ab6c:	212adf04 	addi	r4,r4,-21636
 800ab70:	1105883a 	add	r2,r2,r4
 800ab74:	10800017 	ldw	r2,0(r2)
 800ab78:	1000683a 	jmp	r2
 800ab7c:	0800add0 	cmplti	zero,at,695
 800ab80:	0800abdc 	xori	zero,at,687
 800ab84:	0800abdc 	xori	zero,at,687
 800ab88:	0800abd8 	cmpnei	zero,at,687
 800ab8c:	0800adac 	andhi	zero,at,694
 800ab90:	0800adac 	andhi	zero,at,694
 800ab94:	0800ad94 	ori	zero,at,694
 800ab98:	0800abd8 	cmpnei	zero,at,687
 800ab9c:	0800adac 	andhi	zero,at,694
 800aba0:	0800ad94 	ori	zero,at,694
 800aba4:	0800adac 	andhi	zero,at,694
 800aba8:	0800abd8 	cmpnei	zero,at,687
 800abac:	0800adbc 	xorhi	zero,at,694
 800abb0:	0800adbc 	xorhi	zero,at,694
 800abb4:	0800adbc 	xorhi	zero,at,694
 800abb8:	0800b11c 	xori	zero,at,708
 800abbc:	2404b03a 	or	r2,r4,r16
 800abc0:	1000711e 	bne	r2,zero,800ad88 <__muldf3+0x300>
 800abc4:	05400204 	movi	r21,8
 800abc8:	0021883a 	mov	r16,zero
 800abcc:	002d883a 	mov	r22,zero
 800abd0:	01400084 	movi	r5,2
 800abd4:	003fcb06 	br	800ab04 <__alt_data_end+0xfc00ab04>
 800abd8:	500d883a 	mov	r6,r10
 800abdc:	00800084 	movi	r2,2
 800abe0:	38805926 	beq	r7,r2,800ad48 <__muldf3+0x2c0>
 800abe4:	008000c4 	movi	r2,3
 800abe8:	3881bb26 	beq	r7,r2,800b2d8 <__muldf3+0x850>
 800abec:	00800044 	movi	r2,1
 800abf0:	3881961e 	bne	r7,r2,800b24c <__muldf3+0x7c4>
 800abf4:	3027883a 	mov	r19,r6
 800abf8:	0005883a 	mov	r2,zero
 800abfc:	0021883a 	mov	r16,zero
 800ac00:	002d883a 	mov	r22,zero
 800ac04:	1004953a 	slli	r2,r2,20
 800ac08:	98c03fcc 	andi	r3,r19,255
 800ac0c:	04400434 	movhi	r17,16
 800ac10:	8c7fffc4 	addi	r17,r17,-1
 800ac14:	180697fa 	slli	r3,r3,31
 800ac18:	8460703a 	and	r16,r16,r17
 800ac1c:	80a0b03a 	or	r16,r16,r2
 800ac20:	80c6b03a 	or	r3,r16,r3
 800ac24:	b005883a 	mov	r2,r22
 800ac28:	dfc01117 	ldw	ra,68(sp)
 800ac2c:	df001017 	ldw	fp,64(sp)
 800ac30:	ddc00f17 	ldw	r23,60(sp)
 800ac34:	dd800e17 	ldw	r22,56(sp)
 800ac38:	dd400d17 	ldw	r21,52(sp)
 800ac3c:	dd000c17 	ldw	r20,48(sp)
 800ac40:	dcc00b17 	ldw	r19,44(sp)
 800ac44:	dc800a17 	ldw	r18,40(sp)
 800ac48:	dc400917 	ldw	r17,36(sp)
 800ac4c:	dc000817 	ldw	r16,32(sp)
 800ac50:	dec01204 	addi	sp,sp,72
 800ac54:	f800283a 	ret
 800ac58:	2404b03a 	or	r2,r4,r16
 800ac5c:	202b883a 	mov	r21,r4
 800ac60:	10004426 	beq	r2,zero,800ad74 <__muldf3+0x2ec>
 800ac64:	80015126 	beq	r16,zero,800b1ac <__muldf3+0x724>
 800ac68:	8009883a 	mov	r4,r16
 800ac6c:	d9800715 	stw	r6,28(sp)
 800ac70:	d9c00215 	stw	r7,8(sp)
 800ac74:	da400415 	stw	r9,16(sp)
 800ac78:	800bdf40 	call	800bdf4 <__clzsi2>
 800ac7c:	d9800717 	ldw	r6,28(sp)
 800ac80:	d9c00217 	ldw	r7,8(sp)
 800ac84:	da400417 	ldw	r9,16(sp)
 800ac88:	113ffd44 	addi	r4,r2,-11
 800ac8c:	00c00704 	movi	r3,28
 800ac90:	19014216 	blt	r3,r4,800b19c <__muldf3+0x714>
 800ac94:	00c00744 	movi	r3,29
 800ac98:	15bffe04 	addi	r22,r2,-8
 800ac9c:	1907c83a 	sub	r3,r3,r4
 800aca0:	85a0983a 	sll	r16,r16,r22
 800aca4:	a8c6d83a 	srl	r3,r21,r3
 800aca8:	adac983a 	sll	r22,r21,r22
 800acac:	1c20b03a 	or	r16,r3,r16
 800acb0:	1080fcc4 	addi	r2,r2,1011
 800acb4:	00a9c83a 	sub	r20,zero,r2
 800acb8:	002b883a 	mov	r21,zero
 800acbc:	000b883a 	mov	r5,zero
 800acc0:	003f9006 	br	800ab04 <__alt_data_end+0xfc00ab04>
 800acc4:	3446b03a 	or	r3,r6,r17
 800acc8:	1800281e 	bne	r3,zero,800ad6c <__muldf3+0x2e4>
 800accc:	0023883a 	mov	r17,zero
 800acd0:	0025883a 	mov	r18,zero
 800acd4:	01c00084 	movi	r7,2
 800acd8:	003f9c06 	br	800ab4c <__alt_data_end+0xfc00ab4c>
 800acdc:	3446b03a 	or	r3,r6,r17
 800ace0:	18001e26 	beq	r3,zero,800ad5c <__muldf3+0x2d4>
 800ace4:	88012126 	beq	r17,zero,800b16c <__muldf3+0x6e4>
 800ace8:	8809883a 	mov	r4,r17
 800acec:	d9400215 	stw	r5,8(sp)
 800acf0:	d9800715 	stw	r6,28(sp)
 800acf4:	da400415 	stw	r9,16(sp)
 800acf8:	da800315 	stw	r10,12(sp)
 800acfc:	800bdf40 	call	800bdf4 <__clzsi2>
 800ad00:	d9400217 	ldw	r5,8(sp)
 800ad04:	d9800717 	ldw	r6,28(sp)
 800ad08:	da400417 	ldw	r9,16(sp)
 800ad0c:	da800317 	ldw	r10,12(sp)
 800ad10:	113ffd44 	addi	r4,r2,-11
 800ad14:	00c00704 	movi	r3,28
 800ad18:	19011016 	blt	r3,r4,800b15c <__muldf3+0x6d4>
 800ad1c:	00c00744 	movi	r3,29
 800ad20:	14bffe04 	addi	r18,r2,-8
 800ad24:	1907c83a 	sub	r3,r3,r4
 800ad28:	8ca2983a 	sll	r17,r17,r18
 800ad2c:	30c6d83a 	srl	r3,r6,r3
 800ad30:	34a4983a 	sll	r18,r6,r18
 800ad34:	1c62b03a 	or	r17,r3,r17
 800ad38:	1080fcc4 	addi	r2,r2,1011
 800ad3c:	0085c83a 	sub	r2,zero,r2
 800ad40:	000f883a 	mov	r7,zero
 800ad44:	003f8106 	br	800ab4c <__alt_data_end+0xfc00ab4c>
 800ad48:	3027883a 	mov	r19,r6
 800ad4c:	0081ffc4 	movi	r2,2047
 800ad50:	0021883a 	mov	r16,zero
 800ad54:	002d883a 	mov	r22,zero
 800ad58:	003faa06 	br	800ac04 <__alt_data_end+0xfc00ac04>
 800ad5c:	0023883a 	mov	r17,zero
 800ad60:	0025883a 	mov	r18,zero
 800ad64:	01c00044 	movi	r7,1
 800ad68:	003f7806 	br	800ab4c <__alt_data_end+0xfc00ab4c>
 800ad6c:	01c000c4 	movi	r7,3
 800ad70:	003f7606 	br	800ab4c <__alt_data_end+0xfc00ab4c>
 800ad74:	05400104 	movi	r21,4
 800ad78:	0021883a 	mov	r16,zero
 800ad7c:	002d883a 	mov	r22,zero
 800ad80:	01400044 	movi	r5,1
 800ad84:	003f5f06 	br	800ab04 <__alt_data_end+0xfc00ab04>
 800ad88:	05400304 	movi	r21,12
 800ad8c:	014000c4 	movi	r5,3
 800ad90:	003f5c06 	br	800ab04 <__alt_data_end+0xfc00ab04>
 800ad94:	04000434 	movhi	r16,16
 800ad98:	0027883a 	mov	r19,zero
 800ad9c:	843fffc4 	addi	r16,r16,-1
 800ada0:	05bfffc4 	movi	r22,-1
 800ada4:	0081ffc4 	movi	r2,2047
 800ada8:	003f9606 	br	800ac04 <__alt_data_end+0xfc00ac04>
 800adac:	8023883a 	mov	r17,r16
 800adb0:	b025883a 	mov	r18,r22
 800adb4:	280f883a 	mov	r7,r5
 800adb8:	003f8806 	br	800abdc <__alt_data_end+0xfc00abdc>
 800adbc:	8023883a 	mov	r17,r16
 800adc0:	b025883a 	mov	r18,r22
 800adc4:	480d883a 	mov	r6,r9
 800adc8:	280f883a 	mov	r7,r5
 800adcc:	003f8306 	br	800abdc <__alt_data_end+0xfc00abdc>
 800add0:	b026d43a 	srli	r19,r22,16
 800add4:	902ed43a 	srli	r23,r18,16
 800add8:	b5bfffcc 	andi	r22,r22,65535
 800addc:	94bfffcc 	andi	r18,r18,65535
 800ade0:	b00b883a 	mov	r5,r22
 800ade4:	9009883a 	mov	r4,r18
 800ade8:	d8c00515 	stw	r3,20(sp)
 800adec:	d9800715 	stw	r6,28(sp)
 800adf0:	da000615 	stw	r8,24(sp)
 800adf4:	8000ba40 	call	8000ba4 <__mulsi3>
 800adf8:	980b883a 	mov	r5,r19
 800adfc:	9009883a 	mov	r4,r18
 800ae00:	1029883a 	mov	r20,r2
 800ae04:	8000ba40 	call	8000ba4 <__mulsi3>
 800ae08:	b80b883a 	mov	r5,r23
 800ae0c:	9809883a 	mov	r4,r19
 800ae10:	102b883a 	mov	r21,r2
 800ae14:	8000ba40 	call	8000ba4 <__mulsi3>
 800ae18:	b809883a 	mov	r4,r23
 800ae1c:	b00b883a 	mov	r5,r22
 800ae20:	1039883a 	mov	fp,r2
 800ae24:	8000ba40 	call	8000ba4 <__mulsi3>
 800ae28:	a008d43a 	srli	r4,r20,16
 800ae2c:	1545883a 	add	r2,r2,r21
 800ae30:	d8c00517 	ldw	r3,20(sp)
 800ae34:	2085883a 	add	r2,r4,r2
 800ae38:	d9800717 	ldw	r6,28(sp)
 800ae3c:	da000617 	ldw	r8,24(sp)
 800ae40:	1540022e 	bgeu	r2,r21,800ae4c <__muldf3+0x3c4>
 800ae44:	01000074 	movhi	r4,1
 800ae48:	e139883a 	add	fp,fp,r4
 800ae4c:	100e943a 	slli	r7,r2,16
 800ae50:	1004d43a 	srli	r2,r2,16
 800ae54:	882ad43a 	srli	r21,r17,16
 800ae58:	a53fffcc 	andi	r20,r20,65535
 800ae5c:	8c7fffcc 	andi	r17,r17,65535
 800ae60:	3d29883a 	add	r20,r7,r20
 800ae64:	b00b883a 	mov	r5,r22
 800ae68:	8809883a 	mov	r4,r17
 800ae6c:	d8c00515 	stw	r3,20(sp)
 800ae70:	d9800715 	stw	r6,28(sp)
 800ae74:	da000615 	stw	r8,24(sp)
 800ae78:	dd000115 	stw	r20,4(sp)
 800ae7c:	d8800015 	stw	r2,0(sp)
 800ae80:	8000ba40 	call	8000ba4 <__mulsi3>
 800ae84:	980b883a 	mov	r5,r19
 800ae88:	8809883a 	mov	r4,r17
 800ae8c:	d8800215 	stw	r2,8(sp)
 800ae90:	8000ba40 	call	8000ba4 <__mulsi3>
 800ae94:	9809883a 	mov	r4,r19
 800ae98:	a80b883a 	mov	r5,r21
 800ae9c:	1029883a 	mov	r20,r2
 800aea0:	8000ba40 	call	8000ba4 <__mulsi3>
 800aea4:	b00b883a 	mov	r5,r22
 800aea8:	a809883a 	mov	r4,r21
 800aeac:	d8800415 	stw	r2,16(sp)
 800aeb0:	8000ba40 	call	8000ba4 <__mulsi3>
 800aeb4:	d9c00217 	ldw	r7,8(sp)
 800aeb8:	1505883a 	add	r2,r2,r20
 800aebc:	d8c00517 	ldw	r3,20(sp)
 800aec0:	3826d43a 	srli	r19,r7,16
 800aec4:	d9800717 	ldw	r6,28(sp)
 800aec8:	da000617 	ldw	r8,24(sp)
 800aecc:	9885883a 	add	r2,r19,r2
 800aed0:	da400417 	ldw	r9,16(sp)
 800aed4:	1500022e 	bgeu	r2,r20,800aee0 <__muldf3+0x458>
 800aed8:	01000074 	movhi	r4,1
 800aedc:	4913883a 	add	r9,r9,r4
 800aee0:	1028d43a 	srli	r20,r2,16
 800aee4:	1004943a 	slli	r2,r2,16
 800aee8:	802cd43a 	srli	r22,r16,16
 800aeec:	843fffcc 	andi	r16,r16,65535
 800aef0:	3cffffcc 	andi	r19,r7,65535
 800aef4:	9009883a 	mov	r4,r18
 800aef8:	800b883a 	mov	r5,r16
 800aefc:	a269883a 	add	r20,r20,r9
 800af00:	d8c00515 	stw	r3,20(sp)
 800af04:	d9800715 	stw	r6,28(sp)
 800af08:	da000615 	stw	r8,24(sp)
 800af0c:	14e7883a 	add	r19,r2,r19
 800af10:	8000ba40 	call	8000ba4 <__mulsi3>
 800af14:	9009883a 	mov	r4,r18
 800af18:	b00b883a 	mov	r5,r22
 800af1c:	d8800315 	stw	r2,12(sp)
 800af20:	8000ba40 	call	8000ba4 <__mulsi3>
 800af24:	b809883a 	mov	r4,r23
 800af28:	b00b883a 	mov	r5,r22
 800af2c:	d8800215 	stw	r2,8(sp)
 800af30:	8000ba40 	call	8000ba4 <__mulsi3>
 800af34:	b80b883a 	mov	r5,r23
 800af38:	8009883a 	mov	r4,r16
 800af3c:	d8800415 	stw	r2,16(sp)
 800af40:	8000ba40 	call	8000ba4 <__mulsi3>
 800af44:	da800317 	ldw	r10,12(sp)
 800af48:	d9c00217 	ldw	r7,8(sp)
 800af4c:	d9000017 	ldw	r4,0(sp)
 800af50:	502ed43a 	srli	r23,r10,16
 800af54:	11c5883a 	add	r2,r2,r7
 800af58:	24e5883a 	add	r18,r4,r19
 800af5c:	b885883a 	add	r2,r23,r2
 800af60:	d8c00517 	ldw	r3,20(sp)
 800af64:	d9800717 	ldw	r6,28(sp)
 800af68:	da000617 	ldw	r8,24(sp)
 800af6c:	da400417 	ldw	r9,16(sp)
 800af70:	11c0022e 	bgeu	r2,r7,800af7c <__muldf3+0x4f4>
 800af74:	01000074 	movhi	r4,1
 800af78:	4913883a 	add	r9,r9,r4
 800af7c:	100ed43a 	srli	r7,r2,16
 800af80:	1004943a 	slli	r2,r2,16
 800af84:	55ffffcc 	andi	r23,r10,65535
 800af88:	3a53883a 	add	r9,r7,r9
 800af8c:	8809883a 	mov	r4,r17
 800af90:	800b883a 	mov	r5,r16
 800af94:	d8c00515 	stw	r3,20(sp)
 800af98:	d9800715 	stw	r6,28(sp)
 800af9c:	da000615 	stw	r8,24(sp)
 800afa0:	da400415 	stw	r9,16(sp)
 800afa4:	15ef883a 	add	r23,r2,r23
 800afa8:	8000ba40 	call	8000ba4 <__mulsi3>
 800afac:	8809883a 	mov	r4,r17
 800afb0:	b00b883a 	mov	r5,r22
 800afb4:	d8800215 	stw	r2,8(sp)
 800afb8:	8000ba40 	call	8000ba4 <__mulsi3>
 800afbc:	b00b883a 	mov	r5,r22
 800afc0:	a809883a 	mov	r4,r21
 800afc4:	d8800315 	stw	r2,12(sp)
 800afc8:	8000ba40 	call	8000ba4 <__mulsi3>
 800afcc:	8009883a 	mov	r4,r16
 800afd0:	a80b883a 	mov	r5,r21
 800afd4:	1023883a 	mov	r17,r2
 800afd8:	8000ba40 	call	8000ba4 <__mulsi3>
 800afdc:	d9c00217 	ldw	r7,8(sp)
 800afe0:	da800317 	ldw	r10,12(sp)
 800afe4:	d8c00517 	ldw	r3,20(sp)
 800afe8:	3808d43a 	srli	r4,r7,16
 800afec:	1285883a 	add	r2,r2,r10
 800aff0:	d9800717 	ldw	r6,28(sp)
 800aff4:	2085883a 	add	r2,r4,r2
 800aff8:	da000617 	ldw	r8,24(sp)
 800affc:	da400417 	ldw	r9,16(sp)
 800b000:	1280022e 	bgeu	r2,r10,800b00c <__muldf3+0x584>
 800b004:	01000074 	movhi	r4,1
 800b008:	8923883a 	add	r17,r17,r4
 800b00c:	1008943a 	slli	r4,r2,16
 800b010:	39ffffcc 	andi	r7,r7,65535
 800b014:	e4b9883a 	add	fp,fp,r18
 800b018:	21cf883a 	add	r7,r4,r7
 800b01c:	e4e7803a 	cmpltu	r19,fp,r19
 800b020:	3d0f883a 	add	r7,r7,r20
 800b024:	bf39883a 	add	fp,r23,fp
 800b028:	99c9883a 	add	r4,r19,r7
 800b02c:	e5ef803a 	cmpltu	r23,fp,r23
 800b030:	490b883a 	add	r5,r9,r4
 800b034:	1004d43a 	srli	r2,r2,16
 800b038:	b965883a 	add	r18,r23,r5
 800b03c:	24c9803a 	cmpltu	r4,r4,r19
 800b040:	3d29803a 	cmpltu	r20,r7,r20
 800b044:	a128b03a 	or	r20,r20,r4
 800b048:	95ef803a 	cmpltu	r23,r18,r23
 800b04c:	2a53803a 	cmpltu	r9,r5,r9
 800b050:	a0a9883a 	add	r20,r20,r2
 800b054:	4deeb03a 	or	r23,r9,r23
 800b058:	a5ef883a 	add	r23,r20,r23
 800b05c:	bc63883a 	add	r17,r23,r17
 800b060:	e004927a 	slli	r2,fp,9
 800b064:	d9000117 	ldw	r4,4(sp)
 800b068:	882e927a 	slli	r23,r17,9
 800b06c:	9022d5fa 	srli	r17,r18,23
 800b070:	e038d5fa 	srli	fp,fp,23
 800b074:	1104b03a 	or	r2,r2,r4
 800b078:	9024927a 	slli	r18,r18,9
 800b07c:	1004c03a 	cmpne	r2,r2,zero
 800b080:	bc62b03a 	or	r17,r23,r17
 800b084:	1738b03a 	or	fp,r2,fp
 800b088:	8880402c 	andhi	r2,r17,256
 800b08c:	e4a4b03a 	or	r18,fp,r18
 800b090:	10000726 	beq	r2,zero,800b0b0 <__muldf3+0x628>
 800b094:	9006d07a 	srli	r3,r18,1
 800b098:	880497fa 	slli	r2,r17,31
 800b09c:	9480004c 	andi	r18,r18,1
 800b0a0:	8822d07a 	srli	r17,r17,1
 800b0a4:	1ca4b03a 	or	r18,r3,r18
 800b0a8:	14a4b03a 	or	r18,r2,r18
 800b0ac:	4007883a 	mov	r3,r8
 800b0b0:	1880ffc4 	addi	r2,r3,1023
 800b0b4:	0080460e 	bge	zero,r2,800b1d0 <__muldf3+0x748>
 800b0b8:	910001cc 	andi	r4,r18,7
 800b0bc:	20000726 	beq	r4,zero,800b0dc <__muldf3+0x654>
 800b0c0:	910003cc 	andi	r4,r18,15
 800b0c4:	01400104 	movi	r5,4
 800b0c8:	21400426 	beq	r4,r5,800b0dc <__muldf3+0x654>
 800b0cc:	9149883a 	add	r4,r18,r5
 800b0d0:	24a5803a 	cmpltu	r18,r4,r18
 800b0d4:	8ca3883a 	add	r17,r17,r18
 800b0d8:	2025883a 	mov	r18,r4
 800b0dc:	8900402c 	andhi	r4,r17,256
 800b0e0:	20000426 	beq	r4,zero,800b0f4 <__muldf3+0x66c>
 800b0e4:	18810004 	addi	r2,r3,1024
 800b0e8:	00ffc034 	movhi	r3,65280
 800b0ec:	18ffffc4 	addi	r3,r3,-1
 800b0f0:	88e2703a 	and	r17,r17,r3
 800b0f4:	00c1ff84 	movi	r3,2046
 800b0f8:	18bf1316 	blt	r3,r2,800ad48 <__alt_data_end+0xfc00ad48>
 800b0fc:	882c977a 	slli	r22,r17,29
 800b100:	9024d0fa 	srli	r18,r18,3
 800b104:	8822927a 	slli	r17,r17,9
 800b108:	1081ffcc 	andi	r2,r2,2047
 800b10c:	b4acb03a 	or	r22,r22,r18
 800b110:	8820d33a 	srli	r16,r17,12
 800b114:	3027883a 	mov	r19,r6
 800b118:	003eba06 	br	800ac04 <__alt_data_end+0xfc00ac04>
 800b11c:	8080022c 	andhi	r2,r16,8
 800b120:	10000926 	beq	r2,zero,800b148 <__muldf3+0x6c0>
 800b124:	8880022c 	andhi	r2,r17,8
 800b128:	1000071e 	bne	r2,zero,800b148 <__muldf3+0x6c0>
 800b12c:	00800434 	movhi	r2,16
 800b130:	8c000234 	orhi	r16,r17,8
 800b134:	10bfffc4 	addi	r2,r2,-1
 800b138:	e027883a 	mov	r19,fp
 800b13c:	80a0703a 	and	r16,r16,r2
 800b140:	902d883a 	mov	r22,r18
 800b144:	003f1706 	br	800ada4 <__alt_data_end+0xfc00ada4>
 800b148:	00800434 	movhi	r2,16
 800b14c:	84000234 	orhi	r16,r16,8
 800b150:	10bfffc4 	addi	r2,r2,-1
 800b154:	80a0703a 	and	r16,r16,r2
 800b158:	003f1206 	br	800ada4 <__alt_data_end+0xfc00ada4>
 800b15c:	147ff604 	addi	r17,r2,-40
 800b160:	3462983a 	sll	r17,r6,r17
 800b164:	0025883a 	mov	r18,zero
 800b168:	003ef306 	br	800ad38 <__alt_data_end+0xfc00ad38>
 800b16c:	3009883a 	mov	r4,r6
 800b170:	d9400215 	stw	r5,8(sp)
 800b174:	d9800715 	stw	r6,28(sp)
 800b178:	da400415 	stw	r9,16(sp)
 800b17c:	da800315 	stw	r10,12(sp)
 800b180:	800bdf40 	call	800bdf4 <__clzsi2>
 800b184:	10800804 	addi	r2,r2,32
 800b188:	da800317 	ldw	r10,12(sp)
 800b18c:	da400417 	ldw	r9,16(sp)
 800b190:	d9800717 	ldw	r6,28(sp)
 800b194:	d9400217 	ldw	r5,8(sp)
 800b198:	003edd06 	br	800ad10 <__alt_data_end+0xfc00ad10>
 800b19c:	143ff604 	addi	r16,r2,-40
 800b1a0:	ac20983a 	sll	r16,r21,r16
 800b1a4:	002d883a 	mov	r22,zero
 800b1a8:	003ec106 	br	800acb0 <__alt_data_end+0xfc00acb0>
 800b1ac:	d9800715 	stw	r6,28(sp)
 800b1b0:	d9c00215 	stw	r7,8(sp)
 800b1b4:	da400415 	stw	r9,16(sp)
 800b1b8:	800bdf40 	call	800bdf4 <__clzsi2>
 800b1bc:	10800804 	addi	r2,r2,32
 800b1c0:	da400417 	ldw	r9,16(sp)
 800b1c4:	d9c00217 	ldw	r7,8(sp)
 800b1c8:	d9800717 	ldw	r6,28(sp)
 800b1cc:	003eae06 	br	800ac88 <__alt_data_end+0xfc00ac88>
 800b1d0:	00c00044 	movi	r3,1
 800b1d4:	1887c83a 	sub	r3,r3,r2
 800b1d8:	01000e04 	movi	r4,56
 800b1dc:	20fe8516 	blt	r4,r3,800abf4 <__alt_data_end+0xfc00abf4>
 800b1e0:	010007c4 	movi	r4,31
 800b1e4:	20c01b16 	blt	r4,r3,800b254 <__muldf3+0x7cc>
 800b1e8:	00800804 	movi	r2,32
 800b1ec:	10c5c83a 	sub	r2,r2,r3
 800b1f0:	888a983a 	sll	r5,r17,r2
 800b1f4:	90c8d83a 	srl	r4,r18,r3
 800b1f8:	9084983a 	sll	r2,r18,r2
 800b1fc:	88e2d83a 	srl	r17,r17,r3
 800b200:	2906b03a 	or	r3,r5,r4
 800b204:	1004c03a 	cmpne	r2,r2,zero
 800b208:	1886b03a 	or	r3,r3,r2
 800b20c:	188001cc 	andi	r2,r3,7
 800b210:	10000726 	beq	r2,zero,800b230 <__muldf3+0x7a8>
 800b214:	188003cc 	andi	r2,r3,15
 800b218:	01000104 	movi	r4,4
 800b21c:	11000426 	beq	r2,r4,800b230 <__muldf3+0x7a8>
 800b220:	1805883a 	mov	r2,r3
 800b224:	10c00104 	addi	r3,r2,4
 800b228:	1885803a 	cmpltu	r2,r3,r2
 800b22c:	88a3883a 	add	r17,r17,r2
 800b230:	8880202c 	andhi	r2,r17,128
 800b234:	10001c26 	beq	r2,zero,800b2a8 <__muldf3+0x820>
 800b238:	3027883a 	mov	r19,r6
 800b23c:	00800044 	movi	r2,1
 800b240:	0021883a 	mov	r16,zero
 800b244:	002d883a 	mov	r22,zero
 800b248:	003e6e06 	br	800ac04 <__alt_data_end+0xfc00ac04>
 800b24c:	4007883a 	mov	r3,r8
 800b250:	003f9706 	br	800b0b0 <__alt_data_end+0xfc00b0b0>
 800b254:	017ff844 	movi	r5,-31
 800b258:	2885c83a 	sub	r2,r5,r2
 800b25c:	888ad83a 	srl	r5,r17,r2
 800b260:	00800804 	movi	r2,32
 800b264:	18801a26 	beq	r3,r2,800b2d0 <__muldf3+0x848>
 800b268:	01001004 	movi	r4,64
 800b26c:	20c7c83a 	sub	r3,r4,r3
 800b270:	88e2983a 	sll	r17,r17,r3
 800b274:	8ca4b03a 	or	r18,r17,r18
 800b278:	9004c03a 	cmpne	r2,r18,zero
 800b27c:	2884b03a 	or	r2,r5,r2
 800b280:	144001cc 	andi	r17,r2,7
 800b284:	88000d1e 	bne	r17,zero,800b2bc <__muldf3+0x834>
 800b288:	0021883a 	mov	r16,zero
 800b28c:	102cd0fa 	srli	r22,r2,3
 800b290:	3027883a 	mov	r19,r6
 800b294:	0005883a 	mov	r2,zero
 800b298:	b46cb03a 	or	r22,r22,r17
 800b29c:	003e5906 	br	800ac04 <__alt_data_end+0xfc00ac04>
 800b2a0:	1007883a 	mov	r3,r2
 800b2a4:	0023883a 	mov	r17,zero
 800b2a8:	8820927a 	slli	r16,r17,9
 800b2ac:	1805883a 	mov	r2,r3
 800b2b0:	8822977a 	slli	r17,r17,29
 800b2b4:	8020d33a 	srli	r16,r16,12
 800b2b8:	003ff406 	br	800b28c <__alt_data_end+0xfc00b28c>
 800b2bc:	10c003cc 	andi	r3,r2,15
 800b2c0:	01000104 	movi	r4,4
 800b2c4:	193ff626 	beq	r3,r4,800b2a0 <__alt_data_end+0xfc00b2a0>
 800b2c8:	0023883a 	mov	r17,zero
 800b2cc:	003fd506 	br	800b224 <__alt_data_end+0xfc00b224>
 800b2d0:	0023883a 	mov	r17,zero
 800b2d4:	003fe706 	br	800b274 <__alt_data_end+0xfc00b274>
 800b2d8:	00800434 	movhi	r2,16
 800b2dc:	8c000234 	orhi	r16,r17,8
 800b2e0:	10bfffc4 	addi	r2,r2,-1
 800b2e4:	3027883a 	mov	r19,r6
 800b2e8:	80a0703a 	and	r16,r16,r2
 800b2ec:	902d883a 	mov	r22,r18
 800b2f0:	003eac06 	br	800ada4 <__alt_data_end+0xfc00ada4>

0800b2f4 <__subdf3>:
 800b2f4:	02000434 	movhi	r8,16
 800b2f8:	423fffc4 	addi	r8,r8,-1
 800b2fc:	defffb04 	addi	sp,sp,-20
 800b300:	2a14703a 	and	r10,r5,r8
 800b304:	3812d53a 	srli	r9,r7,20
 800b308:	3a10703a 	and	r8,r7,r8
 800b30c:	2006d77a 	srli	r3,r4,29
 800b310:	3004d77a 	srli	r2,r6,29
 800b314:	dc000015 	stw	r16,0(sp)
 800b318:	501490fa 	slli	r10,r10,3
 800b31c:	2820d53a 	srli	r16,r5,20
 800b320:	401090fa 	slli	r8,r8,3
 800b324:	dc800215 	stw	r18,8(sp)
 800b328:	dc400115 	stw	r17,4(sp)
 800b32c:	dfc00415 	stw	ra,16(sp)
 800b330:	202290fa 	slli	r17,r4,3
 800b334:	dcc00315 	stw	r19,12(sp)
 800b338:	4a41ffcc 	andi	r9,r9,2047
 800b33c:	0101ffc4 	movi	r4,2047
 800b340:	2824d7fa 	srli	r18,r5,31
 800b344:	8401ffcc 	andi	r16,r16,2047
 800b348:	50c6b03a 	or	r3,r10,r3
 800b34c:	380ed7fa 	srli	r7,r7,31
 800b350:	408ab03a 	or	r5,r8,r2
 800b354:	300c90fa 	slli	r6,r6,3
 800b358:	49009626 	beq	r9,r4,800b5b4 <__subdf3+0x2c0>
 800b35c:	39c0005c 	xori	r7,r7,1
 800b360:	8245c83a 	sub	r2,r16,r9
 800b364:	3c807426 	beq	r7,r18,800b538 <__subdf3+0x244>
 800b368:	0080af0e 	bge	zero,r2,800b628 <__subdf3+0x334>
 800b36c:	48002a1e 	bne	r9,zero,800b418 <__subdf3+0x124>
 800b370:	2988b03a 	or	r4,r5,r6
 800b374:	20009a1e 	bne	r4,zero,800b5e0 <__subdf3+0x2ec>
 800b378:	888001cc 	andi	r2,r17,7
 800b37c:	10000726 	beq	r2,zero,800b39c <__subdf3+0xa8>
 800b380:	888003cc 	andi	r2,r17,15
 800b384:	01000104 	movi	r4,4
 800b388:	11000426 	beq	r2,r4,800b39c <__subdf3+0xa8>
 800b38c:	890b883a 	add	r5,r17,r4
 800b390:	2c63803a 	cmpltu	r17,r5,r17
 800b394:	1c47883a 	add	r3,r3,r17
 800b398:	2823883a 	mov	r17,r5
 800b39c:	1880202c 	andhi	r2,r3,128
 800b3a0:	10005926 	beq	r2,zero,800b508 <__subdf3+0x214>
 800b3a4:	84000044 	addi	r16,r16,1
 800b3a8:	0081ffc4 	movi	r2,2047
 800b3ac:	8080be26 	beq	r16,r2,800b6a8 <__subdf3+0x3b4>
 800b3b0:	017fe034 	movhi	r5,65408
 800b3b4:	297fffc4 	addi	r5,r5,-1
 800b3b8:	1946703a 	and	r3,r3,r5
 800b3bc:	1804977a 	slli	r2,r3,29
 800b3c0:	1806927a 	slli	r3,r3,9
 800b3c4:	8822d0fa 	srli	r17,r17,3
 800b3c8:	8401ffcc 	andi	r16,r16,2047
 800b3cc:	180ad33a 	srli	r5,r3,12
 800b3d0:	9100004c 	andi	r4,r18,1
 800b3d4:	1444b03a 	or	r2,r2,r17
 800b3d8:	80c1ffcc 	andi	r3,r16,2047
 800b3dc:	1820953a 	slli	r16,r3,20
 800b3e0:	20c03fcc 	andi	r3,r4,255
 800b3e4:	180897fa 	slli	r4,r3,31
 800b3e8:	00c00434 	movhi	r3,16
 800b3ec:	18ffffc4 	addi	r3,r3,-1
 800b3f0:	28c6703a 	and	r3,r5,r3
 800b3f4:	1c06b03a 	or	r3,r3,r16
 800b3f8:	1906b03a 	or	r3,r3,r4
 800b3fc:	dfc00417 	ldw	ra,16(sp)
 800b400:	dcc00317 	ldw	r19,12(sp)
 800b404:	dc800217 	ldw	r18,8(sp)
 800b408:	dc400117 	ldw	r17,4(sp)
 800b40c:	dc000017 	ldw	r16,0(sp)
 800b410:	dec00504 	addi	sp,sp,20
 800b414:	f800283a 	ret
 800b418:	0101ffc4 	movi	r4,2047
 800b41c:	813fd626 	beq	r16,r4,800b378 <__alt_data_end+0xfc00b378>
 800b420:	29402034 	orhi	r5,r5,128
 800b424:	01000e04 	movi	r4,56
 800b428:	2080a316 	blt	r4,r2,800b6b8 <__subdf3+0x3c4>
 800b42c:	010007c4 	movi	r4,31
 800b430:	2080c616 	blt	r4,r2,800b74c <__subdf3+0x458>
 800b434:	01000804 	movi	r4,32
 800b438:	2089c83a 	sub	r4,r4,r2
 800b43c:	2910983a 	sll	r8,r5,r4
 800b440:	308ed83a 	srl	r7,r6,r2
 800b444:	3108983a 	sll	r4,r6,r4
 800b448:	2884d83a 	srl	r2,r5,r2
 800b44c:	41ccb03a 	or	r6,r8,r7
 800b450:	2008c03a 	cmpne	r4,r4,zero
 800b454:	310cb03a 	or	r6,r6,r4
 800b458:	898dc83a 	sub	r6,r17,r6
 800b45c:	89a3803a 	cmpltu	r17,r17,r6
 800b460:	1887c83a 	sub	r3,r3,r2
 800b464:	1c47c83a 	sub	r3,r3,r17
 800b468:	3023883a 	mov	r17,r6
 800b46c:	1880202c 	andhi	r2,r3,128
 800b470:	10002326 	beq	r2,zero,800b500 <__subdf3+0x20c>
 800b474:	04c02034 	movhi	r19,128
 800b478:	9cffffc4 	addi	r19,r19,-1
 800b47c:	1ce6703a 	and	r19,r3,r19
 800b480:	98007a26 	beq	r19,zero,800b66c <__subdf3+0x378>
 800b484:	9809883a 	mov	r4,r19
 800b488:	800bdf40 	call	800bdf4 <__clzsi2>
 800b48c:	113ffe04 	addi	r4,r2,-8
 800b490:	00c007c4 	movi	r3,31
 800b494:	19007b16 	blt	r3,r4,800b684 <__subdf3+0x390>
 800b498:	00800804 	movi	r2,32
 800b49c:	1105c83a 	sub	r2,r2,r4
 800b4a0:	8884d83a 	srl	r2,r17,r2
 800b4a4:	9906983a 	sll	r3,r19,r4
 800b4a8:	8922983a 	sll	r17,r17,r4
 800b4ac:	10c4b03a 	or	r2,r2,r3
 800b4b0:	24007816 	blt	r4,r16,800b694 <__subdf3+0x3a0>
 800b4b4:	2421c83a 	sub	r16,r4,r16
 800b4b8:	80c00044 	addi	r3,r16,1
 800b4bc:	010007c4 	movi	r4,31
 800b4c0:	20c09516 	blt	r4,r3,800b718 <__subdf3+0x424>
 800b4c4:	01400804 	movi	r5,32
 800b4c8:	28cbc83a 	sub	r5,r5,r3
 800b4cc:	88c8d83a 	srl	r4,r17,r3
 800b4d0:	8962983a 	sll	r17,r17,r5
 800b4d4:	114a983a 	sll	r5,r2,r5
 800b4d8:	10c6d83a 	srl	r3,r2,r3
 800b4dc:	8804c03a 	cmpne	r2,r17,zero
 800b4e0:	290ab03a 	or	r5,r5,r4
 800b4e4:	28a2b03a 	or	r17,r5,r2
 800b4e8:	0021883a 	mov	r16,zero
 800b4ec:	003fa206 	br	800b378 <__alt_data_end+0xfc00b378>
 800b4f0:	2090b03a 	or	r8,r4,r2
 800b4f4:	40018e26 	beq	r8,zero,800bb30 <__subdf3+0x83c>
 800b4f8:	1007883a 	mov	r3,r2
 800b4fc:	2023883a 	mov	r17,r4
 800b500:	888001cc 	andi	r2,r17,7
 800b504:	103f9e1e 	bne	r2,zero,800b380 <__alt_data_end+0xfc00b380>
 800b508:	1804977a 	slli	r2,r3,29
 800b50c:	8822d0fa 	srli	r17,r17,3
 800b510:	1810d0fa 	srli	r8,r3,3
 800b514:	9100004c 	andi	r4,r18,1
 800b518:	1444b03a 	or	r2,r2,r17
 800b51c:	00c1ffc4 	movi	r3,2047
 800b520:	80c02826 	beq	r16,r3,800b5c4 <__subdf3+0x2d0>
 800b524:	01400434 	movhi	r5,16
 800b528:	297fffc4 	addi	r5,r5,-1
 800b52c:	80e0703a 	and	r16,r16,r3
 800b530:	414a703a 	and	r5,r8,r5
 800b534:	003fa806 	br	800b3d8 <__alt_data_end+0xfc00b3d8>
 800b538:	0080630e 	bge	zero,r2,800b6c8 <__subdf3+0x3d4>
 800b53c:	48003026 	beq	r9,zero,800b600 <__subdf3+0x30c>
 800b540:	0101ffc4 	movi	r4,2047
 800b544:	813f8c26 	beq	r16,r4,800b378 <__alt_data_end+0xfc00b378>
 800b548:	29402034 	orhi	r5,r5,128
 800b54c:	01000e04 	movi	r4,56
 800b550:	2080a90e 	bge	r4,r2,800b7f8 <__subdf3+0x504>
 800b554:	298cb03a 	or	r6,r5,r6
 800b558:	3012c03a 	cmpne	r9,r6,zero
 800b55c:	0005883a 	mov	r2,zero
 800b560:	4c53883a 	add	r9,r9,r17
 800b564:	4c63803a 	cmpltu	r17,r9,r17
 800b568:	10c7883a 	add	r3,r2,r3
 800b56c:	88c7883a 	add	r3,r17,r3
 800b570:	4823883a 	mov	r17,r9
 800b574:	1880202c 	andhi	r2,r3,128
 800b578:	1000d026 	beq	r2,zero,800b8bc <__subdf3+0x5c8>
 800b57c:	84000044 	addi	r16,r16,1
 800b580:	0081ffc4 	movi	r2,2047
 800b584:	8080fe26 	beq	r16,r2,800b980 <__subdf3+0x68c>
 800b588:	00bfe034 	movhi	r2,65408
 800b58c:	10bfffc4 	addi	r2,r2,-1
 800b590:	1886703a 	and	r3,r3,r2
 800b594:	880ad07a 	srli	r5,r17,1
 800b598:	180497fa 	slli	r2,r3,31
 800b59c:	8900004c 	andi	r4,r17,1
 800b5a0:	2922b03a 	or	r17,r5,r4
 800b5a4:	1806d07a 	srli	r3,r3,1
 800b5a8:	1462b03a 	or	r17,r2,r17
 800b5ac:	3825883a 	mov	r18,r7
 800b5b0:	003f7106 	br	800b378 <__alt_data_end+0xfc00b378>
 800b5b4:	2984b03a 	or	r2,r5,r6
 800b5b8:	103f6826 	beq	r2,zero,800b35c <__alt_data_end+0xfc00b35c>
 800b5bc:	39c03fcc 	andi	r7,r7,255
 800b5c0:	003f6706 	br	800b360 <__alt_data_end+0xfc00b360>
 800b5c4:	4086b03a 	or	r3,r8,r2
 800b5c8:	18015226 	beq	r3,zero,800bb14 <__subdf3+0x820>
 800b5cc:	00c00434 	movhi	r3,16
 800b5d0:	41400234 	orhi	r5,r8,8
 800b5d4:	18ffffc4 	addi	r3,r3,-1
 800b5d8:	28ca703a 	and	r5,r5,r3
 800b5dc:	003f7e06 	br	800b3d8 <__alt_data_end+0xfc00b3d8>
 800b5e0:	10bfffc4 	addi	r2,r2,-1
 800b5e4:	1000491e 	bne	r2,zero,800b70c <__subdf3+0x418>
 800b5e8:	898fc83a 	sub	r7,r17,r6
 800b5ec:	89e3803a 	cmpltu	r17,r17,r7
 800b5f0:	1947c83a 	sub	r3,r3,r5
 800b5f4:	1c47c83a 	sub	r3,r3,r17
 800b5f8:	3823883a 	mov	r17,r7
 800b5fc:	003f9b06 	br	800b46c <__alt_data_end+0xfc00b46c>
 800b600:	2988b03a 	or	r4,r5,r6
 800b604:	203f5c26 	beq	r4,zero,800b378 <__alt_data_end+0xfc00b378>
 800b608:	10bfffc4 	addi	r2,r2,-1
 800b60c:	1000931e 	bne	r2,zero,800b85c <__subdf3+0x568>
 800b610:	898d883a 	add	r6,r17,r6
 800b614:	3463803a 	cmpltu	r17,r6,r17
 800b618:	1947883a 	add	r3,r3,r5
 800b61c:	88c7883a 	add	r3,r17,r3
 800b620:	3023883a 	mov	r17,r6
 800b624:	003fd306 	br	800b574 <__alt_data_end+0xfc00b574>
 800b628:	1000541e 	bne	r2,zero,800b77c <__subdf3+0x488>
 800b62c:	80800044 	addi	r2,r16,1
 800b630:	1081ffcc 	andi	r2,r2,2047
 800b634:	01000044 	movi	r4,1
 800b638:	2080a20e 	bge	r4,r2,800b8c4 <__subdf3+0x5d0>
 800b63c:	8989c83a 	sub	r4,r17,r6
 800b640:	8905803a 	cmpltu	r2,r17,r4
 800b644:	1967c83a 	sub	r19,r3,r5
 800b648:	98a7c83a 	sub	r19,r19,r2
 800b64c:	9880202c 	andhi	r2,r19,128
 800b650:	10006326 	beq	r2,zero,800b7e0 <__subdf3+0x4ec>
 800b654:	3463c83a 	sub	r17,r6,r17
 800b658:	28c7c83a 	sub	r3,r5,r3
 800b65c:	344d803a 	cmpltu	r6,r6,r17
 800b660:	19a7c83a 	sub	r19,r3,r6
 800b664:	3825883a 	mov	r18,r7
 800b668:	983f861e 	bne	r19,zero,800b484 <__alt_data_end+0xfc00b484>
 800b66c:	8809883a 	mov	r4,r17
 800b670:	800bdf40 	call	800bdf4 <__clzsi2>
 800b674:	10800804 	addi	r2,r2,32
 800b678:	113ffe04 	addi	r4,r2,-8
 800b67c:	00c007c4 	movi	r3,31
 800b680:	193f850e 	bge	r3,r4,800b498 <__alt_data_end+0xfc00b498>
 800b684:	10bff604 	addi	r2,r2,-40
 800b688:	8884983a 	sll	r2,r17,r2
 800b68c:	0023883a 	mov	r17,zero
 800b690:	243f880e 	bge	r4,r16,800b4b4 <__alt_data_end+0xfc00b4b4>
 800b694:	00ffe034 	movhi	r3,65408
 800b698:	18ffffc4 	addi	r3,r3,-1
 800b69c:	8121c83a 	sub	r16,r16,r4
 800b6a0:	10c6703a 	and	r3,r2,r3
 800b6a4:	003f3406 	br	800b378 <__alt_data_end+0xfc00b378>
 800b6a8:	9100004c 	andi	r4,r18,1
 800b6ac:	000b883a 	mov	r5,zero
 800b6b0:	0005883a 	mov	r2,zero
 800b6b4:	003f4806 	br	800b3d8 <__alt_data_end+0xfc00b3d8>
 800b6b8:	298cb03a 	or	r6,r5,r6
 800b6bc:	300cc03a 	cmpne	r6,r6,zero
 800b6c0:	0005883a 	mov	r2,zero
 800b6c4:	003f6406 	br	800b458 <__alt_data_end+0xfc00b458>
 800b6c8:	10009a1e 	bne	r2,zero,800b934 <__subdf3+0x640>
 800b6cc:	82400044 	addi	r9,r16,1
 800b6d0:	4881ffcc 	andi	r2,r9,2047
 800b6d4:	02800044 	movi	r10,1
 800b6d8:	5080670e 	bge	r10,r2,800b878 <__subdf3+0x584>
 800b6dc:	0081ffc4 	movi	r2,2047
 800b6e0:	4880af26 	beq	r9,r2,800b9a0 <__subdf3+0x6ac>
 800b6e4:	898d883a 	add	r6,r17,r6
 800b6e8:	1945883a 	add	r2,r3,r5
 800b6ec:	3447803a 	cmpltu	r3,r6,r17
 800b6f0:	1887883a 	add	r3,r3,r2
 800b6f4:	182297fa 	slli	r17,r3,31
 800b6f8:	300cd07a 	srli	r6,r6,1
 800b6fc:	1806d07a 	srli	r3,r3,1
 800b700:	4821883a 	mov	r16,r9
 800b704:	89a2b03a 	or	r17,r17,r6
 800b708:	003f1b06 	br	800b378 <__alt_data_end+0xfc00b378>
 800b70c:	0101ffc4 	movi	r4,2047
 800b710:	813f441e 	bne	r16,r4,800b424 <__alt_data_end+0xfc00b424>
 800b714:	003f1806 	br	800b378 <__alt_data_end+0xfc00b378>
 800b718:	843ff844 	addi	r16,r16,-31
 800b71c:	01400804 	movi	r5,32
 800b720:	1408d83a 	srl	r4,r2,r16
 800b724:	19405026 	beq	r3,r5,800b868 <__subdf3+0x574>
 800b728:	01401004 	movi	r5,64
 800b72c:	28c7c83a 	sub	r3,r5,r3
 800b730:	10c4983a 	sll	r2,r2,r3
 800b734:	88a2b03a 	or	r17,r17,r2
 800b738:	8822c03a 	cmpne	r17,r17,zero
 800b73c:	2462b03a 	or	r17,r4,r17
 800b740:	0007883a 	mov	r3,zero
 800b744:	0021883a 	mov	r16,zero
 800b748:	003f6d06 	br	800b500 <__alt_data_end+0xfc00b500>
 800b74c:	11fff804 	addi	r7,r2,-32
 800b750:	01000804 	movi	r4,32
 800b754:	29ced83a 	srl	r7,r5,r7
 800b758:	11004526 	beq	r2,r4,800b870 <__subdf3+0x57c>
 800b75c:	01001004 	movi	r4,64
 800b760:	2089c83a 	sub	r4,r4,r2
 800b764:	2904983a 	sll	r2,r5,r4
 800b768:	118cb03a 	or	r6,r2,r6
 800b76c:	300cc03a 	cmpne	r6,r6,zero
 800b770:	398cb03a 	or	r6,r7,r6
 800b774:	0005883a 	mov	r2,zero
 800b778:	003f3706 	br	800b458 <__alt_data_end+0xfc00b458>
 800b77c:	80002a26 	beq	r16,zero,800b828 <__subdf3+0x534>
 800b780:	0101ffc4 	movi	r4,2047
 800b784:	49006626 	beq	r9,r4,800b920 <__subdf3+0x62c>
 800b788:	0085c83a 	sub	r2,zero,r2
 800b78c:	18c02034 	orhi	r3,r3,128
 800b790:	01000e04 	movi	r4,56
 800b794:	20807e16 	blt	r4,r2,800b990 <__subdf3+0x69c>
 800b798:	010007c4 	movi	r4,31
 800b79c:	2080e716 	blt	r4,r2,800bb3c <__subdf3+0x848>
 800b7a0:	01000804 	movi	r4,32
 800b7a4:	2089c83a 	sub	r4,r4,r2
 800b7a8:	1914983a 	sll	r10,r3,r4
 800b7ac:	8890d83a 	srl	r8,r17,r2
 800b7b0:	8908983a 	sll	r4,r17,r4
 800b7b4:	1884d83a 	srl	r2,r3,r2
 800b7b8:	5222b03a 	or	r17,r10,r8
 800b7bc:	2006c03a 	cmpne	r3,r4,zero
 800b7c0:	88e2b03a 	or	r17,r17,r3
 800b7c4:	3463c83a 	sub	r17,r6,r17
 800b7c8:	2885c83a 	sub	r2,r5,r2
 800b7cc:	344d803a 	cmpltu	r6,r6,r17
 800b7d0:	1187c83a 	sub	r3,r2,r6
 800b7d4:	4821883a 	mov	r16,r9
 800b7d8:	3825883a 	mov	r18,r7
 800b7dc:	003f2306 	br	800b46c <__alt_data_end+0xfc00b46c>
 800b7e0:	24d0b03a 	or	r8,r4,r19
 800b7e4:	40001b1e 	bne	r8,zero,800b854 <__subdf3+0x560>
 800b7e8:	0005883a 	mov	r2,zero
 800b7ec:	0009883a 	mov	r4,zero
 800b7f0:	0021883a 	mov	r16,zero
 800b7f4:	003f4906 	br	800b51c <__alt_data_end+0xfc00b51c>
 800b7f8:	010007c4 	movi	r4,31
 800b7fc:	20803a16 	blt	r4,r2,800b8e8 <__subdf3+0x5f4>
 800b800:	01000804 	movi	r4,32
 800b804:	2089c83a 	sub	r4,r4,r2
 800b808:	2912983a 	sll	r9,r5,r4
 800b80c:	3090d83a 	srl	r8,r6,r2
 800b810:	3108983a 	sll	r4,r6,r4
 800b814:	2884d83a 	srl	r2,r5,r2
 800b818:	4a12b03a 	or	r9,r9,r8
 800b81c:	2008c03a 	cmpne	r4,r4,zero
 800b820:	4912b03a 	or	r9,r9,r4
 800b824:	003f4e06 	br	800b560 <__alt_data_end+0xfc00b560>
 800b828:	1c48b03a 	or	r4,r3,r17
 800b82c:	20003c26 	beq	r4,zero,800b920 <__subdf3+0x62c>
 800b830:	0084303a 	nor	r2,zero,r2
 800b834:	1000381e 	bne	r2,zero,800b918 <__subdf3+0x624>
 800b838:	3463c83a 	sub	r17,r6,r17
 800b83c:	28c5c83a 	sub	r2,r5,r3
 800b840:	344d803a 	cmpltu	r6,r6,r17
 800b844:	1187c83a 	sub	r3,r2,r6
 800b848:	4821883a 	mov	r16,r9
 800b84c:	3825883a 	mov	r18,r7
 800b850:	003f0606 	br	800b46c <__alt_data_end+0xfc00b46c>
 800b854:	2023883a 	mov	r17,r4
 800b858:	003f0906 	br	800b480 <__alt_data_end+0xfc00b480>
 800b85c:	0101ffc4 	movi	r4,2047
 800b860:	813f3a1e 	bne	r16,r4,800b54c <__alt_data_end+0xfc00b54c>
 800b864:	003ec406 	br	800b378 <__alt_data_end+0xfc00b378>
 800b868:	0005883a 	mov	r2,zero
 800b86c:	003fb106 	br	800b734 <__alt_data_end+0xfc00b734>
 800b870:	0005883a 	mov	r2,zero
 800b874:	003fbc06 	br	800b768 <__alt_data_end+0xfc00b768>
 800b878:	1c44b03a 	or	r2,r3,r17
 800b87c:	80008e1e 	bne	r16,zero,800bab8 <__subdf3+0x7c4>
 800b880:	1000c826 	beq	r2,zero,800bba4 <__subdf3+0x8b0>
 800b884:	2984b03a 	or	r2,r5,r6
 800b888:	103ebb26 	beq	r2,zero,800b378 <__alt_data_end+0xfc00b378>
 800b88c:	8989883a 	add	r4,r17,r6
 800b890:	1945883a 	add	r2,r3,r5
 800b894:	2447803a 	cmpltu	r3,r4,r17
 800b898:	1887883a 	add	r3,r3,r2
 800b89c:	1880202c 	andhi	r2,r3,128
 800b8a0:	2023883a 	mov	r17,r4
 800b8a4:	103f1626 	beq	r2,zero,800b500 <__alt_data_end+0xfc00b500>
 800b8a8:	00bfe034 	movhi	r2,65408
 800b8ac:	10bfffc4 	addi	r2,r2,-1
 800b8b0:	5021883a 	mov	r16,r10
 800b8b4:	1886703a 	and	r3,r3,r2
 800b8b8:	003eaf06 	br	800b378 <__alt_data_end+0xfc00b378>
 800b8bc:	3825883a 	mov	r18,r7
 800b8c0:	003f0f06 	br	800b500 <__alt_data_end+0xfc00b500>
 800b8c4:	1c44b03a 	or	r2,r3,r17
 800b8c8:	8000251e 	bne	r16,zero,800b960 <__subdf3+0x66c>
 800b8cc:	1000661e 	bne	r2,zero,800ba68 <__subdf3+0x774>
 800b8d0:	2990b03a 	or	r8,r5,r6
 800b8d4:	40009626 	beq	r8,zero,800bb30 <__subdf3+0x83c>
 800b8d8:	2807883a 	mov	r3,r5
 800b8dc:	3023883a 	mov	r17,r6
 800b8e0:	3825883a 	mov	r18,r7
 800b8e4:	003ea406 	br	800b378 <__alt_data_end+0xfc00b378>
 800b8e8:	127ff804 	addi	r9,r2,-32
 800b8ec:	01000804 	movi	r4,32
 800b8f0:	2a52d83a 	srl	r9,r5,r9
 800b8f4:	11008c26 	beq	r2,r4,800bb28 <__subdf3+0x834>
 800b8f8:	01001004 	movi	r4,64
 800b8fc:	2085c83a 	sub	r2,r4,r2
 800b900:	2884983a 	sll	r2,r5,r2
 800b904:	118cb03a 	or	r6,r2,r6
 800b908:	300cc03a 	cmpne	r6,r6,zero
 800b90c:	4992b03a 	or	r9,r9,r6
 800b910:	0005883a 	mov	r2,zero
 800b914:	003f1206 	br	800b560 <__alt_data_end+0xfc00b560>
 800b918:	0101ffc4 	movi	r4,2047
 800b91c:	493f9c1e 	bne	r9,r4,800b790 <__alt_data_end+0xfc00b790>
 800b920:	2807883a 	mov	r3,r5
 800b924:	3023883a 	mov	r17,r6
 800b928:	4821883a 	mov	r16,r9
 800b92c:	3825883a 	mov	r18,r7
 800b930:	003e9106 	br	800b378 <__alt_data_end+0xfc00b378>
 800b934:	80001f1e 	bne	r16,zero,800b9b4 <__subdf3+0x6c0>
 800b938:	1c48b03a 	or	r4,r3,r17
 800b93c:	20005a26 	beq	r4,zero,800baa8 <__subdf3+0x7b4>
 800b940:	0084303a 	nor	r2,zero,r2
 800b944:	1000561e 	bne	r2,zero,800baa0 <__subdf3+0x7ac>
 800b948:	89a3883a 	add	r17,r17,r6
 800b94c:	1945883a 	add	r2,r3,r5
 800b950:	898d803a 	cmpltu	r6,r17,r6
 800b954:	3087883a 	add	r3,r6,r2
 800b958:	4821883a 	mov	r16,r9
 800b95c:	003f0506 	br	800b574 <__alt_data_end+0xfc00b574>
 800b960:	10002b1e 	bne	r2,zero,800ba10 <__subdf3+0x71c>
 800b964:	2984b03a 	or	r2,r5,r6
 800b968:	10008026 	beq	r2,zero,800bb6c <__subdf3+0x878>
 800b96c:	2807883a 	mov	r3,r5
 800b970:	3023883a 	mov	r17,r6
 800b974:	3825883a 	mov	r18,r7
 800b978:	0401ffc4 	movi	r16,2047
 800b97c:	003e7e06 	br	800b378 <__alt_data_end+0xfc00b378>
 800b980:	3809883a 	mov	r4,r7
 800b984:	0011883a 	mov	r8,zero
 800b988:	0005883a 	mov	r2,zero
 800b98c:	003ee306 	br	800b51c <__alt_data_end+0xfc00b51c>
 800b990:	1c62b03a 	or	r17,r3,r17
 800b994:	8822c03a 	cmpne	r17,r17,zero
 800b998:	0005883a 	mov	r2,zero
 800b99c:	003f8906 	br	800b7c4 <__alt_data_end+0xfc00b7c4>
 800b9a0:	3809883a 	mov	r4,r7
 800b9a4:	4821883a 	mov	r16,r9
 800b9a8:	0011883a 	mov	r8,zero
 800b9ac:	0005883a 	mov	r2,zero
 800b9b0:	003eda06 	br	800b51c <__alt_data_end+0xfc00b51c>
 800b9b4:	0101ffc4 	movi	r4,2047
 800b9b8:	49003b26 	beq	r9,r4,800baa8 <__subdf3+0x7b4>
 800b9bc:	0085c83a 	sub	r2,zero,r2
 800b9c0:	18c02034 	orhi	r3,r3,128
 800b9c4:	01000e04 	movi	r4,56
 800b9c8:	20806e16 	blt	r4,r2,800bb84 <__subdf3+0x890>
 800b9cc:	010007c4 	movi	r4,31
 800b9d0:	20807716 	blt	r4,r2,800bbb0 <__subdf3+0x8bc>
 800b9d4:	01000804 	movi	r4,32
 800b9d8:	2089c83a 	sub	r4,r4,r2
 800b9dc:	1914983a 	sll	r10,r3,r4
 800b9e0:	8890d83a 	srl	r8,r17,r2
 800b9e4:	8908983a 	sll	r4,r17,r4
 800b9e8:	1884d83a 	srl	r2,r3,r2
 800b9ec:	5222b03a 	or	r17,r10,r8
 800b9f0:	2006c03a 	cmpne	r3,r4,zero
 800b9f4:	88e2b03a 	or	r17,r17,r3
 800b9f8:	89a3883a 	add	r17,r17,r6
 800b9fc:	1145883a 	add	r2,r2,r5
 800ba00:	898d803a 	cmpltu	r6,r17,r6
 800ba04:	3087883a 	add	r3,r6,r2
 800ba08:	4821883a 	mov	r16,r9
 800ba0c:	003ed906 	br	800b574 <__alt_data_end+0xfc00b574>
 800ba10:	2984b03a 	or	r2,r5,r6
 800ba14:	10004226 	beq	r2,zero,800bb20 <__subdf3+0x82c>
 800ba18:	1808d0fa 	srli	r4,r3,3
 800ba1c:	8822d0fa 	srli	r17,r17,3
 800ba20:	1806977a 	slli	r3,r3,29
 800ba24:	2080022c 	andhi	r2,r4,8
 800ba28:	1c62b03a 	or	r17,r3,r17
 800ba2c:	10000826 	beq	r2,zero,800ba50 <__subdf3+0x75c>
 800ba30:	2812d0fa 	srli	r9,r5,3
 800ba34:	4880022c 	andhi	r2,r9,8
 800ba38:	1000051e 	bne	r2,zero,800ba50 <__subdf3+0x75c>
 800ba3c:	300cd0fa 	srli	r6,r6,3
 800ba40:	2804977a 	slli	r2,r5,29
 800ba44:	4809883a 	mov	r4,r9
 800ba48:	3825883a 	mov	r18,r7
 800ba4c:	11a2b03a 	or	r17,r2,r6
 800ba50:	8806d77a 	srli	r3,r17,29
 800ba54:	200890fa 	slli	r4,r4,3
 800ba58:	882290fa 	slli	r17,r17,3
 800ba5c:	0401ffc4 	movi	r16,2047
 800ba60:	1906b03a 	or	r3,r3,r4
 800ba64:	003e4406 	br	800b378 <__alt_data_end+0xfc00b378>
 800ba68:	2984b03a 	or	r2,r5,r6
 800ba6c:	103e4226 	beq	r2,zero,800b378 <__alt_data_end+0xfc00b378>
 800ba70:	8989c83a 	sub	r4,r17,r6
 800ba74:	8911803a 	cmpltu	r8,r17,r4
 800ba78:	1945c83a 	sub	r2,r3,r5
 800ba7c:	1205c83a 	sub	r2,r2,r8
 800ba80:	1200202c 	andhi	r8,r2,128
 800ba84:	403e9a26 	beq	r8,zero,800b4f0 <__alt_data_end+0xfc00b4f0>
 800ba88:	3463c83a 	sub	r17,r6,r17
 800ba8c:	28c5c83a 	sub	r2,r5,r3
 800ba90:	344d803a 	cmpltu	r6,r6,r17
 800ba94:	1187c83a 	sub	r3,r2,r6
 800ba98:	3825883a 	mov	r18,r7
 800ba9c:	003e3606 	br	800b378 <__alt_data_end+0xfc00b378>
 800baa0:	0101ffc4 	movi	r4,2047
 800baa4:	493fc71e 	bne	r9,r4,800b9c4 <__alt_data_end+0xfc00b9c4>
 800baa8:	2807883a 	mov	r3,r5
 800baac:	3023883a 	mov	r17,r6
 800bab0:	4821883a 	mov	r16,r9
 800bab4:	003e3006 	br	800b378 <__alt_data_end+0xfc00b378>
 800bab8:	10003626 	beq	r2,zero,800bb94 <__subdf3+0x8a0>
 800babc:	2984b03a 	or	r2,r5,r6
 800bac0:	10001726 	beq	r2,zero,800bb20 <__subdf3+0x82c>
 800bac4:	1808d0fa 	srli	r4,r3,3
 800bac8:	8822d0fa 	srli	r17,r17,3
 800bacc:	1806977a 	slli	r3,r3,29
 800bad0:	2080022c 	andhi	r2,r4,8
 800bad4:	1c62b03a 	or	r17,r3,r17
 800bad8:	10000726 	beq	r2,zero,800baf8 <__subdf3+0x804>
 800badc:	2812d0fa 	srli	r9,r5,3
 800bae0:	4880022c 	andhi	r2,r9,8
 800bae4:	1000041e 	bne	r2,zero,800baf8 <__subdf3+0x804>
 800bae8:	300cd0fa 	srli	r6,r6,3
 800baec:	2804977a 	slli	r2,r5,29
 800baf0:	4809883a 	mov	r4,r9
 800baf4:	11a2b03a 	or	r17,r2,r6
 800baf8:	8806d77a 	srli	r3,r17,29
 800bafc:	200890fa 	slli	r4,r4,3
 800bb00:	882290fa 	slli	r17,r17,3
 800bb04:	3825883a 	mov	r18,r7
 800bb08:	1906b03a 	or	r3,r3,r4
 800bb0c:	0401ffc4 	movi	r16,2047
 800bb10:	003e1906 	br	800b378 <__alt_data_end+0xfc00b378>
 800bb14:	000b883a 	mov	r5,zero
 800bb18:	0005883a 	mov	r2,zero
 800bb1c:	003e2e06 	br	800b3d8 <__alt_data_end+0xfc00b3d8>
 800bb20:	0401ffc4 	movi	r16,2047
 800bb24:	003e1406 	br	800b378 <__alt_data_end+0xfc00b378>
 800bb28:	0005883a 	mov	r2,zero
 800bb2c:	003f7506 	br	800b904 <__alt_data_end+0xfc00b904>
 800bb30:	0005883a 	mov	r2,zero
 800bb34:	0009883a 	mov	r4,zero
 800bb38:	003e7806 	br	800b51c <__alt_data_end+0xfc00b51c>
 800bb3c:	123ff804 	addi	r8,r2,-32
 800bb40:	01000804 	movi	r4,32
 800bb44:	1a10d83a 	srl	r8,r3,r8
 800bb48:	11002526 	beq	r2,r4,800bbe0 <__subdf3+0x8ec>
 800bb4c:	01001004 	movi	r4,64
 800bb50:	2085c83a 	sub	r2,r4,r2
 800bb54:	1884983a 	sll	r2,r3,r2
 800bb58:	1444b03a 	or	r2,r2,r17
 800bb5c:	1004c03a 	cmpne	r2,r2,zero
 800bb60:	40a2b03a 	or	r17,r8,r2
 800bb64:	0005883a 	mov	r2,zero
 800bb68:	003f1606 	br	800b7c4 <__alt_data_end+0xfc00b7c4>
 800bb6c:	02000434 	movhi	r8,16
 800bb70:	0009883a 	mov	r4,zero
 800bb74:	423fffc4 	addi	r8,r8,-1
 800bb78:	00bfffc4 	movi	r2,-1
 800bb7c:	0401ffc4 	movi	r16,2047
 800bb80:	003e6606 	br	800b51c <__alt_data_end+0xfc00b51c>
 800bb84:	1c62b03a 	or	r17,r3,r17
 800bb88:	8822c03a 	cmpne	r17,r17,zero
 800bb8c:	0005883a 	mov	r2,zero
 800bb90:	003f9906 	br	800b9f8 <__alt_data_end+0xfc00b9f8>
 800bb94:	2807883a 	mov	r3,r5
 800bb98:	3023883a 	mov	r17,r6
 800bb9c:	0401ffc4 	movi	r16,2047
 800bba0:	003df506 	br	800b378 <__alt_data_end+0xfc00b378>
 800bba4:	2807883a 	mov	r3,r5
 800bba8:	3023883a 	mov	r17,r6
 800bbac:	003df206 	br	800b378 <__alt_data_end+0xfc00b378>
 800bbb0:	123ff804 	addi	r8,r2,-32
 800bbb4:	01000804 	movi	r4,32
 800bbb8:	1a10d83a 	srl	r8,r3,r8
 800bbbc:	11000a26 	beq	r2,r4,800bbe8 <__subdf3+0x8f4>
 800bbc0:	01001004 	movi	r4,64
 800bbc4:	2085c83a 	sub	r2,r4,r2
 800bbc8:	1884983a 	sll	r2,r3,r2
 800bbcc:	1444b03a 	or	r2,r2,r17
 800bbd0:	1004c03a 	cmpne	r2,r2,zero
 800bbd4:	40a2b03a 	or	r17,r8,r2
 800bbd8:	0005883a 	mov	r2,zero
 800bbdc:	003f8606 	br	800b9f8 <__alt_data_end+0xfc00b9f8>
 800bbe0:	0005883a 	mov	r2,zero
 800bbe4:	003fdc06 	br	800bb58 <__alt_data_end+0xfc00bb58>
 800bbe8:	0005883a 	mov	r2,zero
 800bbec:	003ff706 	br	800bbcc <__alt_data_end+0xfc00bbcc>

0800bbf0 <__fixdfsi>:
 800bbf0:	280cd53a 	srli	r6,r5,20
 800bbf4:	00c00434 	movhi	r3,16
 800bbf8:	18ffffc4 	addi	r3,r3,-1
 800bbfc:	3181ffcc 	andi	r6,r6,2047
 800bc00:	01c0ff84 	movi	r7,1022
 800bc04:	28c6703a 	and	r3,r5,r3
 800bc08:	280ad7fa 	srli	r5,r5,31
 800bc0c:	3980120e 	bge	r7,r6,800bc58 <__fixdfsi+0x68>
 800bc10:	00810744 	movi	r2,1053
 800bc14:	11800c16 	blt	r2,r6,800bc48 <__fixdfsi+0x58>
 800bc18:	00810cc4 	movi	r2,1075
 800bc1c:	1185c83a 	sub	r2,r2,r6
 800bc20:	01c007c4 	movi	r7,31
 800bc24:	18c00434 	orhi	r3,r3,16
 800bc28:	38800d16 	blt	r7,r2,800bc60 <__fixdfsi+0x70>
 800bc2c:	31befb44 	addi	r6,r6,-1043
 800bc30:	2084d83a 	srl	r2,r4,r2
 800bc34:	1986983a 	sll	r3,r3,r6
 800bc38:	1884b03a 	or	r2,r3,r2
 800bc3c:	28000726 	beq	r5,zero,800bc5c <__fixdfsi+0x6c>
 800bc40:	0085c83a 	sub	r2,zero,r2
 800bc44:	f800283a 	ret
 800bc48:	00a00034 	movhi	r2,32768
 800bc4c:	10bfffc4 	addi	r2,r2,-1
 800bc50:	2885883a 	add	r2,r5,r2
 800bc54:	f800283a 	ret
 800bc58:	0005883a 	mov	r2,zero
 800bc5c:	f800283a 	ret
 800bc60:	008104c4 	movi	r2,1043
 800bc64:	1185c83a 	sub	r2,r2,r6
 800bc68:	1884d83a 	srl	r2,r3,r2
 800bc6c:	003ff306 	br	800bc3c <__alt_data_end+0xfc00bc3c>

0800bc70 <__floatsidf>:
 800bc70:	defffd04 	addi	sp,sp,-12
 800bc74:	dfc00215 	stw	ra,8(sp)
 800bc78:	dc400115 	stw	r17,4(sp)
 800bc7c:	dc000015 	stw	r16,0(sp)
 800bc80:	20002b26 	beq	r4,zero,800bd30 <__floatsidf+0xc0>
 800bc84:	2023883a 	mov	r17,r4
 800bc88:	2020d7fa 	srli	r16,r4,31
 800bc8c:	20002d16 	blt	r4,zero,800bd44 <__floatsidf+0xd4>
 800bc90:	8809883a 	mov	r4,r17
 800bc94:	800bdf40 	call	800bdf4 <__clzsi2>
 800bc98:	01410784 	movi	r5,1054
 800bc9c:	288bc83a 	sub	r5,r5,r2
 800bca0:	01010cc4 	movi	r4,1075
 800bca4:	2149c83a 	sub	r4,r4,r5
 800bca8:	00c007c4 	movi	r3,31
 800bcac:	1900160e 	bge	r3,r4,800bd08 <__floatsidf+0x98>
 800bcb0:	00c104c4 	movi	r3,1043
 800bcb4:	1947c83a 	sub	r3,r3,r5
 800bcb8:	88c6983a 	sll	r3,r17,r3
 800bcbc:	00800434 	movhi	r2,16
 800bcc0:	10bfffc4 	addi	r2,r2,-1
 800bcc4:	1886703a 	and	r3,r3,r2
 800bcc8:	2941ffcc 	andi	r5,r5,2047
 800bccc:	800d883a 	mov	r6,r16
 800bcd0:	0005883a 	mov	r2,zero
 800bcd4:	280a953a 	slli	r5,r5,20
 800bcd8:	31803fcc 	andi	r6,r6,255
 800bcdc:	01000434 	movhi	r4,16
 800bce0:	300c97fa 	slli	r6,r6,31
 800bce4:	213fffc4 	addi	r4,r4,-1
 800bce8:	1906703a 	and	r3,r3,r4
 800bcec:	1946b03a 	or	r3,r3,r5
 800bcf0:	1986b03a 	or	r3,r3,r6
 800bcf4:	dfc00217 	ldw	ra,8(sp)
 800bcf8:	dc400117 	ldw	r17,4(sp)
 800bcfc:	dc000017 	ldw	r16,0(sp)
 800bd00:	dec00304 	addi	sp,sp,12
 800bd04:	f800283a 	ret
 800bd08:	00c002c4 	movi	r3,11
 800bd0c:	1887c83a 	sub	r3,r3,r2
 800bd10:	88c6d83a 	srl	r3,r17,r3
 800bd14:	8904983a 	sll	r2,r17,r4
 800bd18:	01000434 	movhi	r4,16
 800bd1c:	213fffc4 	addi	r4,r4,-1
 800bd20:	2941ffcc 	andi	r5,r5,2047
 800bd24:	1906703a 	and	r3,r3,r4
 800bd28:	800d883a 	mov	r6,r16
 800bd2c:	003fe906 	br	800bcd4 <__alt_data_end+0xfc00bcd4>
 800bd30:	000d883a 	mov	r6,zero
 800bd34:	000b883a 	mov	r5,zero
 800bd38:	0007883a 	mov	r3,zero
 800bd3c:	0005883a 	mov	r2,zero
 800bd40:	003fe406 	br	800bcd4 <__alt_data_end+0xfc00bcd4>
 800bd44:	0123c83a 	sub	r17,zero,r4
 800bd48:	003fd106 	br	800bc90 <__alt_data_end+0xfc00bc90>

0800bd4c <__floatunsidf>:
 800bd4c:	defffe04 	addi	sp,sp,-8
 800bd50:	dc000015 	stw	r16,0(sp)
 800bd54:	dfc00115 	stw	ra,4(sp)
 800bd58:	2021883a 	mov	r16,r4
 800bd5c:	20002226 	beq	r4,zero,800bde8 <__floatunsidf+0x9c>
 800bd60:	800bdf40 	call	800bdf4 <__clzsi2>
 800bd64:	01010784 	movi	r4,1054
 800bd68:	2089c83a 	sub	r4,r4,r2
 800bd6c:	01810cc4 	movi	r6,1075
 800bd70:	310dc83a 	sub	r6,r6,r4
 800bd74:	00c007c4 	movi	r3,31
 800bd78:	1980120e 	bge	r3,r6,800bdc4 <__floatunsidf+0x78>
 800bd7c:	00c104c4 	movi	r3,1043
 800bd80:	1907c83a 	sub	r3,r3,r4
 800bd84:	80ca983a 	sll	r5,r16,r3
 800bd88:	00800434 	movhi	r2,16
 800bd8c:	10bfffc4 	addi	r2,r2,-1
 800bd90:	2101ffcc 	andi	r4,r4,2047
 800bd94:	0021883a 	mov	r16,zero
 800bd98:	288a703a 	and	r5,r5,r2
 800bd9c:	2008953a 	slli	r4,r4,20
 800bda0:	00c00434 	movhi	r3,16
 800bda4:	18ffffc4 	addi	r3,r3,-1
 800bda8:	28c6703a 	and	r3,r5,r3
 800bdac:	8005883a 	mov	r2,r16
 800bdb0:	1906b03a 	or	r3,r3,r4
 800bdb4:	dfc00117 	ldw	ra,4(sp)
 800bdb8:	dc000017 	ldw	r16,0(sp)
 800bdbc:	dec00204 	addi	sp,sp,8
 800bdc0:	f800283a 	ret
 800bdc4:	00c002c4 	movi	r3,11
 800bdc8:	188bc83a 	sub	r5,r3,r2
 800bdcc:	814ad83a 	srl	r5,r16,r5
 800bdd0:	00c00434 	movhi	r3,16
 800bdd4:	18ffffc4 	addi	r3,r3,-1
 800bdd8:	81a0983a 	sll	r16,r16,r6
 800bddc:	2101ffcc 	andi	r4,r4,2047
 800bde0:	28ca703a 	and	r5,r5,r3
 800bde4:	003fed06 	br	800bd9c <__alt_data_end+0xfc00bd9c>
 800bde8:	0009883a 	mov	r4,zero
 800bdec:	000b883a 	mov	r5,zero
 800bdf0:	003fea06 	br	800bd9c <__alt_data_end+0xfc00bd9c>

0800bdf4 <__clzsi2>:
 800bdf4:	00bfffd4 	movui	r2,65535
 800bdf8:	11000536 	bltu	r2,r4,800be10 <__clzsi2+0x1c>
 800bdfc:	00803fc4 	movi	r2,255
 800be00:	11000f36 	bltu	r2,r4,800be40 <__clzsi2+0x4c>
 800be04:	00800804 	movi	r2,32
 800be08:	0007883a 	mov	r3,zero
 800be0c:	00000506 	br	800be24 <__clzsi2+0x30>
 800be10:	00804034 	movhi	r2,256
 800be14:	10bfffc4 	addi	r2,r2,-1
 800be18:	11000c2e 	bgeu	r2,r4,800be4c <__clzsi2+0x58>
 800be1c:	00800204 	movi	r2,8
 800be20:	00c00604 	movi	r3,24
 800be24:	20c8d83a 	srl	r4,r4,r3
 800be28:	00c20074 	movhi	r3,2049
 800be2c:	18f90c04 	addi	r3,r3,-7120
 800be30:	1909883a 	add	r4,r3,r4
 800be34:	20c00003 	ldbu	r3,0(r4)
 800be38:	10c5c83a 	sub	r2,r2,r3
 800be3c:	f800283a 	ret
 800be40:	00800604 	movi	r2,24
 800be44:	00c00204 	movi	r3,8
 800be48:	003ff606 	br	800be24 <__alt_data_end+0xfc00be24>
 800be4c:	00800404 	movi	r2,16
 800be50:	1007883a 	mov	r3,r2
 800be54:	003ff306 	br	800be24 <__alt_data_end+0xfc00be24>

0800be58 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800be58:	defffc04 	addi	sp,sp,-16
 800be5c:	df000315 	stw	fp,12(sp)
 800be60:	df000304 	addi	fp,sp,12
 800be64:	e13ffd15 	stw	r4,-12(fp)
 800be68:	e17ffe15 	stw	r5,-8(fp)
 800be6c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800be70:	e0fffe17 	ldw	r3,-8(fp)
 800be74:	e0bffd17 	ldw	r2,-12(fp)
 800be78:	18800c26 	beq	r3,r2,800beac <alt_load_section+0x54>
  {
    while( to != end )
 800be7c:	00000806 	br	800bea0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800be80:	e0bffe17 	ldw	r2,-8(fp)
 800be84:	10c00104 	addi	r3,r2,4
 800be88:	e0fffe15 	stw	r3,-8(fp)
 800be8c:	e0fffd17 	ldw	r3,-12(fp)
 800be90:	19000104 	addi	r4,r3,4
 800be94:	e13ffd15 	stw	r4,-12(fp)
 800be98:	18c00017 	ldw	r3,0(r3)
 800be9c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800bea0:	e0fffe17 	ldw	r3,-8(fp)
 800bea4:	e0bfff17 	ldw	r2,-4(fp)
 800bea8:	18bff51e 	bne	r3,r2,800be80 <__alt_data_end+0xfc00be80>
    {
      *to++ = *from++;
    }
  }
}
 800beac:	0001883a 	nop
 800beb0:	e037883a 	mov	sp,fp
 800beb4:	df000017 	ldw	fp,0(sp)
 800beb8:	dec00104 	addi	sp,sp,4
 800bebc:	f800283a 	ret

0800bec0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800bec0:	defffe04 	addi	sp,sp,-8
 800bec4:	dfc00115 	stw	ra,4(sp)
 800bec8:	df000015 	stw	fp,0(sp)
 800becc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800bed0:	01820074 	movhi	r6,2049
 800bed4:	31812804 	addi	r6,r6,1184
 800bed8:	01420074 	movhi	r5,2049
 800bedc:	29795704 	addi	r5,r5,-6820
 800bee0:	01020074 	movhi	r4,2049
 800bee4:	21012804 	addi	r4,r4,1184
 800bee8:	800be580 	call	800be58 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800beec:	01820034 	movhi	r6,2048
 800bef0:	31808c04 	addi	r6,r6,560
 800bef4:	01420034 	movhi	r5,2048
 800bef8:	29400804 	addi	r5,r5,32
 800befc:	01020034 	movhi	r4,2048
 800bf00:	21000804 	addi	r4,r4,32
 800bf04:	800be580 	call	800be58 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800bf08:	01820074 	movhi	r6,2049
 800bf0c:	31b95704 	addi	r6,r6,-6820
 800bf10:	01420074 	movhi	r5,2049
 800bf14:	29788504 	addi	r5,r5,-7660
 800bf18:	01020074 	movhi	r4,2049
 800bf1c:	21388504 	addi	r4,r4,-7660
 800bf20:	800be580 	call	800be58 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800bf24:	800d0ac0 	call	800d0ac <alt_dcache_flush_all>
  alt_icache_flush_all();
 800bf28:	800d2980 	call	800d298 <alt_icache_flush_all>
}
 800bf2c:	0001883a 	nop
 800bf30:	e037883a 	mov	sp,fp
 800bf34:	dfc00117 	ldw	ra,4(sp)
 800bf38:	df000017 	ldw	fp,0(sp)
 800bf3c:	dec00204 	addi	sp,sp,8
 800bf40:	f800283a 	ret

0800bf44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800bf44:	defffd04 	addi	sp,sp,-12
 800bf48:	dfc00215 	stw	ra,8(sp)
 800bf4c:	df000115 	stw	fp,4(sp)
 800bf50:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800bf54:	0009883a 	mov	r4,zero
 800bf58:	800c11c0 	call	800c11c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800bf5c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800bf60:	800c1540 	call	800c154 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800bf64:	01820074 	movhi	r6,2049
 800bf68:	31b94c04 	addi	r6,r6,-6864
 800bf6c:	01420074 	movhi	r5,2049
 800bf70:	29794c04 	addi	r5,r5,-6864
 800bf74:	01020074 	movhi	r4,2049
 800bf78:	21394c04 	addi	r4,r4,-6864
 800bf7c:	800d63c0 	call	800d63c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800bf80:	800d1d80 	call	800d1d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800bf84:	01020074 	movhi	r4,2049
 800bf88:	21348e04 	addi	r4,r4,-11720
 800bf8c:	800de800 	call	800de80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800bf90:	d0a7ea17 	ldw	r2,-24664(gp)
 800bf94:	d0e7eb17 	ldw	r3,-24660(gp)
 800bf98:	d127ec17 	ldw	r4,-24656(gp)
 800bf9c:	200d883a 	mov	r6,r4
 800bfa0:	180b883a 	mov	r5,r3
 800bfa4:	1009883a 	mov	r4,r2
 800bfa8:	800026c0 	call	800026c <main>
 800bfac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800bfb0:	01000044 	movi	r4,1
 800bfb4:	800cfd40 	call	800cfd4 <close>
  exit (result);
 800bfb8:	e13fff17 	ldw	r4,-4(fp)
 800bfbc:	800de940 	call	800de94 <exit>

0800bfc0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800bfc0:	defffe04 	addi	sp,sp,-8
 800bfc4:	df000115 	stw	fp,4(sp)
 800bfc8:	df000104 	addi	fp,sp,4
 800bfcc:	e13fff15 	stw	r4,-4(fp)
}
 800bfd0:	0001883a 	nop
 800bfd4:	e037883a 	mov	sp,fp
 800bfd8:	df000017 	ldw	fp,0(sp)
 800bfdc:	dec00104 	addi	sp,sp,4
 800bfe0:	f800283a 	ret

0800bfe4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800bfe4:	defffe04 	addi	sp,sp,-8
 800bfe8:	df000115 	stw	fp,4(sp)
 800bfec:	df000104 	addi	fp,sp,4
 800bff0:	e13fff15 	stw	r4,-4(fp)
}
 800bff4:	0001883a 	nop
 800bff8:	e037883a 	mov	sp,fp
 800bffc:	df000017 	ldw	fp,0(sp)
 800c000:	dec00104 	addi	sp,sp,4
 800c004:	f800283a 	ret

0800c008 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800c008:	defff904 	addi	sp,sp,-28
 800c00c:	df000615 	stw	fp,24(sp)
 800c010:	df000604 	addi	fp,sp,24
 800c014:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c018:	0005303a 	rdctl	r2,status
 800c01c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c020:	e0fffe17 	ldw	r3,-8(fp)
 800c024:	00bfff84 	movi	r2,-2
 800c028:	1884703a 	and	r2,r3,r2
 800c02c:	1001703a 	wrctl	status,r2
  
  return context;
 800c030:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800c034:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800c038:	d0a00817 	ldw	r2,-32736(gp)
 800c03c:	10c000c4 	addi	r3,r2,3
 800c040:	00bfff04 	movi	r2,-4
 800c044:	1884703a 	and	r2,r3,r2
 800c048:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800c04c:	d0e00817 	ldw	r3,-32736(gp)
 800c050:	e0bfff17 	ldw	r2,-4(fp)
 800c054:	1887883a 	add	r3,r3,r2
 800c058:	00830034 	movhi	r2,3072
 800c05c:	10800004 	addi	r2,r2,0
 800c060:	10c0062e 	bgeu	r2,r3,800c07c <sbrk+0x74>
 800c064:	e0bffb17 	ldw	r2,-20(fp)
 800c068:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c06c:	e0bffa17 	ldw	r2,-24(fp)
 800c070:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800c074:	00bfffc4 	movi	r2,-1
 800c078:	00000b06 	br	800c0a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800c07c:	d0a00817 	ldw	r2,-32736(gp)
 800c080:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800c084:	d0e00817 	ldw	r3,-32736(gp)
 800c088:	e0bfff17 	ldw	r2,-4(fp)
 800c08c:	1885883a 	add	r2,r3,r2
 800c090:	d0a00815 	stw	r2,-32736(gp)
 800c094:	e0bffb17 	ldw	r2,-20(fp)
 800c098:	e0bffc15 	stw	r2,-16(fp)
 800c09c:	e0bffc17 	ldw	r2,-16(fp)
 800c0a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800c0a4:	e0bffd17 	ldw	r2,-12(fp)
} 
 800c0a8:	e037883a 	mov	sp,fp
 800c0ac:	df000017 	ldw	fp,0(sp)
 800c0b0:	dec00104 	addi	sp,sp,4
 800c0b4:	f800283a 	ret

0800c0b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800c0b8:	defffd04 	addi	sp,sp,-12
 800c0bc:	dfc00215 	stw	ra,8(sp)
 800c0c0:	df000115 	stw	fp,4(sp)
 800c0c4:	df000104 	addi	fp,sp,4
 800c0c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800c0cc:	e13fff17 	ldw	r4,-4(fp)
 800c0d0:	800ce400 	call	800ce40 <alt_busy_sleep>
}
 800c0d4:	e037883a 	mov	sp,fp
 800c0d8:	dfc00117 	ldw	ra,4(sp)
 800c0dc:	df000017 	ldw	fp,0(sp)
 800c0e0:	dec00204 	addi	sp,sp,8
 800c0e4:	f800283a 	ret

0800c0e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800c0e8:	defffd04 	addi	sp,sp,-12
 800c0ec:	dfc00215 	stw	ra,8(sp)
 800c0f0:	df000115 	stw	fp,4(sp)
 800c0f4:	df000104 	addi	fp,sp,4
 800c0f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800c0fc:	d1600b04 	addi	r5,gp,-32724
 800c100:	e13fff17 	ldw	r4,-4(fp)
 800c104:	800d1340 	call	800d134 <alt_dev_llist_insert>
}
 800c108:	e037883a 	mov	sp,fp
 800c10c:	dfc00117 	ldw	ra,4(sp)
 800c110:	df000017 	ldw	fp,0(sp)
 800c114:	dec00204 	addi	sp,sp,8
 800c118:	f800283a 	ret

0800c11c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800c11c:	defffd04 	addi	sp,sp,-12
 800c120:	dfc00215 	stw	ra,8(sp)
 800c124:	df000115 	stw	fp,4(sp)
 800c128:	df000104 	addi	fp,sp,4
 800c12c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800c130:	800db640 	call	800db64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800c134:	00800044 	movi	r2,1
 800c138:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800c13c:	0001883a 	nop
 800c140:	e037883a 	mov	sp,fp
 800c144:	dfc00117 	ldw	ra,4(sp)
 800c148:	df000017 	ldw	fp,0(sp)
 800c14c:	dec00204 	addi	sp,sp,8
 800c150:	f800283a 	ret

0800c154 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800c154:	defffe04 	addi	sp,sp,-8
 800c158:	dfc00115 	stw	ra,4(sp)
 800c15c:	df000015 	stw	fp,0(sp)
 800c160:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800c164:	01c0fa04 	movi	r7,1000
 800c168:	01800084 	movi	r6,2
 800c16c:	000b883a 	mov	r5,zero
 800c170:	01002004 	movi	r4,128
 800c174:	800cc980 	call	800cc98 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800c178:	01800044 	movi	r6,1
 800c17c:	000b883a 	mov	r5,zero
 800c180:	01020074 	movhi	r4,2049
 800c184:	213c9e04 	addi	r4,r4,-3464
 800c188:	800c31c0 	call	800c31c <altera_avalon_jtag_uart_init>
 800c18c:	01020074 	movhi	r4,2049
 800c190:	213c9404 	addi	r4,r4,-3504
 800c194:	800c0e80 	call	800c0e8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800c198:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800c19c:	0001883a 	nop
}
 800c1a0:	0001883a 	nop
 800c1a4:	e037883a 	mov	sp,fp
 800c1a8:	dfc00117 	ldw	ra,4(sp)
 800c1ac:	df000017 	ldw	fp,0(sp)
 800c1b0:	dec00204 	addi	sp,sp,8
 800c1b4:	f800283a 	ret

0800c1b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800c1b8:	defffa04 	addi	sp,sp,-24
 800c1bc:	dfc00515 	stw	ra,20(sp)
 800c1c0:	df000415 	stw	fp,16(sp)
 800c1c4:	df000404 	addi	fp,sp,16
 800c1c8:	e13ffd15 	stw	r4,-12(fp)
 800c1cc:	e17ffe15 	stw	r5,-8(fp)
 800c1d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c1d4:	e0bffd17 	ldw	r2,-12(fp)
 800c1d8:	10800017 	ldw	r2,0(r2)
 800c1dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800c1e0:	e0bffc17 	ldw	r2,-16(fp)
 800c1e4:	10c00a04 	addi	r3,r2,40
 800c1e8:	e0bffd17 	ldw	r2,-12(fp)
 800c1ec:	10800217 	ldw	r2,8(r2)
 800c1f0:	100f883a 	mov	r7,r2
 800c1f4:	e1bfff17 	ldw	r6,-4(fp)
 800c1f8:	e17ffe17 	ldw	r5,-8(fp)
 800c1fc:	1809883a 	mov	r4,r3
 800c200:	800c7e00 	call	800c7e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800c204:	e037883a 	mov	sp,fp
 800c208:	dfc00117 	ldw	ra,4(sp)
 800c20c:	df000017 	ldw	fp,0(sp)
 800c210:	dec00204 	addi	sp,sp,8
 800c214:	f800283a 	ret

0800c218 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800c218:	defffa04 	addi	sp,sp,-24
 800c21c:	dfc00515 	stw	ra,20(sp)
 800c220:	df000415 	stw	fp,16(sp)
 800c224:	df000404 	addi	fp,sp,16
 800c228:	e13ffd15 	stw	r4,-12(fp)
 800c22c:	e17ffe15 	stw	r5,-8(fp)
 800c230:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c234:	e0bffd17 	ldw	r2,-12(fp)
 800c238:	10800017 	ldw	r2,0(r2)
 800c23c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800c240:	e0bffc17 	ldw	r2,-16(fp)
 800c244:	10c00a04 	addi	r3,r2,40
 800c248:	e0bffd17 	ldw	r2,-12(fp)
 800c24c:	10800217 	ldw	r2,8(r2)
 800c250:	100f883a 	mov	r7,r2
 800c254:	e1bfff17 	ldw	r6,-4(fp)
 800c258:	e17ffe17 	ldw	r5,-8(fp)
 800c25c:	1809883a 	mov	r4,r3
 800c260:	800c9fc0 	call	800c9fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800c264:	e037883a 	mov	sp,fp
 800c268:	dfc00117 	ldw	ra,4(sp)
 800c26c:	df000017 	ldw	fp,0(sp)
 800c270:	dec00204 	addi	sp,sp,8
 800c274:	f800283a 	ret

0800c278 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800c278:	defffc04 	addi	sp,sp,-16
 800c27c:	dfc00315 	stw	ra,12(sp)
 800c280:	df000215 	stw	fp,8(sp)
 800c284:	df000204 	addi	fp,sp,8
 800c288:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c28c:	e0bfff17 	ldw	r2,-4(fp)
 800c290:	10800017 	ldw	r2,0(r2)
 800c294:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800c298:	e0bffe17 	ldw	r2,-8(fp)
 800c29c:	10c00a04 	addi	r3,r2,40
 800c2a0:	e0bfff17 	ldw	r2,-4(fp)
 800c2a4:	10800217 	ldw	r2,8(r2)
 800c2a8:	100b883a 	mov	r5,r2
 800c2ac:	1809883a 	mov	r4,r3
 800c2b0:	800c6880 	call	800c688 <altera_avalon_jtag_uart_close>
}
 800c2b4:	e037883a 	mov	sp,fp
 800c2b8:	dfc00117 	ldw	ra,4(sp)
 800c2bc:	df000017 	ldw	fp,0(sp)
 800c2c0:	dec00204 	addi	sp,sp,8
 800c2c4:	f800283a 	ret

0800c2c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800c2c8:	defffa04 	addi	sp,sp,-24
 800c2cc:	dfc00515 	stw	ra,20(sp)
 800c2d0:	df000415 	stw	fp,16(sp)
 800c2d4:	df000404 	addi	fp,sp,16
 800c2d8:	e13ffd15 	stw	r4,-12(fp)
 800c2dc:	e17ffe15 	stw	r5,-8(fp)
 800c2e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800c2e4:	e0bffd17 	ldw	r2,-12(fp)
 800c2e8:	10800017 	ldw	r2,0(r2)
 800c2ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800c2f0:	e0bffc17 	ldw	r2,-16(fp)
 800c2f4:	10800a04 	addi	r2,r2,40
 800c2f8:	e1bfff17 	ldw	r6,-4(fp)
 800c2fc:	e17ffe17 	ldw	r5,-8(fp)
 800c300:	1009883a 	mov	r4,r2
 800c304:	800c6f00 	call	800c6f0 <altera_avalon_jtag_uart_ioctl>
}
 800c308:	e037883a 	mov	sp,fp
 800c30c:	dfc00117 	ldw	ra,4(sp)
 800c310:	df000017 	ldw	fp,0(sp)
 800c314:	dec00204 	addi	sp,sp,8
 800c318:	f800283a 	ret

0800c31c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800c31c:	defffa04 	addi	sp,sp,-24
 800c320:	dfc00515 	stw	ra,20(sp)
 800c324:	df000415 	stw	fp,16(sp)
 800c328:	df000404 	addi	fp,sp,16
 800c32c:	e13ffd15 	stw	r4,-12(fp)
 800c330:	e17ffe15 	stw	r5,-8(fp)
 800c334:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c338:	e0bffd17 	ldw	r2,-12(fp)
 800c33c:	00c00044 	movi	r3,1
 800c340:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800c344:	e0bffd17 	ldw	r2,-12(fp)
 800c348:	10800017 	ldw	r2,0(r2)
 800c34c:	10800104 	addi	r2,r2,4
 800c350:	1007883a 	mov	r3,r2
 800c354:	e0bffd17 	ldw	r2,-12(fp)
 800c358:	10800817 	ldw	r2,32(r2)
 800c35c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800c360:	e0bffe17 	ldw	r2,-8(fp)
 800c364:	e0ffff17 	ldw	r3,-4(fp)
 800c368:	d8000015 	stw	zero,0(sp)
 800c36c:	e1fffd17 	ldw	r7,-12(fp)
 800c370:	01820074 	movhi	r6,2049
 800c374:	31b0f704 	addi	r6,r6,-15396
 800c378:	180b883a 	mov	r5,r3
 800c37c:	1009883a 	mov	r4,r2
 800c380:	800d2b80 	call	800d2b8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800c384:	e0bffd17 	ldw	r2,-12(fp)
 800c388:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800c38c:	e0bffd17 	ldw	r2,-12(fp)
 800c390:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800c394:	d0e7ee17 	ldw	r3,-24648(gp)
 800c398:	e1fffd17 	ldw	r7,-12(fp)
 800c39c:	01820074 	movhi	r6,2049
 800c3a0:	31b17a04 	addi	r6,r6,-14872
 800c3a4:	180b883a 	mov	r5,r3
 800c3a8:	1009883a 	mov	r4,r2
 800c3ac:	800cd140 	call	800cd14 <alt_alarm_start>
 800c3b0:	1000040e 	bge	r2,zero,800c3c4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800c3b4:	e0fffd17 	ldw	r3,-12(fp)
 800c3b8:	00a00034 	movhi	r2,32768
 800c3bc:	10bfffc4 	addi	r2,r2,-1
 800c3c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800c3c4:	0001883a 	nop
 800c3c8:	e037883a 	mov	sp,fp
 800c3cc:	dfc00117 	ldw	ra,4(sp)
 800c3d0:	df000017 	ldw	fp,0(sp)
 800c3d4:	dec00204 	addi	sp,sp,8
 800c3d8:	f800283a 	ret

0800c3dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800c3dc:	defff804 	addi	sp,sp,-32
 800c3e0:	df000715 	stw	fp,28(sp)
 800c3e4:	df000704 	addi	fp,sp,28
 800c3e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800c3ec:	e0bfff17 	ldw	r2,-4(fp)
 800c3f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800c3f4:	e0bffb17 	ldw	r2,-20(fp)
 800c3f8:	10800017 	ldw	r2,0(r2)
 800c3fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c400:	e0bffc17 	ldw	r2,-16(fp)
 800c404:	10800104 	addi	r2,r2,4
 800c408:	10800037 	ldwio	r2,0(r2)
 800c40c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800c410:	e0bffd17 	ldw	r2,-12(fp)
 800c414:	1080c00c 	andi	r2,r2,768
 800c418:	10006d26 	beq	r2,zero,800c5d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800c41c:	e0bffd17 	ldw	r2,-12(fp)
 800c420:	1080400c 	andi	r2,r2,256
 800c424:	10003526 	beq	r2,zero,800c4fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800c428:	00800074 	movhi	r2,1
 800c42c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c430:	e0bffb17 	ldw	r2,-20(fp)
 800c434:	10800a17 	ldw	r2,40(r2)
 800c438:	10800044 	addi	r2,r2,1
 800c43c:	1081ffcc 	andi	r2,r2,2047
 800c440:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800c444:	e0bffb17 	ldw	r2,-20(fp)
 800c448:	10c00b17 	ldw	r3,44(r2)
 800c44c:	e0bffe17 	ldw	r2,-8(fp)
 800c450:	18801526 	beq	r3,r2,800c4a8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800c454:	e0bffc17 	ldw	r2,-16(fp)
 800c458:	10800037 	ldwio	r2,0(r2)
 800c45c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800c460:	e0bff917 	ldw	r2,-28(fp)
 800c464:	10a0000c 	andi	r2,r2,32768
 800c468:	10001126 	beq	r2,zero,800c4b0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800c46c:	e0bffb17 	ldw	r2,-20(fp)
 800c470:	10800a17 	ldw	r2,40(r2)
 800c474:	e0fff917 	ldw	r3,-28(fp)
 800c478:	1809883a 	mov	r4,r3
 800c47c:	e0fffb17 	ldw	r3,-20(fp)
 800c480:	1885883a 	add	r2,r3,r2
 800c484:	10800e04 	addi	r2,r2,56
 800c488:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c48c:	e0bffb17 	ldw	r2,-20(fp)
 800c490:	10800a17 	ldw	r2,40(r2)
 800c494:	10800044 	addi	r2,r2,1
 800c498:	10c1ffcc 	andi	r3,r2,2047
 800c49c:	e0bffb17 	ldw	r2,-20(fp)
 800c4a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800c4a4:	003fe206 	br	800c430 <__alt_data_end+0xfc00c430>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800c4a8:	0001883a 	nop
 800c4ac:	00000106 	br	800c4b4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800c4b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800c4b4:	e0bff917 	ldw	r2,-28(fp)
 800c4b8:	10bfffec 	andhi	r2,r2,65535
 800c4bc:	10000f26 	beq	r2,zero,800c4fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c4c0:	e0bffb17 	ldw	r2,-20(fp)
 800c4c4:	10c00817 	ldw	r3,32(r2)
 800c4c8:	00bfff84 	movi	r2,-2
 800c4cc:	1886703a 	and	r3,r3,r2
 800c4d0:	e0bffb17 	ldw	r2,-20(fp)
 800c4d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800c4d8:	e0bffc17 	ldw	r2,-16(fp)
 800c4dc:	10800104 	addi	r2,r2,4
 800c4e0:	1007883a 	mov	r3,r2
 800c4e4:	e0bffb17 	ldw	r2,-20(fp)
 800c4e8:	10800817 	ldw	r2,32(r2)
 800c4ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c4f0:	e0bffc17 	ldw	r2,-16(fp)
 800c4f4:	10800104 	addi	r2,r2,4
 800c4f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800c4fc:	e0bffd17 	ldw	r2,-12(fp)
 800c500:	1080800c 	andi	r2,r2,512
 800c504:	103fbe26 	beq	r2,zero,800c400 <__alt_data_end+0xfc00c400>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800c508:	e0bffd17 	ldw	r2,-12(fp)
 800c50c:	1004d43a 	srli	r2,r2,16
 800c510:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c514:	00001406 	br	800c568 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800c518:	e0bffc17 	ldw	r2,-16(fp)
 800c51c:	e0fffb17 	ldw	r3,-20(fp)
 800c520:	18c00d17 	ldw	r3,52(r3)
 800c524:	e13ffb17 	ldw	r4,-20(fp)
 800c528:	20c7883a 	add	r3,r4,r3
 800c52c:	18c20e04 	addi	r3,r3,2104
 800c530:	18c00003 	ldbu	r3,0(r3)
 800c534:	18c03fcc 	andi	r3,r3,255
 800c538:	18c0201c 	xori	r3,r3,128
 800c53c:	18ffe004 	addi	r3,r3,-128
 800c540:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c544:	e0bffb17 	ldw	r2,-20(fp)
 800c548:	10800d17 	ldw	r2,52(r2)
 800c54c:	10800044 	addi	r2,r2,1
 800c550:	10c1ffcc 	andi	r3,r2,2047
 800c554:	e0bffb17 	ldw	r2,-20(fp)
 800c558:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800c55c:	e0bffa17 	ldw	r2,-24(fp)
 800c560:	10bfffc4 	addi	r2,r2,-1
 800c564:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c568:	e0bffa17 	ldw	r2,-24(fp)
 800c56c:	10000526 	beq	r2,zero,800c584 <altera_avalon_jtag_uart_irq+0x1a8>
 800c570:	e0bffb17 	ldw	r2,-20(fp)
 800c574:	10c00d17 	ldw	r3,52(r2)
 800c578:	e0bffb17 	ldw	r2,-20(fp)
 800c57c:	10800c17 	ldw	r2,48(r2)
 800c580:	18bfe51e 	bne	r3,r2,800c518 <__alt_data_end+0xfc00c518>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800c584:	e0bffa17 	ldw	r2,-24(fp)
 800c588:	103f9d26 	beq	r2,zero,800c400 <__alt_data_end+0xfc00c400>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c58c:	e0bffb17 	ldw	r2,-20(fp)
 800c590:	10c00817 	ldw	r3,32(r2)
 800c594:	00bfff44 	movi	r2,-3
 800c598:	1886703a 	and	r3,r3,r2
 800c59c:	e0bffb17 	ldw	r2,-20(fp)
 800c5a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c5a4:	e0bffb17 	ldw	r2,-20(fp)
 800c5a8:	10800017 	ldw	r2,0(r2)
 800c5ac:	10800104 	addi	r2,r2,4
 800c5b0:	1007883a 	mov	r3,r2
 800c5b4:	e0bffb17 	ldw	r2,-20(fp)
 800c5b8:	10800817 	ldw	r2,32(r2)
 800c5bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c5c0:	e0bffc17 	ldw	r2,-16(fp)
 800c5c4:	10800104 	addi	r2,r2,4
 800c5c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800c5cc:	003f8c06 	br	800c400 <__alt_data_end+0xfc00c400>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800c5d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800c5d4:	0001883a 	nop
 800c5d8:	e037883a 	mov	sp,fp
 800c5dc:	df000017 	ldw	fp,0(sp)
 800c5e0:	dec00104 	addi	sp,sp,4
 800c5e4:	f800283a 	ret

0800c5e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800c5e8:	defff804 	addi	sp,sp,-32
 800c5ec:	df000715 	stw	fp,28(sp)
 800c5f0:	df000704 	addi	fp,sp,28
 800c5f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800c5f8:	e0bffb17 	ldw	r2,-20(fp)
 800c5fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800c600:	e0bff917 	ldw	r2,-28(fp)
 800c604:	10800017 	ldw	r2,0(r2)
 800c608:	10800104 	addi	r2,r2,4
 800c60c:	10800037 	ldwio	r2,0(r2)
 800c610:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800c614:	e0bffa17 	ldw	r2,-24(fp)
 800c618:	1081000c 	andi	r2,r2,1024
 800c61c:	10000b26 	beq	r2,zero,800c64c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800c620:	e0bff917 	ldw	r2,-28(fp)
 800c624:	10800017 	ldw	r2,0(r2)
 800c628:	10800104 	addi	r2,r2,4
 800c62c:	1007883a 	mov	r3,r2
 800c630:	e0bff917 	ldw	r2,-28(fp)
 800c634:	10800817 	ldw	r2,32(r2)
 800c638:	10810014 	ori	r2,r2,1024
 800c63c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800c640:	e0bff917 	ldw	r2,-28(fp)
 800c644:	10000915 	stw	zero,36(r2)
 800c648:	00000a06 	br	800c674 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800c64c:	e0bff917 	ldw	r2,-28(fp)
 800c650:	10c00917 	ldw	r3,36(r2)
 800c654:	00a00034 	movhi	r2,32768
 800c658:	10bfff04 	addi	r2,r2,-4
 800c65c:	10c00536 	bltu	r2,r3,800c674 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800c660:	e0bff917 	ldw	r2,-28(fp)
 800c664:	10800917 	ldw	r2,36(r2)
 800c668:	10c00044 	addi	r3,r2,1
 800c66c:	e0bff917 	ldw	r2,-28(fp)
 800c670:	10c00915 	stw	r3,36(r2)
 800c674:	d0a7ee17 	ldw	r2,-24648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800c678:	e037883a 	mov	sp,fp
 800c67c:	df000017 	ldw	fp,0(sp)
 800c680:	dec00104 	addi	sp,sp,4
 800c684:	f800283a 	ret

0800c688 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800c688:	defffd04 	addi	sp,sp,-12
 800c68c:	df000215 	stw	fp,8(sp)
 800c690:	df000204 	addi	fp,sp,8
 800c694:	e13ffe15 	stw	r4,-8(fp)
 800c698:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c69c:	00000506 	br	800c6b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800c6a0:	e0bfff17 	ldw	r2,-4(fp)
 800c6a4:	1090000c 	andi	r2,r2,16384
 800c6a8:	10000226 	beq	r2,zero,800c6b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800c6ac:	00bffd44 	movi	r2,-11
 800c6b0:	00000b06 	br	800c6e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c6b4:	e0bffe17 	ldw	r2,-8(fp)
 800c6b8:	10c00d17 	ldw	r3,52(r2)
 800c6bc:	e0bffe17 	ldw	r2,-8(fp)
 800c6c0:	10800c17 	ldw	r2,48(r2)
 800c6c4:	18800526 	beq	r3,r2,800c6dc <altera_avalon_jtag_uart_close+0x54>
 800c6c8:	e0bffe17 	ldw	r2,-8(fp)
 800c6cc:	10c00917 	ldw	r3,36(r2)
 800c6d0:	e0bffe17 	ldw	r2,-8(fp)
 800c6d4:	10800117 	ldw	r2,4(r2)
 800c6d8:	18bff136 	bltu	r3,r2,800c6a0 <__alt_data_end+0xfc00c6a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800c6dc:	0005883a 	mov	r2,zero
}
 800c6e0:	e037883a 	mov	sp,fp
 800c6e4:	df000017 	ldw	fp,0(sp)
 800c6e8:	dec00104 	addi	sp,sp,4
 800c6ec:	f800283a 	ret

0800c6f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800c6f0:	defffa04 	addi	sp,sp,-24
 800c6f4:	df000515 	stw	fp,20(sp)
 800c6f8:	df000504 	addi	fp,sp,20
 800c6fc:	e13ffd15 	stw	r4,-12(fp)
 800c700:	e17ffe15 	stw	r5,-8(fp)
 800c704:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800c708:	00bff9c4 	movi	r2,-25
 800c70c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800c710:	e0bffe17 	ldw	r2,-8(fp)
 800c714:	10da8060 	cmpeqi	r3,r2,27137
 800c718:	1800031e 	bne	r3,zero,800c728 <altera_avalon_jtag_uart_ioctl+0x38>
 800c71c:	109a80a0 	cmpeqi	r2,r2,27138
 800c720:	1000181e 	bne	r2,zero,800c784 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800c724:	00002906 	br	800c7cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800c728:	e0bffd17 	ldw	r2,-12(fp)
 800c72c:	10c00117 	ldw	r3,4(r2)
 800c730:	00a00034 	movhi	r2,32768
 800c734:	10bfffc4 	addi	r2,r2,-1
 800c738:	18802126 	beq	r3,r2,800c7c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800c73c:	e0bfff17 	ldw	r2,-4(fp)
 800c740:	10800017 	ldw	r2,0(r2)
 800c744:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800c748:	e0bffc17 	ldw	r2,-16(fp)
 800c74c:	10800090 	cmplti	r2,r2,2
 800c750:	1000061e 	bne	r2,zero,800c76c <altera_avalon_jtag_uart_ioctl+0x7c>
 800c754:	e0fffc17 	ldw	r3,-16(fp)
 800c758:	00a00034 	movhi	r2,32768
 800c75c:	10bfffc4 	addi	r2,r2,-1
 800c760:	18800226 	beq	r3,r2,800c76c <altera_avalon_jtag_uart_ioctl+0x7c>
 800c764:	e0bffc17 	ldw	r2,-16(fp)
 800c768:	00000206 	br	800c774 <altera_avalon_jtag_uart_ioctl+0x84>
 800c76c:	00a00034 	movhi	r2,32768
 800c770:	10bfff84 	addi	r2,r2,-2
 800c774:	e0fffd17 	ldw	r3,-12(fp)
 800c778:	18800115 	stw	r2,4(r3)
      rc = 0;
 800c77c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c780:	00000f06 	br	800c7c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800c784:	e0bffd17 	ldw	r2,-12(fp)
 800c788:	10c00117 	ldw	r3,4(r2)
 800c78c:	00a00034 	movhi	r2,32768
 800c790:	10bfffc4 	addi	r2,r2,-1
 800c794:	18800c26 	beq	r3,r2,800c7c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800c798:	e0bffd17 	ldw	r2,-12(fp)
 800c79c:	10c00917 	ldw	r3,36(r2)
 800c7a0:	e0bffd17 	ldw	r2,-12(fp)
 800c7a4:	10800117 	ldw	r2,4(r2)
 800c7a8:	1885803a 	cmpltu	r2,r3,r2
 800c7ac:	10c03fcc 	andi	r3,r2,255
 800c7b0:	e0bfff17 	ldw	r2,-4(fp)
 800c7b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800c7b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c7bc:	00000206 	br	800c7c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800c7c0:	0001883a 	nop
 800c7c4:	00000106 	br	800c7cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800c7c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800c7cc:	e0bffb17 	ldw	r2,-20(fp)
}
 800c7d0:	e037883a 	mov	sp,fp
 800c7d4:	df000017 	ldw	fp,0(sp)
 800c7d8:	dec00104 	addi	sp,sp,4
 800c7dc:	f800283a 	ret

0800c7e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800c7e0:	defff304 	addi	sp,sp,-52
 800c7e4:	dfc00c15 	stw	ra,48(sp)
 800c7e8:	df000b15 	stw	fp,44(sp)
 800c7ec:	df000b04 	addi	fp,sp,44
 800c7f0:	e13ffc15 	stw	r4,-16(fp)
 800c7f4:	e17ffd15 	stw	r5,-12(fp)
 800c7f8:	e1bffe15 	stw	r6,-8(fp)
 800c7fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800c800:	e0bffd17 	ldw	r2,-12(fp)
 800c804:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c808:	00004706 	br	800c928 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800c80c:	e0bffc17 	ldw	r2,-16(fp)
 800c810:	10800a17 	ldw	r2,40(r2)
 800c814:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800c818:	e0bffc17 	ldw	r2,-16(fp)
 800c81c:	10800b17 	ldw	r2,44(r2)
 800c820:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800c824:	e0fff717 	ldw	r3,-36(fp)
 800c828:	e0bff817 	ldw	r2,-32(fp)
 800c82c:	18800536 	bltu	r3,r2,800c844 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800c830:	e0fff717 	ldw	r3,-36(fp)
 800c834:	e0bff817 	ldw	r2,-32(fp)
 800c838:	1885c83a 	sub	r2,r3,r2
 800c83c:	e0bff615 	stw	r2,-40(fp)
 800c840:	00000406 	br	800c854 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800c844:	00c20004 	movi	r3,2048
 800c848:	e0bff817 	ldw	r2,-32(fp)
 800c84c:	1885c83a 	sub	r2,r3,r2
 800c850:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c854:	e0bff617 	ldw	r2,-40(fp)
 800c858:	10001e26 	beq	r2,zero,800c8d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800c85c:	e0fffe17 	ldw	r3,-8(fp)
 800c860:	e0bff617 	ldw	r2,-40(fp)
 800c864:	1880022e 	bgeu	r3,r2,800c870 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800c868:	e0bffe17 	ldw	r2,-8(fp)
 800c86c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800c870:	e0bffc17 	ldw	r2,-16(fp)
 800c874:	10c00e04 	addi	r3,r2,56
 800c878:	e0bff817 	ldw	r2,-32(fp)
 800c87c:	1885883a 	add	r2,r3,r2
 800c880:	e1bff617 	ldw	r6,-40(fp)
 800c884:	100b883a 	mov	r5,r2
 800c888:	e13ff517 	ldw	r4,-44(fp)
 800c88c:	80052dc0 	call	80052dc <memcpy>
      ptr   += n;
 800c890:	e0fff517 	ldw	r3,-44(fp)
 800c894:	e0bff617 	ldw	r2,-40(fp)
 800c898:	1885883a 	add	r2,r3,r2
 800c89c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800c8a0:	e0fffe17 	ldw	r3,-8(fp)
 800c8a4:	e0bff617 	ldw	r2,-40(fp)
 800c8a8:	1885c83a 	sub	r2,r3,r2
 800c8ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c8b0:	e0fff817 	ldw	r3,-32(fp)
 800c8b4:	e0bff617 	ldw	r2,-40(fp)
 800c8b8:	1885883a 	add	r2,r3,r2
 800c8bc:	10c1ffcc 	andi	r3,r2,2047
 800c8c0:	e0bffc17 	ldw	r2,-16(fp)
 800c8c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800c8c8:	e0bffe17 	ldw	r2,-8(fp)
 800c8cc:	00bfcf16 	blt	zero,r2,800c80c <__alt_data_end+0xfc00c80c>
 800c8d0:	00000106 	br	800c8d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800c8d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800c8d8:	e0fff517 	ldw	r3,-44(fp)
 800c8dc:	e0bffd17 	ldw	r2,-12(fp)
 800c8e0:	1880141e 	bne	r3,r2,800c934 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800c8e4:	e0bfff17 	ldw	r2,-4(fp)
 800c8e8:	1090000c 	andi	r2,r2,16384
 800c8ec:	1000131e 	bne	r2,zero,800c93c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800c8f0:	0001883a 	nop
 800c8f4:	e0bffc17 	ldw	r2,-16(fp)
 800c8f8:	10c00a17 	ldw	r3,40(r2)
 800c8fc:	e0bff717 	ldw	r2,-36(fp)
 800c900:	1880051e 	bne	r3,r2,800c918 <altera_avalon_jtag_uart_read+0x138>
 800c904:	e0bffc17 	ldw	r2,-16(fp)
 800c908:	10c00917 	ldw	r3,36(r2)
 800c90c:	e0bffc17 	ldw	r2,-16(fp)
 800c910:	10800117 	ldw	r2,4(r2)
 800c914:	18bff736 	bltu	r3,r2,800c8f4 <__alt_data_end+0xfc00c8f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800c918:	e0bffc17 	ldw	r2,-16(fp)
 800c91c:	10c00a17 	ldw	r3,40(r2)
 800c920:	e0bff717 	ldw	r2,-36(fp)
 800c924:	18800726 	beq	r3,r2,800c944 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c928:	e0bffe17 	ldw	r2,-8(fp)
 800c92c:	00bfb716 	blt	zero,r2,800c80c <__alt_data_end+0xfc00c80c>
 800c930:	00000506 	br	800c948 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800c934:	0001883a 	nop
 800c938:	00000306 	br	800c948 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800c93c:	0001883a 	nop
 800c940:	00000106 	br	800c948 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800c944:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800c948:	e0fff517 	ldw	r3,-44(fp)
 800c94c:	e0bffd17 	ldw	r2,-12(fp)
 800c950:	18801826 	beq	r3,r2,800c9b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c954:	0005303a 	rdctl	r2,status
 800c958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c95c:	e0fffb17 	ldw	r3,-20(fp)
 800c960:	00bfff84 	movi	r2,-2
 800c964:	1884703a 	and	r2,r3,r2
 800c968:	1001703a 	wrctl	status,r2
  
  return context;
 800c96c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800c970:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c974:	e0bffc17 	ldw	r2,-16(fp)
 800c978:	10800817 	ldw	r2,32(r2)
 800c97c:	10c00054 	ori	r3,r2,1
 800c980:	e0bffc17 	ldw	r2,-16(fp)
 800c984:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c988:	e0bffc17 	ldw	r2,-16(fp)
 800c98c:	10800017 	ldw	r2,0(r2)
 800c990:	10800104 	addi	r2,r2,4
 800c994:	1007883a 	mov	r3,r2
 800c998:	e0bffc17 	ldw	r2,-16(fp)
 800c99c:	10800817 	ldw	r2,32(r2)
 800c9a0:	18800035 	stwio	r2,0(r3)
 800c9a4:	e0bffa17 	ldw	r2,-24(fp)
 800c9a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800c9ac:	e0bff917 	ldw	r2,-28(fp)
 800c9b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800c9b4:	e0fff517 	ldw	r3,-44(fp)
 800c9b8:	e0bffd17 	ldw	r2,-12(fp)
 800c9bc:	18800426 	beq	r3,r2,800c9d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800c9c0:	e0fff517 	ldw	r3,-44(fp)
 800c9c4:	e0bffd17 	ldw	r2,-12(fp)
 800c9c8:	1885c83a 	sub	r2,r3,r2
 800c9cc:	00000606 	br	800c9e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800c9d0:	e0bfff17 	ldw	r2,-4(fp)
 800c9d4:	1090000c 	andi	r2,r2,16384
 800c9d8:	10000226 	beq	r2,zero,800c9e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800c9dc:	00bffd44 	movi	r2,-11
 800c9e0:	00000106 	br	800c9e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800c9e4:	00bffec4 	movi	r2,-5
}
 800c9e8:	e037883a 	mov	sp,fp
 800c9ec:	dfc00117 	ldw	ra,4(sp)
 800c9f0:	df000017 	ldw	fp,0(sp)
 800c9f4:	dec00204 	addi	sp,sp,8
 800c9f8:	f800283a 	ret

0800c9fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800c9fc:	defff304 	addi	sp,sp,-52
 800ca00:	dfc00c15 	stw	ra,48(sp)
 800ca04:	df000b15 	stw	fp,44(sp)
 800ca08:	df000b04 	addi	fp,sp,44
 800ca0c:	e13ffc15 	stw	r4,-16(fp)
 800ca10:	e17ffd15 	stw	r5,-12(fp)
 800ca14:	e1bffe15 	stw	r6,-8(fp)
 800ca18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800ca1c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800ca20:	e0bffd17 	ldw	r2,-12(fp)
 800ca24:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ca28:	00003706 	br	800cb08 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800ca2c:	e0bffc17 	ldw	r2,-16(fp)
 800ca30:	10800c17 	ldw	r2,48(r2)
 800ca34:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800ca38:	e0bffc17 	ldw	r2,-16(fp)
 800ca3c:	10800d17 	ldw	r2,52(r2)
 800ca40:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800ca44:	e0fff917 	ldw	r3,-28(fp)
 800ca48:	e0bff517 	ldw	r2,-44(fp)
 800ca4c:	1880062e 	bgeu	r3,r2,800ca68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800ca50:	e0fff517 	ldw	r3,-44(fp)
 800ca54:	e0bff917 	ldw	r2,-28(fp)
 800ca58:	1885c83a 	sub	r2,r3,r2
 800ca5c:	10bfffc4 	addi	r2,r2,-1
 800ca60:	e0bff615 	stw	r2,-40(fp)
 800ca64:	00000b06 	br	800ca94 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800ca68:	e0bff517 	ldw	r2,-44(fp)
 800ca6c:	10000526 	beq	r2,zero,800ca84 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800ca70:	00c20004 	movi	r3,2048
 800ca74:	e0bff917 	ldw	r2,-28(fp)
 800ca78:	1885c83a 	sub	r2,r3,r2
 800ca7c:	e0bff615 	stw	r2,-40(fp)
 800ca80:	00000406 	br	800ca94 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800ca84:	00c1ffc4 	movi	r3,2047
 800ca88:	e0bff917 	ldw	r2,-28(fp)
 800ca8c:	1885c83a 	sub	r2,r3,r2
 800ca90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800ca94:	e0bff617 	ldw	r2,-40(fp)
 800ca98:	10001e26 	beq	r2,zero,800cb14 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800ca9c:	e0fffe17 	ldw	r3,-8(fp)
 800caa0:	e0bff617 	ldw	r2,-40(fp)
 800caa4:	1880022e 	bgeu	r3,r2,800cab0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800caa8:	e0bffe17 	ldw	r2,-8(fp)
 800caac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800cab0:	e0bffc17 	ldw	r2,-16(fp)
 800cab4:	10c20e04 	addi	r3,r2,2104
 800cab8:	e0bff917 	ldw	r2,-28(fp)
 800cabc:	1885883a 	add	r2,r3,r2
 800cac0:	e1bff617 	ldw	r6,-40(fp)
 800cac4:	e17ffd17 	ldw	r5,-12(fp)
 800cac8:	1009883a 	mov	r4,r2
 800cacc:	80052dc0 	call	80052dc <memcpy>
      ptr   += n;
 800cad0:	e0fffd17 	ldw	r3,-12(fp)
 800cad4:	e0bff617 	ldw	r2,-40(fp)
 800cad8:	1885883a 	add	r2,r3,r2
 800cadc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800cae0:	e0fffe17 	ldw	r3,-8(fp)
 800cae4:	e0bff617 	ldw	r2,-40(fp)
 800cae8:	1885c83a 	sub	r2,r3,r2
 800caec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800caf0:	e0fff917 	ldw	r3,-28(fp)
 800caf4:	e0bff617 	ldw	r2,-40(fp)
 800caf8:	1885883a 	add	r2,r3,r2
 800cafc:	10c1ffcc 	andi	r3,r2,2047
 800cb00:	e0bffc17 	ldw	r2,-16(fp)
 800cb04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800cb08:	e0bffe17 	ldw	r2,-8(fp)
 800cb0c:	00bfc716 	blt	zero,r2,800ca2c <__alt_data_end+0xfc00ca2c>
 800cb10:	00000106 	br	800cb18 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800cb14:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cb18:	0005303a 	rdctl	r2,status
 800cb1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cb20:	e0fffb17 	ldw	r3,-20(fp)
 800cb24:	00bfff84 	movi	r2,-2
 800cb28:	1884703a 	and	r2,r3,r2
 800cb2c:	1001703a 	wrctl	status,r2
  
  return context;
 800cb30:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800cb34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800cb38:	e0bffc17 	ldw	r2,-16(fp)
 800cb3c:	10800817 	ldw	r2,32(r2)
 800cb40:	10c00094 	ori	r3,r2,2
 800cb44:	e0bffc17 	ldw	r2,-16(fp)
 800cb48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800cb4c:	e0bffc17 	ldw	r2,-16(fp)
 800cb50:	10800017 	ldw	r2,0(r2)
 800cb54:	10800104 	addi	r2,r2,4
 800cb58:	1007883a 	mov	r3,r2
 800cb5c:	e0bffc17 	ldw	r2,-16(fp)
 800cb60:	10800817 	ldw	r2,32(r2)
 800cb64:	18800035 	stwio	r2,0(r3)
 800cb68:	e0bffa17 	ldw	r2,-24(fp)
 800cb6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cb70:	e0bff817 	ldw	r2,-32(fp)
 800cb74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800cb78:	e0bffe17 	ldw	r2,-8(fp)
 800cb7c:	0080100e 	bge	zero,r2,800cbc0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800cb80:	e0bfff17 	ldw	r2,-4(fp)
 800cb84:	1090000c 	andi	r2,r2,16384
 800cb88:	1000101e 	bne	r2,zero,800cbcc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800cb8c:	0001883a 	nop
 800cb90:	e0bffc17 	ldw	r2,-16(fp)
 800cb94:	10c00d17 	ldw	r3,52(r2)
 800cb98:	e0bff517 	ldw	r2,-44(fp)
 800cb9c:	1880051e 	bne	r3,r2,800cbb4 <altera_avalon_jtag_uart_write+0x1b8>
 800cba0:	e0bffc17 	ldw	r2,-16(fp)
 800cba4:	10c00917 	ldw	r3,36(r2)
 800cba8:	e0bffc17 	ldw	r2,-16(fp)
 800cbac:	10800117 	ldw	r2,4(r2)
 800cbb0:	18bff736 	bltu	r3,r2,800cb90 <__alt_data_end+0xfc00cb90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800cbb4:	e0bffc17 	ldw	r2,-16(fp)
 800cbb8:	10800917 	ldw	r2,36(r2)
 800cbbc:	1000051e 	bne	r2,zero,800cbd4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800cbc0:	e0bffe17 	ldw	r2,-8(fp)
 800cbc4:	00bfd016 	blt	zero,r2,800cb08 <__alt_data_end+0xfc00cb08>
 800cbc8:	00000306 	br	800cbd8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800cbcc:	0001883a 	nop
 800cbd0:	00000106 	br	800cbd8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800cbd4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800cbd8:	e0fffd17 	ldw	r3,-12(fp)
 800cbdc:	e0bff717 	ldw	r2,-36(fp)
 800cbe0:	18800426 	beq	r3,r2,800cbf4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800cbe4:	e0fffd17 	ldw	r3,-12(fp)
 800cbe8:	e0bff717 	ldw	r2,-36(fp)
 800cbec:	1885c83a 	sub	r2,r3,r2
 800cbf0:	00000606 	br	800cc0c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800cbf4:	e0bfff17 	ldw	r2,-4(fp)
 800cbf8:	1090000c 	andi	r2,r2,16384
 800cbfc:	10000226 	beq	r2,zero,800cc08 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800cc00:	00bffd44 	movi	r2,-11
 800cc04:	00000106 	br	800cc0c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800cc08:	00bffec4 	movi	r2,-5
}
 800cc0c:	e037883a 	mov	sp,fp
 800cc10:	dfc00117 	ldw	ra,4(sp)
 800cc14:	df000017 	ldw	fp,0(sp)
 800cc18:	dec00204 	addi	sp,sp,8
 800cc1c:	f800283a 	ret

0800cc20 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800cc20:	defffa04 	addi	sp,sp,-24
 800cc24:	dfc00515 	stw	ra,20(sp)
 800cc28:	df000415 	stw	fp,16(sp)
 800cc2c:	df000404 	addi	fp,sp,16
 800cc30:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800cc34:	0007883a 	mov	r3,zero
 800cc38:	e0bfff17 	ldw	r2,-4(fp)
 800cc3c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800cc40:	e0bfff17 	ldw	r2,-4(fp)
 800cc44:	10800104 	addi	r2,r2,4
 800cc48:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cc4c:	0005303a 	rdctl	r2,status
 800cc50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cc54:	e0fffd17 	ldw	r3,-12(fp)
 800cc58:	00bfff84 	movi	r2,-2
 800cc5c:	1884703a 	and	r2,r3,r2
 800cc60:	1001703a 	wrctl	status,r2
  
  return context;
 800cc64:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800cc68:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800cc6c:	800da5c0 	call	800da5c <alt_tick>
 800cc70:	e0bffc17 	ldw	r2,-16(fp)
 800cc74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cc78:	e0bffe17 	ldw	r2,-8(fp)
 800cc7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800cc80:	0001883a 	nop
 800cc84:	e037883a 	mov	sp,fp
 800cc88:	dfc00117 	ldw	ra,4(sp)
 800cc8c:	df000017 	ldw	fp,0(sp)
 800cc90:	dec00204 	addi	sp,sp,8
 800cc94:	f800283a 	ret

0800cc98 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800cc98:	defff804 	addi	sp,sp,-32
 800cc9c:	dfc00715 	stw	ra,28(sp)
 800cca0:	df000615 	stw	fp,24(sp)
 800cca4:	df000604 	addi	fp,sp,24
 800cca8:	e13ffc15 	stw	r4,-16(fp)
 800ccac:	e17ffd15 	stw	r5,-12(fp)
 800ccb0:	e1bffe15 	stw	r6,-8(fp)
 800ccb4:	e1ffff15 	stw	r7,-4(fp)
 800ccb8:	e0bfff17 	ldw	r2,-4(fp)
 800ccbc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800ccc0:	d0a7ee17 	ldw	r2,-24648(gp)
 800ccc4:	1000021e 	bne	r2,zero,800ccd0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800ccc8:	e0bffb17 	ldw	r2,-20(fp)
 800cccc:	d0a7ee15 	stw	r2,-24648(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800ccd0:	e0bffc17 	ldw	r2,-16(fp)
 800ccd4:	10800104 	addi	r2,r2,4
 800ccd8:	00c001c4 	movi	r3,7
 800ccdc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800cce0:	d8000015 	stw	zero,0(sp)
 800cce4:	e1fffc17 	ldw	r7,-16(fp)
 800cce8:	01820074 	movhi	r6,2049
 800ccec:	31b30804 	addi	r6,r6,-13280
 800ccf0:	e17ffe17 	ldw	r5,-8(fp)
 800ccf4:	e13ffd17 	ldw	r4,-12(fp)
 800ccf8:	800d2b80 	call	800d2b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800ccfc:	0001883a 	nop
 800cd00:	e037883a 	mov	sp,fp
 800cd04:	dfc00117 	ldw	ra,4(sp)
 800cd08:	df000017 	ldw	fp,0(sp)
 800cd0c:	dec00204 	addi	sp,sp,8
 800cd10:	f800283a 	ret

0800cd14 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800cd14:	defff504 	addi	sp,sp,-44
 800cd18:	df000a15 	stw	fp,40(sp)
 800cd1c:	df000a04 	addi	fp,sp,40
 800cd20:	e13ffc15 	stw	r4,-16(fp)
 800cd24:	e17ffd15 	stw	r5,-12(fp)
 800cd28:	e1bffe15 	stw	r6,-8(fp)
 800cd2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800cd30:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800cd34:	d0a7ee17 	ldw	r2,-24648(gp)
  
  if (alt_ticks_per_second ())
 800cd38:	10003c26 	beq	r2,zero,800ce2c <alt_alarm_start+0x118>
  {
    if (alarm)
 800cd3c:	e0bffc17 	ldw	r2,-16(fp)
 800cd40:	10003826 	beq	r2,zero,800ce24 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800cd44:	e0bffc17 	ldw	r2,-16(fp)
 800cd48:	e0fffe17 	ldw	r3,-8(fp)
 800cd4c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800cd50:	e0bffc17 	ldw	r2,-16(fp)
 800cd54:	e0ffff17 	ldw	r3,-4(fp)
 800cd58:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cd5c:	0005303a 	rdctl	r2,status
 800cd60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cd64:	e0fff917 	ldw	r3,-28(fp)
 800cd68:	00bfff84 	movi	r2,-2
 800cd6c:	1884703a 	and	r2,r3,r2
 800cd70:	1001703a 	wrctl	status,r2
  
  return context;
 800cd74:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800cd78:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800cd7c:	d0a7ef17 	ldw	r2,-24644(gp)
      
      current_nticks = alt_nticks();
 800cd80:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800cd84:	e0fffd17 	ldw	r3,-12(fp)
 800cd88:	e0bff617 	ldw	r2,-40(fp)
 800cd8c:	1885883a 	add	r2,r3,r2
 800cd90:	10c00044 	addi	r3,r2,1
 800cd94:	e0bffc17 	ldw	r2,-16(fp)
 800cd98:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800cd9c:	e0bffc17 	ldw	r2,-16(fp)
 800cda0:	10c00217 	ldw	r3,8(r2)
 800cda4:	e0bff617 	ldw	r2,-40(fp)
 800cda8:	1880042e 	bgeu	r3,r2,800cdbc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800cdac:	e0bffc17 	ldw	r2,-16(fp)
 800cdb0:	00c00044 	movi	r3,1
 800cdb4:	10c00405 	stb	r3,16(r2)
 800cdb8:	00000206 	br	800cdc4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800cdbc:	e0bffc17 	ldw	r2,-16(fp)
 800cdc0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800cdc4:	e0bffc17 	ldw	r2,-16(fp)
 800cdc8:	d0e01004 	addi	r3,gp,-32704
 800cdcc:	e0fffa15 	stw	r3,-24(fp)
 800cdd0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800cdd4:	e0bffb17 	ldw	r2,-20(fp)
 800cdd8:	e0fffa17 	ldw	r3,-24(fp)
 800cddc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800cde0:	e0bffa17 	ldw	r2,-24(fp)
 800cde4:	10c00017 	ldw	r3,0(r2)
 800cde8:	e0bffb17 	ldw	r2,-20(fp)
 800cdec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800cdf0:	e0bffa17 	ldw	r2,-24(fp)
 800cdf4:	10800017 	ldw	r2,0(r2)
 800cdf8:	e0fffb17 	ldw	r3,-20(fp)
 800cdfc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800ce00:	e0bffa17 	ldw	r2,-24(fp)
 800ce04:	e0fffb17 	ldw	r3,-20(fp)
 800ce08:	10c00015 	stw	r3,0(r2)
 800ce0c:	e0bff817 	ldw	r2,-32(fp)
 800ce10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ce14:	e0bff717 	ldw	r2,-36(fp)
 800ce18:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800ce1c:	0005883a 	mov	r2,zero
 800ce20:	00000306 	br	800ce30 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800ce24:	00bffa84 	movi	r2,-22
 800ce28:	00000106 	br	800ce30 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800ce2c:	00bfde84 	movi	r2,-134
  }
}
 800ce30:	e037883a 	mov	sp,fp
 800ce34:	df000017 	ldw	fp,0(sp)
 800ce38:	dec00104 	addi	sp,sp,4
 800ce3c:	f800283a 	ret

0800ce40 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800ce40:	defffa04 	addi	sp,sp,-24
 800ce44:	dfc00515 	stw	ra,20(sp)
 800ce48:	df000415 	stw	fp,16(sp)
 800ce4c:	df000404 	addi	fp,sp,16
 800ce50:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800ce54:	00800244 	movi	r2,9
 800ce58:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800ce5c:	014003f4 	movhi	r5,15
 800ce60:	29509004 	addi	r5,r5,16960
 800ce64:	e13ffd17 	ldw	r4,-12(fp)
 800ce68:	8000ba40 	call	8000ba4 <__mulsi3>
 800ce6c:	100b883a 	mov	r5,r2
 800ce70:	0100bef4 	movhi	r4,763
 800ce74:	213c2004 	addi	r4,r4,-3968
 800ce78:	8000ae80 	call	8000ae8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800ce7c:	100b883a 	mov	r5,r2
 800ce80:	01200034 	movhi	r4,32768
 800ce84:	213fffc4 	addi	r4,r4,-1
 800ce88:	8000ae80 	call	8000ae8 <__udivsi3>
 800ce8c:	100b883a 	mov	r5,r2
 800ce90:	e13fff17 	ldw	r4,-4(fp)
 800ce94:	8000ae80 	call	8000ae8 <__udivsi3>
 800ce98:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800ce9c:	e0bffe17 	ldw	r2,-8(fp)
 800cea0:	10002a26 	beq	r2,zero,800cf4c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800cea4:	e03ffc15 	stw	zero,-16(fp)
 800cea8:	00001706 	br	800cf08 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800ceac:	00a00034 	movhi	r2,32768
 800ceb0:	10bfffc4 	addi	r2,r2,-1
 800ceb4:	10bfffc4 	addi	r2,r2,-1
 800ceb8:	103ffe1e 	bne	r2,zero,800ceb4 <__alt_data_end+0xfc00ceb4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800cebc:	014003f4 	movhi	r5,15
 800cec0:	29509004 	addi	r5,r5,16960
 800cec4:	e13ffd17 	ldw	r4,-12(fp)
 800cec8:	8000ba40 	call	8000ba4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800cecc:	100b883a 	mov	r5,r2
 800ced0:	0100bef4 	movhi	r4,763
 800ced4:	213c2004 	addi	r4,r4,-3968
 800ced8:	8000ae80 	call	8000ae8 <__udivsi3>
 800cedc:	100b883a 	mov	r5,r2
 800cee0:	01200034 	movhi	r4,32768
 800cee4:	213fffc4 	addi	r4,r4,-1
 800cee8:	8000ae80 	call	8000ae8 <__udivsi3>
 800ceec:	1007883a 	mov	r3,r2
 800cef0:	e0bfff17 	ldw	r2,-4(fp)
 800cef4:	10c5c83a 	sub	r2,r2,r3
 800cef8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800cefc:	e0bffc17 	ldw	r2,-16(fp)
 800cf00:	10800044 	addi	r2,r2,1
 800cf04:	e0bffc15 	stw	r2,-16(fp)
 800cf08:	e0fffc17 	ldw	r3,-16(fp)
 800cf0c:	e0bffe17 	ldw	r2,-8(fp)
 800cf10:	18bfe616 	blt	r3,r2,800ceac <__alt_data_end+0xfc00ceac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800cf14:	014003f4 	movhi	r5,15
 800cf18:	29509004 	addi	r5,r5,16960
 800cf1c:	e13ffd17 	ldw	r4,-12(fp)
 800cf20:	8000ba40 	call	8000ba4 <__mulsi3>
 800cf24:	100b883a 	mov	r5,r2
 800cf28:	0100bef4 	movhi	r4,763
 800cf2c:	213c2004 	addi	r4,r4,-3968
 800cf30:	8000ae80 	call	8000ae8 <__udivsi3>
 800cf34:	e17fff17 	ldw	r5,-4(fp)
 800cf38:	1009883a 	mov	r4,r2
 800cf3c:	8000ba40 	call	8000ba4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800cf40:	10bfffc4 	addi	r2,r2,-1
 800cf44:	103ffe1e 	bne	r2,zero,800cf40 <__alt_data_end+0xfc00cf40>
 800cf48:	00000d06 	br	800cf80 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800cf4c:	014003f4 	movhi	r5,15
 800cf50:	29509004 	addi	r5,r5,16960
 800cf54:	e13ffd17 	ldw	r4,-12(fp)
 800cf58:	8000ba40 	call	8000ba4 <__mulsi3>
 800cf5c:	100b883a 	mov	r5,r2
 800cf60:	0100bef4 	movhi	r4,763
 800cf64:	213c2004 	addi	r4,r4,-3968
 800cf68:	8000ae80 	call	8000ae8 <__udivsi3>
 800cf6c:	e17fff17 	ldw	r5,-4(fp)
 800cf70:	1009883a 	mov	r4,r2
 800cf74:	8000ba40 	call	8000ba4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800cf78:	10bfffc4 	addi	r2,r2,-1
 800cf7c:	00bffe16 	blt	zero,r2,800cf78 <__alt_data_end+0xfc00cf78>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800cf80:	0005883a 	mov	r2,zero
}
 800cf84:	e037883a 	mov	sp,fp
 800cf88:	dfc00117 	ldw	ra,4(sp)
 800cf8c:	df000017 	ldw	fp,0(sp)
 800cf90:	dec00204 	addi	sp,sp,8
 800cf94:	f800283a 	ret

0800cf98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cf98:	defffe04 	addi	sp,sp,-8
 800cf9c:	dfc00115 	stw	ra,4(sp)
 800cfa0:	df000015 	stw	fp,0(sp)
 800cfa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cfa8:	d0a00e17 	ldw	r2,-32712(gp)
 800cfac:	10000326 	beq	r2,zero,800cfbc <alt_get_errno+0x24>
 800cfb0:	d0a00e17 	ldw	r2,-32712(gp)
 800cfb4:	103ee83a 	callr	r2
 800cfb8:	00000106 	br	800cfc0 <alt_get_errno+0x28>
 800cfbc:	d0a7e904 	addi	r2,gp,-24668
}
 800cfc0:	e037883a 	mov	sp,fp
 800cfc4:	dfc00117 	ldw	ra,4(sp)
 800cfc8:	df000017 	ldw	fp,0(sp)
 800cfcc:	dec00204 	addi	sp,sp,8
 800cfd0:	f800283a 	ret

0800cfd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800cfd4:	defffb04 	addi	sp,sp,-20
 800cfd8:	dfc00415 	stw	ra,16(sp)
 800cfdc:	df000315 	stw	fp,12(sp)
 800cfe0:	df000304 	addi	fp,sp,12
 800cfe4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800cfe8:	e0bfff17 	ldw	r2,-4(fp)
 800cfec:	10000816 	blt	r2,zero,800d010 <close+0x3c>
 800cff0:	01400304 	movi	r5,12
 800cff4:	e13fff17 	ldw	r4,-4(fp)
 800cff8:	8000ba40 	call	8000ba4 <__mulsi3>
 800cffc:	1007883a 	mov	r3,r2
 800d000:	00820074 	movhi	r2,2049
 800d004:	1080b604 	addi	r2,r2,728
 800d008:	1885883a 	add	r2,r3,r2
 800d00c:	00000106 	br	800d014 <close+0x40>
 800d010:	0005883a 	mov	r2,zero
 800d014:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d018:	e0bffd17 	ldw	r2,-12(fp)
 800d01c:	10001926 	beq	r2,zero,800d084 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d020:	e0bffd17 	ldw	r2,-12(fp)
 800d024:	10800017 	ldw	r2,0(r2)
 800d028:	10800417 	ldw	r2,16(r2)
 800d02c:	10000626 	beq	r2,zero,800d048 <close+0x74>
 800d030:	e0bffd17 	ldw	r2,-12(fp)
 800d034:	10800017 	ldw	r2,0(r2)
 800d038:	10800417 	ldw	r2,16(r2)
 800d03c:	e13ffd17 	ldw	r4,-12(fp)
 800d040:	103ee83a 	callr	r2
 800d044:	00000106 	br	800d04c <close+0x78>
 800d048:	0005883a 	mov	r2,zero
 800d04c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d050:	e13fff17 	ldw	r4,-4(fp)
 800d054:	800d93c0 	call	800d93c <alt_release_fd>
    if (rval < 0)
 800d058:	e0bffe17 	ldw	r2,-8(fp)
 800d05c:	1000070e 	bge	r2,zero,800d07c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d060:	800cf980 	call	800cf98 <alt_get_errno>
 800d064:	1007883a 	mov	r3,r2
 800d068:	e0bffe17 	ldw	r2,-8(fp)
 800d06c:	0085c83a 	sub	r2,zero,r2
 800d070:	18800015 	stw	r2,0(r3)
      return -1;
 800d074:	00bfffc4 	movi	r2,-1
 800d078:	00000706 	br	800d098 <close+0xc4>
    }
    return 0;
 800d07c:	0005883a 	mov	r2,zero
 800d080:	00000506 	br	800d098 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d084:	800cf980 	call	800cf98 <alt_get_errno>
 800d088:	1007883a 	mov	r3,r2
 800d08c:	00801444 	movi	r2,81
 800d090:	18800015 	stw	r2,0(r3)
    return -1;
 800d094:	00bfffc4 	movi	r2,-1
  }
}
 800d098:	e037883a 	mov	sp,fp
 800d09c:	dfc00117 	ldw	ra,4(sp)
 800d0a0:	df000017 	ldw	fp,0(sp)
 800d0a4:	dec00204 	addi	sp,sp,8
 800d0a8:	f800283a 	ret

0800d0ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800d0ac:	deffff04 	addi	sp,sp,-4
 800d0b0:	df000015 	stw	fp,0(sp)
 800d0b4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800d0b8:	0001883a 	nop
 800d0bc:	e037883a 	mov	sp,fp
 800d0c0:	df000017 	ldw	fp,0(sp)
 800d0c4:	dec00104 	addi	sp,sp,4
 800d0c8:	f800283a 	ret

0800d0cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d0cc:	defffc04 	addi	sp,sp,-16
 800d0d0:	df000315 	stw	fp,12(sp)
 800d0d4:	df000304 	addi	fp,sp,12
 800d0d8:	e13ffd15 	stw	r4,-12(fp)
 800d0dc:	e17ffe15 	stw	r5,-8(fp)
 800d0e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d0e4:	e0bfff17 	ldw	r2,-4(fp)
}
 800d0e8:	e037883a 	mov	sp,fp
 800d0ec:	df000017 	ldw	fp,0(sp)
 800d0f0:	dec00104 	addi	sp,sp,4
 800d0f4:	f800283a 	ret

0800d0f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d0f8:	defffe04 	addi	sp,sp,-8
 800d0fc:	dfc00115 	stw	ra,4(sp)
 800d100:	df000015 	stw	fp,0(sp)
 800d104:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d108:	d0a00e17 	ldw	r2,-32712(gp)
 800d10c:	10000326 	beq	r2,zero,800d11c <alt_get_errno+0x24>
 800d110:	d0a00e17 	ldw	r2,-32712(gp)
 800d114:	103ee83a 	callr	r2
 800d118:	00000106 	br	800d120 <alt_get_errno+0x28>
 800d11c:	d0a7e904 	addi	r2,gp,-24668
}
 800d120:	e037883a 	mov	sp,fp
 800d124:	dfc00117 	ldw	ra,4(sp)
 800d128:	df000017 	ldw	fp,0(sp)
 800d12c:	dec00204 	addi	sp,sp,8
 800d130:	f800283a 	ret

0800d134 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800d134:	defffa04 	addi	sp,sp,-24
 800d138:	dfc00515 	stw	ra,20(sp)
 800d13c:	df000415 	stw	fp,16(sp)
 800d140:	df000404 	addi	fp,sp,16
 800d144:	e13ffe15 	stw	r4,-8(fp)
 800d148:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800d14c:	e0bffe17 	ldw	r2,-8(fp)
 800d150:	10000326 	beq	r2,zero,800d160 <alt_dev_llist_insert+0x2c>
 800d154:	e0bffe17 	ldw	r2,-8(fp)
 800d158:	10800217 	ldw	r2,8(r2)
 800d15c:	1000061e 	bne	r2,zero,800d178 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800d160:	800d0f80 	call	800d0f8 <alt_get_errno>
 800d164:	1007883a 	mov	r3,r2
 800d168:	00800584 	movi	r2,22
 800d16c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800d170:	00bffa84 	movi	r2,-22
 800d174:	00001306 	br	800d1c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800d178:	e0bffe17 	ldw	r2,-8(fp)
 800d17c:	e0ffff17 	ldw	r3,-4(fp)
 800d180:	e0fffc15 	stw	r3,-16(fp)
 800d184:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800d188:	e0bffd17 	ldw	r2,-12(fp)
 800d18c:	e0fffc17 	ldw	r3,-16(fp)
 800d190:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800d194:	e0bffc17 	ldw	r2,-16(fp)
 800d198:	10c00017 	ldw	r3,0(r2)
 800d19c:	e0bffd17 	ldw	r2,-12(fp)
 800d1a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800d1a4:	e0bffc17 	ldw	r2,-16(fp)
 800d1a8:	10800017 	ldw	r2,0(r2)
 800d1ac:	e0fffd17 	ldw	r3,-12(fp)
 800d1b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800d1b4:	e0bffc17 	ldw	r2,-16(fp)
 800d1b8:	e0fffd17 	ldw	r3,-12(fp)
 800d1bc:	10c00015 	stw	r3,0(r2)

  return 0;  
 800d1c0:	0005883a 	mov	r2,zero
}
 800d1c4:	e037883a 	mov	sp,fp
 800d1c8:	dfc00117 	ldw	ra,4(sp)
 800d1cc:	df000017 	ldw	fp,0(sp)
 800d1d0:	dec00204 	addi	sp,sp,8
 800d1d4:	f800283a 	ret

0800d1d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800d1d8:	defffd04 	addi	sp,sp,-12
 800d1dc:	dfc00215 	stw	ra,8(sp)
 800d1e0:	df000115 	stw	fp,4(sp)
 800d1e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800d1e8:	00820074 	movhi	r2,2049
 800d1ec:	10b88404 	addi	r2,r2,-7664
 800d1f0:	e0bfff15 	stw	r2,-4(fp)
 800d1f4:	00000606 	br	800d210 <_do_ctors+0x38>
        (*ctor) (); 
 800d1f8:	e0bfff17 	ldw	r2,-4(fp)
 800d1fc:	10800017 	ldw	r2,0(r2)
 800d200:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800d204:	e0bfff17 	ldw	r2,-4(fp)
 800d208:	10bfff04 	addi	r2,r2,-4
 800d20c:	e0bfff15 	stw	r2,-4(fp)
 800d210:	e0ffff17 	ldw	r3,-4(fp)
 800d214:	00820074 	movhi	r2,2049
 800d218:	10b88504 	addi	r2,r2,-7660
 800d21c:	18bff62e 	bgeu	r3,r2,800d1f8 <__alt_data_end+0xfc00d1f8>
        (*ctor) (); 
}
 800d220:	0001883a 	nop
 800d224:	e037883a 	mov	sp,fp
 800d228:	dfc00117 	ldw	ra,4(sp)
 800d22c:	df000017 	ldw	fp,0(sp)
 800d230:	dec00204 	addi	sp,sp,8
 800d234:	f800283a 	ret

0800d238 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800d238:	defffd04 	addi	sp,sp,-12
 800d23c:	dfc00215 	stw	ra,8(sp)
 800d240:	df000115 	stw	fp,4(sp)
 800d244:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800d248:	00820074 	movhi	r2,2049
 800d24c:	10b88404 	addi	r2,r2,-7664
 800d250:	e0bfff15 	stw	r2,-4(fp)
 800d254:	00000606 	br	800d270 <_do_dtors+0x38>
        (*dtor) (); 
 800d258:	e0bfff17 	ldw	r2,-4(fp)
 800d25c:	10800017 	ldw	r2,0(r2)
 800d260:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800d264:	e0bfff17 	ldw	r2,-4(fp)
 800d268:	10bfff04 	addi	r2,r2,-4
 800d26c:	e0bfff15 	stw	r2,-4(fp)
 800d270:	e0ffff17 	ldw	r3,-4(fp)
 800d274:	00820074 	movhi	r2,2049
 800d278:	10b88504 	addi	r2,r2,-7660
 800d27c:	18bff62e 	bgeu	r3,r2,800d258 <__alt_data_end+0xfc00d258>
        (*dtor) (); 
}
 800d280:	0001883a 	nop
 800d284:	e037883a 	mov	sp,fp
 800d288:	dfc00117 	ldw	ra,4(sp)
 800d28c:	df000017 	ldw	fp,0(sp)
 800d290:	dec00204 	addi	sp,sp,8
 800d294:	f800283a 	ret

0800d298 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800d298:	deffff04 	addi	sp,sp,-4
 800d29c:	df000015 	stw	fp,0(sp)
 800d2a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800d2a4:	0001883a 	nop
 800d2a8:	e037883a 	mov	sp,fp
 800d2ac:	df000017 	ldw	fp,0(sp)
 800d2b0:	dec00104 	addi	sp,sp,4
 800d2b4:	f800283a 	ret

0800d2b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d2b8:	defff904 	addi	sp,sp,-28
 800d2bc:	dfc00615 	stw	ra,24(sp)
 800d2c0:	df000515 	stw	fp,20(sp)
 800d2c4:	df000504 	addi	fp,sp,20
 800d2c8:	e13ffc15 	stw	r4,-16(fp)
 800d2cc:	e17ffd15 	stw	r5,-12(fp)
 800d2d0:	e1bffe15 	stw	r6,-8(fp)
 800d2d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800d2d8:	e0800217 	ldw	r2,8(fp)
 800d2dc:	d8800015 	stw	r2,0(sp)
 800d2e0:	e1ffff17 	ldw	r7,-4(fp)
 800d2e4:	e1bffe17 	ldw	r6,-8(fp)
 800d2e8:	e17ffd17 	ldw	r5,-12(fp)
 800d2ec:	e13ffc17 	ldw	r4,-16(fp)
 800d2f0:	800d4680 	call	800d468 <alt_iic_isr_register>
}  
 800d2f4:	e037883a 	mov	sp,fp
 800d2f8:	dfc00117 	ldw	ra,4(sp)
 800d2fc:	df000017 	ldw	fp,0(sp)
 800d300:	dec00204 	addi	sp,sp,8
 800d304:	f800283a 	ret

0800d308 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800d308:	defff904 	addi	sp,sp,-28
 800d30c:	df000615 	stw	fp,24(sp)
 800d310:	df000604 	addi	fp,sp,24
 800d314:	e13ffe15 	stw	r4,-8(fp)
 800d318:	e17fff15 	stw	r5,-4(fp)
 800d31c:	e0bfff17 	ldw	r2,-4(fp)
 800d320:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d324:	0005303a 	rdctl	r2,status
 800d328:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d32c:	e0fffb17 	ldw	r3,-20(fp)
 800d330:	00bfff84 	movi	r2,-2
 800d334:	1884703a 	and	r2,r3,r2
 800d338:	1001703a 	wrctl	status,r2
  
  return context;
 800d33c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d340:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800d344:	00c00044 	movi	r3,1
 800d348:	e0bffa17 	ldw	r2,-24(fp)
 800d34c:	1884983a 	sll	r2,r3,r2
 800d350:	1007883a 	mov	r3,r2
 800d354:	d0a7ed17 	ldw	r2,-24652(gp)
 800d358:	1884b03a 	or	r2,r3,r2
 800d35c:	d0a7ed15 	stw	r2,-24652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d360:	d0a7ed17 	ldw	r2,-24652(gp)
 800d364:	100170fa 	wrctl	ienable,r2
 800d368:	e0bffc17 	ldw	r2,-16(fp)
 800d36c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d370:	e0bffd17 	ldw	r2,-12(fp)
 800d374:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d378:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800d37c:	0001883a 	nop
}
 800d380:	e037883a 	mov	sp,fp
 800d384:	df000017 	ldw	fp,0(sp)
 800d388:	dec00104 	addi	sp,sp,4
 800d38c:	f800283a 	ret

0800d390 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800d390:	defff904 	addi	sp,sp,-28
 800d394:	df000615 	stw	fp,24(sp)
 800d398:	df000604 	addi	fp,sp,24
 800d39c:	e13ffe15 	stw	r4,-8(fp)
 800d3a0:	e17fff15 	stw	r5,-4(fp)
 800d3a4:	e0bfff17 	ldw	r2,-4(fp)
 800d3a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d3ac:	0005303a 	rdctl	r2,status
 800d3b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d3b4:	e0fffb17 	ldw	r3,-20(fp)
 800d3b8:	00bfff84 	movi	r2,-2
 800d3bc:	1884703a 	and	r2,r3,r2
 800d3c0:	1001703a 	wrctl	status,r2
  
  return context;
 800d3c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d3c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800d3cc:	00c00044 	movi	r3,1
 800d3d0:	e0bffa17 	ldw	r2,-24(fp)
 800d3d4:	1884983a 	sll	r2,r3,r2
 800d3d8:	0084303a 	nor	r2,zero,r2
 800d3dc:	1007883a 	mov	r3,r2
 800d3e0:	d0a7ed17 	ldw	r2,-24652(gp)
 800d3e4:	1884703a 	and	r2,r3,r2
 800d3e8:	d0a7ed15 	stw	r2,-24652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d3ec:	d0a7ed17 	ldw	r2,-24652(gp)
 800d3f0:	100170fa 	wrctl	ienable,r2
 800d3f4:	e0bffc17 	ldw	r2,-16(fp)
 800d3f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d3fc:	e0bffd17 	ldw	r2,-12(fp)
 800d400:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d404:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800d408:	0001883a 	nop
}
 800d40c:	e037883a 	mov	sp,fp
 800d410:	df000017 	ldw	fp,0(sp)
 800d414:	dec00104 	addi	sp,sp,4
 800d418:	f800283a 	ret

0800d41c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800d41c:	defffc04 	addi	sp,sp,-16
 800d420:	df000315 	stw	fp,12(sp)
 800d424:	df000304 	addi	fp,sp,12
 800d428:	e13ffe15 	stw	r4,-8(fp)
 800d42c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800d430:	000530fa 	rdctl	r2,ienable
 800d434:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800d438:	00c00044 	movi	r3,1
 800d43c:	e0bfff17 	ldw	r2,-4(fp)
 800d440:	1884983a 	sll	r2,r3,r2
 800d444:	1007883a 	mov	r3,r2
 800d448:	e0bffd17 	ldw	r2,-12(fp)
 800d44c:	1884703a 	and	r2,r3,r2
 800d450:	1004c03a 	cmpne	r2,r2,zero
 800d454:	10803fcc 	andi	r2,r2,255
}
 800d458:	e037883a 	mov	sp,fp
 800d45c:	df000017 	ldw	fp,0(sp)
 800d460:	dec00104 	addi	sp,sp,4
 800d464:	f800283a 	ret

0800d468 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d468:	defff504 	addi	sp,sp,-44
 800d46c:	dfc00a15 	stw	ra,40(sp)
 800d470:	df000915 	stw	fp,36(sp)
 800d474:	df000904 	addi	fp,sp,36
 800d478:	e13ffc15 	stw	r4,-16(fp)
 800d47c:	e17ffd15 	stw	r5,-12(fp)
 800d480:	e1bffe15 	stw	r6,-8(fp)
 800d484:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800d488:	00bffa84 	movi	r2,-22
 800d48c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800d490:	e0bffd17 	ldw	r2,-12(fp)
 800d494:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800d498:	e0bff817 	ldw	r2,-32(fp)
 800d49c:	10800808 	cmpgei	r2,r2,32
 800d4a0:	1000271e 	bne	r2,zero,800d540 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d4a4:	0005303a 	rdctl	r2,status
 800d4a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d4ac:	e0fffb17 	ldw	r3,-20(fp)
 800d4b0:	00bfff84 	movi	r2,-2
 800d4b4:	1884703a 	and	r2,r3,r2
 800d4b8:	1001703a 	wrctl	status,r2
  
  return context;
 800d4bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800d4c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800d4c4:	00820074 	movhi	r2,2049
 800d4c8:	10891104 	addi	r2,r2,9284
 800d4cc:	e0fff817 	ldw	r3,-32(fp)
 800d4d0:	180690fa 	slli	r3,r3,3
 800d4d4:	10c5883a 	add	r2,r2,r3
 800d4d8:	e0fffe17 	ldw	r3,-8(fp)
 800d4dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800d4e0:	00820074 	movhi	r2,2049
 800d4e4:	10891104 	addi	r2,r2,9284
 800d4e8:	e0fff817 	ldw	r3,-32(fp)
 800d4ec:	180690fa 	slli	r3,r3,3
 800d4f0:	10c5883a 	add	r2,r2,r3
 800d4f4:	10800104 	addi	r2,r2,4
 800d4f8:	e0ffff17 	ldw	r3,-4(fp)
 800d4fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800d500:	e0bffe17 	ldw	r2,-8(fp)
 800d504:	10000526 	beq	r2,zero,800d51c <alt_iic_isr_register+0xb4>
 800d508:	e0bff817 	ldw	r2,-32(fp)
 800d50c:	100b883a 	mov	r5,r2
 800d510:	e13ffc17 	ldw	r4,-16(fp)
 800d514:	800d3080 	call	800d308 <alt_ic_irq_enable>
 800d518:	00000406 	br	800d52c <alt_iic_isr_register+0xc4>
 800d51c:	e0bff817 	ldw	r2,-32(fp)
 800d520:	100b883a 	mov	r5,r2
 800d524:	e13ffc17 	ldw	r4,-16(fp)
 800d528:	800d3900 	call	800d390 <alt_ic_irq_disable>
 800d52c:	e0bff715 	stw	r2,-36(fp)
 800d530:	e0bffa17 	ldw	r2,-24(fp)
 800d534:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d538:	e0bff917 	ldw	r2,-28(fp)
 800d53c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800d540:	e0bff717 	ldw	r2,-36(fp)
}
 800d544:	e037883a 	mov	sp,fp
 800d548:	dfc00117 	ldw	ra,4(sp)
 800d54c:	df000017 	ldw	fp,0(sp)
 800d550:	dec00204 	addi	sp,sp,8
 800d554:	f800283a 	ret

0800d558 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800d558:	defff804 	addi	sp,sp,-32
 800d55c:	dfc00715 	stw	ra,28(sp)
 800d560:	df000615 	stw	fp,24(sp)
 800d564:	dc000515 	stw	r16,20(sp)
 800d568:	df000604 	addi	fp,sp,24
 800d56c:	e13ffb15 	stw	r4,-20(fp)
 800d570:	e17ffc15 	stw	r5,-16(fp)
 800d574:	e1bffd15 	stw	r6,-12(fp)
 800d578:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800d57c:	e1bffe17 	ldw	r6,-8(fp)
 800d580:	e17ffd17 	ldw	r5,-12(fp)
 800d584:	e13ffc17 	ldw	r4,-16(fp)
 800d588:	800d7e00 	call	800d7e0 <open>
 800d58c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800d590:	e0bffa17 	ldw	r2,-24(fp)
 800d594:	10002216 	blt	r2,zero,800d620 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800d598:	04020074 	movhi	r16,2049
 800d59c:	8400b604 	addi	r16,r16,728
 800d5a0:	e0bffa17 	ldw	r2,-24(fp)
 800d5a4:	01400304 	movi	r5,12
 800d5a8:	1009883a 	mov	r4,r2
 800d5ac:	8000ba40 	call	8000ba4 <__mulsi3>
 800d5b0:	8085883a 	add	r2,r16,r2
 800d5b4:	10c00017 	ldw	r3,0(r2)
 800d5b8:	e0bffb17 	ldw	r2,-20(fp)
 800d5bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800d5c0:	04020074 	movhi	r16,2049
 800d5c4:	8400b604 	addi	r16,r16,728
 800d5c8:	e0bffa17 	ldw	r2,-24(fp)
 800d5cc:	01400304 	movi	r5,12
 800d5d0:	1009883a 	mov	r4,r2
 800d5d4:	8000ba40 	call	8000ba4 <__mulsi3>
 800d5d8:	8085883a 	add	r2,r16,r2
 800d5dc:	10800104 	addi	r2,r2,4
 800d5e0:	10c00017 	ldw	r3,0(r2)
 800d5e4:	e0bffb17 	ldw	r2,-20(fp)
 800d5e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800d5ec:	04020074 	movhi	r16,2049
 800d5f0:	8400b604 	addi	r16,r16,728
 800d5f4:	e0bffa17 	ldw	r2,-24(fp)
 800d5f8:	01400304 	movi	r5,12
 800d5fc:	1009883a 	mov	r4,r2
 800d600:	8000ba40 	call	8000ba4 <__mulsi3>
 800d604:	8085883a 	add	r2,r16,r2
 800d608:	10800204 	addi	r2,r2,8
 800d60c:	10c00017 	ldw	r3,0(r2)
 800d610:	e0bffb17 	ldw	r2,-20(fp)
 800d614:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800d618:	e13ffa17 	ldw	r4,-24(fp)
 800d61c:	800d93c0 	call	800d93c <alt_release_fd>
  }
} 
 800d620:	0001883a 	nop
 800d624:	e6ffff04 	addi	sp,fp,-4
 800d628:	dfc00217 	ldw	ra,8(sp)
 800d62c:	df000117 	ldw	fp,4(sp)
 800d630:	dc000017 	ldw	r16,0(sp)
 800d634:	dec00304 	addi	sp,sp,12
 800d638:	f800283a 	ret

0800d63c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800d63c:	defffb04 	addi	sp,sp,-20
 800d640:	dfc00415 	stw	ra,16(sp)
 800d644:	df000315 	stw	fp,12(sp)
 800d648:	df000304 	addi	fp,sp,12
 800d64c:	e13ffd15 	stw	r4,-12(fp)
 800d650:	e17ffe15 	stw	r5,-8(fp)
 800d654:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800d658:	01c07fc4 	movi	r7,511
 800d65c:	01800044 	movi	r6,1
 800d660:	e17ffd17 	ldw	r5,-12(fp)
 800d664:	01020074 	movhi	r4,2049
 800d668:	2100b904 	addi	r4,r4,740
 800d66c:	800d5580 	call	800d558 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800d670:	01c07fc4 	movi	r7,511
 800d674:	000d883a 	mov	r6,zero
 800d678:	e17ffe17 	ldw	r5,-8(fp)
 800d67c:	01020074 	movhi	r4,2049
 800d680:	2100b604 	addi	r4,r4,728
 800d684:	800d5580 	call	800d558 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800d688:	01c07fc4 	movi	r7,511
 800d68c:	01800044 	movi	r6,1
 800d690:	e17fff17 	ldw	r5,-4(fp)
 800d694:	01020074 	movhi	r4,2049
 800d698:	2100bc04 	addi	r4,r4,752
 800d69c:	800d5580 	call	800d558 <alt_open_fd>
}  
 800d6a0:	0001883a 	nop
 800d6a4:	e037883a 	mov	sp,fp
 800d6a8:	dfc00117 	ldw	ra,4(sp)
 800d6ac:	df000017 	ldw	fp,0(sp)
 800d6b0:	dec00204 	addi	sp,sp,8
 800d6b4:	f800283a 	ret

0800d6b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d6b8:	defffe04 	addi	sp,sp,-8
 800d6bc:	dfc00115 	stw	ra,4(sp)
 800d6c0:	df000015 	stw	fp,0(sp)
 800d6c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d6c8:	d0a00e17 	ldw	r2,-32712(gp)
 800d6cc:	10000326 	beq	r2,zero,800d6dc <alt_get_errno+0x24>
 800d6d0:	d0a00e17 	ldw	r2,-32712(gp)
 800d6d4:	103ee83a 	callr	r2
 800d6d8:	00000106 	br	800d6e0 <alt_get_errno+0x28>
 800d6dc:	d0a7e904 	addi	r2,gp,-24668
}
 800d6e0:	e037883a 	mov	sp,fp
 800d6e4:	dfc00117 	ldw	ra,4(sp)
 800d6e8:	df000017 	ldw	fp,0(sp)
 800d6ec:	dec00204 	addi	sp,sp,8
 800d6f0:	f800283a 	ret

0800d6f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800d6f4:	defffb04 	addi	sp,sp,-20
 800d6f8:	dfc00415 	stw	ra,16(sp)
 800d6fc:	df000315 	stw	fp,12(sp)
 800d700:	dc000215 	stw	r16,8(sp)
 800d704:	df000304 	addi	fp,sp,12
 800d708:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800d70c:	e0bffe17 	ldw	r2,-8(fp)
 800d710:	10800217 	ldw	r2,8(r2)
 800d714:	10d00034 	orhi	r3,r2,16384
 800d718:	e0bffe17 	ldw	r2,-8(fp)
 800d71c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d720:	e03ffd15 	stw	zero,-12(fp)
 800d724:	00002306 	br	800d7b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d728:	04020074 	movhi	r16,2049
 800d72c:	8400b604 	addi	r16,r16,728
 800d730:	e0bffd17 	ldw	r2,-12(fp)
 800d734:	01400304 	movi	r5,12
 800d738:	1009883a 	mov	r4,r2
 800d73c:	8000ba40 	call	8000ba4 <__mulsi3>
 800d740:	8085883a 	add	r2,r16,r2
 800d744:	10c00017 	ldw	r3,0(r2)
 800d748:	e0bffe17 	ldw	r2,-8(fp)
 800d74c:	10800017 	ldw	r2,0(r2)
 800d750:	1880151e 	bne	r3,r2,800d7a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d754:	04020074 	movhi	r16,2049
 800d758:	8400b604 	addi	r16,r16,728
 800d75c:	e0bffd17 	ldw	r2,-12(fp)
 800d760:	01400304 	movi	r5,12
 800d764:	1009883a 	mov	r4,r2
 800d768:	8000ba40 	call	8000ba4 <__mulsi3>
 800d76c:	8085883a 	add	r2,r16,r2
 800d770:	10800204 	addi	r2,r2,8
 800d774:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d778:	10000b0e 	bge	r2,zero,800d7a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800d77c:	01400304 	movi	r5,12
 800d780:	e13ffd17 	ldw	r4,-12(fp)
 800d784:	8000ba40 	call	8000ba4 <__mulsi3>
 800d788:	1007883a 	mov	r3,r2
 800d78c:	00820074 	movhi	r2,2049
 800d790:	1080b604 	addi	r2,r2,728
 800d794:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d798:	e0bffe17 	ldw	r2,-8(fp)
 800d79c:	18800226 	beq	r3,r2,800d7a8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800d7a0:	00bffcc4 	movi	r2,-13
 800d7a4:	00000806 	br	800d7c8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d7a8:	e0bffd17 	ldw	r2,-12(fp)
 800d7ac:	10800044 	addi	r2,r2,1
 800d7b0:	e0bffd15 	stw	r2,-12(fp)
 800d7b4:	d0a00d17 	ldw	r2,-32716(gp)
 800d7b8:	1007883a 	mov	r3,r2
 800d7bc:	e0bffd17 	ldw	r2,-12(fp)
 800d7c0:	18bfd92e 	bgeu	r3,r2,800d728 <__alt_data_end+0xfc00d728>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800d7c4:	0005883a 	mov	r2,zero
}
 800d7c8:	e6ffff04 	addi	sp,fp,-4
 800d7cc:	dfc00217 	ldw	ra,8(sp)
 800d7d0:	df000117 	ldw	fp,4(sp)
 800d7d4:	dc000017 	ldw	r16,0(sp)
 800d7d8:	dec00304 	addi	sp,sp,12
 800d7dc:	f800283a 	ret

0800d7e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800d7e0:	defff604 	addi	sp,sp,-40
 800d7e4:	dfc00915 	stw	ra,36(sp)
 800d7e8:	df000815 	stw	fp,32(sp)
 800d7ec:	df000804 	addi	fp,sp,32
 800d7f0:	e13ffd15 	stw	r4,-12(fp)
 800d7f4:	e17ffe15 	stw	r5,-8(fp)
 800d7f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800d7fc:	00bfffc4 	movi	r2,-1
 800d800:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800d804:	00bffb44 	movi	r2,-19
 800d808:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800d80c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800d810:	d1600b04 	addi	r5,gp,-32724
 800d814:	e13ffd17 	ldw	r4,-12(fp)
 800d818:	800db880 	call	800db88 <alt_find_dev>
 800d81c:	e0bff815 	stw	r2,-32(fp)
 800d820:	e0bff817 	ldw	r2,-32(fp)
 800d824:	1000051e 	bne	r2,zero,800d83c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800d828:	e13ffd17 	ldw	r4,-12(fp)
 800d82c:	800dc180 	call	800dc18 <alt_find_file>
 800d830:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800d834:	00800044 	movi	r2,1
 800d838:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800d83c:	e0bff817 	ldw	r2,-32(fp)
 800d840:	10002b26 	beq	r2,zero,800d8f0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800d844:	e13ff817 	ldw	r4,-32(fp)
 800d848:	800dd200 	call	800dd20 <alt_get_fd>
 800d84c:	e0bff915 	stw	r2,-28(fp)
 800d850:	e0bff917 	ldw	r2,-28(fp)
 800d854:	1000030e 	bge	r2,zero,800d864 <open+0x84>
    {
      status = index;
 800d858:	e0bff917 	ldw	r2,-28(fp)
 800d85c:	e0bffa15 	stw	r2,-24(fp)
 800d860:	00002506 	br	800d8f8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800d864:	01400304 	movi	r5,12
 800d868:	e13ff917 	ldw	r4,-28(fp)
 800d86c:	8000ba40 	call	8000ba4 <__mulsi3>
 800d870:	1007883a 	mov	r3,r2
 800d874:	00820074 	movhi	r2,2049
 800d878:	1080b604 	addi	r2,r2,728
 800d87c:	1885883a 	add	r2,r3,r2
 800d880:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800d884:	e0fffe17 	ldw	r3,-8(fp)
 800d888:	00900034 	movhi	r2,16384
 800d88c:	10bfffc4 	addi	r2,r2,-1
 800d890:	1886703a 	and	r3,r3,r2
 800d894:	e0bffc17 	ldw	r2,-16(fp)
 800d898:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800d89c:	e0bffb17 	ldw	r2,-20(fp)
 800d8a0:	1000051e 	bne	r2,zero,800d8b8 <open+0xd8>
 800d8a4:	e13ffc17 	ldw	r4,-16(fp)
 800d8a8:	800d6f40 	call	800d6f4 <alt_file_locked>
 800d8ac:	e0bffa15 	stw	r2,-24(fp)
 800d8b0:	e0bffa17 	ldw	r2,-24(fp)
 800d8b4:	10001016 	blt	r2,zero,800d8f8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800d8b8:	e0bff817 	ldw	r2,-32(fp)
 800d8bc:	10800317 	ldw	r2,12(r2)
 800d8c0:	10000826 	beq	r2,zero,800d8e4 <open+0x104>
 800d8c4:	e0bff817 	ldw	r2,-32(fp)
 800d8c8:	10800317 	ldw	r2,12(r2)
 800d8cc:	e1ffff17 	ldw	r7,-4(fp)
 800d8d0:	e1bffe17 	ldw	r6,-8(fp)
 800d8d4:	e17ffd17 	ldw	r5,-12(fp)
 800d8d8:	e13ffc17 	ldw	r4,-16(fp)
 800d8dc:	103ee83a 	callr	r2
 800d8e0:	00000106 	br	800d8e8 <open+0x108>
 800d8e4:	0005883a 	mov	r2,zero
 800d8e8:	e0bffa15 	stw	r2,-24(fp)
 800d8ec:	00000206 	br	800d8f8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800d8f0:	00bffb44 	movi	r2,-19
 800d8f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800d8f8:	e0bffa17 	ldw	r2,-24(fp)
 800d8fc:	1000090e 	bge	r2,zero,800d924 <open+0x144>
  {
    alt_release_fd (index);  
 800d900:	e13ff917 	ldw	r4,-28(fp)
 800d904:	800d93c0 	call	800d93c <alt_release_fd>
    ALT_ERRNO = -status;
 800d908:	800d6b80 	call	800d6b8 <alt_get_errno>
 800d90c:	1007883a 	mov	r3,r2
 800d910:	e0bffa17 	ldw	r2,-24(fp)
 800d914:	0085c83a 	sub	r2,zero,r2
 800d918:	18800015 	stw	r2,0(r3)
    return -1;
 800d91c:	00bfffc4 	movi	r2,-1
 800d920:	00000106 	br	800d928 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800d924:	e0bff917 	ldw	r2,-28(fp)
}
 800d928:	e037883a 	mov	sp,fp
 800d92c:	dfc00117 	ldw	ra,4(sp)
 800d930:	df000017 	ldw	fp,0(sp)
 800d934:	dec00204 	addi	sp,sp,8
 800d938:	f800283a 	ret

0800d93c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d93c:	defffc04 	addi	sp,sp,-16
 800d940:	dfc00315 	stw	ra,12(sp)
 800d944:	df000215 	stw	fp,8(sp)
 800d948:	dc000115 	stw	r16,4(sp)
 800d94c:	df000204 	addi	fp,sp,8
 800d950:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800d954:	e0bffe17 	ldw	r2,-8(fp)
 800d958:	108000d0 	cmplti	r2,r2,3
 800d95c:	1000111e 	bne	r2,zero,800d9a4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d960:	04020074 	movhi	r16,2049
 800d964:	8400b604 	addi	r16,r16,728
 800d968:	e0bffe17 	ldw	r2,-8(fp)
 800d96c:	01400304 	movi	r5,12
 800d970:	1009883a 	mov	r4,r2
 800d974:	8000ba40 	call	8000ba4 <__mulsi3>
 800d978:	8085883a 	add	r2,r16,r2
 800d97c:	10800204 	addi	r2,r2,8
 800d980:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d984:	04020074 	movhi	r16,2049
 800d988:	8400b604 	addi	r16,r16,728
 800d98c:	e0bffe17 	ldw	r2,-8(fp)
 800d990:	01400304 	movi	r5,12
 800d994:	1009883a 	mov	r4,r2
 800d998:	8000ba40 	call	8000ba4 <__mulsi3>
 800d99c:	8085883a 	add	r2,r16,r2
 800d9a0:	10000015 	stw	zero,0(r2)
  }
}
 800d9a4:	0001883a 	nop
 800d9a8:	e6ffff04 	addi	sp,fp,-4
 800d9ac:	dfc00217 	ldw	ra,8(sp)
 800d9b0:	df000117 	ldw	fp,4(sp)
 800d9b4:	dc000017 	ldw	r16,0(sp)
 800d9b8:	dec00304 	addi	sp,sp,12
 800d9bc:	f800283a 	ret

0800d9c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800d9c0:	defffa04 	addi	sp,sp,-24
 800d9c4:	df000515 	stw	fp,20(sp)
 800d9c8:	df000504 	addi	fp,sp,20
 800d9cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d9d0:	0005303a 	rdctl	r2,status
 800d9d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d9d8:	e0fffc17 	ldw	r3,-16(fp)
 800d9dc:	00bfff84 	movi	r2,-2
 800d9e0:	1884703a 	and	r2,r3,r2
 800d9e4:	1001703a 	wrctl	status,r2
  
  return context;
 800d9e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800d9ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800d9f0:	e0bfff17 	ldw	r2,-4(fp)
 800d9f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800d9f8:	e0bffd17 	ldw	r2,-12(fp)
 800d9fc:	10800017 	ldw	r2,0(r2)
 800da00:	e0fffd17 	ldw	r3,-12(fp)
 800da04:	18c00117 	ldw	r3,4(r3)
 800da08:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800da0c:	e0bffd17 	ldw	r2,-12(fp)
 800da10:	10800117 	ldw	r2,4(r2)
 800da14:	e0fffd17 	ldw	r3,-12(fp)
 800da18:	18c00017 	ldw	r3,0(r3)
 800da1c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800da20:	e0bffd17 	ldw	r2,-12(fp)
 800da24:	e0fffd17 	ldw	r3,-12(fp)
 800da28:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800da2c:	e0bffd17 	ldw	r2,-12(fp)
 800da30:	e0fffd17 	ldw	r3,-12(fp)
 800da34:	10c00015 	stw	r3,0(r2)
 800da38:	e0bffb17 	ldw	r2,-20(fp)
 800da3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800da40:	e0bffe17 	ldw	r2,-8(fp)
 800da44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800da48:	0001883a 	nop
 800da4c:	e037883a 	mov	sp,fp
 800da50:	df000017 	ldw	fp,0(sp)
 800da54:	dec00104 	addi	sp,sp,4
 800da58:	f800283a 	ret

0800da5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800da5c:	defffb04 	addi	sp,sp,-20
 800da60:	dfc00415 	stw	ra,16(sp)
 800da64:	df000315 	stw	fp,12(sp)
 800da68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800da6c:	d0a01017 	ldw	r2,-32704(gp)
 800da70:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800da74:	d0a7ef17 	ldw	r2,-24644(gp)
 800da78:	10800044 	addi	r2,r2,1
 800da7c:	d0a7ef15 	stw	r2,-24644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800da80:	00002e06 	br	800db3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800da84:	e0bffd17 	ldw	r2,-12(fp)
 800da88:	10800017 	ldw	r2,0(r2)
 800da8c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800da90:	e0bffd17 	ldw	r2,-12(fp)
 800da94:	10800403 	ldbu	r2,16(r2)
 800da98:	10803fcc 	andi	r2,r2,255
 800da9c:	10000426 	beq	r2,zero,800dab0 <alt_tick+0x54>
 800daa0:	d0a7ef17 	ldw	r2,-24644(gp)
 800daa4:	1000021e 	bne	r2,zero,800dab0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800daa8:	e0bffd17 	ldw	r2,-12(fp)
 800daac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800dab0:	e0bffd17 	ldw	r2,-12(fp)
 800dab4:	10800217 	ldw	r2,8(r2)
 800dab8:	d0e7ef17 	ldw	r3,-24644(gp)
 800dabc:	18801d36 	bltu	r3,r2,800db34 <alt_tick+0xd8>
 800dac0:	e0bffd17 	ldw	r2,-12(fp)
 800dac4:	10800403 	ldbu	r2,16(r2)
 800dac8:	10803fcc 	andi	r2,r2,255
 800dacc:	1000191e 	bne	r2,zero,800db34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800dad0:	e0bffd17 	ldw	r2,-12(fp)
 800dad4:	10800317 	ldw	r2,12(r2)
 800dad8:	e0fffd17 	ldw	r3,-12(fp)
 800dadc:	18c00517 	ldw	r3,20(r3)
 800dae0:	1809883a 	mov	r4,r3
 800dae4:	103ee83a 	callr	r2
 800dae8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800daec:	e0bfff17 	ldw	r2,-4(fp)
 800daf0:	1000031e 	bne	r2,zero,800db00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800daf4:	e13ffd17 	ldw	r4,-12(fp)
 800daf8:	800d9c00 	call	800d9c0 <alt_alarm_stop>
 800dafc:	00000d06 	br	800db34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800db00:	e0bffd17 	ldw	r2,-12(fp)
 800db04:	10c00217 	ldw	r3,8(r2)
 800db08:	e0bfff17 	ldw	r2,-4(fp)
 800db0c:	1887883a 	add	r3,r3,r2
 800db10:	e0bffd17 	ldw	r2,-12(fp)
 800db14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800db18:	e0bffd17 	ldw	r2,-12(fp)
 800db1c:	10c00217 	ldw	r3,8(r2)
 800db20:	d0a7ef17 	ldw	r2,-24644(gp)
 800db24:	1880032e 	bgeu	r3,r2,800db34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800db28:	e0bffd17 	ldw	r2,-12(fp)
 800db2c:	00c00044 	movi	r3,1
 800db30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800db34:	e0bffe17 	ldw	r2,-8(fp)
 800db38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800db3c:	e0fffd17 	ldw	r3,-12(fp)
 800db40:	d0a01004 	addi	r2,gp,-32704
 800db44:	18bfcf1e 	bne	r3,r2,800da84 <__alt_data_end+0xfc00da84>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800db48:	0001883a 	nop
}
 800db4c:	0001883a 	nop
 800db50:	e037883a 	mov	sp,fp
 800db54:	dfc00117 	ldw	ra,4(sp)
 800db58:	df000017 	ldw	fp,0(sp)
 800db5c:	dec00204 	addi	sp,sp,8
 800db60:	f800283a 	ret

0800db64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800db64:	deffff04 	addi	sp,sp,-4
 800db68:	df000015 	stw	fp,0(sp)
 800db6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800db70:	000170fa 	wrctl	ienable,zero
}
 800db74:	0001883a 	nop
 800db78:	e037883a 	mov	sp,fp
 800db7c:	df000017 	ldw	fp,0(sp)
 800db80:	dec00104 	addi	sp,sp,4
 800db84:	f800283a 	ret

0800db88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800db88:	defffa04 	addi	sp,sp,-24
 800db8c:	dfc00515 	stw	ra,20(sp)
 800db90:	df000415 	stw	fp,16(sp)
 800db94:	df000404 	addi	fp,sp,16
 800db98:	e13ffe15 	stw	r4,-8(fp)
 800db9c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800dba0:	e0bfff17 	ldw	r2,-4(fp)
 800dba4:	10800017 	ldw	r2,0(r2)
 800dba8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800dbac:	e13ffe17 	ldw	r4,-8(fp)
 800dbb0:	8000d0c0 	call	8000d0c <strlen>
 800dbb4:	10800044 	addi	r2,r2,1
 800dbb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800dbbc:	00000d06 	br	800dbf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800dbc0:	e0bffc17 	ldw	r2,-16(fp)
 800dbc4:	10800217 	ldw	r2,8(r2)
 800dbc8:	e0fffd17 	ldw	r3,-12(fp)
 800dbcc:	180d883a 	mov	r6,r3
 800dbd0:	e17ffe17 	ldw	r5,-8(fp)
 800dbd4:	1009883a 	mov	r4,r2
 800dbd8:	800decc0 	call	800decc <memcmp>
 800dbdc:	1000021e 	bne	r2,zero,800dbe8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800dbe0:	e0bffc17 	ldw	r2,-16(fp)
 800dbe4:	00000706 	br	800dc04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800dbe8:	e0bffc17 	ldw	r2,-16(fp)
 800dbec:	10800017 	ldw	r2,0(r2)
 800dbf0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800dbf4:	e0fffc17 	ldw	r3,-16(fp)
 800dbf8:	e0bfff17 	ldw	r2,-4(fp)
 800dbfc:	18bff01e 	bne	r3,r2,800dbc0 <__alt_data_end+0xfc00dbc0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800dc00:	0005883a 	mov	r2,zero
}
 800dc04:	e037883a 	mov	sp,fp
 800dc08:	dfc00117 	ldw	ra,4(sp)
 800dc0c:	df000017 	ldw	fp,0(sp)
 800dc10:	dec00204 	addi	sp,sp,8
 800dc14:	f800283a 	ret

0800dc18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800dc18:	defffb04 	addi	sp,sp,-20
 800dc1c:	dfc00415 	stw	ra,16(sp)
 800dc20:	df000315 	stw	fp,12(sp)
 800dc24:	df000304 	addi	fp,sp,12
 800dc28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800dc2c:	d0a00917 	ldw	r2,-32732(gp)
 800dc30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800dc34:	00003106 	br	800dcfc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800dc38:	e0bffd17 	ldw	r2,-12(fp)
 800dc3c:	10800217 	ldw	r2,8(r2)
 800dc40:	1009883a 	mov	r4,r2
 800dc44:	8000d0c0 	call	8000d0c <strlen>
 800dc48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800dc4c:	e0bffd17 	ldw	r2,-12(fp)
 800dc50:	10c00217 	ldw	r3,8(r2)
 800dc54:	e0bffe17 	ldw	r2,-8(fp)
 800dc58:	10bfffc4 	addi	r2,r2,-1
 800dc5c:	1885883a 	add	r2,r3,r2
 800dc60:	10800003 	ldbu	r2,0(r2)
 800dc64:	10803fcc 	andi	r2,r2,255
 800dc68:	1080201c 	xori	r2,r2,128
 800dc6c:	10bfe004 	addi	r2,r2,-128
 800dc70:	10800bd8 	cmpnei	r2,r2,47
 800dc74:	1000031e 	bne	r2,zero,800dc84 <alt_find_file+0x6c>
    {
      len -= 1;
 800dc78:	e0bffe17 	ldw	r2,-8(fp)
 800dc7c:	10bfffc4 	addi	r2,r2,-1
 800dc80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800dc84:	e0bffe17 	ldw	r2,-8(fp)
 800dc88:	e0ffff17 	ldw	r3,-4(fp)
 800dc8c:	1885883a 	add	r2,r3,r2
 800dc90:	10800003 	ldbu	r2,0(r2)
 800dc94:	10803fcc 	andi	r2,r2,255
 800dc98:	1080201c 	xori	r2,r2,128
 800dc9c:	10bfe004 	addi	r2,r2,-128
 800dca0:	10800be0 	cmpeqi	r2,r2,47
 800dca4:	1000081e 	bne	r2,zero,800dcc8 <alt_find_file+0xb0>
 800dca8:	e0bffe17 	ldw	r2,-8(fp)
 800dcac:	e0ffff17 	ldw	r3,-4(fp)
 800dcb0:	1885883a 	add	r2,r3,r2
 800dcb4:	10800003 	ldbu	r2,0(r2)
 800dcb8:	10803fcc 	andi	r2,r2,255
 800dcbc:	1080201c 	xori	r2,r2,128
 800dcc0:	10bfe004 	addi	r2,r2,-128
 800dcc4:	10000a1e 	bne	r2,zero,800dcf0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800dcc8:	e0bffd17 	ldw	r2,-12(fp)
 800dccc:	10800217 	ldw	r2,8(r2)
 800dcd0:	e0fffe17 	ldw	r3,-8(fp)
 800dcd4:	180d883a 	mov	r6,r3
 800dcd8:	e17fff17 	ldw	r5,-4(fp)
 800dcdc:	1009883a 	mov	r4,r2
 800dce0:	800decc0 	call	800decc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800dce4:	1000021e 	bne	r2,zero,800dcf0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800dce8:	e0bffd17 	ldw	r2,-12(fp)
 800dcec:	00000706 	br	800dd0c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800dcf0:	e0bffd17 	ldw	r2,-12(fp)
 800dcf4:	10800017 	ldw	r2,0(r2)
 800dcf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800dcfc:	e0fffd17 	ldw	r3,-12(fp)
 800dd00:	d0a00904 	addi	r2,gp,-32732
 800dd04:	18bfcc1e 	bne	r3,r2,800dc38 <__alt_data_end+0xfc00dc38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800dd08:	0005883a 	mov	r2,zero
}
 800dd0c:	e037883a 	mov	sp,fp
 800dd10:	dfc00117 	ldw	ra,4(sp)
 800dd14:	df000017 	ldw	fp,0(sp)
 800dd18:	dec00204 	addi	sp,sp,8
 800dd1c:	f800283a 	ret

0800dd20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800dd20:	defffa04 	addi	sp,sp,-24
 800dd24:	dfc00515 	stw	ra,20(sp)
 800dd28:	df000415 	stw	fp,16(sp)
 800dd2c:	dc000315 	stw	r16,12(sp)
 800dd30:	df000404 	addi	fp,sp,16
 800dd34:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800dd38:	00bffa04 	movi	r2,-24
 800dd3c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800dd40:	e03ffc15 	stw	zero,-16(fp)
 800dd44:	00001d06 	br	800ddbc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800dd48:	04020074 	movhi	r16,2049
 800dd4c:	8400b604 	addi	r16,r16,728
 800dd50:	e0bffc17 	ldw	r2,-16(fp)
 800dd54:	01400304 	movi	r5,12
 800dd58:	1009883a 	mov	r4,r2
 800dd5c:	8000ba40 	call	8000ba4 <__mulsi3>
 800dd60:	8085883a 	add	r2,r16,r2
 800dd64:	10800017 	ldw	r2,0(r2)
 800dd68:	1000111e 	bne	r2,zero,800ddb0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 800dd6c:	04020074 	movhi	r16,2049
 800dd70:	8400b604 	addi	r16,r16,728
 800dd74:	e0bffc17 	ldw	r2,-16(fp)
 800dd78:	01400304 	movi	r5,12
 800dd7c:	1009883a 	mov	r4,r2
 800dd80:	8000ba40 	call	8000ba4 <__mulsi3>
 800dd84:	8085883a 	add	r2,r16,r2
 800dd88:	e0fffe17 	ldw	r3,-8(fp)
 800dd8c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800dd90:	d0e00d17 	ldw	r3,-32716(gp)
 800dd94:	e0bffc17 	ldw	r2,-16(fp)
 800dd98:	1880020e 	bge	r3,r2,800dda4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 800dd9c:	e0bffc17 	ldw	r2,-16(fp)
 800dda0:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 800dda4:	e0bffc17 	ldw	r2,-16(fp)
 800dda8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800ddac:	00000606 	br	800ddc8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800ddb0:	e0bffc17 	ldw	r2,-16(fp)
 800ddb4:	10800044 	addi	r2,r2,1
 800ddb8:	e0bffc15 	stw	r2,-16(fp)
 800ddbc:	e0bffc17 	ldw	r2,-16(fp)
 800ddc0:	10800810 	cmplti	r2,r2,32
 800ddc4:	103fe01e 	bne	r2,zero,800dd48 <__alt_data_end+0xfc00dd48>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800ddc8:	e0bffd17 	ldw	r2,-12(fp)
}
 800ddcc:	e6ffff04 	addi	sp,fp,-4
 800ddd0:	dfc00217 	ldw	ra,8(sp)
 800ddd4:	df000117 	ldw	fp,4(sp)
 800ddd8:	dc000017 	ldw	r16,0(sp)
 800dddc:	dec00304 	addi	sp,sp,12
 800dde0:	f800283a 	ret

0800dde4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800dde4:	defffe04 	addi	sp,sp,-8
 800dde8:	df000115 	stw	fp,4(sp)
 800ddec:	df000104 	addi	fp,sp,4
 800ddf0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800ddf4:	e0bfff17 	ldw	r2,-4(fp)
 800ddf8:	10bffe84 	addi	r2,r2,-6
 800ddfc:	10c00428 	cmpgeui	r3,r2,16
 800de00:	18001a1e 	bne	r3,zero,800de6c <alt_exception_cause_generated_bad_addr+0x88>
 800de04:	100690ba 	slli	r3,r2,2
 800de08:	00820074 	movhi	r2,2049
 800de0c:	10b78704 	addi	r2,r2,-8676
 800de10:	1885883a 	add	r2,r3,r2
 800de14:	10800017 	ldw	r2,0(r2)
 800de18:	1000683a 	jmp	r2
 800de1c:	0800de5c 	xori	zero,at,889
 800de20:	0800de5c 	xori	zero,at,889
 800de24:	0800de6c 	andhi	zero,at,889
 800de28:	0800de6c 	andhi	zero,at,889
 800de2c:	0800de6c 	andhi	zero,at,889
 800de30:	0800de5c 	xori	zero,at,889
 800de34:	0800de64 	muli	zero,at,889
 800de38:	0800de6c 	andhi	zero,at,889
 800de3c:	0800de5c 	xori	zero,at,889
 800de40:	0800de5c 	xori	zero,at,889
 800de44:	0800de6c 	andhi	zero,at,889
 800de48:	0800de5c 	xori	zero,at,889
 800de4c:	0800de64 	muli	zero,at,889
 800de50:	0800de6c 	andhi	zero,at,889
 800de54:	0800de6c 	andhi	zero,at,889
 800de58:	0800de5c 	xori	zero,at,889
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800de5c:	00800044 	movi	r2,1
 800de60:	00000306 	br	800de70 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800de64:	0005883a 	mov	r2,zero
 800de68:	00000106 	br	800de70 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800de6c:	0005883a 	mov	r2,zero
  }
}
 800de70:	e037883a 	mov	sp,fp
 800de74:	df000017 	ldw	fp,0(sp)
 800de78:	dec00104 	addi	sp,sp,4
 800de7c:	f800283a 	ret

0800de80 <atexit>:
 800de80:	200b883a 	mov	r5,r4
 800de84:	000f883a 	mov	r7,zero
 800de88:	000d883a 	mov	r6,zero
 800de8c:	0009883a 	mov	r4,zero
 800de90:	800df481 	jmpi	800df48 <__register_exitproc>

0800de94 <exit>:
 800de94:	defffe04 	addi	sp,sp,-8
 800de98:	000b883a 	mov	r5,zero
 800de9c:	dc000015 	stw	r16,0(sp)
 800dea0:	dfc00115 	stw	ra,4(sp)
 800dea4:	2021883a 	mov	r16,r4
 800dea8:	800e0600 	call	800e060 <__call_exitprocs>
 800deac:	00820074 	movhi	r2,2049
 800deb0:	10811904 	addi	r2,r2,1124
 800deb4:	11000017 	ldw	r4,0(r2)
 800deb8:	20800f17 	ldw	r2,60(r4)
 800debc:	10000126 	beq	r2,zero,800dec4 <exit+0x30>
 800dec0:	103ee83a 	callr	r2
 800dec4:	8009883a 	mov	r4,r16
 800dec8:	800e1e00 	call	800e1e0 <_exit>

0800decc <memcmp>:
 800decc:	01c000c4 	movi	r7,3
 800ded0:	3980192e 	bgeu	r7,r6,800df38 <memcmp+0x6c>
 800ded4:	2144b03a 	or	r2,r4,r5
 800ded8:	11c4703a 	and	r2,r2,r7
 800dedc:	10000f26 	beq	r2,zero,800df1c <memcmp+0x50>
 800dee0:	20800003 	ldbu	r2,0(r4)
 800dee4:	28c00003 	ldbu	r3,0(r5)
 800dee8:	10c0151e 	bne	r2,r3,800df40 <memcmp+0x74>
 800deec:	31bfff84 	addi	r6,r6,-2
 800def0:	01ffffc4 	movi	r7,-1
 800def4:	00000406 	br	800df08 <memcmp+0x3c>
 800def8:	20800003 	ldbu	r2,0(r4)
 800defc:	28c00003 	ldbu	r3,0(r5)
 800df00:	31bfffc4 	addi	r6,r6,-1
 800df04:	10c00e1e 	bne	r2,r3,800df40 <memcmp+0x74>
 800df08:	21000044 	addi	r4,r4,1
 800df0c:	29400044 	addi	r5,r5,1
 800df10:	31fff91e 	bne	r6,r7,800def8 <__alt_data_end+0xfc00def8>
 800df14:	0005883a 	mov	r2,zero
 800df18:	f800283a 	ret
 800df1c:	20c00017 	ldw	r3,0(r4)
 800df20:	28800017 	ldw	r2,0(r5)
 800df24:	18bfee1e 	bne	r3,r2,800dee0 <__alt_data_end+0xfc00dee0>
 800df28:	31bfff04 	addi	r6,r6,-4
 800df2c:	21000104 	addi	r4,r4,4
 800df30:	29400104 	addi	r5,r5,4
 800df34:	39bff936 	bltu	r7,r6,800df1c <__alt_data_end+0xfc00df1c>
 800df38:	303fe91e 	bne	r6,zero,800dee0 <__alt_data_end+0xfc00dee0>
 800df3c:	003ff506 	br	800df14 <__alt_data_end+0xfc00df14>
 800df40:	10c5c83a 	sub	r2,r2,r3
 800df44:	f800283a 	ret

0800df48 <__register_exitproc>:
 800df48:	defffa04 	addi	sp,sp,-24
 800df4c:	dc000315 	stw	r16,12(sp)
 800df50:	04020074 	movhi	r16,2049
 800df54:	84011904 	addi	r16,r16,1124
 800df58:	80c00017 	ldw	r3,0(r16)
 800df5c:	dc400415 	stw	r17,16(sp)
 800df60:	dfc00515 	stw	ra,20(sp)
 800df64:	18805217 	ldw	r2,328(r3)
 800df68:	2023883a 	mov	r17,r4
 800df6c:	10003726 	beq	r2,zero,800e04c <__register_exitproc+0x104>
 800df70:	10c00117 	ldw	r3,4(r2)
 800df74:	010007c4 	movi	r4,31
 800df78:	20c00e16 	blt	r4,r3,800dfb4 <__register_exitproc+0x6c>
 800df7c:	1a000044 	addi	r8,r3,1
 800df80:	8800221e 	bne	r17,zero,800e00c <__register_exitproc+0xc4>
 800df84:	18c00084 	addi	r3,r3,2
 800df88:	18c7883a 	add	r3,r3,r3
 800df8c:	18c7883a 	add	r3,r3,r3
 800df90:	12000115 	stw	r8,4(r2)
 800df94:	10c7883a 	add	r3,r2,r3
 800df98:	19400015 	stw	r5,0(r3)
 800df9c:	0005883a 	mov	r2,zero
 800dfa0:	dfc00517 	ldw	ra,20(sp)
 800dfa4:	dc400417 	ldw	r17,16(sp)
 800dfa8:	dc000317 	ldw	r16,12(sp)
 800dfac:	dec00604 	addi	sp,sp,24
 800dfb0:	f800283a 	ret
 800dfb4:	00800034 	movhi	r2,0
 800dfb8:	10800004 	addi	r2,r2,0
 800dfbc:	10002626 	beq	r2,zero,800e058 <__register_exitproc+0x110>
 800dfc0:	01006404 	movi	r4,400
 800dfc4:	d9400015 	stw	r5,0(sp)
 800dfc8:	d9800115 	stw	r6,4(sp)
 800dfcc:	d9c00215 	stw	r7,8(sp)
 800dfd0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800dfd4:	d9400017 	ldw	r5,0(sp)
 800dfd8:	d9800117 	ldw	r6,4(sp)
 800dfdc:	d9c00217 	ldw	r7,8(sp)
 800dfe0:	10001d26 	beq	r2,zero,800e058 <__register_exitproc+0x110>
 800dfe4:	81000017 	ldw	r4,0(r16)
 800dfe8:	10000115 	stw	zero,4(r2)
 800dfec:	02000044 	movi	r8,1
 800dff0:	22405217 	ldw	r9,328(r4)
 800dff4:	0007883a 	mov	r3,zero
 800dff8:	12400015 	stw	r9,0(r2)
 800dffc:	20805215 	stw	r2,328(r4)
 800e000:	10006215 	stw	zero,392(r2)
 800e004:	10006315 	stw	zero,396(r2)
 800e008:	883fde26 	beq	r17,zero,800df84 <__alt_data_end+0xfc00df84>
 800e00c:	18c9883a 	add	r4,r3,r3
 800e010:	2109883a 	add	r4,r4,r4
 800e014:	1109883a 	add	r4,r2,r4
 800e018:	21802215 	stw	r6,136(r4)
 800e01c:	01800044 	movi	r6,1
 800e020:	12406217 	ldw	r9,392(r2)
 800e024:	30cc983a 	sll	r6,r6,r3
 800e028:	4992b03a 	or	r9,r9,r6
 800e02c:	12406215 	stw	r9,392(r2)
 800e030:	21c04215 	stw	r7,264(r4)
 800e034:	01000084 	movi	r4,2
 800e038:	893fd21e 	bne	r17,r4,800df84 <__alt_data_end+0xfc00df84>
 800e03c:	11006317 	ldw	r4,396(r2)
 800e040:	218cb03a 	or	r6,r4,r6
 800e044:	11806315 	stw	r6,396(r2)
 800e048:	003fce06 	br	800df84 <__alt_data_end+0xfc00df84>
 800e04c:	18805304 	addi	r2,r3,332
 800e050:	18805215 	stw	r2,328(r3)
 800e054:	003fc606 	br	800df70 <__alt_data_end+0xfc00df70>
 800e058:	00bfffc4 	movi	r2,-1
 800e05c:	003fd006 	br	800dfa0 <__alt_data_end+0xfc00dfa0>

0800e060 <__call_exitprocs>:
 800e060:	defff504 	addi	sp,sp,-44
 800e064:	df000915 	stw	fp,36(sp)
 800e068:	dd400615 	stw	r21,24(sp)
 800e06c:	dc800315 	stw	r18,12(sp)
 800e070:	dfc00a15 	stw	ra,40(sp)
 800e074:	ddc00815 	stw	r23,32(sp)
 800e078:	dd800715 	stw	r22,28(sp)
 800e07c:	dd000515 	stw	r20,20(sp)
 800e080:	dcc00415 	stw	r19,16(sp)
 800e084:	dc400215 	stw	r17,8(sp)
 800e088:	dc000115 	stw	r16,4(sp)
 800e08c:	d9000015 	stw	r4,0(sp)
 800e090:	2839883a 	mov	fp,r5
 800e094:	04800044 	movi	r18,1
 800e098:	057fffc4 	movi	r21,-1
 800e09c:	00820074 	movhi	r2,2049
 800e0a0:	10811904 	addi	r2,r2,1124
 800e0a4:	12000017 	ldw	r8,0(r2)
 800e0a8:	45005217 	ldw	r20,328(r8)
 800e0ac:	44c05204 	addi	r19,r8,328
 800e0b0:	a0001c26 	beq	r20,zero,800e124 <__call_exitprocs+0xc4>
 800e0b4:	a0800117 	ldw	r2,4(r20)
 800e0b8:	15ffffc4 	addi	r23,r2,-1
 800e0bc:	b8000d16 	blt	r23,zero,800e0f4 <__call_exitprocs+0x94>
 800e0c0:	14000044 	addi	r16,r2,1
 800e0c4:	8421883a 	add	r16,r16,r16
 800e0c8:	8421883a 	add	r16,r16,r16
 800e0cc:	84402004 	addi	r17,r16,128
 800e0d0:	a463883a 	add	r17,r20,r17
 800e0d4:	a421883a 	add	r16,r20,r16
 800e0d8:	e0001e26 	beq	fp,zero,800e154 <__call_exitprocs+0xf4>
 800e0dc:	80804017 	ldw	r2,256(r16)
 800e0e0:	e0801c26 	beq	fp,r2,800e154 <__call_exitprocs+0xf4>
 800e0e4:	bdffffc4 	addi	r23,r23,-1
 800e0e8:	843fff04 	addi	r16,r16,-4
 800e0ec:	8c7fff04 	addi	r17,r17,-4
 800e0f0:	bd7ff91e 	bne	r23,r21,800e0d8 <__alt_data_end+0xfc00e0d8>
 800e0f4:	00800034 	movhi	r2,0
 800e0f8:	10800004 	addi	r2,r2,0
 800e0fc:	10000926 	beq	r2,zero,800e124 <__call_exitprocs+0xc4>
 800e100:	a0800117 	ldw	r2,4(r20)
 800e104:	1000301e 	bne	r2,zero,800e1c8 <__call_exitprocs+0x168>
 800e108:	a0800017 	ldw	r2,0(r20)
 800e10c:	10003226 	beq	r2,zero,800e1d8 <__call_exitprocs+0x178>
 800e110:	a009883a 	mov	r4,r20
 800e114:	98800015 	stw	r2,0(r19)
 800e118:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800e11c:	9d000017 	ldw	r20,0(r19)
 800e120:	a03fe41e 	bne	r20,zero,800e0b4 <__alt_data_end+0xfc00e0b4>
 800e124:	dfc00a17 	ldw	ra,40(sp)
 800e128:	df000917 	ldw	fp,36(sp)
 800e12c:	ddc00817 	ldw	r23,32(sp)
 800e130:	dd800717 	ldw	r22,28(sp)
 800e134:	dd400617 	ldw	r21,24(sp)
 800e138:	dd000517 	ldw	r20,20(sp)
 800e13c:	dcc00417 	ldw	r19,16(sp)
 800e140:	dc800317 	ldw	r18,12(sp)
 800e144:	dc400217 	ldw	r17,8(sp)
 800e148:	dc000117 	ldw	r16,4(sp)
 800e14c:	dec00b04 	addi	sp,sp,44
 800e150:	f800283a 	ret
 800e154:	a0800117 	ldw	r2,4(r20)
 800e158:	80c00017 	ldw	r3,0(r16)
 800e15c:	10bfffc4 	addi	r2,r2,-1
 800e160:	15c01426 	beq	r2,r23,800e1b4 <__call_exitprocs+0x154>
 800e164:	80000015 	stw	zero,0(r16)
 800e168:	183fde26 	beq	r3,zero,800e0e4 <__alt_data_end+0xfc00e0e4>
 800e16c:	95c8983a 	sll	r4,r18,r23
 800e170:	a0806217 	ldw	r2,392(r20)
 800e174:	a5800117 	ldw	r22,4(r20)
 800e178:	2084703a 	and	r2,r4,r2
 800e17c:	10000b26 	beq	r2,zero,800e1ac <__call_exitprocs+0x14c>
 800e180:	a0806317 	ldw	r2,396(r20)
 800e184:	2088703a 	and	r4,r4,r2
 800e188:	20000c1e 	bne	r4,zero,800e1bc <__call_exitprocs+0x15c>
 800e18c:	89400017 	ldw	r5,0(r17)
 800e190:	d9000017 	ldw	r4,0(sp)
 800e194:	183ee83a 	callr	r3
 800e198:	a0800117 	ldw	r2,4(r20)
 800e19c:	15bfbf1e 	bne	r2,r22,800e09c <__alt_data_end+0xfc00e09c>
 800e1a0:	98800017 	ldw	r2,0(r19)
 800e1a4:	153fcf26 	beq	r2,r20,800e0e4 <__alt_data_end+0xfc00e0e4>
 800e1a8:	003fbc06 	br	800e09c <__alt_data_end+0xfc00e09c>
 800e1ac:	183ee83a 	callr	r3
 800e1b0:	003ff906 	br	800e198 <__alt_data_end+0xfc00e198>
 800e1b4:	a5c00115 	stw	r23,4(r20)
 800e1b8:	003feb06 	br	800e168 <__alt_data_end+0xfc00e168>
 800e1bc:	89000017 	ldw	r4,0(r17)
 800e1c0:	183ee83a 	callr	r3
 800e1c4:	003ff406 	br	800e198 <__alt_data_end+0xfc00e198>
 800e1c8:	a0800017 	ldw	r2,0(r20)
 800e1cc:	a027883a 	mov	r19,r20
 800e1d0:	1029883a 	mov	r20,r2
 800e1d4:	003fb606 	br	800e0b0 <__alt_data_end+0xfc00e0b0>
 800e1d8:	0005883a 	mov	r2,zero
 800e1dc:	003ffb06 	br	800e1cc <__alt_data_end+0xfc00e1cc>

0800e1e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800e1e0:	defffd04 	addi	sp,sp,-12
 800e1e4:	df000215 	stw	fp,8(sp)
 800e1e8:	df000204 	addi	fp,sp,8
 800e1ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800e1f0:	0001883a 	nop
 800e1f4:	e0bfff17 	ldw	r2,-4(fp)
 800e1f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800e1fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800e200:	10000226 	beq	r2,zero,800e20c <_exit+0x2c>
    ALT_SIM_FAIL();
 800e204:	002af070 	cmpltui	zero,zero,43969
 800e208:	00000106 	br	800e210 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800e20c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800e210:	003fff06 	br	800e210 <__alt_data_end+0xfc00e210>
