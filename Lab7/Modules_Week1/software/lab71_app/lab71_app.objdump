
lab71_app.elf:     file format elf32-littlenios2
lab71_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001051c memsz 0x0001051c flags r-x
    LOAD off    0x0001153c vaddr 0x0801053c paddr 0x08012030 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013b24 vaddr 0x08013b24 paddr 0x08013b24 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fefc  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000410  0801012c  0801012c  0001112c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  0801053c  08012030  0001153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  08013b24  08013b24  00013b24  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013030  2**0
                  CONTENTS
  7 .sdram        00000000  08013c84  08013c84  00013030  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013030  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef0  00000000  00000000  00013058  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022ec3  00000000  00000000  00013f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008fb1  00000000  00000000  00036e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b503  00000000  00000000  0003fdbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000214c  00000000  00000000  0004b2c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039c7  00000000  00000000  0004d40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017755  00000000  00000000  00050dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00068528  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a0  00000000  00000000  00068568  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006cffa  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006cffd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d009  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d00a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d00b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d00f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d013  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0006d017  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0006d020  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0006d029  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006d032  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002a  00000000  00000000  0006d03a  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e6f  00000000  00000000  0006d064  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00090e9b  00000000  00000000  00071ed3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0801012c l    d  .rodata	00000000 .rodata
0801053c l    d  .rwdata	00000000 .rwdata
08013b24 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08013c84 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab71_app_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08011fe8 l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 text_mode_vga.c
08011fec l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801028a l     O .rodata	00000010 zeroes.4404
08002e68 l     F .text	000000bc __sbprintf
0801029a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08003078 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004bd0 l     F .text	00000008 __fp_unlock
08004be4 l     F .text	0000019c __sinit.part.1
08004d80 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801053c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08010980 l     O .rwdata	00000020 lc_ctype_charset
08010960 l     O .rwdata	00000020 lc_message_charset
080109a0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080102cc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800761c l     F .text	000000fc __sprint_r.part.0
080103f0 l     O .rodata	00000010 zeroes.4349
08008c58 l     F .text	000000bc __sbprintf
08010400 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d800 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d914 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d940 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800da34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800db1c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800dc08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800dde4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08012020 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800e088 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800e1c4 l     F .text	00000034 alt_dev_reg
08010f88 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800e4b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800e6c4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800ecfc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800f094 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800f4f4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800f654 l     F .text	0000003c alt_get_errno
0800f690 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08013b58 g     O .bss	00000004 alt_instruction_exception_handler
0800712c g     F .text	00000074 _mprec_log10
08007218 g     F .text	0000008c __any_on
080096d4 g     F .text	00000054 _isatty_r
080102d8 g     O .rodata	00000028 __mprec_tinytens
0800dd20 g     F .text	0000007c alt_main
080002f4 g     F .text	00000050 textVGAClr
08013b84 g     O .bss	00000100 alt_irq
08009728 g     F .text	00000060 _lseek_r
08012030 g       *ABS*	00000000 __flash_rwdata_start
0800c1d8 g     F .text	00000088 .hidden __eqdf2
08013c84 g       *ABS*	00000000 __alt_heap_start
08000b34 g     F .text	0000003c printf
0800a000 g     F .text	0000009c _wcrtomb_r
08000344 g     F .text	00000650 textVGATest
08007444 g     F .text	0000005c __sseek
08004f30 g     F .text	00000010 __sinit
08009ea8 g     F .text	00000140 __swbuf_r
0800553c g     F .text	0000007c _setlocale_r
08004d88 g     F .text	00000078 __sfmoreglue
0800ddc0 g     F .text	00000024 __malloc_unlock
08009788 g     F .text	0000015c memmove
08004f18 g     F .text	00000018 _cleanup
080061ec g     F .text	000000a8 _Balloc
0800c260 g     F .text	000000dc .hidden __gtdf2
0800fa7c g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080091b0 g     F .text	0000005c _fstat_r
08013b3c g     O .bss	00000004 errno
080073c0 g     F .text	00000008 __seofread
08013b44 g     O .bss	00000004 alt_argv
08019fe8 g       *ABS*	00000000 _gp
0800e058 g     F .text	00000030 usleep
08010e08 g     O .rwdata	00000180 alt_fd_list
0800faa0 g     F .text	00000090 alt_find_dev
080009bc g     F .text	00000148 memcpy
08004bd8 g     F .text	0000000c _cleanup_r
0800d618 g     F .text	000000dc .hidden __floatsidf
0800f5d8 g     F .text	0000007c alt_io_redirect
0800c33c g     F .text	000000f4 .hidden __ltdf2
0801012c g       *ABS*	00000000 __DTOR_END__
0800fcfc g     F .text	0000009c alt_exception_cause_generated_bad_addr
080072a4 g     F .text	00000074 __fpclassifyd
08007088 g     F .text	000000a4 __ratio
08008c3c g     F .text	0000001c __vfiprintf_internal
0800e8bc g     F .text	0000021c altera_avalon_jtag_uart_read
08000b04 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800aea0 g     F .text	00000064 .hidden __udivsi3
0800da70 g     F .text	000000ac isatty
08010328 g     O .rodata	000000c8 __mprec_tens
080055b8 g     F .text	0000000c __locale_charset
08013b38 g     O .bss	00000004 __malloc_top_pad
08011ff8 g     O .rwdata	00000004 __mb_cur_max
080055e8 g     F .text	0000000c _localeconv_r
0800920c g     F .text	000004c8 __sfvwrite_r
08006620 g     F .text	0000003c __i2b
08007318 g     F .text	00000054 _sbrk_r
080098e4 g     F .text	00000060 _read_r
08012018 g     O .rwdata	00000004 alt_max_fd
08008ea4 g     F .text	000000f0 _fclose_r
08004ba0 g     F .text	00000030 fflush
08013b34 g     O .bss	00000004 __malloc_max_sbrked_mem
0800af5c g     F .text	000008ac .hidden __adddf3
08006e30 g     F .text	0000010c __b2d
0800a7e4 g     F .text	000005c4 .hidden __umoddi3
0800dc44 g     F .text	000000dc lseek
08011ff0 g     O .rwdata	00000004 _global_impure_ptr
08009944 g     F .text	00000564 _realloc_r
08013c84 g       *ABS*	00000000 __bss_end
0800f404 g     F .text	000000f0 alt_iic_isr_register
0800f974 g     F .text	00000108 alt_tick
0800a1e8 g     F .text	000005fc .hidden __udivdi3
0800910c g     F .text	00000024 _fputwc_r
08010300 g     O .rodata	00000028 __mprec_bigtens
08006404 g     F .text	00000104 __s2b
0800d6f4 g     F .text	000000a8 .hidden __floatunsidf
08006b70 g     F .text	00000060 __mcmp
08004f50 g     F .text	00000018 __fp_lock_all
0800f3b8 g     F .text	0000004c alt_ic_irq_enabled
0800f8d8 g     F .text	0000009c alt_alarm_stop
08013b4c g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08010de0 g     O .rwdata	00000028 alt_dev_null
0800f074 g     F .text	00000020 alt_dcache_flush_all
08006508 g     F .text	00000068 __hi0bits
0800d598 g     F .text	00000080 .hidden __fixdfsi
08012030 g       *ABS*	00000000 __ram_rwdata_end
08012010 g     O .rwdata	00000008 alt_dev_list
0800e0c4 g     F .text	00000100 write
0801053c g       *ABS*	00000000 __ram_rodata_end
0800d97c g     F .text	000000b8 fstat
0800c33c g     F .text	000000f4 .hidden __ledf2
080068e8 g     F .text	00000140 __pow5mult
08007730 g     F .text	0000150c ___vfiprintf_internal_r
08013b2c g     O .bss	00000004 __nlocale_changed
0800af04 g     F .text	00000058 .hidden __umodsi3
08013c84 g       *ABS*	00000000 end
0800e3f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0801012c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800ed74 g     F .text	0000007c alt_avalon_timer_sc_init
0800d79c g     F .text	00000064 .hidden __clzsi2
0800ead8 g     F .text	00000224 altera_avalon_jtag_uart_write
08004f40 g     F .text	00000004 __sfp_lock_acquire
08005fe0 g     F .text	000000e4 memchr
08000b70 g     F .text	000022dc ___vfprintf_internal_r
080050a4 g     F .text	00000310 _free_r
080055c4 g     F .text	00000010 __locale_mb_cur_max
0800ff78 g     F .text	00000180 __call_exitprocs
08013b28 g     O .bss	00000004 __mlocale_changed
08011ffc g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08013b50 g     O .bss	00000004 _alt_tick_rate
08006a28 g     F .text	00000148 __lshift
08013b54 g     O .bss	00000004 _alt_nticks
0800de20 g     F .text	00000104 read
0800e230 g     F .text	00000064 alt_sys_init
0800fe60 g     F .text	00000118 __register_exitproc
0800665c g     F .text	0000028c __multiply
0800e764 g     F .text	00000068 altera_avalon_jtag_uart_close
08000994 g     F .text	00000028 .hidden __mulsi3
0801053c g       *ABS*	00000000 __ram_rwdata_start
0801012c g       *ABS*	00000000 __ram_rodata_start
08013b5c g     O .bss	00000028 __malloc_current_mallinfo
08006f3c g     F .text	0000014c __d2b
0800e294 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800fc38 g     F .text	000000c4 alt_get_fd
0800ef1c g     F .text	00000158 alt_busy_sleep
08008d74 g     F .text	00000054 _close_r
0800fde4 g     F .text	0000007c memcmp
0800e354 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08013c84 g       *ABS*	00000000 __alt_stack_base
0800e3a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002f24 g     F .text	00000154 __swsetup_r
0800b808 g     F .text	000009d0 .hidden __divdf3
08004e00 g     F .text	00000118 __sfp
080071a0 g     F .text	00000078 __copybits
080109d8 g     O .rwdata	00000408 __malloc_av_
08004f4c g     F .text	00000004 __sinit_lock_release
0800c430 g     F .text	0000086c .hidden __muldf3
0800736c g     F .text	00000054 __sread
0800fb30 g     F .text	00000108 alt_find_file
0800f0d0 g     F .text	000000a4 alt_dev_llist_insert
0800dd9c g     F .text	00000024 __malloc_lock
0800dfa8 g     F .text	000000b0 sbrk
08004b44 g     F .text	0000005c _fflush_r
08008dc8 g     F .text	000000dc _calloc_r
08013b24 g       *ABS*	00000000 __bss_start
080060c4 g     F .text	00000128 memset
0800026c g     F .text	00000044 main
08013b48 g     O .bss	00000004 alt_envp
08013b30 g     O .bss	00000004 __malloc_max_total_mem
0800e2f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009fe8 g     F .text	00000018 __swbuf
080074a0 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08008f94 g     F .text	00000014 fclose
080032a0 g     F .text	00001688 _dtoa_r
080057d4 g     F .text	0000080c _malloc_r
0800a15c g     F .text	00000030 __ascii_wctomb
0801201c g     O .rwdata	00000004 alt_errno
080053b4 g     F .text	000000c4 _fwalk
0800ada8 g     F .text	00000084 .hidden __divsi3
08004f80 g     F .text	00000124 _malloc_trim_r
0801012c g       *ABS*	00000000 __CTOR_END__
080074a8 g     F .text	000000dc strcmp
0801012c g       *ABS*	00000000 __flash_rodata_start
0801012c g       *ABS*	00000000 __DTOR_LIST__
0800c1d8 g     F .text	00000088 .hidden __nedf2
0800e1f8 g     F .text	00000038 alt_irq_init
0800df24 g     F .text	00000084 alt_release_fd
08010410 g     O .rodata	00000100 .hidden __clz_tab
08013b24 g     O .bss	00000004 _PathLocale
0800fd98 g     F .text	00000014 atexit
08008d14 g     F .text	00000060 _write_r
080055f4 g     F .text	00000018 setlocale
080002b0 g     F .text	00000044 textVGASetColor
08011ff4 g     O .rwdata	00000004 _impure_ptr
08013b40 g     O .bss	00000004 alt_argc
08004928 g     F .text	0000021c __sflush_r
0800f1d4 g     F .text	00000060 _do_dtors
080055e0 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08006dcc g     F .text	00000064 __ulp
08004f68 g     F .text	00000018 __fp_unlock_all
08012008 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800560c g     F .text	0000000c localeconv
0800f254 g     F .text	00000050 alt_ic_isr_register
08012030 g       *ABS*	00000000 _edata
08013c84 g       *ABS*	00000000 _end
08008fa8 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
0800e7cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0800f32c g     F .text	0000008c alt_ic_irq_disable
080073c8 g     F .text	0000007c __swrite
08012000 g     O .rwdata	00000004 __malloc_trim_threshold
080055d4 g     F .text	0000000c __locale_msgcharset
0800fdac g     F .text	00000038 exit
08005478 g     F .text	000000c4 _fwalk_reent
08006bd0 g     F .text	000001fc __mdiff
0800ae2c g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004f44 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080100f8 g     F .text	00000034 _exit
0800edf0 g     F .text	0000012c alt_alarm_start
08005618 g     F .text	000001bc __smakebuf_r
08007584 g     F .text	00000098 strlen
0800f77c g     F .text	0000015c open
0800c260 g     F .text	000000dc .hidden __gedf2
08012004 g     O .rwdata	00000004 __wctomb
08007718 g     F .text	00000018 __sprint_r
0800f234 g     F .text	00000020 alt_icache_flush_all
08012024 g     O .rwdata	00000004 alt_priority_mask
0800f2a4 g     F .text	00000088 alt_ic_irq_enable
08002e4c g     F .text	0000001c __vfprintf_internal
0800a18c g     F .text	0000005c _wctomb_r
0800cc9c g     F .text	000008fc .hidden __subdf3
08006570 g     F .text	000000b0 __lo0bits
08012028 g     O .rwdata	00000008 alt_alarm_list
0800f174 g     F .text	00000060 _do_ctors
0800a09c g     F .text	000000c0 wcrtomb
0800d83c g     F .text	000000d8 close
0800db84 g     F .text	00000084 alt_load
08009130 g     F .text	00000080 fputwc
08004f48 g     F .text	00000004 __sinit_lock_acquire
080062bc g     F .text	00000148 __multadd
08006294 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	108ee104 	addi	r2,r2,15236
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	108ee104 	addi	r2,r2,15236
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a6dc17 	ldw	r2,-25744(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a6dc17 	ldw	r2,-25744(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6a7fa14 	ori	gp,gp,40936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	108ec914 	ori	r2,r2,15140

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18cf2114 	ori	r3,r3,15492

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800db840 	call	800db84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800dd200 	call	800dd20 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <main>:
#include "text_mode_vga.h"

int main(){
 800026c:	defffd04 	addi	sp,sp,-12
 8000270:	dfc00215 	stw	ra,8(sp)
 8000274:	df000115 	stw	fp,4(sp)
 8000278:	df000104 	addi	fp,sp,4
	int Answer_To_Ultimate_Question_Of_Life_Universe_Everything = 42;
 800027c:	00800a84 	movi	r2,42
 8000280:	e0bfff15 	stw	r2,-4(fp)
	while(Answer_To_Ultimate_Question_Of_Life_Universe_Everything == 42){
 8000284:	00000106 	br	800028c <main+0x20>
		textVGATest();
 8000288:	80003440 	call	8000344 <textVGATest>
#include "text_mode_vga.h"

int main(){
	int Answer_To_Ultimate_Question_Of_Life_Universe_Everything = 42;
	while(Answer_To_Ultimate_Question_Of_Life_Universe_Everything == 42){
 800028c:	e0bfff17 	ldw	r2,-4(fp)
 8000290:	10800aa0 	cmpeqi	r2,r2,42
 8000294:	103ffc1e 	bne	r2,zero,8000288 <__alt_data_end+0xfc000288>
		textVGATest();
	}
	return 0;
 8000298:	0005883a 	mov	r2,zero
}
 800029c:	e037883a 	mov	sp,fp
 80002a0:	dfc00117 	ldw	ra,4(sp)
 80002a4:	df000017 	ldw	fp,0(sp)
 80002a8:	dec00204 	addi	sp,sp,8
 80002ac:	f800283a 	ret

080002b0 <textVGASetColor>:
#include <alt_types.h>
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
 80002b0:	defffd04 	addi	sp,sp,-12
 80002b4:	df000215 	stw	fp,8(sp)
 80002b8:	df000204 	addi	fp,sp,8
 80002bc:	e13ffe15 	stw	r4,-8(fp)
 80002c0:	e17fff15 	stw	r5,-4(fp)
	vga_ctrl->CTRL = foreground << 13 |
 80002c4:	d0e00117 	ldw	r3,-32764(gp)
 80002c8:	e0bfff17 	ldw	r2,-4(fp)
 80002cc:	1008937a 	slli	r4,r2,13
					 background << 1;
 80002d0:	e0bffe17 	ldw	r2,-8(fp)
 80002d4:	1085883a 	add	r2,r2,r2
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
	vga_ctrl->CTRL = foreground << 13 |
 80002d8:	2084b03a 	or	r2,r4,r2
 80002dc:	18825815 	stw	r2,2400(r3)
					 background << 1;
}
 80002e0:	0001883a 	nop
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <textVGAClr>:

void textVGAClr()
{
 80002f4:	defffe04 	addi	sp,sp,-8
 80002f8:	df000115 	stw	fp,4(sp)
 80002fc:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 8000300:	e03fff15 	stw	zero,-4(fp)
 8000304:	00000706 	br	8000324 <textVGAClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 8000308:	d0e00117 	ldw	r3,-32764(gp)
 800030c:	e0bfff17 	ldw	r2,-4(fp)
 8000310:	1885883a 	add	r2,r3,r2
 8000314:	10000005 	stb	zero,0(r2)
					 background << 1;
}

void textVGAClr()
{
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 8000318:	e0bfff17 	ldw	r2,-4(fp)
 800031c:	10800044 	addi	r2,r2,1
 8000320:	e0bfff15 	stw	r2,-4(fp)
 8000324:	e0bfff17 	ldw	r2,-4(fp)
 8000328:	10825810 	cmplti	r2,r2,2400
 800032c:	103ff61e 	bne	r2,zero,8000308 <__alt_data_end+0xfc000308>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 8000330:	0001883a 	nop
 8000334:	e037883a 	mov	sp,fp
 8000338:	df000017 	ldw	fp,0(sp)
 800033c:	dec00104 	addi	sp,sp,4
 8000340:	f800283a 	ret

08000344 <textVGATest>:

void textVGATest()
{
 8000344:	deff8904 	addi	sp,sp,-476
 8000348:	dfc07615 	stw	ra,472(sp)
 800034c:	df007515 	stw	fp,468(sp)
 8000350:	dc007415 	stw	r16,464(sp)
 8000354:	df007504 	addi	fp,sp,468
	textVGASetColor(BLACK, WHITE);
 8000358:	0143ffc4 	movi	r5,4095
 800035c:	0009883a 	mov	r4,zero
 8000360:	80002b00 	call	80002b0 <textVGASetColor>
	textVGAClr();
 8000364:	80002f40 	call	80002f4 <textVGAClr>

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
 8000368:	e03f8b15 	stw	zero,-468(fp)
 800036c:	00003106 	br	8000434 <textVGATest+0xf0>
	{
		checksum[j] = 0;
 8000370:	e0bf8b17 	ldw	r2,-468(fp)
 8000374:	1085883a 	add	r2,r2,r2
 8000378:	1085883a 	add	r2,r2,r2
 800037c:	e0ff8b04 	addi	r3,fp,-468
 8000380:	1885883a 	add	r2,r3,r2
 8000384:	10800904 	addi	r2,r2,36
 8000388:	10000015 	stw	zero,0(r2)
		for (int i = 0; i < COLUMNS; i++)
 800038c:	e03f8c15 	stw	zero,-464(fp)
 8000390:	00002206 	br	800041c <textVGATest+0xd8>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
 8000394:	d4200117 	ldw	r16,-32764(gp)
 8000398:	01401404 	movi	r5,80
 800039c:	e13f8b17 	ldw	r4,-468(fp)
 80003a0:	80009940 	call	8000994 <__mulsi3>
 80003a4:	1007883a 	mov	r3,r2
 80003a8:	e0bf8c17 	ldw	r2,-464(fp)
 80003ac:	1885883a 	add	r2,r3,r2
 80003b0:	e0ff8c17 	ldw	r3,-464(fp)
 80003b4:	1809883a 	mov	r4,r3
 80003b8:	e0ff8b17 	ldw	r3,-468(fp)
 80003bc:	20c7883a 	add	r3,r4,r3
 80003c0:	8085883a 	add	r2,r16,r2
 80003c4:	10c00005 	stb	r3,0(r2)
			checksum[j] += i + j;
 80003c8:	e0bf8b17 	ldw	r2,-468(fp)
 80003cc:	1085883a 	add	r2,r2,r2
 80003d0:	1085883a 	add	r2,r2,r2
 80003d4:	e13f8b04 	addi	r4,fp,-468
 80003d8:	2085883a 	add	r2,r4,r2
 80003dc:	10800904 	addi	r2,r2,36
 80003e0:	10800017 	ldw	r2,0(r2)
 80003e4:	e13f8c17 	ldw	r4,-464(fp)
 80003e8:	e0ff8b17 	ldw	r3,-468(fp)
 80003ec:	20c7883a 	add	r3,r4,r3
 80003f0:	10c7883a 	add	r3,r2,r3
 80003f4:	e0bf8b17 	ldw	r2,-468(fp)
 80003f8:	1085883a 	add	r2,r2,r2
 80003fc:	1085883a 	add	r2,r2,r2
 8000400:	e13f8b04 	addi	r4,fp,-468
 8000404:	2085883a 	add	r2,r4,r2
 8000408:	10800904 	addi	r2,r2,36
 800040c:	10c00015 	stw	r3,0(r2)
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
	{
		checksum[j] = 0;
		for (int i = 0; i < COLUMNS; i++)
 8000410:	e0bf8c17 	ldw	r2,-464(fp)
 8000414:	10800044 	addi	r2,r2,1
 8000418:	e0bf8c15 	stw	r2,-464(fp)
 800041c:	e0bf8c17 	ldw	r2,-464(fp)
 8000420:	10801410 	cmplti	r2,r2,80
 8000424:	103fdb1e 	bne	r2,zero,8000394 <__alt_data_end+0xfc000394>
	textVGAClr();

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
 8000428:	e0bf8b17 	ldw	r2,-468(fp)
 800042c:	10800044 	addi	r2,r2,1
 8000430:	e0bf8b15 	stw	r2,-468(fp)
 8000434:	e0bf8b17 	ldw	r2,-468(fp)
 8000438:	10800790 	cmplti	r2,r2,30
 800043c:	103fcc1e 	bne	r2,zero,8000370 <__alt_data_end+0xfc000370>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
			checksum[j] += i + j;
		}
	}
	for (int j = 0; j < ROWS; j++)
 8000440:	e03f8d15 	stw	zero,-460(fp)
 8000444:	00005206 	br	8000590 <textVGATest+0x24c>
	{
		readsum[j] = 0;
 8000448:	e0bf8d17 	ldw	r2,-460(fp)
 800044c:	1085883a 	add	r2,r2,r2
 8000450:	1085883a 	add	r2,r2,r2
 8000454:	e0ff8b04 	addi	r3,fp,-468
 8000458:	1885883a 	add	r2,r3,r2
 800045c:	10802704 	addi	r2,r2,156
 8000460:	10000015 	stw	zero,0(r2)
		for (int i = 0; i < COLUMNS; i++)
 8000464:	e03f8e15 	stw	zero,-456(fp)
 8000468:	00001c06 	br	80004dc <textVGATest+0x198>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
 800046c:	d4200117 	ldw	r16,-32764(gp)
 8000470:	01401404 	movi	r5,80
 8000474:	e13f8d17 	ldw	r4,-460(fp)
 8000478:	80009940 	call	8000994 <__mulsi3>
 800047c:	1007883a 	mov	r3,r2
 8000480:	e0bf8e17 	ldw	r2,-456(fp)
 8000484:	1885883a 	add	r2,r3,r2
 8000488:	8085883a 	add	r2,r16,r2
 800048c:	11000003 	ldbu	r4,0(r2)
 8000490:	e0bf8d17 	ldw	r2,-460(fp)
 8000494:	1085883a 	add	r2,r2,r2
 8000498:	1085883a 	add	r2,r2,r2
 800049c:	e0ff8b04 	addi	r3,fp,-468
 80004a0:	1885883a 	add	r2,r3,r2
 80004a4:	10802704 	addi	r2,r2,156
 80004a8:	10c00017 	ldw	r3,0(r2)
 80004ac:	20803fcc 	andi	r2,r4,255
 80004b0:	1887883a 	add	r3,r3,r2
 80004b4:	e0bf8d17 	ldw	r2,-460(fp)
 80004b8:	1085883a 	add	r2,r2,r2
 80004bc:	1085883a 	add	r2,r2,r2
 80004c0:	e13f8b04 	addi	r4,fp,-468
 80004c4:	2085883a 	add	r2,r4,r2
 80004c8:	10802704 	addi	r2,r2,156
 80004cc:	10c00015 	stw	r3,0(r2)
		}
	}
	for (int j = 0; j < ROWS; j++)
	{
		readsum[j] = 0;
		for (int i = 0; i < COLUMNS; i++)
 80004d0:	e0bf8e17 	ldw	r2,-456(fp)
 80004d4:	10800044 	addi	r2,r2,1
 80004d8:	e0bf8e15 	stw	r2,-456(fp)
 80004dc:	e0bf8e17 	ldw	r2,-456(fp)
 80004e0:	10801410 	cmplti	r2,r2,80
 80004e4:	103fe11e 	bne	r2,zero,800046c <__alt_data_end+0xfc00046c>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
			//printf ("%x \n\r", vga_ctrl->VRAM[j*COLUMNS + i]);
		}
		printf ("Row: %d, Checksum: %x, Read-back Checksum: %x\n\r", j, checksum[j], readsum[j]);
 80004e8:	e0bf8d17 	ldw	r2,-460(fp)
 80004ec:	1085883a 	add	r2,r2,r2
 80004f0:	1085883a 	add	r2,r2,r2
 80004f4:	e0ff8b04 	addi	r3,fp,-468
 80004f8:	1885883a 	add	r2,r3,r2
 80004fc:	10800904 	addi	r2,r2,36
 8000500:	10c00017 	ldw	r3,0(r2)
 8000504:	e0bf8d17 	ldw	r2,-460(fp)
 8000508:	1085883a 	add	r2,r2,r2
 800050c:	1085883a 	add	r2,r2,r2
 8000510:	e13f8b04 	addi	r4,fp,-468
 8000514:	2085883a 	add	r2,r4,r2
 8000518:	10802704 	addi	r2,r2,156
 800051c:	10800017 	ldw	r2,0(r2)
 8000520:	100f883a 	mov	r7,r2
 8000524:	180d883a 	mov	r6,r3
 8000528:	e17f8d17 	ldw	r5,-460(fp)
 800052c:	01020074 	movhi	r4,2049
 8000530:	21004b04 	addi	r4,r4,300
 8000534:	8000b340 	call	8000b34 <printf>
		if (checksum[j] != readsum[j])
 8000538:	e0bf8d17 	ldw	r2,-460(fp)
 800053c:	1085883a 	add	r2,r2,r2
 8000540:	1085883a 	add	r2,r2,r2
 8000544:	e0ff8b04 	addi	r3,fp,-468
 8000548:	1885883a 	add	r2,r3,r2
 800054c:	10800904 	addi	r2,r2,36
 8000550:	10c00017 	ldw	r3,0(r2)
 8000554:	e0bf8d17 	ldw	r2,-460(fp)
 8000558:	1085883a 	add	r2,r2,r2
 800055c:	1085883a 	add	r2,r2,r2
 8000560:	e13f8b04 	addi	r4,fp,-468
 8000564:	2085883a 	add	r2,r4,r2
 8000568:	10802704 	addi	r2,r2,156
 800056c:	10800017 	ldw	r2,0(r2)
 8000570:	18800426 	beq	r3,r2,8000584 <textVGATest+0x240>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
 8000574:	01020074 	movhi	r4,2049
 8000578:	21005704 	addi	r4,r4,348
 800057c:	8000b340 	call	8000b34 <printf>
			while (1){};
 8000580:	003fff06 	br	8000580 <__alt_data_end+0xfc000580>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
			checksum[j] += i + j;
		}
	}
	for (int j = 0; j < ROWS; j++)
 8000584:	e0bf8d17 	ldw	r2,-460(fp)
 8000588:	10800044 	addi	r2,r2,1
 800058c:	e0bf8d15 	stw	r2,-460(fp)
 8000590:	e0bf8d17 	ldw	r2,-460(fp)
 8000594:	10800790 	cmplti	r2,r2,30
 8000598:	103fab1e 	bne	r2,zero,8000448 <__alt_data_end+0xfc000448>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
			while (1){};
		}
	}
	printf ("Checksum code passed!...starting color test \n\r");
 800059c:	01020074 	movhi	r4,2049
 80005a0:	21006304 	addi	r4,r4,396
 80005a4:	8000b340 	call	8000b34 <printf>
	usleep (500000);
 80005a8:	01000234 	movhi	r4,8
 80005ac:	21284804 	addi	r4,r4,-24288
 80005b0:	800e0580 	call	800e058 <usleep>
	textVGASetColor(DIM_GRN, BRIGHT_GRN);
 80005b4:	01403c04 	movi	r5,240
 80005b8:	01001c04 	movi	r4,112
 80005bc:	80002b00 	call	80002b0 <textVGASetColor>
	textVGAClr();
 80005c0:	80002f40 	call	80002f4 <textVGAClr>
	char greentest[] = "This text should draw in green";
 80005c4:	009cda74 	movhi	r2,29545
 80005c8:	109a1504 	addi	r2,r2,26708
 80005cc:	e0bfd015 	stw	r2,-192(fp)
 80005d0:	009e1974 	movhi	r2,30821
 80005d4:	109d0804 	addi	r2,r2,29728
 80005d8:	e0bfd115 	stw	r2,-188(fp)
 80005dc:	009a1cf4 	movhi	r2,26739
 80005e0:	10881d04 	addi	r2,r2,8308
 80005e4:	e0bfd215 	stw	r2,-184(fp)
 80005e8:	00991b34 	movhi	r2,25708
 80005ec:	109d5bc4 	addi	r2,r2,30063
 80005f0:	e0bfd315 	stw	r2,-180(fp)
 80005f4:	00985cb4 	movhi	r2,24946
 80005f8:	10990804 	addi	r2,r2,25632
 80005fc:	e0bfd415 	stw	r2,-176(fp)
 8000600:	009b9a74 	movhi	r2,28265
 8000604:	10881dc4 	addi	r2,r2,8311
 8000608:	e0bfd515 	stw	r2,-172(fp)
 800060c:	00995cb4 	movhi	r2,25970
 8000610:	1099c804 	addi	r2,r2,26400
 8000614:	e0bfd615 	stw	r2,-168(fp)
 8000618:	009b9944 	movi	r2,28261
 800061c:	e0bfd70d 	sth	r2,-164(fp)
 8000620:	e03fd785 	stb	zero,-162(fp)
	{
		for (int j = 0; j < ROWS; j++)
 8000624:	e03f8f15 	stw	zero,-452(fp)
 8000628:	00001006 	br	800066c <textVGATest+0x328>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
 800062c:	d4200117 	ldw	r16,-32764(gp)
 8000630:	01401404 	movi	r5,80
 8000634:	e13f8f17 	ldw	r4,-452(fp)
 8000638:	80009940 	call	8000994 <__mulsi3>
 800063c:	8087883a 	add	r3,r16,r2
 8000640:	e0bf8f17 	ldw	r2,-452(fp)
 8000644:	1885883a 	add	r2,r3,r2
 8000648:	1009883a 	mov	r4,r2
 800064c:	e0bfd004 	addi	r2,fp,-192
 8000650:	00c007c4 	movi	r3,31
 8000654:	180d883a 	mov	r6,r3
 8000658:	100b883a 	mov	r5,r2
 800065c:	80009bc0 	call	80009bc <memcpy>
	usleep (500000);
	textVGASetColor(DIM_GRN, BRIGHT_GRN);
	textVGAClr();
	char greentest[] = "This text should draw in green";
	{
		for (int j = 0; j < ROWS; j++)
 8000660:	e0bf8f17 	ldw	r2,-452(fp)
 8000664:	10800044 	addi	r2,r2,1
 8000668:	e0bf8f15 	stw	r2,-452(fp)
 800066c:	e0bf8f17 	ldw	r2,-452(fp)
 8000670:	10800790 	cmplti	r2,r2,30
 8000674:	103fed1e 	bne	r2,zero,800062c <__alt_data_end+0xfc00062c>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
		}
	}
	usleep (500000);
 8000678:	01000234 	movhi	r4,8
 800067c:	21284804 	addi	r4,r4,-24288
 8000680:	800e0580 	call	800e058 <usleep>
	textVGASetColor(DIM_RED, BRIGHT_RED);
 8000684:	0143c004 	movi	r5,3840
 8000688:	0101c004 	movi	r4,1792
 800068c:	80002b00 	call	80002b0 <textVGASetColor>
	textVGAClr();
 8000690:	80002f40 	call	80002f4 <textVGAClr>
	char redtest[] = "This text should draw in red";
 8000694:	00820074 	movhi	r2,2049
 8000698:	10807104 	addi	r2,r2,452
 800069c:	e0ffd7c4 	addi	r3,fp,-161
 80006a0:	1009883a 	mov	r4,r2
 80006a4:	00800744 	movi	r2,29
 80006a8:	100d883a 	mov	r6,r2
 80006ac:	200b883a 	mov	r5,r4
 80006b0:	1809883a 	mov	r4,r3
 80006b4:	80009bc0 	call	80009bc <memcpy>
	{
		for (int j = 0; j < ROWS; j++)
 80006b8:	e03f9015 	stw	zero,-448(fp)
 80006bc:	00001206 	br	8000708 <textVGATest+0x3c4>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
 80006c0:	d4200117 	ldw	r16,-32764(gp)
 80006c4:	01401404 	movi	r5,80
 80006c8:	e13f9017 	ldw	r4,-448(fp)
 80006cc:	80009940 	call	8000994 <__mulsi3>
 80006d0:	8085883a 	add	r2,r16,r2
 80006d4:	01000784 	movi	r4,30
 80006d8:	e0ff9017 	ldw	r3,-448(fp)
 80006dc:	20c7c83a 	sub	r3,r4,r3
 80006e0:	10c5883a 	add	r2,r2,r3
 80006e4:	1009883a 	mov	r4,r2
 80006e8:	e0bfd7c4 	addi	r2,fp,-161
 80006ec:	00c00744 	movi	r3,29
 80006f0:	180d883a 	mov	r6,r3
 80006f4:	100b883a 	mov	r5,r2
 80006f8:	80009bc0 	call	80009bc <memcpy>
	usleep (500000);
	textVGASetColor(DIM_RED, BRIGHT_RED);
	textVGAClr();
	char redtest[] = "This text should draw in red";
	{
		for (int j = 0; j < ROWS; j++)
 80006fc:	e0bf9017 	ldw	r2,-448(fp)
 8000700:	10800044 	addi	r2,r2,1
 8000704:	e0bf9015 	stw	r2,-448(fp)
 8000708:	e0bf9017 	ldw	r2,-448(fp)
 800070c:	10800790 	cmplti	r2,r2,30
 8000710:	103feb1e 	bne	r2,zero,80006c0 <__alt_data_end+0xfc0006c0>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
		}
	}
	usleep (500000);
 8000714:	01000234 	movhi	r4,8
 8000718:	21284804 	addi	r4,r4,-24288
 800071c:	800e0580 	call	800e058 <usleep>
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
 8000720:	014003c4 	movi	r5,15
 8000724:	010001c4 	movi	r4,7
 8000728:	80002b00 	call	80002b0 <textVGASetColor>
	textVGAClr();
 800072c:	80002f40 	call	80002f4 <textVGAClr>
	char blutest[] = "This text should draw in blue";
 8000730:	009cda74 	movhi	r2,29545
 8000734:	109a1504 	addi	r2,r2,26708
 8000738:	e0bfdf15 	stw	r2,-132(fp)
 800073c:	009e1974 	movhi	r2,30821
 8000740:	109d0804 	addi	r2,r2,29728
 8000744:	e0bfe015 	stw	r2,-128(fp)
 8000748:	009a1cf4 	movhi	r2,26739
 800074c:	10881d04 	addi	r2,r2,8308
 8000750:	e0bfe115 	stw	r2,-124(fp)
 8000754:	00991b34 	movhi	r2,25708
 8000758:	109d5bc4 	addi	r2,r2,30063
 800075c:	e0bfe215 	stw	r2,-120(fp)
 8000760:	00985cb4 	movhi	r2,24946
 8000764:	10990804 	addi	r2,r2,25632
 8000768:	e0bfe315 	stw	r2,-116(fp)
 800076c:	009b9a74 	movhi	r2,28265
 8000770:	10881dc4 	addi	r2,r2,8311
 8000774:	e0bfe415 	stw	r2,-112(fp)
 8000778:	009d5b34 	movhi	r2,30060
 800077c:	10988804 	addi	r2,r2,25120
 8000780:	e0bfe515 	stw	r2,-108(fp)
 8000784:	00801944 	movi	r2,101
 8000788:	e0bfe60d 	sth	r2,-104(fp)
	{
		for (int j = 0; j < ROWS; j++)
 800078c:	e03f9115 	stw	zero,-444(fp)
 8000790:	00000e06 	br	80007cc <textVGATest+0x488>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
 8000794:	d4200117 	ldw	r16,-32764(gp)
 8000798:	01401404 	movi	r5,80
 800079c:	e13f9117 	ldw	r4,-444(fp)
 80007a0:	80009940 	call	8000994 <__mulsi3>
 80007a4:	8085883a 	add	r2,r16,r2
 80007a8:	1009883a 	mov	r4,r2
 80007ac:	e0bfdf04 	addi	r2,fp,-132
 80007b0:	00c00784 	movi	r3,30
 80007b4:	180d883a 	mov	r6,r3
 80007b8:	100b883a 	mov	r5,r2
 80007bc:	80009bc0 	call	80009bc <memcpy>
	usleep (500000);
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
	textVGAClr();
	char blutest[] = "This text should draw in blue";
	{
		for (int j = 0; j < ROWS; j++)
 80007c0:	e0bf9117 	ldw	r2,-444(fp)
 80007c4:	10800044 	addi	r2,r2,1
 80007c8:	e0bf9115 	stw	r2,-444(fp)
 80007cc:	e0bf9117 	ldw	r2,-444(fp)
 80007d0:	10800790 	cmplti	r2,r2,30
 80007d4:	103fef1e 	bne	r2,zero,8000794 <__alt_data_end+0xfc000794>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
		}
	}
	usleep (500000);
 80007d8:	01000234 	movhi	r4,8
 80007dc:	21284804 	addi	r4,r4,-24288
 80007e0:	800e0580 	call	800e058 <usleep>
	textVGAClr();
 80007e4:	80002f40 	call	80002f4 <textVGAClr>
	char inverted[] = "This text should draw inverted";
 80007e8:	00820074 	movhi	r2,2049
 80007ec:	10807904 	addi	r2,r2,484
 80007f0:	e0ffe684 	addi	r3,fp,-102
 80007f4:	1009883a 	mov	r4,r2
 80007f8:	008007c4 	movi	r2,31
 80007fc:	100d883a 	mov	r6,r2
 8000800:	200b883a 	mov	r5,r4
 8000804:	1809883a 	mov	r4,r3
 8000808:	80009bc0 	call	80009bc <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
 800080c:	e03f9215 	stw	zero,-440(fp)
 8000810:	00000e06 	br	800084c <textVGATest+0x508>
		inverted[i] |= 0x80;
 8000814:	e0ffe684 	addi	r3,fp,-102
 8000818:	e0bf9217 	ldw	r2,-440(fp)
 800081c:	1885883a 	add	r2,r3,r2
 8000820:	10c00003 	ldbu	r3,0(r2)
 8000824:	00bfe004 	movi	r2,-128
 8000828:	1884b03a 	or	r2,r3,r2
 800082c:	1009883a 	mov	r4,r2
 8000830:	e0ffe684 	addi	r3,fp,-102
 8000834:	e0bf9217 	ldw	r2,-440(fp)
 8000838:	1885883a 	add	r2,r3,r2
 800083c:	11000005 	stb	r4,0(r2)
		}
	}
	usleep (500000);
	textVGAClr();
	char inverted[] = "This text should draw inverted";
	for (int i = 0; i < sizeof(inverted); i++)
 8000840:	e0bf9217 	ldw	r2,-440(fp)
 8000844:	10800044 	addi	r2,r2,1
 8000848:	e0bf9215 	stw	r2,-440(fp)
 800084c:	e0bf9217 	ldw	r2,-440(fp)
 8000850:	108007f0 	cmpltui	r2,r2,31
 8000854:	103fef1e 	bne	r2,zero,8000814 <__alt_data_end+0xfc000814>
		inverted[i] |= 0x80;

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
 8000858:	01403c04 	movi	r5,240
 800085c:	01001c04 	movi	r4,112
 8000860:	80002b00 	call	80002b0 <textVGASetColor>
	{
		for (int j = 0; j < ROWS; j++)
 8000864:	e03f9315 	stw	zero,-436(fp)
 8000868:	00002106 	br	80008f0 <textVGATest+0x5ac>
		{
			if (j%2==0)
 800086c:	e0bf9317 	ldw	r2,-436(fp)
 8000870:	1080004c 	andi	r2,r2,1
 8000874:	10000e1e 	bne	r2,zero,80008b0 <textVGATest+0x56c>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
 8000878:	d4200117 	ldw	r16,-32764(gp)
 800087c:	01401404 	movi	r5,80
 8000880:	e13f9317 	ldw	r4,-436(fp)
 8000884:	80009940 	call	8000994 <__mulsi3>
 8000888:	8087883a 	add	r3,r16,r2
 800088c:	e0bf9317 	ldw	r2,-436(fp)
 8000890:	1885883a 	add	r2,r3,r2
 8000894:	1009883a 	mov	r4,r2
 8000898:	e0bfd004 	addi	r2,fp,-192
 800089c:	00c007c4 	movi	r3,31
 80008a0:	180d883a 	mov	r6,r3
 80008a4:	100b883a 	mov	r5,r2
 80008a8:	80009bc0 	call	80009bc <memcpy>
 80008ac:	00000d06 	br	80008e4 <textVGATest+0x5a0>
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
 80008b0:	d4200117 	ldw	r16,-32764(gp)
 80008b4:	01401404 	movi	r5,80
 80008b8:	e13f9317 	ldw	r4,-436(fp)
 80008bc:	80009940 	call	8000994 <__mulsi3>
 80008c0:	8087883a 	add	r3,r16,r2
 80008c4:	e0bf9317 	ldw	r2,-436(fp)
 80008c8:	1885883a 	add	r2,r3,r2
 80008cc:	1009883a 	mov	r4,r2
 80008d0:	e0bfe684 	addi	r2,fp,-102
 80008d4:	00c007c4 	movi	r3,31
 80008d8:	180d883a 	mov	r6,r3
 80008dc:	100b883a 	mov	r5,r2
 80008e0:	80009bc0 	call	80009bc <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
		inverted[i] |= 0x80;

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
	{
		for (int j = 0; j < ROWS; j++)
 80008e4:	e0bf9317 	ldw	r2,-436(fp)
 80008e8:	10800044 	addi	r2,r2,1
 80008ec:	e0bf9315 	stw	r2,-436(fp)
 80008f0:	e0bf9317 	ldw	r2,-436(fp)
 80008f4:	10800790 	cmplti	r2,r2,30
 80008f8:	103fdc1e 	bne	r2,zero,800086c <__alt_data_end+0xfc00086c>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
		}
	}
	usleep (500000);
 80008fc:	01000234 	movhi	r4,8
 8000900:	21284804 	addi	r4,r4,-24288
 8000904:	800e0580 	call	800e058 <usleep>

	textVGASetColor(BLACK, WHITE);
 8000908:	0143ffc4 	movi	r5,4095
 800090c:	0009883a 	mov	r4,zero
 8000910:	80002b00 	call	80002b0 <textVGASetColor>
	textVGAClr();
 8000914:	80002f40 	call	80002f4 <textVGAClr>

	char completed[] = "All visual tests completed, verify on-screen results are correct.";
 8000918:	00820074 	movhi	r2,2049
 800091c:	10808104 	addi	r2,r2,516
 8000920:	e0ffee44 	addi	r3,fp,-71
 8000924:	1009883a 	mov	r4,r2
 8000928:	00801084 	movi	r2,66
 800092c:	100d883a 	mov	r6,r2
 8000930:	200b883a 	mov	r5,r4
 8000934:	1809883a 	mov	r4,r3
 8000938:	80009bc0 	call	80009bc <memcpy>
	memcpy((void*)&vga_ctrl->VRAM[0],completed, sizeof(completed));
 800093c:	d0a00117 	ldw	r2,-32764(gp)
 8000940:	1009883a 	mov	r4,r2
 8000944:	e0bfee44 	addi	r2,fp,-71
 8000948:	00c01084 	movi	r3,66
 800094c:	180d883a 	mov	r6,r3
 8000950:	100b883a 	mov	r5,r2
 8000954:	80009bc0 	call	80009bc <memcpy>
	printf( "%s \n\r", completed);
 8000958:	e0bfee44 	addi	r2,fp,-71
 800095c:	100b883a 	mov	r5,r2
 8000960:	01020074 	movhi	r4,2049
 8000964:	21006f04 	addi	r4,r4,444
 8000968:	8000b340 	call	8000b34 <printf>

	usleep (1000000);
 800096c:	010003f4 	movhi	r4,15
 8000970:	21109004 	addi	r4,r4,16960
 8000974:	800e0580 	call	800e058 <usleep>

}
 8000978:	0001883a 	nop
 800097c:	e6ffff04 	addi	sp,fp,-4
 8000980:	dfc00217 	ldw	ra,8(sp)
 8000984:	df000117 	ldw	fp,4(sp)
 8000988:	dc000017 	ldw	r16,0(sp)
 800098c:	dec00304 	addi	sp,sp,12
 8000990:	f800283a 	ret

08000994 <__mulsi3>:
 8000994:	0005883a 	mov	r2,zero
 8000998:	20000726 	beq	r4,zero,80009b8 <__mulsi3+0x24>
 800099c:	20c0004c 	andi	r3,r4,1
 80009a0:	2008d07a 	srli	r4,r4,1
 80009a4:	18000126 	beq	r3,zero,80009ac <__mulsi3+0x18>
 80009a8:	1145883a 	add	r2,r2,r5
 80009ac:	294b883a 	add	r5,r5,r5
 80009b0:	203ffa1e 	bne	r4,zero,800099c <__alt_data_end+0xfc00099c>
 80009b4:	f800283a 	ret
 80009b8:	f800283a 	ret

080009bc <memcpy>:
 80009bc:	defffd04 	addi	sp,sp,-12
 80009c0:	dfc00215 	stw	ra,8(sp)
 80009c4:	dc400115 	stw	r17,4(sp)
 80009c8:	dc000015 	stw	r16,0(sp)
 80009cc:	00c003c4 	movi	r3,15
 80009d0:	2005883a 	mov	r2,r4
 80009d4:	1980452e 	bgeu	r3,r6,8000aec <memcpy+0x130>
 80009d8:	2906b03a 	or	r3,r5,r4
 80009dc:	18c000cc 	andi	r3,r3,3
 80009e0:	1800441e 	bne	r3,zero,8000af4 <memcpy+0x138>
 80009e4:	347ffc04 	addi	r17,r6,-16
 80009e8:	8822d13a 	srli	r17,r17,4
 80009ec:	28c00104 	addi	r3,r5,4
 80009f0:	23400104 	addi	r13,r4,4
 80009f4:	8820913a 	slli	r16,r17,4
 80009f8:	2b000204 	addi	r12,r5,8
 80009fc:	22c00204 	addi	r11,r4,8
 8000a00:	84000504 	addi	r16,r16,20
 8000a04:	2a800304 	addi	r10,r5,12
 8000a08:	22400304 	addi	r9,r4,12
 8000a0c:	2c21883a 	add	r16,r5,r16
 8000a10:	2811883a 	mov	r8,r5
 8000a14:	200f883a 	mov	r7,r4
 8000a18:	41000017 	ldw	r4,0(r8)
 8000a1c:	1fc00017 	ldw	ra,0(r3)
 8000a20:	63c00017 	ldw	r15,0(r12)
 8000a24:	39000015 	stw	r4,0(r7)
 8000a28:	53800017 	ldw	r14,0(r10)
 8000a2c:	6fc00015 	stw	ra,0(r13)
 8000a30:	5bc00015 	stw	r15,0(r11)
 8000a34:	4b800015 	stw	r14,0(r9)
 8000a38:	18c00404 	addi	r3,r3,16
 8000a3c:	39c00404 	addi	r7,r7,16
 8000a40:	42000404 	addi	r8,r8,16
 8000a44:	6b400404 	addi	r13,r13,16
 8000a48:	63000404 	addi	r12,r12,16
 8000a4c:	5ac00404 	addi	r11,r11,16
 8000a50:	52800404 	addi	r10,r10,16
 8000a54:	4a400404 	addi	r9,r9,16
 8000a58:	1c3fef1e 	bne	r3,r16,8000a18 <__alt_data_end+0xfc000a18>
 8000a5c:	89c00044 	addi	r7,r17,1
 8000a60:	380e913a 	slli	r7,r7,4
 8000a64:	310003cc 	andi	r4,r6,15
 8000a68:	02c000c4 	movi	r11,3
 8000a6c:	11c7883a 	add	r3,r2,r7
 8000a70:	29cb883a 	add	r5,r5,r7
 8000a74:	5900212e 	bgeu	r11,r4,8000afc <memcpy+0x140>
 8000a78:	1813883a 	mov	r9,r3
 8000a7c:	2811883a 	mov	r8,r5
 8000a80:	200f883a 	mov	r7,r4
 8000a84:	42800017 	ldw	r10,0(r8)
 8000a88:	4a400104 	addi	r9,r9,4
 8000a8c:	39ffff04 	addi	r7,r7,-4
 8000a90:	4abfff15 	stw	r10,-4(r9)
 8000a94:	42000104 	addi	r8,r8,4
 8000a98:	59fffa36 	bltu	r11,r7,8000a84 <__alt_data_end+0xfc000a84>
 8000a9c:	213fff04 	addi	r4,r4,-4
 8000aa0:	2008d0ba 	srli	r4,r4,2
 8000aa4:	318000cc 	andi	r6,r6,3
 8000aa8:	21000044 	addi	r4,r4,1
 8000aac:	2109883a 	add	r4,r4,r4
 8000ab0:	2109883a 	add	r4,r4,r4
 8000ab4:	1907883a 	add	r3,r3,r4
 8000ab8:	290b883a 	add	r5,r5,r4
 8000abc:	30000626 	beq	r6,zero,8000ad8 <memcpy+0x11c>
 8000ac0:	198d883a 	add	r6,r3,r6
 8000ac4:	29c00003 	ldbu	r7,0(r5)
 8000ac8:	18c00044 	addi	r3,r3,1
 8000acc:	29400044 	addi	r5,r5,1
 8000ad0:	19ffffc5 	stb	r7,-1(r3)
 8000ad4:	19bffb1e 	bne	r3,r6,8000ac4 <__alt_data_end+0xfc000ac4>
 8000ad8:	dfc00217 	ldw	ra,8(sp)
 8000adc:	dc400117 	ldw	r17,4(sp)
 8000ae0:	dc000017 	ldw	r16,0(sp)
 8000ae4:	dec00304 	addi	sp,sp,12
 8000ae8:	f800283a 	ret
 8000aec:	2007883a 	mov	r3,r4
 8000af0:	003ff206 	br	8000abc <__alt_data_end+0xfc000abc>
 8000af4:	2007883a 	mov	r3,r4
 8000af8:	003ff106 	br	8000ac0 <__alt_data_end+0xfc000ac0>
 8000afc:	200d883a 	mov	r6,r4
 8000b00:	003fee06 	br	8000abc <__alt_data_end+0xfc000abc>

08000b04 <_printf_r>:
 8000b04:	defffd04 	addi	sp,sp,-12
 8000b08:	2805883a 	mov	r2,r5
 8000b0c:	dfc00015 	stw	ra,0(sp)
 8000b10:	d9800115 	stw	r6,4(sp)
 8000b14:	d9c00215 	stw	r7,8(sp)
 8000b18:	21400217 	ldw	r5,8(r4)
 8000b1c:	d9c00104 	addi	r7,sp,4
 8000b20:	100d883a 	mov	r6,r2
 8000b24:	8000b700 	call	8000b70 <___vfprintf_internal_r>
 8000b28:	dfc00017 	ldw	ra,0(sp)
 8000b2c:	dec00304 	addi	sp,sp,12
 8000b30:	f800283a 	ret

08000b34 <printf>:
 8000b34:	defffc04 	addi	sp,sp,-16
 8000b38:	dfc00015 	stw	ra,0(sp)
 8000b3c:	d9400115 	stw	r5,4(sp)
 8000b40:	d9800215 	stw	r6,8(sp)
 8000b44:	d9c00315 	stw	r7,12(sp)
 8000b48:	00820074 	movhi	r2,2049
 8000b4c:	1087fd04 	addi	r2,r2,8180
 8000b50:	10800017 	ldw	r2,0(r2)
 8000b54:	200b883a 	mov	r5,r4
 8000b58:	d9800104 	addi	r6,sp,4
 8000b5c:	11000217 	ldw	r4,8(r2)
 8000b60:	8002e4c0 	call	8002e4c <__vfprintf_internal>
 8000b64:	dfc00017 	ldw	ra,0(sp)
 8000b68:	dec00404 	addi	sp,sp,16
 8000b6c:	f800283a 	ret

08000b70 <___vfprintf_internal_r>:
 8000b70:	deffb804 	addi	sp,sp,-288
 8000b74:	dfc04715 	stw	ra,284(sp)
 8000b78:	ddc04515 	stw	r23,276(sp)
 8000b7c:	dd404315 	stw	r21,268(sp)
 8000b80:	d9002d15 	stw	r4,180(sp)
 8000b84:	282f883a 	mov	r23,r5
 8000b88:	302b883a 	mov	r21,r6
 8000b8c:	d9c02e15 	stw	r7,184(sp)
 8000b90:	df004615 	stw	fp,280(sp)
 8000b94:	dd804415 	stw	r22,272(sp)
 8000b98:	dd004215 	stw	r20,264(sp)
 8000b9c:	dcc04115 	stw	r19,260(sp)
 8000ba0:	dc804015 	stw	r18,256(sp)
 8000ba4:	dc403f15 	stw	r17,252(sp)
 8000ba8:	dc003e15 	stw	r16,248(sp)
 8000bac:	80055e80 	call	80055e8 <_localeconv_r>
 8000bb0:	10800017 	ldw	r2,0(r2)
 8000bb4:	1009883a 	mov	r4,r2
 8000bb8:	d8803415 	stw	r2,208(sp)
 8000bbc:	80075840 	call	8007584 <strlen>
 8000bc0:	d8803715 	stw	r2,220(sp)
 8000bc4:	d8802d17 	ldw	r2,180(sp)
 8000bc8:	10000226 	beq	r2,zero,8000bd4 <___vfprintf_internal_r+0x64>
 8000bcc:	10800e17 	ldw	r2,56(r2)
 8000bd0:	1000fb26 	beq	r2,zero,8000fc0 <___vfprintf_internal_r+0x450>
 8000bd4:	b880030b 	ldhu	r2,12(r23)
 8000bd8:	10c8000c 	andi	r3,r2,8192
 8000bdc:	1800061e 	bne	r3,zero,8000bf8 <___vfprintf_internal_r+0x88>
 8000be0:	b9001917 	ldw	r4,100(r23)
 8000be4:	00f7ffc4 	movi	r3,-8193
 8000be8:	10880014 	ori	r2,r2,8192
 8000bec:	20c6703a 	and	r3,r4,r3
 8000bf0:	b880030d 	sth	r2,12(r23)
 8000bf4:	b8c01915 	stw	r3,100(r23)
 8000bf8:	10c0020c 	andi	r3,r2,8
 8000bfc:	1800c326 	beq	r3,zero,8000f0c <___vfprintf_internal_r+0x39c>
 8000c00:	b8c00417 	ldw	r3,16(r23)
 8000c04:	1800c126 	beq	r3,zero,8000f0c <___vfprintf_internal_r+0x39c>
 8000c08:	1080068c 	andi	r2,r2,26
 8000c0c:	00c00284 	movi	r3,10
 8000c10:	10c0c626 	beq	r2,r3,8000f2c <___vfprintf_internal_r+0x3bc>
 8000c14:	d8c00404 	addi	r3,sp,16
 8000c18:	05020074 	movhi	r20,2049
 8000c1c:	d9001e04 	addi	r4,sp,120
 8000c20:	a500a284 	addi	r20,r20,650
 8000c24:	d8c01e15 	stw	r3,120(sp)
 8000c28:	d8002015 	stw	zero,128(sp)
 8000c2c:	d8001f15 	stw	zero,124(sp)
 8000c30:	d8003315 	stw	zero,204(sp)
 8000c34:	d8003615 	stw	zero,216(sp)
 8000c38:	d8003815 	stw	zero,224(sp)
 8000c3c:	1811883a 	mov	r8,r3
 8000c40:	d8003915 	stw	zero,228(sp)
 8000c44:	d8003a15 	stw	zero,232(sp)
 8000c48:	d8002f15 	stw	zero,188(sp)
 8000c4c:	d9002815 	stw	r4,160(sp)
 8000c50:	a8800007 	ldb	r2,0(r21)
 8000c54:	10028b26 	beq	r2,zero,8001684 <___vfprintf_internal_r+0xb14>
 8000c58:	00c00944 	movi	r3,37
 8000c5c:	a823883a 	mov	r17,r21
 8000c60:	10c0021e 	bne	r2,r3,8000c6c <___vfprintf_internal_r+0xfc>
 8000c64:	00001406 	br	8000cb8 <___vfprintf_internal_r+0x148>
 8000c68:	10c00326 	beq	r2,r3,8000c78 <___vfprintf_internal_r+0x108>
 8000c6c:	8c400044 	addi	r17,r17,1
 8000c70:	88800007 	ldb	r2,0(r17)
 8000c74:	103ffc1e 	bne	r2,zero,8000c68 <__alt_data_end+0xfc000c68>
 8000c78:	8d61c83a 	sub	r16,r17,r21
 8000c7c:	80000e26 	beq	r16,zero,8000cb8 <___vfprintf_internal_r+0x148>
 8000c80:	d8c02017 	ldw	r3,128(sp)
 8000c84:	d8801f17 	ldw	r2,124(sp)
 8000c88:	45400015 	stw	r21,0(r8)
 8000c8c:	1c07883a 	add	r3,r3,r16
 8000c90:	10800044 	addi	r2,r2,1
 8000c94:	d8c02015 	stw	r3,128(sp)
 8000c98:	44000115 	stw	r16,4(r8)
 8000c9c:	d8801f15 	stw	r2,124(sp)
 8000ca0:	00c001c4 	movi	r3,7
 8000ca4:	1880a916 	blt	r3,r2,8000f4c <___vfprintf_internal_r+0x3dc>
 8000ca8:	42000204 	addi	r8,r8,8
 8000cac:	d9402f17 	ldw	r5,188(sp)
 8000cb0:	2c0b883a 	add	r5,r5,r16
 8000cb4:	d9402f15 	stw	r5,188(sp)
 8000cb8:	88800007 	ldb	r2,0(r17)
 8000cbc:	1000aa26 	beq	r2,zero,8000f68 <___vfprintf_internal_r+0x3f8>
 8000cc0:	8d400044 	addi	r21,r17,1
 8000cc4:	8c400047 	ldb	r17,1(r17)
 8000cc8:	0021883a 	mov	r16,zero
 8000ccc:	00bfffc4 	movi	r2,-1
 8000cd0:	0025883a 	mov	r18,zero
 8000cd4:	dc002905 	stb	r16,164(sp)
 8000cd8:	d8002785 	stb	zero,158(sp)
 8000cdc:	d8002b05 	stb	zero,172(sp)
 8000ce0:	d8802a15 	stw	r2,168(sp)
 8000ce4:	d8003115 	stw	zero,196(sp)
 8000ce8:	04c01604 	movi	r19,88
 8000cec:	05800244 	movi	r22,9
 8000cf0:	9021883a 	mov	r16,r18
 8000cf4:	4039883a 	mov	fp,r8
 8000cf8:	ad400044 	addi	r21,r21,1
 8000cfc:	88bff804 	addi	r2,r17,-32
 8000d00:	98833236 	bltu	r19,r2,80019cc <___vfprintf_internal_r+0xe5c>
 8000d04:	100490ba 	slli	r2,r2,2
 8000d08:	00c20034 	movhi	r3,2048
 8000d0c:	18c34704 	addi	r3,r3,3356
 8000d10:	10c5883a 	add	r2,r2,r3
 8000d14:	10800017 	ldw	r2,0(r2)
 8000d18:	1000683a 	jmp	r2
 8000d1c:	080018c4 	addi	zero,at,99
 8000d20:	080019cc 	andi	zero,at,103
 8000d24:	080019cc 	andi	zero,at,103
 8000d28:	080018e4 	muli	zero,at,99
 8000d2c:	080019cc 	andi	zero,at,103
 8000d30:	080019cc 	andi	zero,at,103
 8000d34:	080019cc 	andi	zero,at,103
 8000d38:	080019cc 	andi	zero,at,103
 8000d3c:	080019cc 	andi	zero,at,103
 8000d40:	080019cc 	andi	zero,at,103
 8000d44:	08000fcc 	andi	zero,at,63
 8000d48:	080017d4 	ori	zero,at,95
 8000d4c:	080019cc 	andi	zero,at,103
 8000d50:	08000e90 	cmplti	zero,at,58
 8000d54:	08000ff0 	cmpltui	zero,at,63
 8000d58:	080019cc 	andi	zero,at,103
 8000d5c:	08001040 	call	800104 <__alt_mem_onchip_memory2_0+0x800104>
 8000d60:	0800104c 	andi	zero,at,65
 8000d64:	0800104c 	andi	zero,at,65
 8000d68:	0800104c 	andi	zero,at,65
 8000d6c:	0800104c 	andi	zero,at,65
 8000d70:	0800104c 	andi	zero,at,65
 8000d74:	0800104c 	andi	zero,at,65
 8000d78:	0800104c 	andi	zero,at,65
 8000d7c:	0800104c 	andi	zero,at,65
 8000d80:	0800104c 	andi	zero,at,65
 8000d84:	080019cc 	andi	zero,at,103
 8000d88:	080019cc 	andi	zero,at,103
 8000d8c:	080019cc 	andi	zero,at,103
 8000d90:	080019cc 	andi	zero,at,103
 8000d94:	080019cc 	andi	zero,at,103
 8000d98:	080019cc 	andi	zero,at,103
 8000d9c:	080019cc 	andi	zero,at,103
 8000da0:	080019cc 	andi	zero,at,103
 8000da4:	080019cc 	andi	zero,at,103
 8000da8:	080019cc 	andi	zero,at,103
 8000dac:	08001088 	cmpgei	zero,at,66
 8000db0:	08001150 	cmplti	zero,at,69
 8000db4:	080019cc 	andi	zero,at,103
 8000db8:	08001150 	cmplti	zero,at,69
 8000dbc:	080019cc 	andi	zero,at,103
 8000dc0:	080019cc 	andi	zero,at,103
 8000dc4:	080019cc 	andi	zero,at,103
 8000dc8:	080019cc 	andi	zero,at,103
 8000dcc:	080011fc 	xorhi	zero,at,71
 8000dd0:	080019cc 	andi	zero,at,103
 8000dd4:	080019cc 	andi	zero,at,103
 8000dd8:	08001208 	cmpgei	zero,at,72
 8000ddc:	080019cc 	andi	zero,at,103
 8000de0:	080019cc 	andi	zero,at,103
 8000de4:	080019cc 	andi	zero,at,103
 8000de8:	080019cc 	andi	zero,at,103
 8000dec:	080019cc 	andi	zero,at,103
 8000df0:	0800168c 	andi	zero,at,90
 8000df4:	080019cc 	andi	zero,at,103
 8000df8:	080019cc 	andi	zero,at,103
 8000dfc:	080016f8 	rdprs	zero,at,91
 8000e00:	080019cc 	andi	zero,at,103
 8000e04:	080019cc 	andi	zero,at,103
 8000e08:	080019cc 	andi	zero,at,103
 8000e0c:	080019cc 	andi	zero,at,103
 8000e10:	080019cc 	andi	zero,at,103
 8000e14:	080019cc 	andi	zero,at,103
 8000e18:	080019cc 	andi	zero,at,103
 8000e1c:	080019cc 	andi	zero,at,103
 8000e20:	080019cc 	andi	zero,at,103
 8000e24:	080019cc 	andi	zero,at,103
 8000e28:	08001970 	cmpltui	zero,at,101
 8000e2c:	080018f0 	cmpltui	zero,at,99
 8000e30:	08001150 	cmplti	zero,at,69
 8000e34:	08001150 	cmplti	zero,at,69
 8000e38:	08001150 	cmplti	zero,at,69
 8000e3c:	08001910 	cmplti	zero,at,100
 8000e40:	080018f0 	cmpltui	zero,at,99
 8000e44:	080019cc 	andi	zero,at,103
 8000e48:	080019cc 	andi	zero,at,103
 8000e4c:	0800191c 	xori	zero,at,100
 8000e50:	080019cc 	andi	zero,at,103
 8000e54:	08001930 	cmpltui	zero,at,100
 8000e58:	080017b4 	orhi	zero,at,94
 8000e5c:	08000e9c 	xori	zero,at,58
 8000e60:	080017ec 	andhi	zero,at,95
 8000e64:	080019cc 	andi	zero,at,103
 8000e68:	080017f8 	rdprs	zero,at,95
 8000e6c:	080019cc 	andi	zero,at,103
 8000e70:	0800185c 	xori	zero,at,97
 8000e74:	080019cc 	andi	zero,at,103
 8000e78:	080019cc 	andi	zero,at,103
 8000e7c:	0800187c 	xorhi	zero,at,97
 8000e80:	d8c03117 	ldw	r3,196(sp)
 8000e84:	d8802e15 	stw	r2,184(sp)
 8000e88:	00c7c83a 	sub	r3,zero,r3
 8000e8c:	d8c03115 	stw	r3,196(sp)
 8000e90:	84000114 	ori	r16,r16,4
 8000e94:	ac400007 	ldb	r17,0(r21)
 8000e98:	003f9706 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 8000e9c:	00800c04 	movi	r2,48
 8000ea0:	d8802705 	stb	r2,156(sp)
 8000ea4:	00801e04 	movi	r2,120
 8000ea8:	d8802745 	stb	r2,157(sp)
 8000eac:	d9002a17 	ldw	r4,168(sp)
 8000eb0:	d8802e17 	ldw	r2,184(sp)
 8000eb4:	d8002785 	stb	zero,158(sp)
 8000eb8:	e011883a 	mov	r8,fp
 8000ebc:	10c00104 	addi	r3,r2,4
 8000ec0:	14c00017 	ldw	r19,0(r2)
 8000ec4:	002d883a 	mov	r22,zero
 8000ec8:	80800094 	ori	r2,r16,2
 8000ecc:	2002ca16 	blt	r4,zero,80019f8 <___vfprintf_internal_r+0xe88>
 8000ed0:	00bfdfc4 	movi	r2,-129
 8000ed4:	80a4703a 	and	r18,r16,r2
 8000ed8:	d8c02e15 	stw	r3,184(sp)
 8000edc:	94800094 	ori	r18,r18,2
 8000ee0:	9802b41e 	bne	r19,zero,80019b4 <___vfprintf_internal_r+0xe44>
 8000ee4:	01420074 	movhi	r5,2049
 8000ee8:	29409b04 	addi	r5,r5,620
 8000eec:	d9403915 	stw	r5,228(sp)
 8000ef0:	04401e04 	movi	r17,120
 8000ef4:	d8802a17 	ldw	r2,168(sp)
 8000ef8:	0039883a 	mov	fp,zero
 8000efc:	1001fa26 	beq	r2,zero,80016e8 <___vfprintf_internal_r+0xb78>
 8000f00:	0027883a 	mov	r19,zero
 8000f04:	002d883a 	mov	r22,zero
 8000f08:	00021906 	br	8001770 <___vfprintf_internal_r+0xc00>
 8000f0c:	d9002d17 	ldw	r4,180(sp)
 8000f10:	b80b883a 	mov	r5,r23
 8000f14:	8002f240 	call	8002f24 <__swsetup_r>
 8000f18:	1005dc1e 	bne	r2,zero,800268c <___vfprintf_internal_r+0x1b1c>
 8000f1c:	b880030b 	ldhu	r2,12(r23)
 8000f20:	00c00284 	movi	r3,10
 8000f24:	1080068c 	andi	r2,r2,26
 8000f28:	10ff3a1e 	bne	r2,r3,8000c14 <__alt_data_end+0xfc000c14>
 8000f2c:	b880038f 	ldh	r2,14(r23)
 8000f30:	103f3816 	blt	r2,zero,8000c14 <__alt_data_end+0xfc000c14>
 8000f34:	d9c02e17 	ldw	r7,184(sp)
 8000f38:	d9002d17 	ldw	r4,180(sp)
 8000f3c:	a80d883a 	mov	r6,r21
 8000f40:	b80b883a 	mov	r5,r23
 8000f44:	8002e680 	call	8002e68 <__sbprintf>
 8000f48:	00001106 	br	8000f90 <___vfprintf_internal_r+0x420>
 8000f4c:	d9002d17 	ldw	r4,180(sp)
 8000f50:	d9801e04 	addi	r6,sp,120
 8000f54:	b80b883a 	mov	r5,r23
 8000f58:	80077180 	call	8007718 <__sprint_r>
 8000f5c:	1000081e 	bne	r2,zero,8000f80 <___vfprintf_internal_r+0x410>
 8000f60:	da000404 	addi	r8,sp,16
 8000f64:	003f5106 	br	8000cac <__alt_data_end+0xfc000cac>
 8000f68:	d8802017 	ldw	r2,128(sp)
 8000f6c:	10000426 	beq	r2,zero,8000f80 <___vfprintf_internal_r+0x410>
 8000f70:	d9002d17 	ldw	r4,180(sp)
 8000f74:	d9801e04 	addi	r6,sp,120
 8000f78:	b80b883a 	mov	r5,r23
 8000f7c:	80077180 	call	8007718 <__sprint_r>
 8000f80:	b880030b 	ldhu	r2,12(r23)
 8000f84:	1080100c 	andi	r2,r2,64
 8000f88:	1005c01e 	bne	r2,zero,800268c <___vfprintf_internal_r+0x1b1c>
 8000f8c:	d8802f17 	ldw	r2,188(sp)
 8000f90:	dfc04717 	ldw	ra,284(sp)
 8000f94:	df004617 	ldw	fp,280(sp)
 8000f98:	ddc04517 	ldw	r23,276(sp)
 8000f9c:	dd804417 	ldw	r22,272(sp)
 8000fa0:	dd404317 	ldw	r21,268(sp)
 8000fa4:	dd004217 	ldw	r20,264(sp)
 8000fa8:	dcc04117 	ldw	r19,260(sp)
 8000fac:	dc804017 	ldw	r18,256(sp)
 8000fb0:	dc403f17 	ldw	r17,252(sp)
 8000fb4:	dc003e17 	ldw	r16,248(sp)
 8000fb8:	dec04804 	addi	sp,sp,288
 8000fbc:	f800283a 	ret
 8000fc0:	d9002d17 	ldw	r4,180(sp)
 8000fc4:	8004f300 	call	8004f30 <__sinit>
 8000fc8:	003f0206 	br	8000bd4 <__alt_data_end+0xfc000bd4>
 8000fcc:	d9002e17 	ldw	r4,184(sp)
 8000fd0:	d9402e17 	ldw	r5,184(sp)
 8000fd4:	21000017 	ldw	r4,0(r4)
 8000fd8:	28800104 	addi	r2,r5,4
 8000fdc:	d9003115 	stw	r4,196(sp)
 8000fe0:	203fa716 	blt	r4,zero,8000e80 <__alt_data_end+0xfc000e80>
 8000fe4:	d8802e15 	stw	r2,184(sp)
 8000fe8:	ac400007 	ldb	r17,0(r21)
 8000fec:	003f4206 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 8000ff0:	ac400007 	ldb	r17,0(r21)
 8000ff4:	01000a84 	movi	r4,42
 8000ff8:	a8c00044 	addi	r3,r21,1
 8000ffc:	89075826 	beq	r17,r4,8002d60 <___vfprintf_internal_r+0x21f0>
 8001000:	8cbff404 	addi	r18,r17,-48
 8001004:	b486ae36 	bltu	r22,r18,8002ac0 <___vfprintf_internal_r+0x1f50>
 8001008:	0009883a 	mov	r4,zero
 800100c:	1823883a 	mov	r17,r3
 8001010:	01400284 	movi	r5,10
 8001014:	80009940 	call	8000994 <__mulsi3>
 8001018:	88c00007 	ldb	r3,0(r17)
 800101c:	1489883a 	add	r4,r2,r18
 8001020:	8d400044 	addi	r21,r17,1
 8001024:	1cbff404 	addi	r18,r3,-48
 8001028:	a823883a 	mov	r17,r21
 800102c:	b4bff82e 	bgeu	r22,r18,8001010 <__alt_data_end+0xfc001010>
 8001030:	1823883a 	mov	r17,r3
 8001034:	2005f616 	blt	r4,zero,8002810 <___vfprintf_internal_r+0x1ca0>
 8001038:	d9002a15 	stw	r4,168(sp)
 800103c:	003f2f06 	br	8000cfc <__alt_data_end+0xfc000cfc>
 8001040:	84002014 	ori	r16,r16,128
 8001044:	ac400007 	ldb	r17,0(r21)
 8001048:	003f2b06 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 800104c:	8cbff404 	addi	r18,r17,-48
 8001050:	d8003115 	stw	zero,196(sp)
 8001054:	0009883a 	mov	r4,zero
 8001058:	a823883a 	mov	r17,r21
 800105c:	01400284 	movi	r5,10
 8001060:	80009940 	call	8000994 <__mulsi3>
 8001064:	88c00007 	ldb	r3,0(r17)
 8001068:	9089883a 	add	r4,r18,r2
 800106c:	ad400044 	addi	r21,r21,1
 8001070:	1cbff404 	addi	r18,r3,-48
 8001074:	a823883a 	mov	r17,r21
 8001078:	b4bff82e 	bgeu	r22,r18,800105c <__alt_data_end+0xfc00105c>
 800107c:	1823883a 	mov	r17,r3
 8001080:	d9003115 	stw	r4,196(sp)
 8001084:	003f1d06 	br	8000cfc <__alt_data_end+0xfc000cfc>
 8001088:	8025883a 	mov	r18,r16
 800108c:	dc002903 	ldbu	r16,164(sp)
 8001090:	e011883a 	mov	r8,fp
 8001094:	84003fcc 	andi	r16,r16,255
 8001098:	8007531e 	bne	r16,zero,8002de8 <___vfprintf_internal_r+0x2278>
 800109c:	94800414 	ori	r18,r18,16
 80010a0:	9080080c 	andi	r2,r18,32
 80010a4:	1003a326 	beq	r2,zero,8001f34 <___vfprintf_internal_r+0x13c4>
 80010a8:	d9002e17 	ldw	r4,184(sp)
 80010ac:	20800117 	ldw	r2,4(r4)
 80010b0:	24c00017 	ldw	r19,0(r4)
 80010b4:	21000204 	addi	r4,r4,8
 80010b8:	d9002e15 	stw	r4,184(sp)
 80010bc:	102d883a 	mov	r22,r2
 80010c0:	10047316 	blt	r2,zero,8002290 <___vfprintf_internal_r+0x1720>
 80010c4:	d9002a17 	ldw	r4,168(sp)
 80010c8:	df002783 	ldbu	fp,158(sp)
 80010cc:	2003e416 	blt	r4,zero,8002060 <___vfprintf_internal_r+0x14f0>
 80010d0:	00ffdfc4 	movi	r3,-129
 80010d4:	9d84b03a 	or	r2,r19,r22
 80010d8:	90e4703a 	and	r18,r18,r3
 80010dc:	10018026 	beq	r2,zero,80016e0 <___vfprintf_internal_r+0xb70>
 80010e0:	b003ab26 	beq	r22,zero,8001f90 <___vfprintf_internal_r+0x1420>
 80010e4:	dc402915 	stw	r17,164(sp)
 80010e8:	dc001e04 	addi	r16,sp,120
 80010ec:	b023883a 	mov	r17,r22
 80010f0:	402d883a 	mov	r22,r8
 80010f4:	9809883a 	mov	r4,r19
 80010f8:	880b883a 	mov	r5,r17
 80010fc:	01800284 	movi	r6,10
 8001100:	000f883a 	mov	r7,zero
 8001104:	800a7e40 	call	800a7e4 <__umoddi3>
 8001108:	10800c04 	addi	r2,r2,48
 800110c:	843fffc4 	addi	r16,r16,-1
 8001110:	9809883a 	mov	r4,r19
 8001114:	880b883a 	mov	r5,r17
 8001118:	80800005 	stb	r2,0(r16)
 800111c:	01800284 	movi	r6,10
 8001120:	000f883a 	mov	r7,zero
 8001124:	800a1e80 	call	800a1e8 <__udivdi3>
 8001128:	1027883a 	mov	r19,r2
 800112c:	10c4b03a 	or	r2,r2,r3
 8001130:	1823883a 	mov	r17,r3
 8001134:	103fef1e 	bne	r2,zero,80010f4 <__alt_data_end+0xfc0010f4>
 8001138:	d8c02817 	ldw	r3,160(sp)
 800113c:	dc402917 	ldw	r17,164(sp)
 8001140:	b011883a 	mov	r8,r22
 8001144:	1c07c83a 	sub	r3,r3,r16
 8001148:	d8c02b15 	stw	r3,172(sp)
 800114c:	00005f06 	br	80012cc <___vfprintf_internal_r+0x75c>
 8001150:	8025883a 	mov	r18,r16
 8001154:	dc002903 	ldbu	r16,164(sp)
 8001158:	e011883a 	mov	r8,fp
 800115c:	84003fcc 	andi	r16,r16,255
 8001160:	80071e1e 	bne	r16,zero,8002ddc <___vfprintf_internal_r+0x226c>
 8001164:	9080020c 	andi	r2,r18,8
 8001168:	1004af26 	beq	r2,zero,8002428 <___vfprintf_internal_r+0x18b8>
 800116c:	d9002e17 	ldw	r4,184(sp)
 8001170:	d9402e17 	ldw	r5,184(sp)
 8001174:	d8802e17 	ldw	r2,184(sp)
 8001178:	21000017 	ldw	r4,0(r4)
 800117c:	29400117 	ldw	r5,4(r5)
 8001180:	10800204 	addi	r2,r2,8
 8001184:	d9003615 	stw	r4,216(sp)
 8001188:	d9403815 	stw	r5,224(sp)
 800118c:	d8802e15 	stw	r2,184(sp)
 8001190:	d9003617 	ldw	r4,216(sp)
 8001194:	d9403817 	ldw	r5,224(sp)
 8001198:	da003d15 	stw	r8,244(sp)
 800119c:	04000044 	movi	r16,1
 80011a0:	80072a40 	call	80072a4 <__fpclassifyd>
 80011a4:	da003d17 	ldw	r8,244(sp)
 80011a8:	1404441e 	bne	r2,r16,80022bc <___vfprintf_internal_r+0x174c>
 80011ac:	d9003617 	ldw	r4,216(sp)
 80011b0:	d9403817 	ldw	r5,224(sp)
 80011b4:	000d883a 	mov	r6,zero
 80011b8:	000f883a 	mov	r7,zero
 80011bc:	800c33c0 	call	800c33c <__ledf2>
 80011c0:	da003d17 	ldw	r8,244(sp)
 80011c4:	1005e316 	blt	r2,zero,8002954 <___vfprintf_internal_r+0x1de4>
 80011c8:	df002783 	ldbu	fp,158(sp)
 80011cc:	008011c4 	movi	r2,71
 80011d0:	1445580e 	bge	r2,r17,8002734 <___vfprintf_internal_r+0x1bc4>
 80011d4:	04020074 	movhi	r16,2049
 80011d8:	84009304 	addi	r16,r16,588
 80011dc:	00c000c4 	movi	r3,3
 80011e0:	00bfdfc4 	movi	r2,-129
 80011e4:	d8c02915 	stw	r3,164(sp)
 80011e8:	90a4703a 	and	r18,r18,r2
 80011ec:	d8c02b15 	stw	r3,172(sp)
 80011f0:	d8002a15 	stw	zero,168(sp)
 80011f4:	d8003215 	stw	zero,200(sp)
 80011f8:	00003a06 	br	80012e4 <___vfprintf_internal_r+0x774>
 80011fc:	84000214 	ori	r16,r16,8
 8001200:	ac400007 	ldb	r17,0(r21)
 8001204:	003ebc06 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 8001208:	8025883a 	mov	r18,r16
 800120c:	dc002903 	ldbu	r16,164(sp)
 8001210:	e011883a 	mov	r8,fp
 8001214:	84003fcc 	andi	r16,r16,255
 8001218:	8007001e 	bne	r16,zero,8002e1c <___vfprintf_internal_r+0x22ac>
 800121c:	94800414 	ori	r18,r18,16
 8001220:	9080080c 	andi	r2,r18,32
 8001224:	1002fa26 	beq	r2,zero,8001e10 <___vfprintf_internal_r+0x12a0>
 8001228:	d9002e17 	ldw	r4,184(sp)
 800122c:	d9402a17 	ldw	r5,168(sp)
 8001230:	d8002785 	stb	zero,158(sp)
 8001234:	20800204 	addi	r2,r4,8
 8001238:	24c00017 	ldw	r19,0(r4)
 800123c:	25800117 	ldw	r22,4(r4)
 8001240:	2804b116 	blt	r5,zero,8002508 <___vfprintf_internal_r+0x1998>
 8001244:	013fdfc4 	movi	r4,-129
 8001248:	9d86b03a 	or	r3,r19,r22
 800124c:	d8802e15 	stw	r2,184(sp)
 8001250:	9124703a 	and	r18,r18,r4
 8001254:	1802fb1e 	bne	r3,zero,8001e44 <___vfprintf_internal_r+0x12d4>
 8001258:	d8c02a17 	ldw	r3,168(sp)
 800125c:	0039883a 	mov	fp,zero
 8001260:	1805e526 	beq	r3,zero,80029f8 <___vfprintf_internal_r+0x1e88>
 8001264:	0027883a 	mov	r19,zero
 8001268:	002d883a 	mov	r22,zero
 800126c:	dc001e04 	addi	r16,sp,120
 8001270:	9806d0fa 	srli	r3,r19,3
 8001274:	b008977a 	slli	r4,r22,29
 8001278:	b02cd0fa 	srli	r22,r22,3
 800127c:	9cc001cc 	andi	r19,r19,7
 8001280:	98800c04 	addi	r2,r19,48
 8001284:	843fffc4 	addi	r16,r16,-1
 8001288:	20e6b03a 	or	r19,r4,r3
 800128c:	80800005 	stb	r2,0(r16)
 8001290:	9d86b03a 	or	r3,r19,r22
 8001294:	183ff61e 	bne	r3,zero,8001270 <__alt_data_end+0xfc001270>
 8001298:	90c0004c 	andi	r3,r18,1
 800129c:	18014126 	beq	r3,zero,80017a4 <___vfprintf_internal_r+0xc34>
 80012a0:	10803fcc 	andi	r2,r2,255
 80012a4:	1080201c 	xori	r2,r2,128
 80012a8:	10bfe004 	addi	r2,r2,-128
 80012ac:	00c00c04 	movi	r3,48
 80012b0:	10c13c26 	beq	r2,r3,80017a4 <___vfprintf_internal_r+0xc34>
 80012b4:	80ffffc5 	stb	r3,-1(r16)
 80012b8:	d8c02817 	ldw	r3,160(sp)
 80012bc:	80bfffc4 	addi	r2,r16,-1
 80012c0:	1021883a 	mov	r16,r2
 80012c4:	1887c83a 	sub	r3,r3,r2
 80012c8:	d8c02b15 	stw	r3,172(sp)
 80012cc:	d8802b17 	ldw	r2,172(sp)
 80012d0:	d9002a17 	ldw	r4,168(sp)
 80012d4:	1100010e 	bge	r2,r4,80012dc <___vfprintf_internal_r+0x76c>
 80012d8:	2005883a 	mov	r2,r4
 80012dc:	d8802915 	stw	r2,164(sp)
 80012e0:	d8003215 	stw	zero,200(sp)
 80012e4:	e7003fcc 	andi	fp,fp,255
 80012e8:	e700201c 	xori	fp,fp,128
 80012ec:	e73fe004 	addi	fp,fp,-128
 80012f0:	e0000326 	beq	fp,zero,8001300 <___vfprintf_internal_r+0x790>
 80012f4:	d8c02917 	ldw	r3,164(sp)
 80012f8:	18c00044 	addi	r3,r3,1
 80012fc:	d8c02915 	stw	r3,164(sp)
 8001300:	90c0008c 	andi	r3,r18,2
 8001304:	d8c02c15 	stw	r3,176(sp)
 8001308:	18000326 	beq	r3,zero,8001318 <___vfprintf_internal_r+0x7a8>
 800130c:	d8c02917 	ldw	r3,164(sp)
 8001310:	18c00084 	addi	r3,r3,2
 8001314:	d8c02915 	stw	r3,164(sp)
 8001318:	90c0210c 	andi	r3,r18,132
 800131c:	d8c03015 	stw	r3,192(sp)
 8001320:	1801c51e 	bne	r3,zero,8001a38 <___vfprintf_internal_r+0xec8>
 8001324:	d9003117 	ldw	r4,196(sp)
 8001328:	d8c02917 	ldw	r3,164(sp)
 800132c:	20e7c83a 	sub	r19,r4,r3
 8001330:	04c1c10e 	bge	zero,r19,8001a38 <___vfprintf_internal_r+0xec8>
 8001334:	02400404 	movi	r9,16
 8001338:	d8c02017 	ldw	r3,128(sp)
 800133c:	d8801f17 	ldw	r2,124(sp)
 8001340:	4cc52f0e 	bge	r9,r19,8002800 <___vfprintf_internal_r+0x1c90>
 8001344:	01420074 	movhi	r5,2049
 8001348:	2940a684 	addi	r5,r5,666
 800134c:	dc403b15 	stw	r17,236(sp)
 8001350:	d9403515 	stw	r5,212(sp)
 8001354:	9823883a 	mov	r17,r19
 8001358:	482d883a 	mov	r22,r9
 800135c:	9027883a 	mov	r19,r18
 8001360:	070001c4 	movi	fp,7
 8001364:	8025883a 	mov	r18,r16
 8001368:	dc002d17 	ldw	r16,180(sp)
 800136c:	00000306 	br	800137c <___vfprintf_internal_r+0x80c>
 8001370:	8c7ffc04 	addi	r17,r17,-16
 8001374:	42000204 	addi	r8,r8,8
 8001378:	b440130e 	bge	r22,r17,80013c8 <___vfprintf_internal_r+0x858>
 800137c:	01020074 	movhi	r4,2049
 8001380:	18c00404 	addi	r3,r3,16
 8001384:	10800044 	addi	r2,r2,1
 8001388:	2100a684 	addi	r4,r4,666
 800138c:	41000015 	stw	r4,0(r8)
 8001390:	45800115 	stw	r22,4(r8)
 8001394:	d8c02015 	stw	r3,128(sp)
 8001398:	d8801f15 	stw	r2,124(sp)
 800139c:	e0bff40e 	bge	fp,r2,8001370 <__alt_data_end+0xfc001370>
 80013a0:	d9801e04 	addi	r6,sp,120
 80013a4:	b80b883a 	mov	r5,r23
 80013a8:	8009883a 	mov	r4,r16
 80013ac:	80077180 	call	8007718 <__sprint_r>
 80013b0:	103ef31e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 80013b4:	8c7ffc04 	addi	r17,r17,-16
 80013b8:	d8c02017 	ldw	r3,128(sp)
 80013bc:	d8801f17 	ldw	r2,124(sp)
 80013c0:	da000404 	addi	r8,sp,16
 80013c4:	b47fed16 	blt	r22,r17,800137c <__alt_data_end+0xfc00137c>
 80013c8:	9021883a 	mov	r16,r18
 80013cc:	9825883a 	mov	r18,r19
 80013d0:	8827883a 	mov	r19,r17
 80013d4:	dc403b17 	ldw	r17,236(sp)
 80013d8:	d9403517 	ldw	r5,212(sp)
 80013dc:	98c7883a 	add	r3,r19,r3
 80013e0:	10800044 	addi	r2,r2,1
 80013e4:	41400015 	stw	r5,0(r8)
 80013e8:	44c00115 	stw	r19,4(r8)
 80013ec:	d8c02015 	stw	r3,128(sp)
 80013f0:	d8801f15 	stw	r2,124(sp)
 80013f4:	010001c4 	movi	r4,7
 80013f8:	2082c516 	blt	r4,r2,8001f10 <___vfprintf_internal_r+0x13a0>
 80013fc:	df002787 	ldb	fp,158(sp)
 8001400:	42000204 	addi	r8,r8,8
 8001404:	e0000c26 	beq	fp,zero,8001438 <___vfprintf_internal_r+0x8c8>
 8001408:	d8801f17 	ldw	r2,124(sp)
 800140c:	d9002784 	addi	r4,sp,158
 8001410:	18c00044 	addi	r3,r3,1
 8001414:	10800044 	addi	r2,r2,1
 8001418:	41000015 	stw	r4,0(r8)
 800141c:	01000044 	movi	r4,1
 8001420:	41000115 	stw	r4,4(r8)
 8001424:	d8c02015 	stw	r3,128(sp)
 8001428:	d8801f15 	stw	r2,124(sp)
 800142c:	010001c4 	movi	r4,7
 8001430:	20825e16 	blt	r4,r2,8001dac <___vfprintf_internal_r+0x123c>
 8001434:	42000204 	addi	r8,r8,8
 8001438:	d8802c17 	ldw	r2,176(sp)
 800143c:	10000c26 	beq	r2,zero,8001470 <___vfprintf_internal_r+0x900>
 8001440:	d8801f17 	ldw	r2,124(sp)
 8001444:	d9002704 	addi	r4,sp,156
 8001448:	18c00084 	addi	r3,r3,2
 800144c:	10800044 	addi	r2,r2,1
 8001450:	41000015 	stw	r4,0(r8)
 8001454:	01000084 	movi	r4,2
 8001458:	41000115 	stw	r4,4(r8)
 800145c:	d8c02015 	stw	r3,128(sp)
 8001460:	d8801f15 	stw	r2,124(sp)
 8001464:	010001c4 	movi	r4,7
 8001468:	20825816 	blt	r4,r2,8001dcc <___vfprintf_internal_r+0x125c>
 800146c:	42000204 	addi	r8,r8,8
 8001470:	d9003017 	ldw	r4,192(sp)
 8001474:	00802004 	movi	r2,128
 8001478:	2081bb26 	beq	r4,r2,8001b68 <___vfprintf_internal_r+0xff8>
 800147c:	d9402a17 	ldw	r5,168(sp)
 8001480:	d8802b17 	ldw	r2,172(sp)
 8001484:	28adc83a 	sub	r22,r5,r2
 8001488:	0580310e 	bge	zero,r22,8001550 <___vfprintf_internal_r+0x9e0>
 800148c:	07000404 	movi	fp,16
 8001490:	d8801f17 	ldw	r2,124(sp)
 8001494:	e584360e 	bge	fp,r22,8002570 <___vfprintf_internal_r+0x1a00>
 8001498:	01420074 	movhi	r5,2049
 800149c:	2940a284 	addi	r5,r5,650
 80014a0:	dc402a15 	stw	r17,168(sp)
 80014a4:	d9402c15 	stw	r5,176(sp)
 80014a8:	b023883a 	mov	r17,r22
 80014ac:	04c001c4 	movi	r19,7
 80014b0:	a82d883a 	mov	r22,r21
 80014b4:	902b883a 	mov	r21,r18
 80014b8:	8025883a 	mov	r18,r16
 80014bc:	dc002d17 	ldw	r16,180(sp)
 80014c0:	00000306 	br	80014d0 <___vfprintf_internal_r+0x960>
 80014c4:	8c7ffc04 	addi	r17,r17,-16
 80014c8:	42000204 	addi	r8,r8,8
 80014cc:	e440110e 	bge	fp,r17,8001514 <___vfprintf_internal_r+0x9a4>
 80014d0:	18c00404 	addi	r3,r3,16
 80014d4:	10800044 	addi	r2,r2,1
 80014d8:	45000015 	stw	r20,0(r8)
 80014dc:	47000115 	stw	fp,4(r8)
 80014e0:	d8c02015 	stw	r3,128(sp)
 80014e4:	d8801f15 	stw	r2,124(sp)
 80014e8:	98bff60e 	bge	r19,r2,80014c4 <__alt_data_end+0xfc0014c4>
 80014ec:	d9801e04 	addi	r6,sp,120
 80014f0:	b80b883a 	mov	r5,r23
 80014f4:	8009883a 	mov	r4,r16
 80014f8:	80077180 	call	8007718 <__sprint_r>
 80014fc:	103ea01e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001500:	8c7ffc04 	addi	r17,r17,-16
 8001504:	d8c02017 	ldw	r3,128(sp)
 8001508:	d8801f17 	ldw	r2,124(sp)
 800150c:	da000404 	addi	r8,sp,16
 8001510:	e47fef16 	blt	fp,r17,80014d0 <__alt_data_end+0xfc0014d0>
 8001514:	9021883a 	mov	r16,r18
 8001518:	a825883a 	mov	r18,r21
 800151c:	b02b883a 	mov	r21,r22
 8001520:	882d883a 	mov	r22,r17
 8001524:	dc402a17 	ldw	r17,168(sp)
 8001528:	d9002c17 	ldw	r4,176(sp)
 800152c:	1d87883a 	add	r3,r3,r22
 8001530:	10800044 	addi	r2,r2,1
 8001534:	41000015 	stw	r4,0(r8)
 8001538:	45800115 	stw	r22,4(r8)
 800153c:	d8c02015 	stw	r3,128(sp)
 8001540:	d8801f15 	stw	r2,124(sp)
 8001544:	010001c4 	movi	r4,7
 8001548:	20821016 	blt	r4,r2,8001d8c <___vfprintf_internal_r+0x121c>
 800154c:	42000204 	addi	r8,r8,8
 8001550:	9080400c 	andi	r2,r18,256
 8001554:	10013a1e 	bne	r2,zero,8001a40 <___vfprintf_internal_r+0xed0>
 8001558:	d9402b17 	ldw	r5,172(sp)
 800155c:	d8801f17 	ldw	r2,124(sp)
 8001560:	44000015 	stw	r16,0(r8)
 8001564:	1947883a 	add	r3,r3,r5
 8001568:	10800044 	addi	r2,r2,1
 800156c:	41400115 	stw	r5,4(r8)
 8001570:	d8c02015 	stw	r3,128(sp)
 8001574:	d8801f15 	stw	r2,124(sp)
 8001578:	010001c4 	movi	r4,7
 800157c:	2081f516 	blt	r4,r2,8001d54 <___vfprintf_internal_r+0x11e4>
 8001580:	42000204 	addi	r8,r8,8
 8001584:	9480010c 	andi	r18,r18,4
 8001588:	90003226 	beq	r18,zero,8001654 <___vfprintf_internal_r+0xae4>
 800158c:	d9403117 	ldw	r5,196(sp)
 8001590:	d8802917 	ldw	r2,164(sp)
 8001594:	28a1c83a 	sub	r16,r5,r2
 8001598:	04002e0e 	bge	zero,r16,8001654 <___vfprintf_internal_r+0xae4>
 800159c:	04400404 	movi	r17,16
 80015a0:	d8801f17 	ldw	r2,124(sp)
 80015a4:	8c04c40e 	bge	r17,r16,80028b8 <___vfprintf_internal_r+0x1d48>
 80015a8:	01420074 	movhi	r5,2049
 80015ac:	2940a684 	addi	r5,r5,666
 80015b0:	d9403515 	stw	r5,212(sp)
 80015b4:	048001c4 	movi	r18,7
 80015b8:	dcc02d17 	ldw	r19,180(sp)
 80015bc:	00000306 	br	80015cc <___vfprintf_internal_r+0xa5c>
 80015c0:	843ffc04 	addi	r16,r16,-16
 80015c4:	42000204 	addi	r8,r8,8
 80015c8:	8c00130e 	bge	r17,r16,8001618 <___vfprintf_internal_r+0xaa8>
 80015cc:	01020074 	movhi	r4,2049
 80015d0:	18c00404 	addi	r3,r3,16
 80015d4:	10800044 	addi	r2,r2,1
 80015d8:	2100a684 	addi	r4,r4,666
 80015dc:	41000015 	stw	r4,0(r8)
 80015e0:	44400115 	stw	r17,4(r8)
 80015e4:	d8c02015 	stw	r3,128(sp)
 80015e8:	d8801f15 	stw	r2,124(sp)
 80015ec:	90bff40e 	bge	r18,r2,80015c0 <__alt_data_end+0xfc0015c0>
 80015f0:	d9801e04 	addi	r6,sp,120
 80015f4:	b80b883a 	mov	r5,r23
 80015f8:	9809883a 	mov	r4,r19
 80015fc:	80077180 	call	8007718 <__sprint_r>
 8001600:	103e5f1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001604:	843ffc04 	addi	r16,r16,-16
 8001608:	d8c02017 	ldw	r3,128(sp)
 800160c:	d8801f17 	ldw	r2,124(sp)
 8001610:	da000404 	addi	r8,sp,16
 8001614:	8c3fed16 	blt	r17,r16,80015cc <__alt_data_end+0xfc0015cc>
 8001618:	d9403517 	ldw	r5,212(sp)
 800161c:	1c07883a 	add	r3,r3,r16
 8001620:	10800044 	addi	r2,r2,1
 8001624:	41400015 	stw	r5,0(r8)
 8001628:	44000115 	stw	r16,4(r8)
 800162c:	d8c02015 	stw	r3,128(sp)
 8001630:	d8801f15 	stw	r2,124(sp)
 8001634:	010001c4 	movi	r4,7
 8001638:	2080060e 	bge	r4,r2,8001654 <___vfprintf_internal_r+0xae4>
 800163c:	d9002d17 	ldw	r4,180(sp)
 8001640:	d9801e04 	addi	r6,sp,120
 8001644:	b80b883a 	mov	r5,r23
 8001648:	80077180 	call	8007718 <__sprint_r>
 800164c:	103e4c1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001650:	d8c02017 	ldw	r3,128(sp)
 8001654:	d8803117 	ldw	r2,196(sp)
 8001658:	d9002917 	ldw	r4,164(sp)
 800165c:	1100010e 	bge	r2,r4,8001664 <___vfprintf_internal_r+0xaf4>
 8001660:	2005883a 	mov	r2,r4
 8001664:	d9402f17 	ldw	r5,188(sp)
 8001668:	288b883a 	add	r5,r5,r2
 800166c:	d9402f15 	stw	r5,188(sp)
 8001670:	1801c01e 	bne	r3,zero,8001d74 <___vfprintf_internal_r+0x1204>
 8001674:	a8800007 	ldb	r2,0(r21)
 8001678:	d8001f15 	stw	zero,124(sp)
 800167c:	da000404 	addi	r8,sp,16
 8001680:	103d751e 	bne	r2,zero,8000c58 <__alt_data_end+0xfc000c58>
 8001684:	a823883a 	mov	r17,r21
 8001688:	003d8b06 	br	8000cb8 <__alt_data_end+0xfc000cb8>
 800168c:	8025883a 	mov	r18,r16
 8001690:	dc002903 	ldbu	r16,164(sp)
 8001694:	e011883a 	mov	r8,fp
 8001698:	84003fcc 	andi	r16,r16,255
 800169c:	8005e51e 	bne	r16,zero,8002e34 <___vfprintf_internal_r+0x22c4>
 80016a0:	94800414 	ori	r18,r18,16
 80016a4:	9080080c 	andi	r2,r18,32
 80016a8:	10022b26 	beq	r2,zero,8001f58 <___vfprintf_internal_r+0x13e8>
 80016ac:	d9002e17 	ldw	r4,184(sp)
 80016b0:	d9402a17 	ldw	r5,168(sp)
 80016b4:	d8002785 	stb	zero,158(sp)
 80016b8:	20c00204 	addi	r3,r4,8
 80016bc:	24c00017 	ldw	r19,0(r4)
 80016c0:	25800117 	ldw	r22,4(r4)
 80016c4:	28042e16 	blt	r5,zero,8002780 <___vfprintf_internal_r+0x1c10>
 80016c8:	013fdfc4 	movi	r4,-129
 80016cc:	9d84b03a 	or	r2,r19,r22
 80016d0:	d8c02e15 	stw	r3,184(sp)
 80016d4:	9124703a 	and	r18,r18,r4
 80016d8:	0039883a 	mov	fp,zero
 80016dc:	103e801e 	bne	r2,zero,80010e0 <__alt_data_end+0xfc0010e0>
 80016e0:	d9002a17 	ldw	r4,168(sp)
 80016e4:	2002e01e 	bne	r4,zero,8002268 <___vfprintf_internal_r+0x16f8>
 80016e8:	d8002a15 	stw	zero,168(sp)
 80016ec:	d8002b15 	stw	zero,172(sp)
 80016f0:	dc001e04 	addi	r16,sp,120
 80016f4:	003ef506 	br	80012cc <__alt_data_end+0xfc0012cc>
 80016f8:	8025883a 	mov	r18,r16
 80016fc:	dc002903 	ldbu	r16,164(sp)
 8001700:	e011883a 	mov	r8,fp
 8001704:	84003fcc 	andi	r16,r16,255
 8001708:	8005ba1e 	bne	r16,zero,8002df4 <___vfprintf_internal_r+0x2284>
 800170c:	01020074 	movhi	r4,2049
 8001710:	21009604 	addi	r4,r4,600
 8001714:	d9003915 	stw	r4,228(sp)
 8001718:	9080080c 	andi	r2,r18,32
 800171c:	10006126 	beq	r2,zero,80018a4 <___vfprintf_internal_r+0xd34>
 8001720:	d9402e17 	ldw	r5,184(sp)
 8001724:	2cc00017 	ldw	r19,0(r5)
 8001728:	2d800117 	ldw	r22,4(r5)
 800172c:	29400204 	addi	r5,r5,8
 8001730:	d9402e15 	stw	r5,184(sp)
 8001734:	9080004c 	andi	r2,r18,1
 8001738:	1001ac26 	beq	r2,zero,8001dec <___vfprintf_internal_r+0x127c>
 800173c:	9d84b03a 	or	r2,r19,r22
 8001740:	10038526 	beq	r2,zero,8002558 <___vfprintf_internal_r+0x19e8>
 8001744:	d8c02a17 	ldw	r3,168(sp)
 8001748:	00800c04 	movi	r2,48
 800174c:	d8802705 	stb	r2,156(sp)
 8001750:	dc402745 	stb	r17,157(sp)
 8001754:	d8002785 	stb	zero,158(sp)
 8001758:	90800094 	ori	r2,r18,2
 800175c:	18047916 	blt	r3,zero,8002944 <___vfprintf_internal_r+0x1dd4>
 8001760:	00bfdfc4 	movi	r2,-129
 8001764:	90a4703a 	and	r18,r18,r2
 8001768:	94800094 	ori	r18,r18,2
 800176c:	0039883a 	mov	fp,zero
 8001770:	d9003917 	ldw	r4,228(sp)
 8001774:	dc001e04 	addi	r16,sp,120
 8001778:	988003cc 	andi	r2,r19,15
 800177c:	b006973a 	slli	r3,r22,28
 8001780:	2085883a 	add	r2,r4,r2
 8001784:	9826d13a 	srli	r19,r19,4
 8001788:	10800003 	ldbu	r2,0(r2)
 800178c:	b02cd13a 	srli	r22,r22,4
 8001790:	843fffc4 	addi	r16,r16,-1
 8001794:	1ce6b03a 	or	r19,r3,r19
 8001798:	80800005 	stb	r2,0(r16)
 800179c:	9d84b03a 	or	r2,r19,r22
 80017a0:	103ff51e 	bne	r2,zero,8001778 <__alt_data_end+0xfc001778>
 80017a4:	d8c02817 	ldw	r3,160(sp)
 80017a8:	1c07c83a 	sub	r3,r3,r16
 80017ac:	d8c02b15 	stw	r3,172(sp)
 80017b0:	003ec606 	br	80012cc <__alt_data_end+0xfc0012cc>
 80017b4:	8025883a 	mov	r18,r16
 80017b8:	dc002903 	ldbu	r16,164(sp)
 80017bc:	e011883a 	mov	r8,fp
 80017c0:	84003fcc 	andi	r16,r16,255
 80017c4:	803e9626 	beq	r16,zero,8001220 <__alt_data_end+0xfc001220>
 80017c8:	d8c02b03 	ldbu	r3,172(sp)
 80017cc:	d8c02785 	stb	r3,158(sp)
 80017d0:	003e9306 	br	8001220 <__alt_data_end+0xfc001220>
 80017d4:	00c00044 	movi	r3,1
 80017d8:	d8c02905 	stb	r3,164(sp)
 80017dc:	00c00ac4 	movi	r3,43
 80017e0:	d8c02b05 	stb	r3,172(sp)
 80017e4:	ac400007 	ldb	r17,0(r21)
 80017e8:	003d4306 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 80017ec:	84000814 	ori	r16,r16,32
 80017f0:	ac400007 	ldb	r17,0(r21)
 80017f4:	003d4006 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 80017f8:	d8802e17 	ldw	r2,184(sp)
 80017fc:	8025883a 	mov	r18,r16
 8001800:	d8002785 	stb	zero,158(sp)
 8001804:	14000017 	ldw	r16,0(r2)
 8001808:	e011883a 	mov	r8,fp
 800180c:	14c00104 	addi	r19,r2,4
 8001810:	80042d26 	beq	r16,zero,80028c8 <___vfprintf_internal_r+0x1d58>
 8001814:	d8c02a17 	ldw	r3,168(sp)
 8001818:	1803e416 	blt	r3,zero,80027ac <___vfprintf_internal_r+0x1c3c>
 800181c:	180d883a 	mov	r6,r3
 8001820:	000b883a 	mov	r5,zero
 8001824:	8009883a 	mov	r4,r16
 8001828:	df003d15 	stw	fp,244(sp)
 800182c:	8005fe00 	call	8005fe0 <memchr>
 8001830:	da003d17 	ldw	r8,244(sp)
 8001834:	10046826 	beq	r2,zero,80029d8 <___vfprintf_internal_r+0x1e68>
 8001838:	1405c83a 	sub	r2,r2,r16
 800183c:	d8802b15 	stw	r2,172(sp)
 8001840:	1003e016 	blt	r2,zero,80027c4 <___vfprintf_internal_r+0x1c54>
 8001844:	df002783 	ldbu	fp,158(sp)
 8001848:	d8802915 	stw	r2,164(sp)
 800184c:	dcc02e15 	stw	r19,184(sp)
 8001850:	d8002a15 	stw	zero,168(sp)
 8001854:	d8003215 	stw	zero,200(sp)
 8001858:	003ea206 	br	80012e4 <__alt_data_end+0xfc0012e4>
 800185c:	8025883a 	mov	r18,r16
 8001860:	dc002903 	ldbu	r16,164(sp)
 8001864:	e011883a 	mov	r8,fp
 8001868:	84003fcc 	andi	r16,r16,255
 800186c:	803f8d26 	beq	r16,zero,80016a4 <__alt_data_end+0xfc0016a4>
 8001870:	d8c02b03 	ldbu	r3,172(sp)
 8001874:	d8c02785 	stb	r3,158(sp)
 8001878:	003f8a06 	br	80016a4 <__alt_data_end+0xfc0016a4>
 800187c:	8025883a 	mov	r18,r16
 8001880:	dc002903 	ldbu	r16,164(sp)
 8001884:	e011883a 	mov	r8,fp
 8001888:	84003fcc 	andi	r16,r16,255
 800188c:	8005661e 	bne	r16,zero,8002e28 <___vfprintf_internal_r+0x22b8>
 8001890:	01020074 	movhi	r4,2049
 8001894:	21009b04 	addi	r4,r4,620
 8001898:	d9003915 	stw	r4,228(sp)
 800189c:	9080080c 	andi	r2,r18,32
 80018a0:	103f9f1e 	bne	r2,zero,8001720 <__alt_data_end+0xfc001720>
 80018a4:	9080040c 	andi	r2,r18,16
 80018a8:	1002eb26 	beq	r2,zero,8002458 <___vfprintf_internal_r+0x18e8>
 80018ac:	d8802e17 	ldw	r2,184(sp)
 80018b0:	002d883a 	mov	r22,zero
 80018b4:	14c00017 	ldw	r19,0(r2)
 80018b8:	10800104 	addi	r2,r2,4
 80018bc:	d8802e15 	stw	r2,184(sp)
 80018c0:	003f9c06 	br	8001734 <__alt_data_end+0xfc001734>
 80018c4:	d8802b07 	ldb	r2,172(sp)
 80018c8:	1002e11e 	bne	r2,zero,8002450 <___vfprintf_internal_r+0x18e0>
 80018cc:	00c00044 	movi	r3,1
 80018d0:	d8c02905 	stb	r3,164(sp)
 80018d4:	00c00804 	movi	r3,32
 80018d8:	d8c02b05 	stb	r3,172(sp)
 80018dc:	ac400007 	ldb	r17,0(r21)
 80018e0:	003d0506 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 80018e4:	84000054 	ori	r16,r16,1
 80018e8:	ac400007 	ldb	r17,0(r21)
 80018ec:	003d0206 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 80018f0:	8025883a 	mov	r18,r16
 80018f4:	dc002903 	ldbu	r16,164(sp)
 80018f8:	e011883a 	mov	r8,fp
 80018fc:	84003fcc 	andi	r16,r16,255
 8001900:	803de726 	beq	r16,zero,80010a0 <__alt_data_end+0xfc0010a0>
 8001904:	d8c02b03 	ldbu	r3,172(sp)
 8001908:	d8c02785 	stb	r3,158(sp)
 800190c:	003de406 	br	80010a0 <__alt_data_end+0xfc0010a0>
 8001910:	84001014 	ori	r16,r16,64
 8001914:	ac400007 	ldb	r17,0(r21)
 8001918:	003cf706 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 800191c:	ac400007 	ldb	r17,0(r21)
 8001920:	00801b04 	movi	r2,108
 8001924:	88838f26 	beq	r17,r2,8002764 <___vfprintf_internal_r+0x1bf4>
 8001928:	84000414 	ori	r16,r16,16
 800192c:	003cf206 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 8001930:	8025883a 	mov	r18,r16
 8001934:	dc002903 	ldbu	r16,164(sp)
 8001938:	e011883a 	mov	r8,fp
 800193c:	84003fcc 	andi	r16,r16,255
 8001940:	80053f1e 	bne	r16,zero,8002e40 <___vfprintf_internal_r+0x22d0>
 8001944:	9080080c 	andi	r2,r18,32
 8001948:	1002d226 	beq	r2,zero,8002494 <___vfprintf_internal_r+0x1924>
 800194c:	d9002e17 	ldw	r4,184(sp)
 8001950:	d9402f17 	ldw	r5,188(sp)
 8001954:	20800017 	ldw	r2,0(r4)
 8001958:	2807d7fa 	srai	r3,r5,31
 800195c:	21000104 	addi	r4,r4,4
 8001960:	d9002e15 	stw	r4,184(sp)
 8001964:	11400015 	stw	r5,0(r2)
 8001968:	10c00115 	stw	r3,4(r2)
 800196c:	003cb806 	br	8000c50 <__alt_data_end+0xfc000c50>
 8001970:	d8c02e17 	ldw	r3,184(sp)
 8001974:	d9002e17 	ldw	r4,184(sp)
 8001978:	8025883a 	mov	r18,r16
 800197c:	18800017 	ldw	r2,0(r3)
 8001980:	21000104 	addi	r4,r4,4
 8001984:	00c00044 	movi	r3,1
 8001988:	e011883a 	mov	r8,fp
 800198c:	d8c02915 	stw	r3,164(sp)
 8001990:	d8002785 	stb	zero,158(sp)
 8001994:	d8801405 	stb	r2,80(sp)
 8001998:	d9002e15 	stw	r4,184(sp)
 800199c:	d8c02b15 	stw	r3,172(sp)
 80019a0:	d8002a15 	stw	zero,168(sp)
 80019a4:	d8003215 	stw	zero,200(sp)
 80019a8:	dc001404 	addi	r16,sp,80
 80019ac:	0039883a 	mov	fp,zero
 80019b0:	003e5306 	br	8001300 <__alt_data_end+0xfc001300>
 80019b4:	01020074 	movhi	r4,2049
 80019b8:	21009b04 	addi	r4,r4,620
 80019bc:	0039883a 	mov	fp,zero
 80019c0:	d9003915 	stw	r4,228(sp)
 80019c4:	04401e04 	movi	r17,120
 80019c8:	003f6906 	br	8001770 <__alt_data_end+0xfc001770>
 80019cc:	8025883a 	mov	r18,r16
 80019d0:	dc002903 	ldbu	r16,164(sp)
 80019d4:	e011883a 	mov	r8,fp
 80019d8:	84003fcc 	andi	r16,r16,255
 80019dc:	8005081e 	bne	r16,zero,8002e00 <___vfprintf_internal_r+0x2290>
 80019e0:	883d6126 	beq	r17,zero,8000f68 <__alt_data_end+0xfc000f68>
 80019e4:	00c00044 	movi	r3,1
 80019e8:	d8c02915 	stw	r3,164(sp)
 80019ec:	dc401405 	stb	r17,80(sp)
 80019f0:	d8002785 	stb	zero,158(sp)
 80019f4:	003fe906 	br	800199c <__alt_data_end+0xfc00199c>
 80019f8:	01420074 	movhi	r5,2049
 80019fc:	29409b04 	addi	r5,r5,620
 8001a00:	d9403915 	stw	r5,228(sp)
 8001a04:	d8c02e15 	stw	r3,184(sp)
 8001a08:	1025883a 	mov	r18,r2
 8001a0c:	04401e04 	movi	r17,120
 8001a10:	9d84b03a 	or	r2,r19,r22
 8001a14:	1000fc1e 	bne	r2,zero,8001e08 <___vfprintf_internal_r+0x1298>
 8001a18:	0039883a 	mov	fp,zero
 8001a1c:	00800084 	movi	r2,2
 8001a20:	10803fcc 	andi	r2,r2,255
 8001a24:	00c00044 	movi	r3,1
 8001a28:	10c20f26 	beq	r2,r3,8002268 <___vfprintf_internal_r+0x16f8>
 8001a2c:	00c00084 	movi	r3,2
 8001a30:	10fd3326 	beq	r2,r3,8000f00 <__alt_data_end+0xfc000f00>
 8001a34:	003e0b06 	br	8001264 <__alt_data_end+0xfc001264>
 8001a38:	d8c02017 	ldw	r3,128(sp)
 8001a3c:	003e7106 	br	8001404 <__alt_data_end+0xfc001404>
 8001a40:	00801944 	movi	r2,101
 8001a44:	14407e0e 	bge	r2,r17,8001c40 <___vfprintf_internal_r+0x10d0>
 8001a48:	d9003617 	ldw	r4,216(sp)
 8001a4c:	d9403817 	ldw	r5,224(sp)
 8001a50:	000d883a 	mov	r6,zero
 8001a54:	000f883a 	mov	r7,zero
 8001a58:	d8c03c15 	stw	r3,240(sp)
 8001a5c:	da003d15 	stw	r8,244(sp)
 8001a60:	800c1d80 	call	800c1d8 <__eqdf2>
 8001a64:	d8c03c17 	ldw	r3,240(sp)
 8001a68:	da003d17 	ldw	r8,244(sp)
 8001a6c:	1000f71e 	bne	r2,zero,8001e4c <___vfprintf_internal_r+0x12dc>
 8001a70:	d8801f17 	ldw	r2,124(sp)
 8001a74:	01020074 	movhi	r4,2049
 8001a78:	2100a204 	addi	r4,r4,648
 8001a7c:	18c00044 	addi	r3,r3,1
 8001a80:	10800044 	addi	r2,r2,1
 8001a84:	41000015 	stw	r4,0(r8)
 8001a88:	01000044 	movi	r4,1
 8001a8c:	41000115 	stw	r4,4(r8)
 8001a90:	d8c02015 	stw	r3,128(sp)
 8001a94:	d8801f15 	stw	r2,124(sp)
 8001a98:	010001c4 	movi	r4,7
 8001a9c:	2082b816 	blt	r4,r2,8002580 <___vfprintf_internal_r+0x1a10>
 8001aa0:	42000204 	addi	r8,r8,8
 8001aa4:	d8802617 	ldw	r2,152(sp)
 8001aa8:	d9403317 	ldw	r5,204(sp)
 8001aac:	11400216 	blt	r2,r5,8001ab8 <___vfprintf_internal_r+0xf48>
 8001ab0:	9080004c 	andi	r2,r18,1
 8001ab4:	103eb326 	beq	r2,zero,8001584 <__alt_data_end+0xfc001584>
 8001ab8:	d8803717 	ldw	r2,220(sp)
 8001abc:	d9003417 	ldw	r4,208(sp)
 8001ac0:	d9403717 	ldw	r5,220(sp)
 8001ac4:	1887883a 	add	r3,r3,r2
 8001ac8:	d8801f17 	ldw	r2,124(sp)
 8001acc:	41000015 	stw	r4,0(r8)
 8001ad0:	41400115 	stw	r5,4(r8)
 8001ad4:	10800044 	addi	r2,r2,1
 8001ad8:	d8c02015 	stw	r3,128(sp)
 8001adc:	d8801f15 	stw	r2,124(sp)
 8001ae0:	010001c4 	movi	r4,7
 8001ae4:	20832916 	blt	r4,r2,800278c <___vfprintf_internal_r+0x1c1c>
 8001ae8:	42000204 	addi	r8,r8,8
 8001aec:	d8803317 	ldw	r2,204(sp)
 8001af0:	143fffc4 	addi	r16,r2,-1
 8001af4:	043ea30e 	bge	zero,r16,8001584 <__alt_data_end+0xfc001584>
 8001af8:	04400404 	movi	r17,16
 8001afc:	d8801f17 	ldw	r2,124(sp)
 8001b00:	8c00880e 	bge	r17,r16,8001d24 <___vfprintf_internal_r+0x11b4>
 8001b04:	01420074 	movhi	r5,2049
 8001b08:	2940a284 	addi	r5,r5,650
 8001b0c:	d9402c15 	stw	r5,176(sp)
 8001b10:	058001c4 	movi	r22,7
 8001b14:	dcc02d17 	ldw	r19,180(sp)
 8001b18:	00000306 	br	8001b28 <___vfprintf_internal_r+0xfb8>
 8001b1c:	42000204 	addi	r8,r8,8
 8001b20:	843ffc04 	addi	r16,r16,-16
 8001b24:	8c00820e 	bge	r17,r16,8001d30 <___vfprintf_internal_r+0x11c0>
 8001b28:	18c00404 	addi	r3,r3,16
 8001b2c:	10800044 	addi	r2,r2,1
 8001b30:	45000015 	stw	r20,0(r8)
 8001b34:	44400115 	stw	r17,4(r8)
 8001b38:	d8c02015 	stw	r3,128(sp)
 8001b3c:	d8801f15 	stw	r2,124(sp)
 8001b40:	b0bff60e 	bge	r22,r2,8001b1c <__alt_data_end+0xfc001b1c>
 8001b44:	d9801e04 	addi	r6,sp,120
 8001b48:	b80b883a 	mov	r5,r23
 8001b4c:	9809883a 	mov	r4,r19
 8001b50:	80077180 	call	8007718 <__sprint_r>
 8001b54:	103d0a1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001b58:	d8c02017 	ldw	r3,128(sp)
 8001b5c:	d8801f17 	ldw	r2,124(sp)
 8001b60:	da000404 	addi	r8,sp,16
 8001b64:	003fee06 	br	8001b20 <__alt_data_end+0xfc001b20>
 8001b68:	d9403117 	ldw	r5,196(sp)
 8001b6c:	d8802917 	ldw	r2,164(sp)
 8001b70:	28adc83a 	sub	r22,r5,r2
 8001b74:	05be410e 	bge	zero,r22,800147c <__alt_data_end+0xfc00147c>
 8001b78:	07000404 	movi	fp,16
 8001b7c:	d8801f17 	ldw	r2,124(sp)
 8001b80:	e5838f0e 	bge	fp,r22,80029c0 <___vfprintf_internal_r+0x1e50>
 8001b84:	01420074 	movhi	r5,2049
 8001b88:	2940a284 	addi	r5,r5,650
 8001b8c:	dc403015 	stw	r17,192(sp)
 8001b90:	d9402c15 	stw	r5,176(sp)
 8001b94:	b023883a 	mov	r17,r22
 8001b98:	04c001c4 	movi	r19,7
 8001b9c:	a82d883a 	mov	r22,r21
 8001ba0:	902b883a 	mov	r21,r18
 8001ba4:	8025883a 	mov	r18,r16
 8001ba8:	dc002d17 	ldw	r16,180(sp)
 8001bac:	00000306 	br	8001bbc <___vfprintf_internal_r+0x104c>
 8001bb0:	8c7ffc04 	addi	r17,r17,-16
 8001bb4:	42000204 	addi	r8,r8,8
 8001bb8:	e440110e 	bge	fp,r17,8001c00 <___vfprintf_internal_r+0x1090>
 8001bbc:	18c00404 	addi	r3,r3,16
 8001bc0:	10800044 	addi	r2,r2,1
 8001bc4:	45000015 	stw	r20,0(r8)
 8001bc8:	47000115 	stw	fp,4(r8)
 8001bcc:	d8c02015 	stw	r3,128(sp)
 8001bd0:	d8801f15 	stw	r2,124(sp)
 8001bd4:	98bff60e 	bge	r19,r2,8001bb0 <__alt_data_end+0xfc001bb0>
 8001bd8:	d9801e04 	addi	r6,sp,120
 8001bdc:	b80b883a 	mov	r5,r23
 8001be0:	8009883a 	mov	r4,r16
 8001be4:	80077180 	call	8007718 <__sprint_r>
 8001be8:	103ce51e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001bec:	8c7ffc04 	addi	r17,r17,-16
 8001bf0:	d8c02017 	ldw	r3,128(sp)
 8001bf4:	d8801f17 	ldw	r2,124(sp)
 8001bf8:	da000404 	addi	r8,sp,16
 8001bfc:	e47fef16 	blt	fp,r17,8001bbc <__alt_data_end+0xfc001bbc>
 8001c00:	9021883a 	mov	r16,r18
 8001c04:	a825883a 	mov	r18,r21
 8001c08:	b02b883a 	mov	r21,r22
 8001c0c:	882d883a 	mov	r22,r17
 8001c10:	dc403017 	ldw	r17,192(sp)
 8001c14:	d9002c17 	ldw	r4,176(sp)
 8001c18:	1d87883a 	add	r3,r3,r22
 8001c1c:	10800044 	addi	r2,r2,1
 8001c20:	41000015 	stw	r4,0(r8)
 8001c24:	45800115 	stw	r22,4(r8)
 8001c28:	d8c02015 	stw	r3,128(sp)
 8001c2c:	d8801f15 	stw	r2,124(sp)
 8001c30:	010001c4 	movi	r4,7
 8001c34:	20818e16 	blt	r4,r2,8002270 <___vfprintf_internal_r+0x1700>
 8001c38:	42000204 	addi	r8,r8,8
 8001c3c:	003e0f06 	br	800147c <__alt_data_end+0xfc00147c>
 8001c40:	d9403317 	ldw	r5,204(sp)
 8001c44:	00800044 	movi	r2,1
 8001c48:	18c00044 	addi	r3,r3,1
 8001c4c:	1141530e 	bge	r2,r5,800219c <___vfprintf_internal_r+0x162c>
 8001c50:	dc401f17 	ldw	r17,124(sp)
 8001c54:	00800044 	movi	r2,1
 8001c58:	40800115 	stw	r2,4(r8)
 8001c5c:	8c400044 	addi	r17,r17,1
 8001c60:	44000015 	stw	r16,0(r8)
 8001c64:	d8c02015 	stw	r3,128(sp)
 8001c68:	dc401f15 	stw	r17,124(sp)
 8001c6c:	008001c4 	movi	r2,7
 8001c70:	14416b16 	blt	r2,r17,8002220 <___vfprintf_internal_r+0x16b0>
 8001c74:	42000204 	addi	r8,r8,8
 8001c78:	d8803717 	ldw	r2,220(sp)
 8001c7c:	d9003417 	ldw	r4,208(sp)
 8001c80:	8c400044 	addi	r17,r17,1
 8001c84:	10c7883a 	add	r3,r2,r3
 8001c88:	40800115 	stw	r2,4(r8)
 8001c8c:	41000015 	stw	r4,0(r8)
 8001c90:	d8c02015 	stw	r3,128(sp)
 8001c94:	dc401f15 	stw	r17,124(sp)
 8001c98:	008001c4 	movi	r2,7
 8001c9c:	14416916 	blt	r2,r17,8002244 <___vfprintf_internal_r+0x16d4>
 8001ca0:	45800204 	addi	r22,r8,8
 8001ca4:	d9003617 	ldw	r4,216(sp)
 8001ca8:	d9403817 	ldw	r5,224(sp)
 8001cac:	000d883a 	mov	r6,zero
 8001cb0:	000f883a 	mov	r7,zero
 8001cb4:	d8c03c15 	stw	r3,240(sp)
 8001cb8:	800c1d80 	call	800c1d8 <__eqdf2>
 8001cbc:	d8c03c17 	ldw	r3,240(sp)
 8001cc0:	1000bc26 	beq	r2,zero,8001fb4 <___vfprintf_internal_r+0x1444>
 8001cc4:	d9403317 	ldw	r5,204(sp)
 8001cc8:	84000044 	addi	r16,r16,1
 8001ccc:	8c400044 	addi	r17,r17,1
 8001cd0:	28bfffc4 	addi	r2,r5,-1
 8001cd4:	1887883a 	add	r3,r3,r2
 8001cd8:	b0800115 	stw	r2,4(r22)
 8001cdc:	b4000015 	stw	r16,0(r22)
 8001ce0:	d8c02015 	stw	r3,128(sp)
 8001ce4:	dc401f15 	stw	r17,124(sp)
 8001ce8:	008001c4 	movi	r2,7
 8001cec:	14414316 	blt	r2,r17,80021fc <___vfprintf_internal_r+0x168c>
 8001cf0:	b5800204 	addi	r22,r22,8
 8001cf4:	d9003a17 	ldw	r4,232(sp)
 8001cf8:	df0022c4 	addi	fp,sp,139
 8001cfc:	8c400044 	addi	r17,r17,1
 8001d00:	20c7883a 	add	r3,r4,r3
 8001d04:	b7000015 	stw	fp,0(r22)
 8001d08:	b1000115 	stw	r4,4(r22)
 8001d0c:	d8c02015 	stw	r3,128(sp)
 8001d10:	dc401f15 	stw	r17,124(sp)
 8001d14:	008001c4 	movi	r2,7
 8001d18:	14400e16 	blt	r2,r17,8001d54 <___vfprintf_internal_r+0x11e4>
 8001d1c:	b2000204 	addi	r8,r22,8
 8001d20:	003e1806 	br	8001584 <__alt_data_end+0xfc001584>
 8001d24:	01020074 	movhi	r4,2049
 8001d28:	2100a284 	addi	r4,r4,650
 8001d2c:	d9002c15 	stw	r4,176(sp)
 8001d30:	d9002c17 	ldw	r4,176(sp)
 8001d34:	1c07883a 	add	r3,r3,r16
 8001d38:	44000115 	stw	r16,4(r8)
 8001d3c:	41000015 	stw	r4,0(r8)
 8001d40:	10800044 	addi	r2,r2,1
 8001d44:	d8c02015 	stw	r3,128(sp)
 8001d48:	d8801f15 	stw	r2,124(sp)
 8001d4c:	010001c4 	movi	r4,7
 8001d50:	20be0b0e 	bge	r4,r2,8001580 <__alt_data_end+0xfc001580>
 8001d54:	d9002d17 	ldw	r4,180(sp)
 8001d58:	d9801e04 	addi	r6,sp,120
 8001d5c:	b80b883a 	mov	r5,r23
 8001d60:	80077180 	call	8007718 <__sprint_r>
 8001d64:	103c861e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001d68:	d8c02017 	ldw	r3,128(sp)
 8001d6c:	da000404 	addi	r8,sp,16
 8001d70:	003e0406 	br	8001584 <__alt_data_end+0xfc001584>
 8001d74:	d9002d17 	ldw	r4,180(sp)
 8001d78:	d9801e04 	addi	r6,sp,120
 8001d7c:	b80b883a 	mov	r5,r23
 8001d80:	80077180 	call	8007718 <__sprint_r>
 8001d84:	103e3b26 	beq	r2,zero,8001674 <__alt_data_end+0xfc001674>
 8001d88:	003c7d06 	br	8000f80 <__alt_data_end+0xfc000f80>
 8001d8c:	d9002d17 	ldw	r4,180(sp)
 8001d90:	d9801e04 	addi	r6,sp,120
 8001d94:	b80b883a 	mov	r5,r23
 8001d98:	80077180 	call	8007718 <__sprint_r>
 8001d9c:	103c781e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001da0:	d8c02017 	ldw	r3,128(sp)
 8001da4:	da000404 	addi	r8,sp,16
 8001da8:	003de906 	br	8001550 <__alt_data_end+0xfc001550>
 8001dac:	d9002d17 	ldw	r4,180(sp)
 8001db0:	d9801e04 	addi	r6,sp,120
 8001db4:	b80b883a 	mov	r5,r23
 8001db8:	80077180 	call	8007718 <__sprint_r>
 8001dbc:	103c701e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001dc0:	d8c02017 	ldw	r3,128(sp)
 8001dc4:	da000404 	addi	r8,sp,16
 8001dc8:	003d9b06 	br	8001438 <__alt_data_end+0xfc001438>
 8001dcc:	d9002d17 	ldw	r4,180(sp)
 8001dd0:	d9801e04 	addi	r6,sp,120
 8001dd4:	b80b883a 	mov	r5,r23
 8001dd8:	80077180 	call	8007718 <__sprint_r>
 8001ddc:	103c681e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001de0:	d8c02017 	ldw	r3,128(sp)
 8001de4:	da000404 	addi	r8,sp,16
 8001de8:	003da106 	br	8001470 <__alt_data_end+0xfc001470>
 8001dec:	d9402a17 	ldw	r5,168(sp)
 8001df0:	d8002785 	stb	zero,158(sp)
 8001df4:	283f0616 	blt	r5,zero,8001a10 <__alt_data_end+0xfc001a10>
 8001df8:	00ffdfc4 	movi	r3,-129
 8001dfc:	9d84b03a 	or	r2,r19,r22
 8001e00:	90e4703a 	and	r18,r18,r3
 8001e04:	103c3b26 	beq	r2,zero,8000ef4 <__alt_data_end+0xfc000ef4>
 8001e08:	0039883a 	mov	fp,zero
 8001e0c:	003e5806 	br	8001770 <__alt_data_end+0xfc001770>
 8001e10:	9080040c 	andi	r2,r18,16
 8001e14:	1001b326 	beq	r2,zero,80024e4 <___vfprintf_internal_r+0x1974>
 8001e18:	d8c02e17 	ldw	r3,184(sp)
 8001e1c:	d9002a17 	ldw	r4,168(sp)
 8001e20:	d8002785 	stb	zero,158(sp)
 8001e24:	18800104 	addi	r2,r3,4
 8001e28:	1cc00017 	ldw	r19,0(r3)
 8001e2c:	002d883a 	mov	r22,zero
 8001e30:	2001b516 	blt	r4,zero,8002508 <___vfprintf_internal_r+0x1998>
 8001e34:	00ffdfc4 	movi	r3,-129
 8001e38:	d8802e15 	stw	r2,184(sp)
 8001e3c:	90e4703a 	and	r18,r18,r3
 8001e40:	983d0526 	beq	r19,zero,8001258 <__alt_data_end+0xfc001258>
 8001e44:	0039883a 	mov	fp,zero
 8001e48:	003d0806 	br	800126c <__alt_data_end+0xfc00126c>
 8001e4c:	dc402617 	ldw	r17,152(sp)
 8001e50:	0441d30e 	bge	zero,r17,80025a0 <___vfprintf_internal_r+0x1a30>
 8001e54:	dc403217 	ldw	r17,200(sp)
 8001e58:	d8803317 	ldw	r2,204(sp)
 8001e5c:	1440010e 	bge	r2,r17,8001e64 <___vfprintf_internal_r+0x12f4>
 8001e60:	1023883a 	mov	r17,r2
 8001e64:	04400a0e 	bge	zero,r17,8001e90 <___vfprintf_internal_r+0x1320>
 8001e68:	d8801f17 	ldw	r2,124(sp)
 8001e6c:	1c47883a 	add	r3,r3,r17
 8001e70:	44000015 	stw	r16,0(r8)
 8001e74:	10800044 	addi	r2,r2,1
 8001e78:	44400115 	stw	r17,4(r8)
 8001e7c:	d8c02015 	stw	r3,128(sp)
 8001e80:	d8801f15 	stw	r2,124(sp)
 8001e84:	010001c4 	movi	r4,7
 8001e88:	20826516 	blt	r4,r2,8002820 <___vfprintf_internal_r+0x1cb0>
 8001e8c:	42000204 	addi	r8,r8,8
 8001e90:	88026116 	blt	r17,zero,8002818 <___vfprintf_internal_r+0x1ca8>
 8001e94:	d9003217 	ldw	r4,200(sp)
 8001e98:	2463c83a 	sub	r17,r4,r17
 8001e9c:	04407b0e 	bge	zero,r17,800208c <___vfprintf_internal_r+0x151c>
 8001ea0:	05800404 	movi	r22,16
 8001ea4:	d8801f17 	ldw	r2,124(sp)
 8001ea8:	b4419d0e 	bge	r22,r17,8002520 <___vfprintf_internal_r+0x19b0>
 8001eac:	01020074 	movhi	r4,2049
 8001eb0:	2100a284 	addi	r4,r4,650
 8001eb4:	d9002c15 	stw	r4,176(sp)
 8001eb8:	070001c4 	movi	fp,7
 8001ebc:	dcc02d17 	ldw	r19,180(sp)
 8001ec0:	00000306 	br	8001ed0 <___vfprintf_internal_r+0x1360>
 8001ec4:	42000204 	addi	r8,r8,8
 8001ec8:	8c7ffc04 	addi	r17,r17,-16
 8001ecc:	b441970e 	bge	r22,r17,800252c <___vfprintf_internal_r+0x19bc>
 8001ed0:	18c00404 	addi	r3,r3,16
 8001ed4:	10800044 	addi	r2,r2,1
 8001ed8:	45000015 	stw	r20,0(r8)
 8001edc:	45800115 	stw	r22,4(r8)
 8001ee0:	d8c02015 	stw	r3,128(sp)
 8001ee4:	d8801f15 	stw	r2,124(sp)
 8001ee8:	e0bff60e 	bge	fp,r2,8001ec4 <__alt_data_end+0xfc001ec4>
 8001eec:	d9801e04 	addi	r6,sp,120
 8001ef0:	b80b883a 	mov	r5,r23
 8001ef4:	9809883a 	mov	r4,r19
 8001ef8:	80077180 	call	8007718 <__sprint_r>
 8001efc:	103c201e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001f00:	d8c02017 	ldw	r3,128(sp)
 8001f04:	d8801f17 	ldw	r2,124(sp)
 8001f08:	da000404 	addi	r8,sp,16
 8001f0c:	003fee06 	br	8001ec8 <__alt_data_end+0xfc001ec8>
 8001f10:	d9002d17 	ldw	r4,180(sp)
 8001f14:	d9801e04 	addi	r6,sp,120
 8001f18:	b80b883a 	mov	r5,r23
 8001f1c:	80077180 	call	8007718 <__sprint_r>
 8001f20:	103c171e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8001f24:	d8c02017 	ldw	r3,128(sp)
 8001f28:	df002787 	ldb	fp,158(sp)
 8001f2c:	da000404 	addi	r8,sp,16
 8001f30:	003d3406 	br	8001404 <__alt_data_end+0xfc001404>
 8001f34:	9080040c 	andi	r2,r18,16
 8001f38:	10016126 	beq	r2,zero,80024c0 <___vfprintf_internal_r+0x1950>
 8001f3c:	d9402e17 	ldw	r5,184(sp)
 8001f40:	2cc00017 	ldw	r19,0(r5)
 8001f44:	29400104 	addi	r5,r5,4
 8001f48:	d9402e15 	stw	r5,184(sp)
 8001f4c:	982dd7fa 	srai	r22,r19,31
 8001f50:	b005883a 	mov	r2,r22
 8001f54:	003c5a06 	br	80010c0 <__alt_data_end+0xfc0010c0>
 8001f58:	9080040c 	andi	r2,r18,16
 8001f5c:	10003526 	beq	r2,zero,8002034 <___vfprintf_internal_r+0x14c4>
 8001f60:	d8c02e17 	ldw	r3,184(sp)
 8001f64:	d9002a17 	ldw	r4,168(sp)
 8001f68:	d8002785 	stb	zero,158(sp)
 8001f6c:	18800104 	addi	r2,r3,4
 8001f70:	1cc00017 	ldw	r19,0(r3)
 8001f74:	002d883a 	mov	r22,zero
 8001f78:	20003716 	blt	r4,zero,8002058 <___vfprintf_internal_r+0x14e8>
 8001f7c:	00ffdfc4 	movi	r3,-129
 8001f80:	d8802e15 	stw	r2,184(sp)
 8001f84:	90e4703a 	and	r18,r18,r3
 8001f88:	0039883a 	mov	fp,zero
 8001f8c:	983dd426 	beq	r19,zero,80016e0 <__alt_data_end+0xfc0016e0>
 8001f90:	00800244 	movi	r2,9
 8001f94:	14fc5336 	bltu	r2,r19,80010e4 <__alt_data_end+0xfc0010e4>
 8001f98:	d8c02817 	ldw	r3,160(sp)
 8001f9c:	dc001dc4 	addi	r16,sp,119
 8001fa0:	9cc00c04 	addi	r19,r19,48
 8001fa4:	1c07c83a 	sub	r3,r3,r16
 8001fa8:	dcc01dc5 	stb	r19,119(sp)
 8001fac:	d8c02b15 	stw	r3,172(sp)
 8001fb0:	003cc606 	br	80012cc <__alt_data_end+0xfc0012cc>
 8001fb4:	d8803317 	ldw	r2,204(sp)
 8001fb8:	143fffc4 	addi	r16,r2,-1
 8001fbc:	043f4d0e 	bge	zero,r16,8001cf4 <__alt_data_end+0xfc001cf4>
 8001fc0:	07000404 	movi	fp,16
 8001fc4:	e400810e 	bge	fp,r16,80021cc <___vfprintf_internal_r+0x165c>
 8001fc8:	01420074 	movhi	r5,2049
 8001fcc:	2940a284 	addi	r5,r5,650
 8001fd0:	d9402c15 	stw	r5,176(sp)
 8001fd4:	01c001c4 	movi	r7,7
 8001fd8:	dcc02d17 	ldw	r19,180(sp)
 8001fdc:	00000306 	br	8001fec <___vfprintf_internal_r+0x147c>
 8001fe0:	b5800204 	addi	r22,r22,8
 8001fe4:	843ffc04 	addi	r16,r16,-16
 8001fe8:	e4007b0e 	bge	fp,r16,80021d8 <___vfprintf_internal_r+0x1668>
 8001fec:	18c00404 	addi	r3,r3,16
 8001ff0:	8c400044 	addi	r17,r17,1
 8001ff4:	b5000015 	stw	r20,0(r22)
 8001ff8:	b7000115 	stw	fp,4(r22)
 8001ffc:	d8c02015 	stw	r3,128(sp)
 8002000:	dc401f15 	stw	r17,124(sp)
 8002004:	3c7ff60e 	bge	r7,r17,8001fe0 <__alt_data_end+0xfc001fe0>
 8002008:	d9801e04 	addi	r6,sp,120
 800200c:	b80b883a 	mov	r5,r23
 8002010:	9809883a 	mov	r4,r19
 8002014:	d9c03c15 	stw	r7,240(sp)
 8002018:	80077180 	call	8007718 <__sprint_r>
 800201c:	d9c03c17 	ldw	r7,240(sp)
 8002020:	103bd71e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002024:	d8c02017 	ldw	r3,128(sp)
 8002028:	dc401f17 	ldw	r17,124(sp)
 800202c:	dd800404 	addi	r22,sp,16
 8002030:	003fec06 	br	8001fe4 <__alt_data_end+0xfc001fe4>
 8002034:	9080100c 	andi	r2,r18,64
 8002038:	d8002785 	stb	zero,158(sp)
 800203c:	10010e26 	beq	r2,zero,8002478 <___vfprintf_internal_r+0x1908>
 8002040:	d9402e17 	ldw	r5,184(sp)
 8002044:	d8c02a17 	ldw	r3,168(sp)
 8002048:	002d883a 	mov	r22,zero
 800204c:	28800104 	addi	r2,r5,4
 8002050:	2cc0000b 	ldhu	r19,0(r5)
 8002054:	183fc90e 	bge	r3,zero,8001f7c <__alt_data_end+0xfc001f7c>
 8002058:	d8802e15 	stw	r2,184(sp)
 800205c:	0039883a 	mov	fp,zero
 8002060:	9d84b03a 	or	r2,r19,r22
 8002064:	103c1e1e 	bne	r2,zero,80010e0 <__alt_data_end+0xfc0010e0>
 8002068:	00800044 	movi	r2,1
 800206c:	003e6c06 	br	8001a20 <__alt_data_end+0xfc001a20>
 8002070:	d9002d17 	ldw	r4,180(sp)
 8002074:	d9801e04 	addi	r6,sp,120
 8002078:	b80b883a 	mov	r5,r23
 800207c:	80077180 	call	8007718 <__sprint_r>
 8002080:	103bbf1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002084:	d8c02017 	ldw	r3,128(sp)
 8002088:	da000404 	addi	r8,sp,16
 800208c:	d9003217 	ldw	r4,200(sp)
 8002090:	d8802617 	ldw	r2,152(sp)
 8002094:	d9403317 	ldw	r5,204(sp)
 8002098:	8123883a 	add	r17,r16,r4
 800209c:	11400216 	blt	r2,r5,80020a8 <___vfprintf_internal_r+0x1538>
 80020a0:	9100004c 	andi	r4,r18,1
 80020a4:	20000d26 	beq	r4,zero,80020dc <___vfprintf_internal_r+0x156c>
 80020a8:	d9003717 	ldw	r4,220(sp)
 80020ac:	d9403417 	ldw	r5,208(sp)
 80020b0:	1907883a 	add	r3,r3,r4
 80020b4:	d9001f17 	ldw	r4,124(sp)
 80020b8:	41400015 	stw	r5,0(r8)
 80020bc:	d9403717 	ldw	r5,220(sp)
 80020c0:	21000044 	addi	r4,r4,1
 80020c4:	d8c02015 	stw	r3,128(sp)
 80020c8:	41400115 	stw	r5,4(r8)
 80020cc:	d9001f15 	stw	r4,124(sp)
 80020d0:	014001c4 	movi	r5,7
 80020d4:	2901e816 	blt	r5,r4,8002878 <___vfprintf_internal_r+0x1d08>
 80020d8:	42000204 	addi	r8,r8,8
 80020dc:	d9003317 	ldw	r4,204(sp)
 80020e0:	8121883a 	add	r16,r16,r4
 80020e4:	2085c83a 	sub	r2,r4,r2
 80020e8:	8461c83a 	sub	r16,r16,r17
 80020ec:	1400010e 	bge	r2,r16,80020f4 <___vfprintf_internal_r+0x1584>
 80020f0:	1021883a 	mov	r16,r2
 80020f4:	04000a0e 	bge	zero,r16,8002120 <___vfprintf_internal_r+0x15b0>
 80020f8:	d9001f17 	ldw	r4,124(sp)
 80020fc:	1c07883a 	add	r3,r3,r16
 8002100:	44400015 	stw	r17,0(r8)
 8002104:	21000044 	addi	r4,r4,1
 8002108:	44000115 	stw	r16,4(r8)
 800210c:	d8c02015 	stw	r3,128(sp)
 8002110:	d9001f15 	stw	r4,124(sp)
 8002114:	014001c4 	movi	r5,7
 8002118:	2901fb16 	blt	r5,r4,8002908 <___vfprintf_internal_r+0x1d98>
 800211c:	42000204 	addi	r8,r8,8
 8002120:	8001f716 	blt	r16,zero,8002900 <___vfprintf_internal_r+0x1d90>
 8002124:	1421c83a 	sub	r16,r2,r16
 8002128:	043d160e 	bge	zero,r16,8001584 <__alt_data_end+0xfc001584>
 800212c:	04400404 	movi	r17,16
 8002130:	d8801f17 	ldw	r2,124(sp)
 8002134:	8c3efb0e 	bge	r17,r16,8001d24 <__alt_data_end+0xfc001d24>
 8002138:	01420074 	movhi	r5,2049
 800213c:	2940a284 	addi	r5,r5,650
 8002140:	d9402c15 	stw	r5,176(sp)
 8002144:	058001c4 	movi	r22,7
 8002148:	dcc02d17 	ldw	r19,180(sp)
 800214c:	00000306 	br	800215c <___vfprintf_internal_r+0x15ec>
 8002150:	42000204 	addi	r8,r8,8
 8002154:	843ffc04 	addi	r16,r16,-16
 8002158:	8c3ef50e 	bge	r17,r16,8001d30 <__alt_data_end+0xfc001d30>
 800215c:	18c00404 	addi	r3,r3,16
 8002160:	10800044 	addi	r2,r2,1
 8002164:	45000015 	stw	r20,0(r8)
 8002168:	44400115 	stw	r17,4(r8)
 800216c:	d8c02015 	stw	r3,128(sp)
 8002170:	d8801f15 	stw	r2,124(sp)
 8002174:	b0bff60e 	bge	r22,r2,8002150 <__alt_data_end+0xfc002150>
 8002178:	d9801e04 	addi	r6,sp,120
 800217c:	b80b883a 	mov	r5,r23
 8002180:	9809883a 	mov	r4,r19
 8002184:	80077180 	call	8007718 <__sprint_r>
 8002188:	103b7d1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 800218c:	d8c02017 	ldw	r3,128(sp)
 8002190:	d8801f17 	ldw	r2,124(sp)
 8002194:	da000404 	addi	r8,sp,16
 8002198:	003fee06 	br	8002154 <__alt_data_end+0xfc002154>
 800219c:	9088703a 	and	r4,r18,r2
 80021a0:	203eab1e 	bne	r4,zero,8001c50 <__alt_data_end+0xfc001c50>
 80021a4:	dc401f17 	ldw	r17,124(sp)
 80021a8:	40800115 	stw	r2,4(r8)
 80021ac:	44000015 	stw	r16,0(r8)
 80021b0:	8c400044 	addi	r17,r17,1
 80021b4:	d8c02015 	stw	r3,128(sp)
 80021b8:	dc401f15 	stw	r17,124(sp)
 80021bc:	008001c4 	movi	r2,7
 80021c0:	14400e16 	blt	r2,r17,80021fc <___vfprintf_internal_r+0x168c>
 80021c4:	45800204 	addi	r22,r8,8
 80021c8:	003eca06 	br	8001cf4 <__alt_data_end+0xfc001cf4>
 80021cc:	01020074 	movhi	r4,2049
 80021d0:	2100a284 	addi	r4,r4,650
 80021d4:	d9002c15 	stw	r4,176(sp)
 80021d8:	d8802c17 	ldw	r2,176(sp)
 80021dc:	1c07883a 	add	r3,r3,r16
 80021e0:	8c400044 	addi	r17,r17,1
 80021e4:	b0800015 	stw	r2,0(r22)
 80021e8:	b4000115 	stw	r16,4(r22)
 80021ec:	d8c02015 	stw	r3,128(sp)
 80021f0:	dc401f15 	stw	r17,124(sp)
 80021f4:	008001c4 	movi	r2,7
 80021f8:	147ebd0e 	bge	r2,r17,8001cf0 <__alt_data_end+0xfc001cf0>
 80021fc:	d9002d17 	ldw	r4,180(sp)
 8002200:	d9801e04 	addi	r6,sp,120
 8002204:	b80b883a 	mov	r5,r23
 8002208:	80077180 	call	8007718 <__sprint_r>
 800220c:	103b5c1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002210:	d8c02017 	ldw	r3,128(sp)
 8002214:	dc401f17 	ldw	r17,124(sp)
 8002218:	dd800404 	addi	r22,sp,16
 800221c:	003eb506 	br	8001cf4 <__alt_data_end+0xfc001cf4>
 8002220:	d9002d17 	ldw	r4,180(sp)
 8002224:	d9801e04 	addi	r6,sp,120
 8002228:	b80b883a 	mov	r5,r23
 800222c:	80077180 	call	8007718 <__sprint_r>
 8002230:	103b531e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002234:	d8c02017 	ldw	r3,128(sp)
 8002238:	dc401f17 	ldw	r17,124(sp)
 800223c:	da000404 	addi	r8,sp,16
 8002240:	003e8d06 	br	8001c78 <__alt_data_end+0xfc001c78>
 8002244:	d9002d17 	ldw	r4,180(sp)
 8002248:	d9801e04 	addi	r6,sp,120
 800224c:	b80b883a 	mov	r5,r23
 8002250:	80077180 	call	8007718 <__sprint_r>
 8002254:	103b4a1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002258:	d8c02017 	ldw	r3,128(sp)
 800225c:	dc401f17 	ldw	r17,124(sp)
 8002260:	dd800404 	addi	r22,sp,16
 8002264:	003e8f06 	br	8001ca4 <__alt_data_end+0xfc001ca4>
 8002268:	0027883a 	mov	r19,zero
 800226c:	003f4a06 	br	8001f98 <__alt_data_end+0xfc001f98>
 8002270:	d9002d17 	ldw	r4,180(sp)
 8002274:	d9801e04 	addi	r6,sp,120
 8002278:	b80b883a 	mov	r5,r23
 800227c:	80077180 	call	8007718 <__sprint_r>
 8002280:	103b3f1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002284:	d8c02017 	ldw	r3,128(sp)
 8002288:	da000404 	addi	r8,sp,16
 800228c:	003c7b06 	br	800147c <__alt_data_end+0xfc00147c>
 8002290:	d9402a17 	ldw	r5,168(sp)
 8002294:	04e7c83a 	sub	r19,zero,r19
 8002298:	07000b44 	movi	fp,45
 800229c:	9804c03a 	cmpne	r2,r19,zero
 80022a0:	05adc83a 	sub	r22,zero,r22
 80022a4:	df002785 	stb	fp,158(sp)
 80022a8:	b0adc83a 	sub	r22,r22,r2
 80022ac:	28017b16 	blt	r5,zero,800289c <___vfprintf_internal_r+0x1d2c>
 80022b0:	00bfdfc4 	movi	r2,-129
 80022b4:	90a4703a 	and	r18,r18,r2
 80022b8:	003b8906 	br	80010e0 <__alt_data_end+0xfc0010e0>
 80022bc:	d9003617 	ldw	r4,216(sp)
 80022c0:	d9403817 	ldw	r5,224(sp)
 80022c4:	da003d15 	stw	r8,244(sp)
 80022c8:	80072a40 	call	80072a4 <__fpclassifyd>
 80022cc:	da003d17 	ldw	r8,244(sp)
 80022d0:	1000f026 	beq	r2,zero,8002694 <___vfprintf_internal_r+0x1b24>
 80022d4:	d9002a17 	ldw	r4,168(sp)
 80022d8:	05bff7c4 	movi	r22,-33
 80022dc:	00bfffc4 	movi	r2,-1
 80022e0:	8dac703a 	and	r22,r17,r22
 80022e4:	20820026 	beq	r4,r2,8002ae8 <___vfprintf_internal_r+0x1f78>
 80022e8:	008011c4 	movi	r2,71
 80022ec:	b081f726 	beq	r22,r2,8002acc <___vfprintf_internal_r+0x1f5c>
 80022f0:	d9003817 	ldw	r4,224(sp)
 80022f4:	90c04014 	ori	r3,r18,256
 80022f8:	d8c02c15 	stw	r3,176(sp)
 80022fc:	20021516 	blt	r4,zero,8002b54 <___vfprintf_internal_r+0x1fe4>
 8002300:	dcc03817 	ldw	r19,224(sp)
 8002304:	d8002905 	stb	zero,164(sp)
 8002308:	00801984 	movi	r2,102
 800230c:	8881f926 	beq	r17,r2,8002af4 <___vfprintf_internal_r+0x1f84>
 8002310:	00801184 	movi	r2,70
 8002314:	88821c26 	beq	r17,r2,8002b88 <___vfprintf_internal_r+0x2018>
 8002318:	00801144 	movi	r2,69
 800231c:	b081ef26 	beq	r22,r2,8002adc <___vfprintf_internal_r+0x1f6c>
 8002320:	d8c02a17 	ldw	r3,168(sp)
 8002324:	d8802104 	addi	r2,sp,132
 8002328:	d8800315 	stw	r2,12(sp)
 800232c:	d9403617 	ldw	r5,216(sp)
 8002330:	d8802504 	addi	r2,sp,148
 8002334:	d9002d17 	ldw	r4,180(sp)
 8002338:	d8800215 	stw	r2,8(sp)
 800233c:	d8802604 	addi	r2,sp,152
 8002340:	d8c00015 	stw	r3,0(sp)
 8002344:	d8800115 	stw	r2,4(sp)
 8002348:	01c00084 	movi	r7,2
 800234c:	980d883a 	mov	r6,r19
 8002350:	d8c03c15 	stw	r3,240(sp)
 8002354:	da003d15 	stw	r8,244(sp)
 8002358:	80032a00 	call	80032a0 <_dtoa_r>
 800235c:	1021883a 	mov	r16,r2
 8002360:	008019c4 	movi	r2,103
 8002364:	d8c03c17 	ldw	r3,240(sp)
 8002368:	da003d17 	ldw	r8,244(sp)
 800236c:	88817126 	beq	r17,r2,8002934 <___vfprintf_internal_r+0x1dc4>
 8002370:	008011c4 	movi	r2,71
 8002374:	88829126 	beq	r17,r2,8002dbc <___vfprintf_internal_r+0x224c>
 8002378:	80f9883a 	add	fp,r16,r3
 800237c:	d9003617 	ldw	r4,216(sp)
 8002380:	000d883a 	mov	r6,zero
 8002384:	000f883a 	mov	r7,zero
 8002388:	980b883a 	mov	r5,r19
 800238c:	da003d15 	stw	r8,244(sp)
 8002390:	800c1d80 	call	800c1d8 <__eqdf2>
 8002394:	da003d17 	ldw	r8,244(sp)
 8002398:	10018d26 	beq	r2,zero,80029d0 <___vfprintf_internal_r+0x1e60>
 800239c:	d8802117 	ldw	r2,132(sp)
 80023a0:	1700062e 	bgeu	r2,fp,80023bc <___vfprintf_internal_r+0x184c>
 80023a4:	01000c04 	movi	r4,48
 80023a8:	10c00044 	addi	r3,r2,1
 80023ac:	d8c02115 	stw	r3,132(sp)
 80023b0:	11000005 	stb	r4,0(r2)
 80023b4:	d8802117 	ldw	r2,132(sp)
 80023b8:	173ffb36 	bltu	r2,fp,80023a8 <__alt_data_end+0xfc0023a8>
 80023bc:	1405c83a 	sub	r2,r2,r16
 80023c0:	d8803315 	stw	r2,204(sp)
 80023c4:	008011c4 	movi	r2,71
 80023c8:	b0817626 	beq	r22,r2,80029a4 <___vfprintf_internal_r+0x1e34>
 80023cc:	00801944 	movi	r2,101
 80023d0:	1442800e 	bge	r2,r17,8002dd4 <___vfprintf_internal_r+0x2264>
 80023d4:	d8c02617 	ldw	r3,152(sp)
 80023d8:	00801984 	movi	r2,102
 80023dc:	d8c03215 	stw	r3,200(sp)
 80023e0:	8881fe26 	beq	r17,r2,8002bdc <___vfprintf_internal_r+0x206c>
 80023e4:	d8c03217 	ldw	r3,200(sp)
 80023e8:	d9003317 	ldw	r4,204(sp)
 80023ec:	1901dd16 	blt	r3,r4,8002b64 <___vfprintf_internal_r+0x1ff4>
 80023f0:	9480004c 	andi	r18,r18,1
 80023f4:	90022b1e 	bne	r18,zero,8002ca4 <___vfprintf_internal_r+0x2134>
 80023f8:	1805883a 	mov	r2,r3
 80023fc:	18028316 	blt	r3,zero,8002e0c <___vfprintf_internal_r+0x229c>
 8002400:	d8c03217 	ldw	r3,200(sp)
 8002404:	044019c4 	movi	r17,103
 8002408:	d8c02b15 	stw	r3,172(sp)
 800240c:	df002907 	ldb	fp,164(sp)
 8002410:	e001531e 	bne	fp,zero,8002960 <___vfprintf_internal_r+0x1df0>
 8002414:	df002783 	ldbu	fp,158(sp)
 8002418:	d8802915 	stw	r2,164(sp)
 800241c:	dc802c17 	ldw	r18,176(sp)
 8002420:	d8002a15 	stw	zero,168(sp)
 8002424:	003baf06 	br	80012e4 <__alt_data_end+0xfc0012e4>
 8002428:	d8c02e17 	ldw	r3,184(sp)
 800242c:	d9002e17 	ldw	r4,184(sp)
 8002430:	d9402e17 	ldw	r5,184(sp)
 8002434:	18c00017 	ldw	r3,0(r3)
 8002438:	21000117 	ldw	r4,4(r4)
 800243c:	29400204 	addi	r5,r5,8
 8002440:	d8c03615 	stw	r3,216(sp)
 8002444:	d9003815 	stw	r4,224(sp)
 8002448:	d9402e15 	stw	r5,184(sp)
 800244c:	003b5006 	br	8001190 <__alt_data_end+0xfc001190>
 8002450:	ac400007 	ldb	r17,0(r21)
 8002454:	003a2806 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 8002458:	9080100c 	andi	r2,r18,64
 800245c:	1000a826 	beq	r2,zero,8002700 <___vfprintf_internal_r+0x1b90>
 8002460:	d8c02e17 	ldw	r3,184(sp)
 8002464:	002d883a 	mov	r22,zero
 8002468:	1cc0000b 	ldhu	r19,0(r3)
 800246c:	18c00104 	addi	r3,r3,4
 8002470:	d8c02e15 	stw	r3,184(sp)
 8002474:	003caf06 	br	8001734 <__alt_data_end+0xfc001734>
 8002478:	d9002e17 	ldw	r4,184(sp)
 800247c:	d9402a17 	ldw	r5,168(sp)
 8002480:	002d883a 	mov	r22,zero
 8002484:	20800104 	addi	r2,r4,4
 8002488:	24c00017 	ldw	r19,0(r4)
 800248c:	283ebb0e 	bge	r5,zero,8001f7c <__alt_data_end+0xfc001f7c>
 8002490:	003ef106 	br	8002058 <__alt_data_end+0xfc002058>
 8002494:	9080040c 	andi	r2,r18,16
 8002498:	1000921e 	bne	r2,zero,80026e4 <___vfprintf_internal_r+0x1b74>
 800249c:	9480100c 	andi	r18,r18,64
 80024a0:	90013926 	beq	r18,zero,8002988 <___vfprintf_internal_r+0x1e18>
 80024a4:	d9402e17 	ldw	r5,184(sp)
 80024a8:	d8c02f17 	ldw	r3,188(sp)
 80024ac:	28800017 	ldw	r2,0(r5)
 80024b0:	29400104 	addi	r5,r5,4
 80024b4:	d9402e15 	stw	r5,184(sp)
 80024b8:	10c0000d 	sth	r3,0(r2)
 80024bc:	0039e406 	br	8000c50 <__alt_data_end+0xfc000c50>
 80024c0:	9080100c 	andi	r2,r18,64
 80024c4:	10008026 	beq	r2,zero,80026c8 <___vfprintf_internal_r+0x1b58>
 80024c8:	d8802e17 	ldw	r2,184(sp)
 80024cc:	14c0000f 	ldh	r19,0(r2)
 80024d0:	10800104 	addi	r2,r2,4
 80024d4:	d8802e15 	stw	r2,184(sp)
 80024d8:	982dd7fa 	srai	r22,r19,31
 80024dc:	b005883a 	mov	r2,r22
 80024e0:	003af706 	br	80010c0 <__alt_data_end+0xfc0010c0>
 80024e4:	9080100c 	andi	r2,r18,64
 80024e8:	d8002785 	stb	zero,158(sp)
 80024ec:	10008a1e 	bne	r2,zero,8002718 <___vfprintf_internal_r+0x1ba8>
 80024f0:	d9002e17 	ldw	r4,184(sp)
 80024f4:	d9402a17 	ldw	r5,168(sp)
 80024f8:	002d883a 	mov	r22,zero
 80024fc:	20800104 	addi	r2,r4,4
 8002500:	24c00017 	ldw	r19,0(r4)
 8002504:	283e4b0e 	bge	r5,zero,8001e34 <__alt_data_end+0xfc001e34>
 8002508:	9d86b03a 	or	r3,r19,r22
 800250c:	d8802e15 	stw	r2,184(sp)
 8002510:	183e4c1e 	bne	r3,zero,8001e44 <__alt_data_end+0xfc001e44>
 8002514:	0039883a 	mov	fp,zero
 8002518:	0005883a 	mov	r2,zero
 800251c:	003d4006 	br	8001a20 <__alt_data_end+0xfc001a20>
 8002520:	01420074 	movhi	r5,2049
 8002524:	2940a284 	addi	r5,r5,650
 8002528:	d9402c15 	stw	r5,176(sp)
 800252c:	d9402c17 	ldw	r5,176(sp)
 8002530:	1c47883a 	add	r3,r3,r17
 8002534:	10800044 	addi	r2,r2,1
 8002538:	41400015 	stw	r5,0(r8)
 800253c:	44400115 	stw	r17,4(r8)
 8002540:	d8c02015 	stw	r3,128(sp)
 8002544:	d8801f15 	stw	r2,124(sp)
 8002548:	010001c4 	movi	r4,7
 800254c:	20bec816 	blt	r4,r2,8002070 <__alt_data_end+0xfc002070>
 8002550:	42000204 	addi	r8,r8,8
 8002554:	003ecd06 	br	800208c <__alt_data_end+0xfc00208c>
 8002558:	d9002a17 	ldw	r4,168(sp)
 800255c:	d8002785 	stb	zero,158(sp)
 8002560:	203d2d16 	blt	r4,zero,8001a18 <__alt_data_end+0xfc001a18>
 8002564:	00bfdfc4 	movi	r2,-129
 8002568:	90a4703a 	and	r18,r18,r2
 800256c:	003a6106 	br	8000ef4 <__alt_data_end+0xfc000ef4>
 8002570:	01020074 	movhi	r4,2049
 8002574:	2100a284 	addi	r4,r4,650
 8002578:	d9002c15 	stw	r4,176(sp)
 800257c:	003bea06 	br	8001528 <__alt_data_end+0xfc001528>
 8002580:	d9002d17 	ldw	r4,180(sp)
 8002584:	d9801e04 	addi	r6,sp,120
 8002588:	b80b883a 	mov	r5,r23
 800258c:	80077180 	call	8007718 <__sprint_r>
 8002590:	103a7b1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002594:	d8c02017 	ldw	r3,128(sp)
 8002598:	da000404 	addi	r8,sp,16
 800259c:	003d4106 	br	8001aa4 <__alt_data_end+0xfc001aa4>
 80025a0:	d8801f17 	ldw	r2,124(sp)
 80025a4:	01420074 	movhi	r5,2049
 80025a8:	01000044 	movi	r4,1
 80025ac:	18c00044 	addi	r3,r3,1
 80025b0:	10800044 	addi	r2,r2,1
 80025b4:	2940a204 	addi	r5,r5,648
 80025b8:	41000115 	stw	r4,4(r8)
 80025bc:	41400015 	stw	r5,0(r8)
 80025c0:	d8c02015 	stw	r3,128(sp)
 80025c4:	d8801f15 	stw	r2,124(sp)
 80025c8:	010001c4 	movi	r4,7
 80025cc:	20805c16 	blt	r4,r2,8002740 <___vfprintf_internal_r+0x1bd0>
 80025d0:	42000204 	addi	r8,r8,8
 80025d4:	8800041e 	bne	r17,zero,80025e8 <___vfprintf_internal_r+0x1a78>
 80025d8:	d8803317 	ldw	r2,204(sp)
 80025dc:	1000021e 	bne	r2,zero,80025e8 <___vfprintf_internal_r+0x1a78>
 80025e0:	9080004c 	andi	r2,r18,1
 80025e4:	103be726 	beq	r2,zero,8001584 <__alt_data_end+0xfc001584>
 80025e8:	d9003717 	ldw	r4,220(sp)
 80025ec:	d8801f17 	ldw	r2,124(sp)
 80025f0:	d9403417 	ldw	r5,208(sp)
 80025f4:	20c7883a 	add	r3,r4,r3
 80025f8:	10800044 	addi	r2,r2,1
 80025fc:	41000115 	stw	r4,4(r8)
 8002600:	41400015 	stw	r5,0(r8)
 8002604:	d8c02015 	stw	r3,128(sp)
 8002608:	d8801f15 	stw	r2,124(sp)
 800260c:	010001c4 	movi	r4,7
 8002610:	20812116 	blt	r4,r2,8002a98 <___vfprintf_internal_r+0x1f28>
 8002614:	42000204 	addi	r8,r8,8
 8002618:	0463c83a 	sub	r17,zero,r17
 800261c:	0440730e 	bge	zero,r17,80027ec <___vfprintf_internal_r+0x1c7c>
 8002620:	05800404 	movi	r22,16
 8002624:	b440860e 	bge	r22,r17,8002840 <___vfprintf_internal_r+0x1cd0>
 8002628:	01420074 	movhi	r5,2049
 800262c:	2940a284 	addi	r5,r5,650
 8002630:	d9402c15 	stw	r5,176(sp)
 8002634:	070001c4 	movi	fp,7
 8002638:	dcc02d17 	ldw	r19,180(sp)
 800263c:	00000306 	br	800264c <___vfprintf_internal_r+0x1adc>
 8002640:	42000204 	addi	r8,r8,8
 8002644:	8c7ffc04 	addi	r17,r17,-16
 8002648:	b440800e 	bge	r22,r17,800284c <___vfprintf_internal_r+0x1cdc>
 800264c:	18c00404 	addi	r3,r3,16
 8002650:	10800044 	addi	r2,r2,1
 8002654:	45000015 	stw	r20,0(r8)
 8002658:	45800115 	stw	r22,4(r8)
 800265c:	d8c02015 	stw	r3,128(sp)
 8002660:	d8801f15 	stw	r2,124(sp)
 8002664:	e0bff60e 	bge	fp,r2,8002640 <__alt_data_end+0xfc002640>
 8002668:	d9801e04 	addi	r6,sp,120
 800266c:	b80b883a 	mov	r5,r23
 8002670:	9809883a 	mov	r4,r19
 8002674:	80077180 	call	8007718 <__sprint_r>
 8002678:	103a411e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 800267c:	d8c02017 	ldw	r3,128(sp)
 8002680:	d8801f17 	ldw	r2,124(sp)
 8002684:	da000404 	addi	r8,sp,16
 8002688:	003fee06 	br	8002644 <__alt_data_end+0xfc002644>
 800268c:	00bfffc4 	movi	r2,-1
 8002690:	003a3f06 	br	8000f90 <__alt_data_end+0xfc000f90>
 8002694:	008011c4 	movi	r2,71
 8002698:	1440b816 	blt	r2,r17,800297c <___vfprintf_internal_r+0x1e0c>
 800269c:	04020074 	movhi	r16,2049
 80026a0:	84009404 	addi	r16,r16,592
 80026a4:	00c000c4 	movi	r3,3
 80026a8:	00bfdfc4 	movi	r2,-129
 80026ac:	d8c02915 	stw	r3,164(sp)
 80026b0:	90a4703a 	and	r18,r18,r2
 80026b4:	df002783 	ldbu	fp,158(sp)
 80026b8:	d8c02b15 	stw	r3,172(sp)
 80026bc:	d8002a15 	stw	zero,168(sp)
 80026c0:	d8003215 	stw	zero,200(sp)
 80026c4:	003b0706 	br	80012e4 <__alt_data_end+0xfc0012e4>
 80026c8:	d8c02e17 	ldw	r3,184(sp)
 80026cc:	1cc00017 	ldw	r19,0(r3)
 80026d0:	18c00104 	addi	r3,r3,4
 80026d4:	d8c02e15 	stw	r3,184(sp)
 80026d8:	982dd7fa 	srai	r22,r19,31
 80026dc:	b005883a 	mov	r2,r22
 80026e0:	003a7706 	br	80010c0 <__alt_data_end+0xfc0010c0>
 80026e4:	d8c02e17 	ldw	r3,184(sp)
 80026e8:	d9002f17 	ldw	r4,188(sp)
 80026ec:	18800017 	ldw	r2,0(r3)
 80026f0:	18c00104 	addi	r3,r3,4
 80026f4:	d8c02e15 	stw	r3,184(sp)
 80026f8:	11000015 	stw	r4,0(r2)
 80026fc:	00395406 	br	8000c50 <__alt_data_end+0xfc000c50>
 8002700:	d9002e17 	ldw	r4,184(sp)
 8002704:	002d883a 	mov	r22,zero
 8002708:	24c00017 	ldw	r19,0(r4)
 800270c:	21000104 	addi	r4,r4,4
 8002710:	d9002e15 	stw	r4,184(sp)
 8002714:	003c0706 	br	8001734 <__alt_data_end+0xfc001734>
 8002718:	d9402e17 	ldw	r5,184(sp)
 800271c:	d8c02a17 	ldw	r3,168(sp)
 8002720:	002d883a 	mov	r22,zero
 8002724:	28800104 	addi	r2,r5,4
 8002728:	2cc0000b 	ldhu	r19,0(r5)
 800272c:	183dc10e 	bge	r3,zero,8001e34 <__alt_data_end+0xfc001e34>
 8002730:	003f7506 	br	8002508 <__alt_data_end+0xfc002508>
 8002734:	04020074 	movhi	r16,2049
 8002738:	84009204 	addi	r16,r16,584
 800273c:	003aa706 	br	80011dc <__alt_data_end+0xfc0011dc>
 8002740:	d9002d17 	ldw	r4,180(sp)
 8002744:	d9801e04 	addi	r6,sp,120
 8002748:	b80b883a 	mov	r5,r23
 800274c:	80077180 	call	8007718 <__sprint_r>
 8002750:	103a0b1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002754:	dc402617 	ldw	r17,152(sp)
 8002758:	d8c02017 	ldw	r3,128(sp)
 800275c:	da000404 	addi	r8,sp,16
 8002760:	003f9c06 	br	80025d4 <__alt_data_end+0xfc0025d4>
 8002764:	ac400043 	ldbu	r17,1(r21)
 8002768:	84000814 	ori	r16,r16,32
 800276c:	ad400044 	addi	r21,r21,1
 8002770:	8c403fcc 	andi	r17,r17,255
 8002774:	8c40201c 	xori	r17,r17,128
 8002778:	8c7fe004 	addi	r17,r17,-128
 800277c:	00395e06 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 8002780:	d8c02e15 	stw	r3,184(sp)
 8002784:	0039883a 	mov	fp,zero
 8002788:	003e3506 	br	8002060 <__alt_data_end+0xfc002060>
 800278c:	d9002d17 	ldw	r4,180(sp)
 8002790:	d9801e04 	addi	r6,sp,120
 8002794:	b80b883a 	mov	r5,r23
 8002798:	80077180 	call	8007718 <__sprint_r>
 800279c:	1039f81e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 80027a0:	d8c02017 	ldw	r3,128(sp)
 80027a4:	da000404 	addi	r8,sp,16
 80027a8:	003cd006 	br	8001aec <__alt_data_end+0xfc001aec>
 80027ac:	8009883a 	mov	r4,r16
 80027b0:	df003d15 	stw	fp,244(sp)
 80027b4:	80075840 	call	8007584 <strlen>
 80027b8:	d8802b15 	stw	r2,172(sp)
 80027bc:	da003d17 	ldw	r8,244(sp)
 80027c0:	103c200e 	bge	r2,zero,8001844 <__alt_data_end+0xfc001844>
 80027c4:	0005883a 	mov	r2,zero
 80027c8:	003c1e06 	br	8001844 <__alt_data_end+0xfc001844>
 80027cc:	d9002d17 	ldw	r4,180(sp)
 80027d0:	d9801e04 	addi	r6,sp,120
 80027d4:	b80b883a 	mov	r5,r23
 80027d8:	80077180 	call	8007718 <__sprint_r>
 80027dc:	1039e81e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 80027e0:	d8c02017 	ldw	r3,128(sp)
 80027e4:	d8801f17 	ldw	r2,124(sp)
 80027e8:	da000404 	addi	r8,sp,16
 80027ec:	d9403317 	ldw	r5,204(sp)
 80027f0:	10800044 	addi	r2,r2,1
 80027f4:	44000015 	stw	r16,0(r8)
 80027f8:	28c7883a 	add	r3,r5,r3
 80027fc:	003b5b06 	br	800156c <__alt_data_end+0xfc00156c>
 8002800:	01020074 	movhi	r4,2049
 8002804:	2100a684 	addi	r4,r4,666
 8002808:	d9003515 	stw	r4,212(sp)
 800280c:	003af206 	br	80013d8 <__alt_data_end+0xfc0013d8>
 8002810:	013fffc4 	movi	r4,-1
 8002814:	003a0806 	br	8001038 <__alt_data_end+0xfc001038>
 8002818:	0023883a 	mov	r17,zero
 800281c:	003d9d06 	br	8001e94 <__alt_data_end+0xfc001e94>
 8002820:	d9002d17 	ldw	r4,180(sp)
 8002824:	d9801e04 	addi	r6,sp,120
 8002828:	b80b883a 	mov	r5,r23
 800282c:	80077180 	call	8007718 <__sprint_r>
 8002830:	1039d31e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002834:	d8c02017 	ldw	r3,128(sp)
 8002838:	da000404 	addi	r8,sp,16
 800283c:	003d9406 	br	8001e90 <__alt_data_end+0xfc001e90>
 8002840:	01020074 	movhi	r4,2049
 8002844:	2100a284 	addi	r4,r4,650
 8002848:	d9002c15 	stw	r4,176(sp)
 800284c:	d9002c17 	ldw	r4,176(sp)
 8002850:	1c47883a 	add	r3,r3,r17
 8002854:	10800044 	addi	r2,r2,1
 8002858:	41000015 	stw	r4,0(r8)
 800285c:	44400115 	stw	r17,4(r8)
 8002860:	d8c02015 	stw	r3,128(sp)
 8002864:	d8801f15 	stw	r2,124(sp)
 8002868:	010001c4 	movi	r4,7
 800286c:	20bfd716 	blt	r4,r2,80027cc <__alt_data_end+0xfc0027cc>
 8002870:	42000204 	addi	r8,r8,8
 8002874:	003fdd06 	br	80027ec <__alt_data_end+0xfc0027ec>
 8002878:	d9002d17 	ldw	r4,180(sp)
 800287c:	d9801e04 	addi	r6,sp,120
 8002880:	b80b883a 	mov	r5,r23
 8002884:	80077180 	call	8007718 <__sprint_r>
 8002888:	1039bd1e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 800288c:	d8802617 	ldw	r2,152(sp)
 8002890:	d8c02017 	ldw	r3,128(sp)
 8002894:	da000404 	addi	r8,sp,16
 8002898:	003e1006 	br	80020dc <__alt_data_end+0xfc0020dc>
 800289c:	00800044 	movi	r2,1
 80028a0:	10803fcc 	andi	r2,r2,255
 80028a4:	00c00044 	movi	r3,1
 80028a8:	10fa0d26 	beq	r2,r3,80010e0 <__alt_data_end+0xfc0010e0>
 80028ac:	00c00084 	movi	r3,2
 80028b0:	10fbaf26 	beq	r2,r3,8001770 <__alt_data_end+0xfc001770>
 80028b4:	003a6d06 	br	800126c <__alt_data_end+0xfc00126c>
 80028b8:	01020074 	movhi	r4,2049
 80028bc:	2100a684 	addi	r4,r4,666
 80028c0:	d9003515 	stw	r4,212(sp)
 80028c4:	003b5406 	br	8001618 <__alt_data_end+0xfc001618>
 80028c8:	d8802a17 	ldw	r2,168(sp)
 80028cc:	00c00184 	movi	r3,6
 80028d0:	1880012e 	bgeu	r3,r2,80028d8 <___vfprintf_internal_r+0x1d68>
 80028d4:	1805883a 	mov	r2,r3
 80028d8:	d8802b15 	stw	r2,172(sp)
 80028dc:	1000ef16 	blt	r2,zero,8002c9c <___vfprintf_internal_r+0x212c>
 80028e0:	04020074 	movhi	r16,2049
 80028e4:	d8802915 	stw	r2,164(sp)
 80028e8:	dcc02e15 	stw	r19,184(sp)
 80028ec:	d8002a15 	stw	zero,168(sp)
 80028f0:	d8003215 	stw	zero,200(sp)
 80028f4:	8400a004 	addi	r16,r16,640
 80028f8:	0039883a 	mov	fp,zero
 80028fc:	003a8006 	br	8001300 <__alt_data_end+0xfc001300>
 8002900:	0021883a 	mov	r16,zero
 8002904:	003e0706 	br	8002124 <__alt_data_end+0xfc002124>
 8002908:	d9002d17 	ldw	r4,180(sp)
 800290c:	d9801e04 	addi	r6,sp,120
 8002910:	b80b883a 	mov	r5,r23
 8002914:	80077180 	call	8007718 <__sprint_r>
 8002918:	1039991e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 800291c:	d8802617 	ldw	r2,152(sp)
 8002920:	d9403317 	ldw	r5,204(sp)
 8002924:	d8c02017 	ldw	r3,128(sp)
 8002928:	da000404 	addi	r8,sp,16
 800292c:	2885c83a 	sub	r2,r5,r2
 8002930:	003dfb06 	br	8002120 <__alt_data_end+0xfc002120>
 8002934:	9080004c 	andi	r2,r18,1
 8002938:	103e8f1e 	bne	r2,zero,8002378 <__alt_data_end+0xfc002378>
 800293c:	d8802117 	ldw	r2,132(sp)
 8002940:	003e9e06 	br	80023bc <__alt_data_end+0xfc0023bc>
 8002944:	1025883a 	mov	r18,r2
 8002948:	0039883a 	mov	fp,zero
 800294c:	00800084 	movi	r2,2
 8002950:	003fd306 	br	80028a0 <__alt_data_end+0xfc0028a0>
 8002954:	07000b44 	movi	fp,45
 8002958:	df002785 	stb	fp,158(sp)
 800295c:	003a1b06 	br	80011cc <__alt_data_end+0xfc0011cc>
 8002960:	00c00b44 	movi	r3,45
 8002964:	d8c02785 	stb	r3,158(sp)
 8002968:	d8802915 	stw	r2,164(sp)
 800296c:	dc802c17 	ldw	r18,176(sp)
 8002970:	d8002a15 	stw	zero,168(sp)
 8002974:	07000b44 	movi	fp,45
 8002978:	003a5e06 	br	80012f4 <__alt_data_end+0xfc0012f4>
 800297c:	04020074 	movhi	r16,2049
 8002980:	84009504 	addi	r16,r16,596
 8002984:	003f4706 	br	80026a4 <__alt_data_end+0xfc0026a4>
 8002988:	d9002e17 	ldw	r4,184(sp)
 800298c:	d9402f17 	ldw	r5,188(sp)
 8002990:	20800017 	ldw	r2,0(r4)
 8002994:	21000104 	addi	r4,r4,4
 8002998:	d9002e15 	stw	r4,184(sp)
 800299c:	11400015 	stw	r5,0(r2)
 80029a0:	0038ab06 	br	8000c50 <__alt_data_end+0xfc000c50>
 80029a4:	dd802617 	ldw	r22,152(sp)
 80029a8:	00bfff44 	movi	r2,-3
 80029ac:	b0801c16 	blt	r22,r2,8002a20 <___vfprintf_internal_r+0x1eb0>
 80029b0:	d9402a17 	ldw	r5,168(sp)
 80029b4:	2d801a16 	blt	r5,r22,8002a20 <___vfprintf_internal_r+0x1eb0>
 80029b8:	dd803215 	stw	r22,200(sp)
 80029bc:	003e8906 	br	80023e4 <__alt_data_end+0xfc0023e4>
 80029c0:	01020074 	movhi	r4,2049
 80029c4:	2100a284 	addi	r4,r4,650
 80029c8:	d9002c15 	stw	r4,176(sp)
 80029cc:	003c9106 	br	8001c14 <__alt_data_end+0xfc001c14>
 80029d0:	e005883a 	mov	r2,fp
 80029d4:	003e7906 	br	80023bc <__alt_data_end+0xfc0023bc>
 80029d8:	d9002a17 	ldw	r4,168(sp)
 80029dc:	df002783 	ldbu	fp,158(sp)
 80029e0:	dcc02e15 	stw	r19,184(sp)
 80029e4:	d9002915 	stw	r4,164(sp)
 80029e8:	d9002b15 	stw	r4,172(sp)
 80029ec:	d8002a15 	stw	zero,168(sp)
 80029f0:	d8003215 	stw	zero,200(sp)
 80029f4:	003a3b06 	br	80012e4 <__alt_data_end+0xfc0012e4>
 80029f8:	9080004c 	andi	r2,r18,1
 80029fc:	0039883a 	mov	fp,zero
 8002a00:	10000426 	beq	r2,zero,8002a14 <___vfprintf_internal_r+0x1ea4>
 8002a04:	00800c04 	movi	r2,48
 8002a08:	dc001dc4 	addi	r16,sp,119
 8002a0c:	d8801dc5 	stb	r2,119(sp)
 8002a10:	003b6406 	br	80017a4 <__alt_data_end+0xfc0017a4>
 8002a14:	d8002b15 	stw	zero,172(sp)
 8002a18:	dc001e04 	addi	r16,sp,120
 8002a1c:	003a2b06 	br	80012cc <__alt_data_end+0xfc0012cc>
 8002a20:	8c7fff84 	addi	r17,r17,-2
 8002a24:	b5bfffc4 	addi	r22,r22,-1
 8002a28:	dd802615 	stw	r22,152(sp)
 8002a2c:	dc4022c5 	stb	r17,139(sp)
 8002a30:	b000bf16 	blt	r22,zero,8002d30 <___vfprintf_internal_r+0x21c0>
 8002a34:	00800ac4 	movi	r2,43
 8002a38:	d8802305 	stb	r2,140(sp)
 8002a3c:	00800244 	movi	r2,9
 8002a40:	15807016 	blt	r2,r22,8002c04 <___vfprintf_internal_r+0x2094>
 8002a44:	00800c04 	movi	r2,48
 8002a48:	b5800c04 	addi	r22,r22,48
 8002a4c:	d8802345 	stb	r2,141(sp)
 8002a50:	dd802385 	stb	r22,142(sp)
 8002a54:	d88023c4 	addi	r2,sp,143
 8002a58:	df0022c4 	addi	fp,sp,139
 8002a5c:	d8c03317 	ldw	r3,204(sp)
 8002a60:	1739c83a 	sub	fp,r2,fp
 8002a64:	d9003317 	ldw	r4,204(sp)
 8002a68:	e0c7883a 	add	r3,fp,r3
 8002a6c:	df003a15 	stw	fp,232(sp)
 8002a70:	d8c02b15 	stw	r3,172(sp)
 8002a74:	00800044 	movi	r2,1
 8002a78:	1100b30e 	bge	r2,r4,8002d48 <___vfprintf_internal_r+0x21d8>
 8002a7c:	d8c02b17 	ldw	r3,172(sp)
 8002a80:	18c00044 	addi	r3,r3,1
 8002a84:	d8c02b15 	stw	r3,172(sp)
 8002a88:	1805883a 	mov	r2,r3
 8002a8c:	1800ac16 	blt	r3,zero,8002d40 <___vfprintf_internal_r+0x21d0>
 8002a90:	d8003215 	stw	zero,200(sp)
 8002a94:	003e5d06 	br	800240c <__alt_data_end+0xfc00240c>
 8002a98:	d9002d17 	ldw	r4,180(sp)
 8002a9c:	d9801e04 	addi	r6,sp,120
 8002aa0:	b80b883a 	mov	r5,r23
 8002aa4:	80077180 	call	8007718 <__sprint_r>
 8002aa8:	1039351e 	bne	r2,zero,8000f80 <__alt_data_end+0xfc000f80>
 8002aac:	dc402617 	ldw	r17,152(sp)
 8002ab0:	d8c02017 	ldw	r3,128(sp)
 8002ab4:	d8801f17 	ldw	r2,124(sp)
 8002ab8:	da000404 	addi	r8,sp,16
 8002abc:	003ed606 	br	8002618 <__alt_data_end+0xfc002618>
 8002ac0:	182b883a 	mov	r21,r3
 8002ac4:	d8002a15 	stw	zero,168(sp)
 8002ac8:	00388c06 	br	8000cfc <__alt_data_end+0xfc000cfc>
 8002acc:	d8802a17 	ldw	r2,168(sp)
 8002ad0:	103e071e 	bne	r2,zero,80022f0 <__alt_data_end+0xfc0022f0>
 8002ad4:	dc002a15 	stw	r16,168(sp)
 8002ad8:	003e0506 	br	80022f0 <__alt_data_end+0xfc0022f0>
 8002adc:	d9002a17 	ldw	r4,168(sp)
 8002ae0:	20c00044 	addi	r3,r4,1
 8002ae4:	003e0f06 	br	8002324 <__alt_data_end+0xfc002324>
 8002ae8:	01400184 	movi	r5,6
 8002aec:	d9402a15 	stw	r5,168(sp)
 8002af0:	003dff06 	br	80022f0 <__alt_data_end+0xfc0022f0>
 8002af4:	d8802104 	addi	r2,sp,132
 8002af8:	d8800315 	stw	r2,12(sp)
 8002afc:	d8802504 	addi	r2,sp,148
 8002b00:	d8800215 	stw	r2,8(sp)
 8002b04:	d8802604 	addi	r2,sp,152
 8002b08:	d8800115 	stw	r2,4(sp)
 8002b0c:	d8802a17 	ldw	r2,168(sp)
 8002b10:	d9403617 	ldw	r5,216(sp)
 8002b14:	d9002d17 	ldw	r4,180(sp)
 8002b18:	d8800015 	stw	r2,0(sp)
 8002b1c:	01c000c4 	movi	r7,3
 8002b20:	980d883a 	mov	r6,r19
 8002b24:	da003d15 	stw	r8,244(sp)
 8002b28:	80032a00 	call	80032a0 <_dtoa_r>
 8002b2c:	d8c02a17 	ldw	r3,168(sp)
 8002b30:	da003d17 	ldw	r8,244(sp)
 8002b34:	1021883a 	mov	r16,r2
 8002b38:	10f9883a 	add	fp,r2,r3
 8002b3c:	81000007 	ldb	r4,0(r16)
 8002b40:	00800c04 	movi	r2,48
 8002b44:	20805e26 	beq	r4,r2,8002cc0 <___vfprintf_internal_r+0x2150>
 8002b48:	d8c02617 	ldw	r3,152(sp)
 8002b4c:	e0f9883a 	add	fp,fp,r3
 8002b50:	003e0a06 	br	800237c <__alt_data_end+0xfc00237c>
 8002b54:	00c00b44 	movi	r3,45
 8002b58:	24e0003c 	xorhi	r19,r4,32768
 8002b5c:	d8c02905 	stb	r3,164(sp)
 8002b60:	003de906 	br	8002308 <__alt_data_end+0xfc002308>
 8002b64:	d8c03217 	ldw	r3,200(sp)
 8002b68:	00c07a0e 	bge	zero,r3,8002d54 <___vfprintf_internal_r+0x21e4>
 8002b6c:	00800044 	movi	r2,1
 8002b70:	d9003317 	ldw	r4,204(sp)
 8002b74:	1105883a 	add	r2,r2,r4
 8002b78:	d8802b15 	stw	r2,172(sp)
 8002b7c:	10004e16 	blt	r2,zero,8002cb8 <___vfprintf_internal_r+0x2148>
 8002b80:	044019c4 	movi	r17,103
 8002b84:	003e2106 	br	800240c <__alt_data_end+0xfc00240c>
 8002b88:	d9002a17 	ldw	r4,168(sp)
 8002b8c:	d8802104 	addi	r2,sp,132
 8002b90:	d8800315 	stw	r2,12(sp)
 8002b94:	d9000015 	stw	r4,0(sp)
 8002b98:	d8802504 	addi	r2,sp,148
 8002b9c:	d9403617 	ldw	r5,216(sp)
 8002ba0:	d9002d17 	ldw	r4,180(sp)
 8002ba4:	d8800215 	stw	r2,8(sp)
 8002ba8:	d8802604 	addi	r2,sp,152
 8002bac:	d8800115 	stw	r2,4(sp)
 8002bb0:	01c000c4 	movi	r7,3
 8002bb4:	980d883a 	mov	r6,r19
 8002bb8:	da003d15 	stw	r8,244(sp)
 8002bbc:	80032a00 	call	80032a0 <_dtoa_r>
 8002bc0:	d8c02a17 	ldw	r3,168(sp)
 8002bc4:	da003d17 	ldw	r8,244(sp)
 8002bc8:	1021883a 	mov	r16,r2
 8002bcc:	00801184 	movi	r2,70
 8002bd0:	80f9883a 	add	fp,r16,r3
 8002bd4:	88bfd926 	beq	r17,r2,8002b3c <__alt_data_end+0xfc002b3c>
 8002bd8:	003de806 	br	800237c <__alt_data_end+0xfc00237c>
 8002bdc:	d9002a17 	ldw	r4,168(sp)
 8002be0:	00c04d0e 	bge	zero,r3,8002d18 <___vfprintf_internal_r+0x21a8>
 8002be4:	2000441e 	bne	r4,zero,8002cf8 <___vfprintf_internal_r+0x2188>
 8002be8:	9480004c 	andi	r18,r18,1
 8002bec:	9000421e 	bne	r18,zero,8002cf8 <___vfprintf_internal_r+0x2188>
 8002bf0:	1805883a 	mov	r2,r3
 8002bf4:	18006f16 	blt	r3,zero,8002db4 <___vfprintf_internal_r+0x2244>
 8002bf8:	d8c03217 	ldw	r3,200(sp)
 8002bfc:	d8c02b15 	stw	r3,172(sp)
 8002c00:	003e0206 	br	800240c <__alt_data_end+0xfc00240c>
 8002c04:	df0022c4 	addi	fp,sp,139
 8002c08:	dc002a15 	stw	r16,168(sp)
 8002c0c:	4027883a 	mov	r19,r8
 8002c10:	e021883a 	mov	r16,fp
 8002c14:	b009883a 	mov	r4,r22
 8002c18:	01400284 	movi	r5,10
 8002c1c:	800ae2c0 	call	800ae2c <__modsi3>
 8002c20:	10800c04 	addi	r2,r2,48
 8002c24:	843fffc4 	addi	r16,r16,-1
 8002c28:	b009883a 	mov	r4,r22
 8002c2c:	01400284 	movi	r5,10
 8002c30:	80800005 	stb	r2,0(r16)
 8002c34:	800ada80 	call	800ada8 <__divsi3>
 8002c38:	102d883a 	mov	r22,r2
 8002c3c:	00800244 	movi	r2,9
 8002c40:	15bff416 	blt	r2,r22,8002c14 <__alt_data_end+0xfc002c14>
 8002c44:	9811883a 	mov	r8,r19
 8002c48:	b0800c04 	addi	r2,r22,48
 8002c4c:	8027883a 	mov	r19,r16
 8002c50:	997fffc4 	addi	r5,r19,-1
 8002c54:	98bfffc5 	stb	r2,-1(r19)
 8002c58:	dc002a17 	ldw	r16,168(sp)
 8002c5c:	2f006d2e 	bgeu	r5,fp,8002e14 <___vfprintf_internal_r+0x22a4>
 8002c60:	d9c02384 	addi	r7,sp,142
 8002c64:	3ccfc83a 	sub	r7,r7,r19
 8002c68:	d9002344 	addi	r4,sp,141
 8002c6c:	e1cf883a 	add	r7,fp,r7
 8002c70:	00000106 	br	8002c78 <___vfprintf_internal_r+0x2108>
 8002c74:	28800003 	ldbu	r2,0(r5)
 8002c78:	20800005 	stb	r2,0(r4)
 8002c7c:	21000044 	addi	r4,r4,1
 8002c80:	29400044 	addi	r5,r5,1
 8002c84:	393ffb1e 	bne	r7,r4,8002c74 <__alt_data_end+0xfc002c74>
 8002c88:	d8802304 	addi	r2,sp,140
 8002c8c:	14c5c83a 	sub	r2,r2,r19
 8002c90:	d8c02344 	addi	r3,sp,141
 8002c94:	1885883a 	add	r2,r3,r2
 8002c98:	003f7006 	br	8002a5c <__alt_data_end+0xfc002a5c>
 8002c9c:	0005883a 	mov	r2,zero
 8002ca0:	003f0f06 	br	80028e0 <__alt_data_end+0xfc0028e0>
 8002ca4:	d8c03217 	ldw	r3,200(sp)
 8002ca8:	18c00044 	addi	r3,r3,1
 8002cac:	d8c02b15 	stw	r3,172(sp)
 8002cb0:	1805883a 	mov	r2,r3
 8002cb4:	183fb20e 	bge	r3,zero,8002b80 <__alt_data_end+0xfc002b80>
 8002cb8:	0005883a 	mov	r2,zero
 8002cbc:	003fb006 	br	8002b80 <__alt_data_end+0xfc002b80>
 8002cc0:	d9003617 	ldw	r4,216(sp)
 8002cc4:	000d883a 	mov	r6,zero
 8002cc8:	000f883a 	mov	r7,zero
 8002ccc:	980b883a 	mov	r5,r19
 8002cd0:	d8c03c15 	stw	r3,240(sp)
 8002cd4:	da003d15 	stw	r8,244(sp)
 8002cd8:	800c1d80 	call	800c1d8 <__eqdf2>
 8002cdc:	d8c03c17 	ldw	r3,240(sp)
 8002ce0:	da003d17 	ldw	r8,244(sp)
 8002ce4:	103f9826 	beq	r2,zero,8002b48 <__alt_data_end+0xfc002b48>
 8002ce8:	00800044 	movi	r2,1
 8002cec:	10c7c83a 	sub	r3,r2,r3
 8002cf0:	d8c02615 	stw	r3,152(sp)
 8002cf4:	003f9506 	br	8002b4c <__alt_data_end+0xfc002b4c>
 8002cf8:	d9002a17 	ldw	r4,168(sp)
 8002cfc:	d8c03217 	ldw	r3,200(sp)
 8002d00:	20800044 	addi	r2,r4,1
 8002d04:	1885883a 	add	r2,r3,r2
 8002d08:	d8802b15 	stw	r2,172(sp)
 8002d0c:	103dbf0e 	bge	r2,zero,800240c <__alt_data_end+0xfc00240c>
 8002d10:	0005883a 	mov	r2,zero
 8002d14:	003dbd06 	br	800240c <__alt_data_end+0xfc00240c>
 8002d18:	2000201e 	bne	r4,zero,8002d9c <___vfprintf_internal_r+0x222c>
 8002d1c:	9480004c 	andi	r18,r18,1
 8002d20:	90001e1e 	bne	r18,zero,8002d9c <___vfprintf_internal_r+0x222c>
 8002d24:	00800044 	movi	r2,1
 8002d28:	d8802b15 	stw	r2,172(sp)
 8002d2c:	003db706 	br	800240c <__alt_data_end+0xfc00240c>
 8002d30:	00800b44 	movi	r2,45
 8002d34:	05adc83a 	sub	r22,zero,r22
 8002d38:	d8802305 	stb	r2,140(sp)
 8002d3c:	003f3f06 	br	8002a3c <__alt_data_end+0xfc002a3c>
 8002d40:	0005883a 	mov	r2,zero
 8002d44:	003f5206 	br	8002a90 <__alt_data_end+0xfc002a90>
 8002d48:	90a4703a 	and	r18,r18,r2
 8002d4c:	903f4e26 	beq	r18,zero,8002a88 <__alt_data_end+0xfc002a88>
 8002d50:	003f4a06 	br	8002a7c <__alt_data_end+0xfc002a7c>
 8002d54:	00800084 	movi	r2,2
 8002d58:	10c5c83a 	sub	r2,r2,r3
 8002d5c:	003f8406 	br	8002b70 <__alt_data_end+0xfc002b70>
 8002d60:	d9402e17 	ldw	r5,184(sp)
 8002d64:	d9002e17 	ldw	r4,184(sp)
 8002d68:	ac400043 	ldbu	r17,1(r21)
 8002d6c:	29400017 	ldw	r5,0(r5)
 8002d70:	20800104 	addi	r2,r4,4
 8002d74:	d8802e15 	stw	r2,184(sp)
 8002d78:	d9402a15 	stw	r5,168(sp)
 8002d7c:	182b883a 	mov	r21,r3
 8002d80:	283e7b0e 	bge	r5,zero,8002770 <__alt_data_end+0xfc002770>
 8002d84:	8c403fcc 	andi	r17,r17,255
 8002d88:	017fffc4 	movi	r5,-1
 8002d8c:	8c40201c 	xori	r17,r17,128
 8002d90:	d9402a15 	stw	r5,168(sp)
 8002d94:	8c7fe004 	addi	r17,r17,-128
 8002d98:	0037d706 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 8002d9c:	d8c02a17 	ldw	r3,168(sp)
 8002da0:	18c00084 	addi	r3,r3,2
 8002da4:	d8c02b15 	stw	r3,172(sp)
 8002da8:	1805883a 	mov	r2,r3
 8002dac:	183d970e 	bge	r3,zero,800240c <__alt_data_end+0xfc00240c>
 8002db0:	003fd706 	br	8002d10 <__alt_data_end+0xfc002d10>
 8002db4:	0005883a 	mov	r2,zero
 8002db8:	003f8f06 	br	8002bf8 <__alt_data_end+0xfc002bf8>
 8002dbc:	9080004c 	andi	r2,r18,1
 8002dc0:	103f821e 	bne	r2,zero,8002bcc <__alt_data_end+0xfc002bcc>
 8002dc4:	d8802117 	ldw	r2,132(sp)
 8002dc8:	1405c83a 	sub	r2,r2,r16
 8002dcc:	d8803315 	stw	r2,204(sp)
 8002dd0:	b47ef426 	beq	r22,r17,80029a4 <__alt_data_end+0xfc0029a4>
 8002dd4:	dd802617 	ldw	r22,152(sp)
 8002dd8:	003f1206 	br	8002a24 <__alt_data_end+0xfc002a24>
 8002ddc:	d8c02b03 	ldbu	r3,172(sp)
 8002de0:	d8c02785 	stb	r3,158(sp)
 8002de4:	0038df06 	br	8001164 <__alt_data_end+0xfc001164>
 8002de8:	d8c02b03 	ldbu	r3,172(sp)
 8002dec:	d8c02785 	stb	r3,158(sp)
 8002df0:	0038aa06 	br	800109c <__alt_data_end+0xfc00109c>
 8002df4:	d8c02b03 	ldbu	r3,172(sp)
 8002df8:	d8c02785 	stb	r3,158(sp)
 8002dfc:	003a4306 	br	800170c <__alt_data_end+0xfc00170c>
 8002e00:	d8c02b03 	ldbu	r3,172(sp)
 8002e04:	d8c02785 	stb	r3,158(sp)
 8002e08:	003af506 	br	80019e0 <__alt_data_end+0xfc0019e0>
 8002e0c:	0005883a 	mov	r2,zero
 8002e10:	003d7b06 	br	8002400 <__alt_data_end+0xfc002400>
 8002e14:	d8802344 	addi	r2,sp,141
 8002e18:	003f1006 	br	8002a5c <__alt_data_end+0xfc002a5c>
 8002e1c:	d8c02b03 	ldbu	r3,172(sp)
 8002e20:	d8c02785 	stb	r3,158(sp)
 8002e24:	0038fd06 	br	800121c <__alt_data_end+0xfc00121c>
 8002e28:	d8c02b03 	ldbu	r3,172(sp)
 8002e2c:	d8c02785 	stb	r3,158(sp)
 8002e30:	003a9706 	br	8001890 <__alt_data_end+0xfc001890>
 8002e34:	d8c02b03 	ldbu	r3,172(sp)
 8002e38:	d8c02785 	stb	r3,158(sp)
 8002e3c:	003a1806 	br	80016a0 <__alt_data_end+0xfc0016a0>
 8002e40:	d8c02b03 	ldbu	r3,172(sp)
 8002e44:	d8c02785 	stb	r3,158(sp)
 8002e48:	003abe06 	br	8001944 <__alt_data_end+0xfc001944>

08002e4c <__vfprintf_internal>:
 8002e4c:	00820074 	movhi	r2,2049
 8002e50:	1087fd04 	addi	r2,r2,8180
 8002e54:	300f883a 	mov	r7,r6
 8002e58:	280d883a 	mov	r6,r5
 8002e5c:	200b883a 	mov	r5,r4
 8002e60:	11000017 	ldw	r4,0(r2)
 8002e64:	8000b701 	jmpi	8000b70 <___vfprintf_internal_r>

08002e68 <__sbprintf>:
 8002e68:	2880030b 	ldhu	r2,12(r5)
 8002e6c:	2ac01917 	ldw	r11,100(r5)
 8002e70:	2a80038b 	ldhu	r10,14(r5)
 8002e74:	2a400717 	ldw	r9,28(r5)
 8002e78:	2a000917 	ldw	r8,36(r5)
 8002e7c:	defee204 	addi	sp,sp,-1144
 8002e80:	00c10004 	movi	r3,1024
 8002e84:	dc011a15 	stw	r16,1128(sp)
 8002e88:	10bfff4c 	andi	r2,r2,65533
 8002e8c:	2821883a 	mov	r16,r5
 8002e90:	d8cb883a 	add	r5,sp,r3
 8002e94:	dc811c15 	stw	r18,1136(sp)
 8002e98:	dc411b15 	stw	r17,1132(sp)
 8002e9c:	dfc11d15 	stw	ra,1140(sp)
 8002ea0:	2025883a 	mov	r18,r4
 8002ea4:	d881030d 	sth	r2,1036(sp)
 8002ea8:	dac11915 	stw	r11,1124(sp)
 8002eac:	da81038d 	sth	r10,1038(sp)
 8002eb0:	da410715 	stw	r9,1052(sp)
 8002eb4:	da010915 	stw	r8,1060(sp)
 8002eb8:	dec10015 	stw	sp,1024(sp)
 8002ebc:	dec10415 	stw	sp,1040(sp)
 8002ec0:	d8c10215 	stw	r3,1032(sp)
 8002ec4:	d8c10515 	stw	r3,1044(sp)
 8002ec8:	d8010615 	stw	zero,1048(sp)
 8002ecc:	8000b700 	call	8000b70 <___vfprintf_internal_r>
 8002ed0:	1023883a 	mov	r17,r2
 8002ed4:	10000416 	blt	r2,zero,8002ee8 <__sbprintf+0x80>
 8002ed8:	d9410004 	addi	r5,sp,1024
 8002edc:	9009883a 	mov	r4,r18
 8002ee0:	8004b440 	call	8004b44 <_fflush_r>
 8002ee4:	10000d1e 	bne	r2,zero,8002f1c <__sbprintf+0xb4>
 8002ee8:	d881030b 	ldhu	r2,1036(sp)
 8002eec:	1080100c 	andi	r2,r2,64
 8002ef0:	10000326 	beq	r2,zero,8002f00 <__sbprintf+0x98>
 8002ef4:	8080030b 	ldhu	r2,12(r16)
 8002ef8:	10801014 	ori	r2,r2,64
 8002efc:	8080030d 	sth	r2,12(r16)
 8002f00:	8805883a 	mov	r2,r17
 8002f04:	dfc11d17 	ldw	ra,1140(sp)
 8002f08:	dc811c17 	ldw	r18,1136(sp)
 8002f0c:	dc411b17 	ldw	r17,1132(sp)
 8002f10:	dc011a17 	ldw	r16,1128(sp)
 8002f14:	dec11e04 	addi	sp,sp,1144
 8002f18:	f800283a 	ret
 8002f1c:	047fffc4 	movi	r17,-1
 8002f20:	003ff106 	br	8002ee8 <__alt_data_end+0xfc002ee8>

08002f24 <__swsetup_r>:
 8002f24:	00820074 	movhi	r2,2049
 8002f28:	defffd04 	addi	sp,sp,-12
 8002f2c:	1087fd04 	addi	r2,r2,8180
 8002f30:	dc400115 	stw	r17,4(sp)
 8002f34:	2023883a 	mov	r17,r4
 8002f38:	11000017 	ldw	r4,0(r2)
 8002f3c:	dc000015 	stw	r16,0(sp)
 8002f40:	dfc00215 	stw	ra,8(sp)
 8002f44:	2821883a 	mov	r16,r5
 8002f48:	20000226 	beq	r4,zero,8002f54 <__swsetup_r+0x30>
 8002f4c:	20800e17 	ldw	r2,56(r4)
 8002f50:	10003126 	beq	r2,zero,8003018 <__swsetup_r+0xf4>
 8002f54:	8080030b 	ldhu	r2,12(r16)
 8002f58:	10c0020c 	andi	r3,r2,8
 8002f5c:	1009883a 	mov	r4,r2
 8002f60:	18000f26 	beq	r3,zero,8002fa0 <__swsetup_r+0x7c>
 8002f64:	80c00417 	ldw	r3,16(r16)
 8002f68:	18001526 	beq	r3,zero,8002fc0 <__swsetup_r+0x9c>
 8002f6c:	1100004c 	andi	r4,r2,1
 8002f70:	20001c1e 	bne	r4,zero,8002fe4 <__swsetup_r+0xc0>
 8002f74:	1080008c 	andi	r2,r2,2
 8002f78:	1000291e 	bne	r2,zero,8003020 <__swsetup_r+0xfc>
 8002f7c:	80800517 	ldw	r2,20(r16)
 8002f80:	80800215 	stw	r2,8(r16)
 8002f84:	18001c26 	beq	r3,zero,8002ff8 <__swsetup_r+0xd4>
 8002f88:	0005883a 	mov	r2,zero
 8002f8c:	dfc00217 	ldw	ra,8(sp)
 8002f90:	dc400117 	ldw	r17,4(sp)
 8002f94:	dc000017 	ldw	r16,0(sp)
 8002f98:	dec00304 	addi	sp,sp,12
 8002f9c:	f800283a 	ret
 8002fa0:	2080040c 	andi	r2,r4,16
 8002fa4:	10002e26 	beq	r2,zero,8003060 <__swsetup_r+0x13c>
 8002fa8:	2080010c 	andi	r2,r4,4
 8002fac:	10001e1e 	bne	r2,zero,8003028 <__swsetup_r+0x104>
 8002fb0:	80c00417 	ldw	r3,16(r16)
 8002fb4:	20800214 	ori	r2,r4,8
 8002fb8:	8080030d 	sth	r2,12(r16)
 8002fbc:	183feb1e 	bne	r3,zero,8002f6c <__alt_data_end+0xfc002f6c>
 8002fc0:	1100a00c 	andi	r4,r2,640
 8002fc4:	01408004 	movi	r5,512
 8002fc8:	217fe826 	beq	r4,r5,8002f6c <__alt_data_end+0xfc002f6c>
 8002fcc:	800b883a 	mov	r5,r16
 8002fd0:	8809883a 	mov	r4,r17
 8002fd4:	80056180 	call	8005618 <__smakebuf_r>
 8002fd8:	8080030b 	ldhu	r2,12(r16)
 8002fdc:	80c00417 	ldw	r3,16(r16)
 8002fe0:	003fe206 	br	8002f6c <__alt_data_end+0xfc002f6c>
 8002fe4:	80800517 	ldw	r2,20(r16)
 8002fe8:	80000215 	stw	zero,8(r16)
 8002fec:	0085c83a 	sub	r2,zero,r2
 8002ff0:	80800615 	stw	r2,24(r16)
 8002ff4:	183fe41e 	bne	r3,zero,8002f88 <__alt_data_end+0xfc002f88>
 8002ff8:	80c0030b 	ldhu	r3,12(r16)
 8002ffc:	0005883a 	mov	r2,zero
 8003000:	1900200c 	andi	r4,r3,128
 8003004:	203fe126 	beq	r4,zero,8002f8c <__alt_data_end+0xfc002f8c>
 8003008:	18c01014 	ori	r3,r3,64
 800300c:	80c0030d 	sth	r3,12(r16)
 8003010:	00bfffc4 	movi	r2,-1
 8003014:	003fdd06 	br	8002f8c <__alt_data_end+0xfc002f8c>
 8003018:	8004f300 	call	8004f30 <__sinit>
 800301c:	003fcd06 	br	8002f54 <__alt_data_end+0xfc002f54>
 8003020:	0005883a 	mov	r2,zero
 8003024:	003fd606 	br	8002f80 <__alt_data_end+0xfc002f80>
 8003028:	81400c17 	ldw	r5,48(r16)
 800302c:	28000626 	beq	r5,zero,8003048 <__swsetup_r+0x124>
 8003030:	80801004 	addi	r2,r16,64
 8003034:	28800326 	beq	r5,r2,8003044 <__swsetup_r+0x120>
 8003038:	8809883a 	mov	r4,r17
 800303c:	80050a40 	call	80050a4 <_free_r>
 8003040:	8100030b 	ldhu	r4,12(r16)
 8003044:	80000c15 	stw	zero,48(r16)
 8003048:	80c00417 	ldw	r3,16(r16)
 800304c:	00bff6c4 	movi	r2,-37
 8003050:	1108703a 	and	r4,r2,r4
 8003054:	80000115 	stw	zero,4(r16)
 8003058:	80c00015 	stw	r3,0(r16)
 800305c:	003fd506 	br	8002fb4 <__alt_data_end+0xfc002fb4>
 8003060:	00800244 	movi	r2,9
 8003064:	88800015 	stw	r2,0(r17)
 8003068:	20801014 	ori	r2,r4,64
 800306c:	8080030d 	sth	r2,12(r16)
 8003070:	00bfffc4 	movi	r2,-1
 8003074:	003fc506 	br	8002f8c <__alt_data_end+0xfc002f8c>

08003078 <quorem>:
 8003078:	defff204 	addi	sp,sp,-56
 800307c:	ddc00b15 	stw	r23,44(sp)
 8003080:	20800417 	ldw	r2,16(r4)
 8003084:	2dc00417 	ldw	r23,16(r5)
 8003088:	dfc00d15 	stw	ra,52(sp)
 800308c:	df000c15 	stw	fp,48(sp)
 8003090:	dd800a15 	stw	r22,40(sp)
 8003094:	dd400915 	stw	r21,36(sp)
 8003098:	dd000815 	stw	r20,32(sp)
 800309c:	dcc00715 	stw	r19,28(sp)
 80030a0:	dc800615 	stw	r18,24(sp)
 80030a4:	dc400515 	stw	r17,20(sp)
 80030a8:	dc000415 	stw	r16,16(sp)
 80030ac:	15c07a16 	blt	r2,r23,8003298 <quorem+0x220>
 80030b0:	bdffffc4 	addi	r23,r23,-1
 80030b4:	bde9883a 	add	r20,r23,r23
 80030b8:	28c00504 	addi	r3,r5,20
 80030bc:	a529883a 	add	r20,r20,r20
 80030c0:	1d39883a 	add	fp,r3,r20
 80030c4:	24c00504 	addi	r19,r4,20
 80030c8:	d9400215 	stw	r5,8(sp)
 80030cc:	9d29883a 	add	r20,r19,r20
 80030d0:	e1400017 	ldw	r5,0(fp)
 80030d4:	d9000015 	stw	r4,0(sp)
 80030d8:	a1000017 	ldw	r4,0(r20)
 80030dc:	29400044 	addi	r5,r5,1
 80030e0:	d8c00115 	stw	r3,4(sp)
 80030e4:	dd000315 	stw	r20,12(sp)
 80030e8:	800aea00 	call	800aea0 <__udivsi3>
 80030ec:	1025883a 	mov	r18,r2
 80030f0:	10003026 	beq	r2,zero,80031b4 <quorem+0x13c>
 80030f4:	dc400117 	ldw	r17,4(sp)
 80030f8:	9829883a 	mov	r20,r19
 80030fc:	002d883a 	mov	r22,zero
 8003100:	0021883a 	mov	r16,zero
 8003104:	8d400017 	ldw	r21,0(r17)
 8003108:	900b883a 	mov	r5,r18
 800310c:	8c400104 	addi	r17,r17,4
 8003110:	a93fffcc 	andi	r4,r21,65535
 8003114:	80009940 	call	8000994 <__mulsi3>
 8003118:	a808d43a 	srli	r4,r21,16
 800311c:	900b883a 	mov	r5,r18
 8003120:	15ad883a 	add	r22,r2,r22
 8003124:	80009940 	call	8000994 <__mulsi3>
 8003128:	a1000017 	ldw	r4,0(r20)
 800312c:	b00cd43a 	srli	r6,r22,16
 8003130:	b0ffffcc 	andi	r3,r22,65535
 8003134:	217fffcc 	andi	r5,r4,65535
 8003138:	2c21883a 	add	r16,r5,r16
 800313c:	80c7c83a 	sub	r3,r16,r3
 8003140:	2008d43a 	srli	r4,r4,16
 8003144:	1185883a 	add	r2,r2,r6
 8003148:	1821d43a 	srai	r16,r3,16
 800314c:	117fffcc 	andi	r5,r2,65535
 8003150:	2149c83a 	sub	r4,r4,r5
 8003154:	2421883a 	add	r16,r4,r16
 8003158:	8008943a 	slli	r4,r16,16
 800315c:	18ffffcc 	andi	r3,r3,65535
 8003160:	102cd43a 	srli	r22,r2,16
 8003164:	20c8b03a 	or	r4,r4,r3
 8003168:	a1000015 	stw	r4,0(r20)
 800316c:	8021d43a 	srai	r16,r16,16
 8003170:	a5000104 	addi	r20,r20,4
 8003174:	e47fe32e 	bgeu	fp,r17,8003104 <__alt_data_end+0xfc003104>
 8003178:	d8c00317 	ldw	r3,12(sp)
 800317c:	18800017 	ldw	r2,0(r3)
 8003180:	10000c1e 	bne	r2,zero,80031b4 <quorem+0x13c>
 8003184:	18bfff04 	addi	r2,r3,-4
 8003188:	9880082e 	bgeu	r19,r2,80031ac <quorem+0x134>
 800318c:	18ffff17 	ldw	r3,-4(r3)
 8003190:	18000326 	beq	r3,zero,80031a0 <quorem+0x128>
 8003194:	00000506 	br	80031ac <quorem+0x134>
 8003198:	10c00017 	ldw	r3,0(r2)
 800319c:	1800031e 	bne	r3,zero,80031ac <quorem+0x134>
 80031a0:	10bfff04 	addi	r2,r2,-4
 80031a4:	bdffffc4 	addi	r23,r23,-1
 80031a8:	98bffb36 	bltu	r19,r2,8003198 <__alt_data_end+0xfc003198>
 80031ac:	d8c00017 	ldw	r3,0(sp)
 80031b0:	1dc00415 	stw	r23,16(r3)
 80031b4:	d9400217 	ldw	r5,8(sp)
 80031b8:	d9000017 	ldw	r4,0(sp)
 80031bc:	8006b700 	call	8006b70 <__mcmp>
 80031c0:	10002816 	blt	r2,zero,8003264 <quorem+0x1ec>
 80031c4:	dc400117 	ldw	r17,4(sp)
 80031c8:	94800044 	addi	r18,r18,1
 80031cc:	980d883a 	mov	r6,r19
 80031d0:	0007883a 	mov	r3,zero
 80031d4:	31000017 	ldw	r4,0(r6)
 80031d8:	89400017 	ldw	r5,0(r17)
 80031dc:	31800104 	addi	r6,r6,4
 80031e0:	20bfffcc 	andi	r2,r4,65535
 80031e4:	10c7883a 	add	r3,r2,r3
 80031e8:	28bfffcc 	andi	r2,r5,65535
 80031ec:	1885c83a 	sub	r2,r3,r2
 80031f0:	280ad43a 	srli	r5,r5,16
 80031f4:	2008d43a 	srli	r4,r4,16
 80031f8:	1007d43a 	srai	r3,r2,16
 80031fc:	10bfffcc 	andi	r2,r2,65535
 8003200:	2149c83a 	sub	r4,r4,r5
 8003204:	20c9883a 	add	r4,r4,r3
 8003208:	200a943a 	slli	r5,r4,16
 800320c:	8c400104 	addi	r17,r17,4
 8003210:	2007d43a 	srai	r3,r4,16
 8003214:	2884b03a 	or	r2,r5,r2
 8003218:	30bfff15 	stw	r2,-4(r6)
 800321c:	e47fed2e 	bgeu	fp,r17,80031d4 <__alt_data_end+0xfc0031d4>
 8003220:	bdc5883a 	add	r2,r23,r23
 8003224:	1085883a 	add	r2,r2,r2
 8003228:	9887883a 	add	r3,r19,r2
 800322c:	18800017 	ldw	r2,0(r3)
 8003230:	10000c1e 	bne	r2,zero,8003264 <quorem+0x1ec>
 8003234:	18bfff04 	addi	r2,r3,-4
 8003238:	9880082e 	bgeu	r19,r2,800325c <quorem+0x1e4>
 800323c:	18ffff17 	ldw	r3,-4(r3)
 8003240:	18000326 	beq	r3,zero,8003250 <quorem+0x1d8>
 8003244:	00000506 	br	800325c <quorem+0x1e4>
 8003248:	10c00017 	ldw	r3,0(r2)
 800324c:	1800031e 	bne	r3,zero,800325c <quorem+0x1e4>
 8003250:	10bfff04 	addi	r2,r2,-4
 8003254:	bdffffc4 	addi	r23,r23,-1
 8003258:	98bffb36 	bltu	r19,r2,8003248 <__alt_data_end+0xfc003248>
 800325c:	d8c00017 	ldw	r3,0(sp)
 8003260:	1dc00415 	stw	r23,16(r3)
 8003264:	9005883a 	mov	r2,r18
 8003268:	dfc00d17 	ldw	ra,52(sp)
 800326c:	df000c17 	ldw	fp,48(sp)
 8003270:	ddc00b17 	ldw	r23,44(sp)
 8003274:	dd800a17 	ldw	r22,40(sp)
 8003278:	dd400917 	ldw	r21,36(sp)
 800327c:	dd000817 	ldw	r20,32(sp)
 8003280:	dcc00717 	ldw	r19,28(sp)
 8003284:	dc800617 	ldw	r18,24(sp)
 8003288:	dc400517 	ldw	r17,20(sp)
 800328c:	dc000417 	ldw	r16,16(sp)
 8003290:	dec00e04 	addi	sp,sp,56
 8003294:	f800283a 	ret
 8003298:	0005883a 	mov	r2,zero
 800329c:	003ff206 	br	8003268 <__alt_data_end+0xfc003268>

080032a0 <_dtoa_r>:
 80032a0:	20801017 	ldw	r2,64(r4)
 80032a4:	deffde04 	addi	sp,sp,-136
 80032a8:	df002015 	stw	fp,128(sp)
 80032ac:	dcc01b15 	stw	r19,108(sp)
 80032b0:	dc801a15 	stw	r18,104(sp)
 80032b4:	dc401915 	stw	r17,100(sp)
 80032b8:	dc001815 	stw	r16,96(sp)
 80032bc:	dfc02115 	stw	ra,132(sp)
 80032c0:	ddc01f15 	stw	r23,124(sp)
 80032c4:	dd801e15 	stw	r22,120(sp)
 80032c8:	dd401d15 	stw	r21,116(sp)
 80032cc:	dd001c15 	stw	r20,112(sp)
 80032d0:	d9c00315 	stw	r7,12(sp)
 80032d4:	2039883a 	mov	fp,r4
 80032d8:	3023883a 	mov	r17,r6
 80032dc:	2825883a 	mov	r18,r5
 80032e0:	dc002417 	ldw	r16,144(sp)
 80032e4:	3027883a 	mov	r19,r6
 80032e8:	10000826 	beq	r2,zero,800330c <_dtoa_r+0x6c>
 80032ec:	21801117 	ldw	r6,68(r4)
 80032f0:	00c00044 	movi	r3,1
 80032f4:	100b883a 	mov	r5,r2
 80032f8:	1986983a 	sll	r3,r3,r6
 80032fc:	11800115 	stw	r6,4(r2)
 8003300:	10c00215 	stw	r3,8(r2)
 8003304:	80062940 	call	8006294 <_Bfree>
 8003308:	e0001015 	stw	zero,64(fp)
 800330c:	88002e16 	blt	r17,zero,80033c8 <_dtoa_r+0x128>
 8003310:	80000015 	stw	zero,0(r16)
 8003314:	889ffc2c 	andhi	r2,r17,32752
 8003318:	00dffc34 	movhi	r3,32752
 800331c:	10c01c26 	beq	r2,r3,8003390 <_dtoa_r+0xf0>
 8003320:	000d883a 	mov	r6,zero
 8003324:	000f883a 	mov	r7,zero
 8003328:	9009883a 	mov	r4,r18
 800332c:	980b883a 	mov	r5,r19
 8003330:	800c1d80 	call	800c1d8 <__eqdf2>
 8003334:	10002b1e 	bne	r2,zero,80033e4 <_dtoa_r+0x144>
 8003338:	d9c02317 	ldw	r7,140(sp)
 800333c:	00800044 	movi	r2,1
 8003340:	38800015 	stw	r2,0(r7)
 8003344:	d8802517 	ldw	r2,148(sp)
 8003348:	10019e26 	beq	r2,zero,80039c4 <_dtoa_r+0x724>
 800334c:	d8c02517 	ldw	r3,148(sp)
 8003350:	00820074 	movhi	r2,2049
 8003354:	1080a244 	addi	r2,r2,649
 8003358:	18800015 	stw	r2,0(r3)
 800335c:	10bfffc4 	addi	r2,r2,-1
 8003360:	dfc02117 	ldw	ra,132(sp)
 8003364:	df002017 	ldw	fp,128(sp)
 8003368:	ddc01f17 	ldw	r23,124(sp)
 800336c:	dd801e17 	ldw	r22,120(sp)
 8003370:	dd401d17 	ldw	r21,116(sp)
 8003374:	dd001c17 	ldw	r20,112(sp)
 8003378:	dcc01b17 	ldw	r19,108(sp)
 800337c:	dc801a17 	ldw	r18,104(sp)
 8003380:	dc401917 	ldw	r17,100(sp)
 8003384:	dc001817 	ldw	r16,96(sp)
 8003388:	dec02204 	addi	sp,sp,136
 800338c:	f800283a 	ret
 8003390:	d8c02317 	ldw	r3,140(sp)
 8003394:	0089c3c4 	movi	r2,9999
 8003398:	18800015 	stw	r2,0(r3)
 800339c:	90017726 	beq	r18,zero,800397c <_dtoa_r+0x6dc>
 80033a0:	00820074 	movhi	r2,2049
 80033a4:	1080ae04 	addi	r2,r2,696
 80033a8:	d9002517 	ldw	r4,148(sp)
 80033ac:	203fec26 	beq	r4,zero,8003360 <__alt_data_end+0xfc003360>
 80033b0:	10c000c7 	ldb	r3,3(r2)
 80033b4:	1801781e 	bne	r3,zero,8003998 <_dtoa_r+0x6f8>
 80033b8:	10c000c4 	addi	r3,r2,3
 80033bc:	d9802517 	ldw	r6,148(sp)
 80033c0:	30c00015 	stw	r3,0(r6)
 80033c4:	003fe606 	br	8003360 <__alt_data_end+0xfc003360>
 80033c8:	04e00034 	movhi	r19,32768
 80033cc:	9cffffc4 	addi	r19,r19,-1
 80033d0:	00800044 	movi	r2,1
 80033d4:	8ce6703a 	and	r19,r17,r19
 80033d8:	80800015 	stw	r2,0(r16)
 80033dc:	9823883a 	mov	r17,r19
 80033e0:	003fcc06 	br	8003314 <__alt_data_end+0xfc003314>
 80033e4:	d8800204 	addi	r2,sp,8
 80033e8:	d8800015 	stw	r2,0(sp)
 80033ec:	d9c00104 	addi	r7,sp,4
 80033f0:	900b883a 	mov	r5,r18
 80033f4:	980d883a 	mov	r6,r19
 80033f8:	e009883a 	mov	r4,fp
 80033fc:	8820d53a 	srli	r16,r17,20
 8003400:	8006f3c0 	call	8006f3c <__d2b>
 8003404:	d8800915 	stw	r2,36(sp)
 8003408:	8001651e 	bne	r16,zero,80039a0 <_dtoa_r+0x700>
 800340c:	dd800217 	ldw	r22,8(sp)
 8003410:	dc000117 	ldw	r16,4(sp)
 8003414:	00800804 	movi	r2,32
 8003418:	b421883a 	add	r16,r22,r16
 800341c:	80c10c84 	addi	r3,r16,1074
 8003420:	10c2d10e 	bge	r2,r3,8003f68 <_dtoa_r+0xcc8>
 8003424:	00801004 	movi	r2,64
 8003428:	81010484 	addi	r4,r16,1042
 800342c:	10c7c83a 	sub	r3,r2,r3
 8003430:	9108d83a 	srl	r4,r18,r4
 8003434:	88e2983a 	sll	r17,r17,r3
 8003438:	2448b03a 	or	r4,r4,r17
 800343c:	800d6f40 	call	800d6f4 <__floatunsidf>
 8003440:	017f8434 	movhi	r5,65040
 8003444:	01800044 	movi	r6,1
 8003448:	1009883a 	mov	r4,r2
 800344c:	194b883a 	add	r5,r3,r5
 8003450:	843fffc4 	addi	r16,r16,-1
 8003454:	d9801115 	stw	r6,68(sp)
 8003458:	000d883a 	mov	r6,zero
 800345c:	01cffe34 	movhi	r7,16376
 8003460:	800cc9c0 	call	800cc9c <__subdf3>
 8003464:	0198dbf4 	movhi	r6,25455
 8003468:	01cff4f4 	movhi	r7,16339
 800346c:	3190d844 	addi	r6,r6,17249
 8003470:	39e1e9c4 	addi	r7,r7,-30809
 8003474:	1009883a 	mov	r4,r2
 8003478:	180b883a 	mov	r5,r3
 800347c:	800c4300 	call	800c430 <__muldf3>
 8003480:	01a2d874 	movhi	r6,35681
 8003484:	01cff1f4 	movhi	r7,16327
 8003488:	31b22cc4 	addi	r6,r6,-14157
 800348c:	39e28a04 	addi	r7,r7,-30168
 8003490:	180b883a 	mov	r5,r3
 8003494:	1009883a 	mov	r4,r2
 8003498:	800af5c0 	call	800af5c <__adddf3>
 800349c:	8009883a 	mov	r4,r16
 80034a0:	1029883a 	mov	r20,r2
 80034a4:	1823883a 	mov	r17,r3
 80034a8:	800d6180 	call	800d618 <__floatsidf>
 80034ac:	019427f4 	movhi	r6,20639
 80034b0:	01cff4f4 	movhi	r7,16339
 80034b4:	319e7ec4 	addi	r6,r6,31227
 80034b8:	39d104c4 	addi	r7,r7,17427
 80034bc:	1009883a 	mov	r4,r2
 80034c0:	180b883a 	mov	r5,r3
 80034c4:	800c4300 	call	800c430 <__muldf3>
 80034c8:	100d883a 	mov	r6,r2
 80034cc:	180f883a 	mov	r7,r3
 80034d0:	a009883a 	mov	r4,r20
 80034d4:	880b883a 	mov	r5,r17
 80034d8:	800af5c0 	call	800af5c <__adddf3>
 80034dc:	1009883a 	mov	r4,r2
 80034e0:	180b883a 	mov	r5,r3
 80034e4:	1029883a 	mov	r20,r2
 80034e8:	1823883a 	mov	r17,r3
 80034ec:	800d5980 	call	800d598 <__fixdfsi>
 80034f0:	000d883a 	mov	r6,zero
 80034f4:	000f883a 	mov	r7,zero
 80034f8:	a009883a 	mov	r4,r20
 80034fc:	880b883a 	mov	r5,r17
 8003500:	d8800515 	stw	r2,20(sp)
 8003504:	800c33c0 	call	800c33c <__ledf2>
 8003508:	10028716 	blt	r2,zero,8003f28 <_dtoa_r+0xc88>
 800350c:	d8c00517 	ldw	r3,20(sp)
 8003510:	00800584 	movi	r2,22
 8003514:	10c27536 	bltu	r2,r3,8003eec <_dtoa_r+0xc4c>
 8003518:	180490fa 	slli	r2,r3,3
 800351c:	00c20074 	movhi	r3,2049
 8003520:	18c0ca04 	addi	r3,r3,808
 8003524:	1885883a 	add	r2,r3,r2
 8003528:	11000017 	ldw	r4,0(r2)
 800352c:	11400117 	ldw	r5,4(r2)
 8003530:	900d883a 	mov	r6,r18
 8003534:	980f883a 	mov	r7,r19
 8003538:	800c2600 	call	800c260 <__gedf2>
 800353c:	00828d0e 	bge	zero,r2,8003f74 <_dtoa_r+0xcd4>
 8003540:	d9000517 	ldw	r4,20(sp)
 8003544:	d8000e15 	stw	zero,56(sp)
 8003548:	213fffc4 	addi	r4,r4,-1
 800354c:	d9000515 	stw	r4,20(sp)
 8003550:	b42dc83a 	sub	r22,r22,r16
 8003554:	b5bfffc4 	addi	r22,r22,-1
 8003558:	b0026f16 	blt	r22,zero,8003f18 <_dtoa_r+0xc78>
 800355c:	d8000815 	stw	zero,32(sp)
 8003560:	d9c00517 	ldw	r7,20(sp)
 8003564:	38026416 	blt	r7,zero,8003ef8 <_dtoa_r+0xc58>
 8003568:	b1ed883a 	add	r22,r22,r7
 800356c:	d9c00d15 	stw	r7,52(sp)
 8003570:	d8000a15 	stw	zero,40(sp)
 8003574:	d9800317 	ldw	r6,12(sp)
 8003578:	00800244 	movi	r2,9
 800357c:	11811436 	bltu	r2,r6,80039d0 <_dtoa_r+0x730>
 8003580:	00800144 	movi	r2,5
 8003584:	1184e10e 	bge	r2,r6,800490c <_dtoa_r+0x166c>
 8003588:	31bfff04 	addi	r6,r6,-4
 800358c:	d9800315 	stw	r6,12(sp)
 8003590:	0023883a 	mov	r17,zero
 8003594:	d9800317 	ldw	r6,12(sp)
 8003598:	008000c4 	movi	r2,3
 800359c:	30836726 	beq	r6,r2,800433c <_dtoa_r+0x109c>
 80035a0:	1183410e 	bge	r2,r6,80042a8 <_dtoa_r+0x1008>
 80035a4:	d9c00317 	ldw	r7,12(sp)
 80035a8:	00800104 	movi	r2,4
 80035ac:	38827c26 	beq	r7,r2,8003fa0 <_dtoa_r+0xd00>
 80035b0:	00800144 	movi	r2,5
 80035b4:	3884c41e 	bne	r7,r2,80048c8 <_dtoa_r+0x1628>
 80035b8:	00800044 	movi	r2,1
 80035bc:	d8800b15 	stw	r2,44(sp)
 80035c0:	d8c00517 	ldw	r3,20(sp)
 80035c4:	d9002217 	ldw	r4,136(sp)
 80035c8:	1907883a 	add	r3,r3,r4
 80035cc:	19800044 	addi	r6,r3,1
 80035d0:	d8c00c15 	stw	r3,48(sp)
 80035d4:	d9800615 	stw	r6,24(sp)
 80035d8:	0183a40e 	bge	zero,r6,800446c <_dtoa_r+0x11cc>
 80035dc:	d9800617 	ldw	r6,24(sp)
 80035e0:	3021883a 	mov	r16,r6
 80035e4:	e0001115 	stw	zero,68(fp)
 80035e8:	008005c4 	movi	r2,23
 80035ec:	1184c92e 	bgeu	r2,r6,8004914 <_dtoa_r+0x1674>
 80035f0:	00c00044 	movi	r3,1
 80035f4:	00800104 	movi	r2,4
 80035f8:	1085883a 	add	r2,r2,r2
 80035fc:	11000504 	addi	r4,r2,20
 8003600:	180b883a 	mov	r5,r3
 8003604:	18c00044 	addi	r3,r3,1
 8003608:	313ffb2e 	bgeu	r6,r4,80035f8 <__alt_data_end+0xfc0035f8>
 800360c:	e1401115 	stw	r5,68(fp)
 8003610:	e009883a 	mov	r4,fp
 8003614:	80061ec0 	call	80061ec <_Balloc>
 8003618:	d8800715 	stw	r2,28(sp)
 800361c:	e0801015 	stw	r2,64(fp)
 8003620:	00800384 	movi	r2,14
 8003624:	1400f736 	bltu	r2,r16,8003a04 <_dtoa_r+0x764>
 8003628:	8800f626 	beq	r17,zero,8003a04 <_dtoa_r+0x764>
 800362c:	d9c00517 	ldw	r7,20(sp)
 8003630:	01c39a0e 	bge	zero,r7,800449c <_dtoa_r+0x11fc>
 8003634:	388003cc 	andi	r2,r7,15
 8003638:	100490fa 	slli	r2,r2,3
 800363c:	382bd13a 	srai	r21,r7,4
 8003640:	00c20074 	movhi	r3,2049
 8003644:	18c0ca04 	addi	r3,r3,808
 8003648:	1885883a 	add	r2,r3,r2
 800364c:	a8c0040c 	andi	r3,r21,16
 8003650:	12400017 	ldw	r9,0(r2)
 8003654:	12000117 	ldw	r8,4(r2)
 8003658:	18037926 	beq	r3,zero,8004440 <_dtoa_r+0x11a0>
 800365c:	00820074 	movhi	r2,2049
 8003660:	1080c004 	addi	r2,r2,768
 8003664:	11800817 	ldw	r6,32(r2)
 8003668:	11c00917 	ldw	r7,36(r2)
 800366c:	9009883a 	mov	r4,r18
 8003670:	980b883a 	mov	r5,r19
 8003674:	da001715 	stw	r8,92(sp)
 8003678:	da401615 	stw	r9,88(sp)
 800367c:	800b8080 	call	800b808 <__divdf3>
 8003680:	da001717 	ldw	r8,92(sp)
 8003684:	da401617 	ldw	r9,88(sp)
 8003688:	ad4003cc 	andi	r21,r21,15
 800368c:	040000c4 	movi	r16,3
 8003690:	1023883a 	mov	r17,r2
 8003694:	1829883a 	mov	r20,r3
 8003698:	a8001126 	beq	r21,zero,80036e0 <_dtoa_r+0x440>
 800369c:	05c20074 	movhi	r23,2049
 80036a0:	bdc0c004 	addi	r23,r23,768
 80036a4:	4805883a 	mov	r2,r9
 80036a8:	4007883a 	mov	r3,r8
 80036ac:	a980004c 	andi	r6,r21,1
 80036b0:	1009883a 	mov	r4,r2
 80036b4:	a82bd07a 	srai	r21,r21,1
 80036b8:	180b883a 	mov	r5,r3
 80036bc:	30000426 	beq	r6,zero,80036d0 <_dtoa_r+0x430>
 80036c0:	b9800017 	ldw	r6,0(r23)
 80036c4:	b9c00117 	ldw	r7,4(r23)
 80036c8:	84000044 	addi	r16,r16,1
 80036cc:	800c4300 	call	800c430 <__muldf3>
 80036d0:	bdc00204 	addi	r23,r23,8
 80036d4:	a83ff51e 	bne	r21,zero,80036ac <__alt_data_end+0xfc0036ac>
 80036d8:	1013883a 	mov	r9,r2
 80036dc:	1811883a 	mov	r8,r3
 80036e0:	480d883a 	mov	r6,r9
 80036e4:	400f883a 	mov	r7,r8
 80036e8:	8809883a 	mov	r4,r17
 80036ec:	a00b883a 	mov	r5,r20
 80036f0:	800b8080 	call	800b808 <__divdf3>
 80036f4:	d8800f15 	stw	r2,60(sp)
 80036f8:	d8c01015 	stw	r3,64(sp)
 80036fc:	d8c00e17 	ldw	r3,56(sp)
 8003700:	18000626 	beq	r3,zero,800371c <_dtoa_r+0x47c>
 8003704:	d9000f17 	ldw	r4,60(sp)
 8003708:	d9401017 	ldw	r5,64(sp)
 800370c:	000d883a 	mov	r6,zero
 8003710:	01cffc34 	movhi	r7,16368
 8003714:	800c33c0 	call	800c33c <__ledf2>
 8003718:	10040b16 	blt	r2,zero,8004748 <_dtoa_r+0x14a8>
 800371c:	8009883a 	mov	r4,r16
 8003720:	800d6180 	call	800d618 <__floatsidf>
 8003724:	d9800f17 	ldw	r6,60(sp)
 8003728:	d9c01017 	ldw	r7,64(sp)
 800372c:	1009883a 	mov	r4,r2
 8003730:	180b883a 	mov	r5,r3
 8003734:	800c4300 	call	800c430 <__muldf3>
 8003738:	000d883a 	mov	r6,zero
 800373c:	01d00734 	movhi	r7,16412
 8003740:	1009883a 	mov	r4,r2
 8003744:	180b883a 	mov	r5,r3
 8003748:	800af5c0 	call	800af5c <__adddf3>
 800374c:	1021883a 	mov	r16,r2
 8003750:	d8800617 	ldw	r2,24(sp)
 8003754:	047f3034 	movhi	r17,64704
 8003758:	1c63883a 	add	r17,r3,r17
 800375c:	10031826 	beq	r2,zero,80043c0 <_dtoa_r+0x1120>
 8003760:	d8c00517 	ldw	r3,20(sp)
 8003764:	db000617 	ldw	r12,24(sp)
 8003768:	d8c01315 	stw	r3,76(sp)
 800376c:	d9000b17 	ldw	r4,44(sp)
 8003770:	20038f26 	beq	r4,zero,80045b0 <_dtoa_r+0x1310>
 8003774:	60bfffc4 	addi	r2,r12,-1
 8003778:	100490fa 	slli	r2,r2,3
 800377c:	00c20074 	movhi	r3,2049
 8003780:	18c0ca04 	addi	r3,r3,808
 8003784:	1885883a 	add	r2,r3,r2
 8003788:	11800017 	ldw	r6,0(r2)
 800378c:	11c00117 	ldw	r7,4(r2)
 8003790:	d8800717 	ldw	r2,28(sp)
 8003794:	0009883a 	mov	r4,zero
 8003798:	014ff834 	movhi	r5,16352
 800379c:	db001615 	stw	r12,88(sp)
 80037a0:	15c00044 	addi	r23,r2,1
 80037a4:	800b8080 	call	800b808 <__divdf3>
 80037a8:	800d883a 	mov	r6,r16
 80037ac:	880f883a 	mov	r7,r17
 80037b0:	1009883a 	mov	r4,r2
 80037b4:	180b883a 	mov	r5,r3
 80037b8:	800cc9c0 	call	800cc9c <__subdf3>
 80037bc:	d9401017 	ldw	r5,64(sp)
 80037c0:	d9000f17 	ldw	r4,60(sp)
 80037c4:	102b883a 	mov	r21,r2
 80037c8:	d8c01215 	stw	r3,72(sp)
 80037cc:	800d5980 	call	800d598 <__fixdfsi>
 80037d0:	1009883a 	mov	r4,r2
 80037d4:	1029883a 	mov	r20,r2
 80037d8:	800d6180 	call	800d618 <__floatsidf>
 80037dc:	d9000f17 	ldw	r4,60(sp)
 80037e0:	d9401017 	ldw	r5,64(sp)
 80037e4:	100d883a 	mov	r6,r2
 80037e8:	180f883a 	mov	r7,r3
 80037ec:	800cc9c0 	call	800cc9c <__subdf3>
 80037f0:	1823883a 	mov	r17,r3
 80037f4:	d8c00717 	ldw	r3,28(sp)
 80037f8:	d9401217 	ldw	r5,72(sp)
 80037fc:	a2000c04 	addi	r8,r20,48
 8003800:	1021883a 	mov	r16,r2
 8003804:	1a000005 	stb	r8,0(r3)
 8003808:	800d883a 	mov	r6,r16
 800380c:	880f883a 	mov	r7,r17
 8003810:	a809883a 	mov	r4,r21
 8003814:	4029883a 	mov	r20,r8
 8003818:	800c2600 	call	800c260 <__gedf2>
 800381c:	00841d16 	blt	zero,r2,8004894 <_dtoa_r+0x15f4>
 8003820:	800d883a 	mov	r6,r16
 8003824:	880f883a 	mov	r7,r17
 8003828:	0009883a 	mov	r4,zero
 800382c:	014ffc34 	movhi	r5,16368
 8003830:	800cc9c0 	call	800cc9c <__subdf3>
 8003834:	d9401217 	ldw	r5,72(sp)
 8003838:	100d883a 	mov	r6,r2
 800383c:	180f883a 	mov	r7,r3
 8003840:	a809883a 	mov	r4,r21
 8003844:	800c2600 	call	800c260 <__gedf2>
 8003848:	db001617 	ldw	r12,88(sp)
 800384c:	00840e16 	blt	zero,r2,8004888 <_dtoa_r+0x15e8>
 8003850:	00800044 	movi	r2,1
 8003854:	13006b0e 	bge	r2,r12,8003a04 <_dtoa_r+0x764>
 8003858:	d9000717 	ldw	r4,28(sp)
 800385c:	dd800f15 	stw	r22,60(sp)
 8003860:	dcc01015 	stw	r19,64(sp)
 8003864:	2319883a 	add	r12,r4,r12
 8003868:	dcc01217 	ldw	r19,72(sp)
 800386c:	602d883a 	mov	r22,r12
 8003870:	dc801215 	stw	r18,72(sp)
 8003874:	b825883a 	mov	r18,r23
 8003878:	00000906 	br	80038a0 <_dtoa_r+0x600>
 800387c:	800cc9c0 	call	800cc9c <__subdf3>
 8003880:	a80d883a 	mov	r6,r21
 8003884:	980f883a 	mov	r7,r19
 8003888:	1009883a 	mov	r4,r2
 800388c:	180b883a 	mov	r5,r3
 8003890:	800c33c0 	call	800c33c <__ledf2>
 8003894:	1003e816 	blt	r2,zero,8004838 <_dtoa_r+0x1598>
 8003898:	b825883a 	mov	r18,r23
 800389c:	bd83e926 	beq	r23,r22,8004844 <_dtoa_r+0x15a4>
 80038a0:	a809883a 	mov	r4,r21
 80038a4:	980b883a 	mov	r5,r19
 80038a8:	000d883a 	mov	r6,zero
 80038ac:	01d00934 	movhi	r7,16420
 80038b0:	800c4300 	call	800c430 <__muldf3>
 80038b4:	000d883a 	mov	r6,zero
 80038b8:	01d00934 	movhi	r7,16420
 80038bc:	8009883a 	mov	r4,r16
 80038c0:	880b883a 	mov	r5,r17
 80038c4:	102b883a 	mov	r21,r2
 80038c8:	1827883a 	mov	r19,r3
 80038cc:	800c4300 	call	800c430 <__muldf3>
 80038d0:	180b883a 	mov	r5,r3
 80038d4:	1009883a 	mov	r4,r2
 80038d8:	1821883a 	mov	r16,r3
 80038dc:	1023883a 	mov	r17,r2
 80038e0:	800d5980 	call	800d598 <__fixdfsi>
 80038e4:	1009883a 	mov	r4,r2
 80038e8:	1029883a 	mov	r20,r2
 80038ec:	800d6180 	call	800d618 <__floatsidf>
 80038f0:	8809883a 	mov	r4,r17
 80038f4:	800b883a 	mov	r5,r16
 80038f8:	100d883a 	mov	r6,r2
 80038fc:	180f883a 	mov	r7,r3
 8003900:	800cc9c0 	call	800cc9c <__subdf3>
 8003904:	a5000c04 	addi	r20,r20,48
 8003908:	a80d883a 	mov	r6,r21
 800390c:	980f883a 	mov	r7,r19
 8003910:	1009883a 	mov	r4,r2
 8003914:	180b883a 	mov	r5,r3
 8003918:	95000005 	stb	r20,0(r18)
 800391c:	1021883a 	mov	r16,r2
 8003920:	1823883a 	mov	r17,r3
 8003924:	800c33c0 	call	800c33c <__ledf2>
 8003928:	bdc00044 	addi	r23,r23,1
 800392c:	800d883a 	mov	r6,r16
 8003930:	880f883a 	mov	r7,r17
 8003934:	0009883a 	mov	r4,zero
 8003938:	014ffc34 	movhi	r5,16368
 800393c:	103fcf0e 	bge	r2,zero,800387c <__alt_data_end+0xfc00387c>
 8003940:	d8c01317 	ldw	r3,76(sp)
 8003944:	d8c00515 	stw	r3,20(sp)
 8003948:	d9400917 	ldw	r5,36(sp)
 800394c:	e009883a 	mov	r4,fp
 8003950:	80062940 	call	8006294 <_Bfree>
 8003954:	d9000517 	ldw	r4,20(sp)
 8003958:	d9802317 	ldw	r6,140(sp)
 800395c:	d9c02517 	ldw	r7,148(sp)
 8003960:	b8000005 	stb	zero,0(r23)
 8003964:	20800044 	addi	r2,r4,1
 8003968:	30800015 	stw	r2,0(r6)
 800396c:	3802aa26 	beq	r7,zero,8004418 <_dtoa_r+0x1178>
 8003970:	3dc00015 	stw	r23,0(r7)
 8003974:	d8800717 	ldw	r2,28(sp)
 8003978:	003e7906 	br	8003360 <__alt_data_end+0xfc003360>
 800397c:	00800434 	movhi	r2,16
 8003980:	10bfffc4 	addi	r2,r2,-1
 8003984:	88a2703a 	and	r17,r17,r2
 8003988:	883e851e 	bne	r17,zero,80033a0 <__alt_data_end+0xfc0033a0>
 800398c:	00820074 	movhi	r2,2049
 8003990:	1080ab04 	addi	r2,r2,684
 8003994:	003e8406 	br	80033a8 <__alt_data_end+0xfc0033a8>
 8003998:	10c00204 	addi	r3,r2,8
 800399c:	003e8706 	br	80033bc <__alt_data_end+0xfc0033bc>
 80039a0:	01400434 	movhi	r5,16
 80039a4:	297fffc4 	addi	r5,r5,-1
 80039a8:	994a703a 	and	r5,r19,r5
 80039ac:	9009883a 	mov	r4,r18
 80039b0:	843f0044 	addi	r16,r16,-1023
 80039b4:	294ffc34 	orhi	r5,r5,16368
 80039b8:	dd800217 	ldw	r22,8(sp)
 80039bc:	d8001115 	stw	zero,68(sp)
 80039c0:	003ea506 	br	8003458 <__alt_data_end+0xfc003458>
 80039c4:	00820074 	movhi	r2,2049
 80039c8:	1080a204 	addi	r2,r2,648
 80039cc:	003e6406 	br	8003360 <__alt_data_end+0xfc003360>
 80039d0:	e0001115 	stw	zero,68(fp)
 80039d4:	000b883a 	mov	r5,zero
 80039d8:	e009883a 	mov	r4,fp
 80039dc:	80061ec0 	call	80061ec <_Balloc>
 80039e0:	01bfffc4 	movi	r6,-1
 80039e4:	01c00044 	movi	r7,1
 80039e8:	d8800715 	stw	r2,28(sp)
 80039ec:	d9800c15 	stw	r6,48(sp)
 80039f0:	e0801015 	stw	r2,64(fp)
 80039f4:	d8000315 	stw	zero,12(sp)
 80039f8:	d9c00b15 	stw	r7,44(sp)
 80039fc:	d9800615 	stw	r6,24(sp)
 8003a00:	d8002215 	stw	zero,136(sp)
 8003a04:	d8800117 	ldw	r2,4(sp)
 8003a08:	10008916 	blt	r2,zero,8003c30 <_dtoa_r+0x990>
 8003a0c:	d9000517 	ldw	r4,20(sp)
 8003a10:	00c00384 	movi	r3,14
 8003a14:	19008616 	blt	r3,r4,8003c30 <_dtoa_r+0x990>
 8003a18:	200490fa 	slli	r2,r4,3
 8003a1c:	00c20074 	movhi	r3,2049
 8003a20:	d9802217 	ldw	r6,136(sp)
 8003a24:	18c0ca04 	addi	r3,r3,808
 8003a28:	1885883a 	add	r2,r3,r2
 8003a2c:	14000017 	ldw	r16,0(r2)
 8003a30:	14400117 	ldw	r17,4(r2)
 8003a34:	30016316 	blt	r6,zero,8003fc4 <_dtoa_r+0xd24>
 8003a38:	800d883a 	mov	r6,r16
 8003a3c:	880f883a 	mov	r7,r17
 8003a40:	9009883a 	mov	r4,r18
 8003a44:	980b883a 	mov	r5,r19
 8003a48:	800b8080 	call	800b808 <__divdf3>
 8003a4c:	180b883a 	mov	r5,r3
 8003a50:	1009883a 	mov	r4,r2
 8003a54:	800d5980 	call	800d598 <__fixdfsi>
 8003a58:	1009883a 	mov	r4,r2
 8003a5c:	102b883a 	mov	r21,r2
 8003a60:	800d6180 	call	800d618 <__floatsidf>
 8003a64:	800d883a 	mov	r6,r16
 8003a68:	880f883a 	mov	r7,r17
 8003a6c:	1009883a 	mov	r4,r2
 8003a70:	180b883a 	mov	r5,r3
 8003a74:	800c4300 	call	800c430 <__muldf3>
 8003a78:	100d883a 	mov	r6,r2
 8003a7c:	180f883a 	mov	r7,r3
 8003a80:	9009883a 	mov	r4,r18
 8003a84:	980b883a 	mov	r5,r19
 8003a88:	800cc9c0 	call	800cc9c <__subdf3>
 8003a8c:	d9c00717 	ldw	r7,28(sp)
 8003a90:	1009883a 	mov	r4,r2
 8003a94:	a8800c04 	addi	r2,r21,48
 8003a98:	38800005 	stb	r2,0(r7)
 8003a9c:	3dc00044 	addi	r23,r7,1
 8003aa0:	d9c00617 	ldw	r7,24(sp)
 8003aa4:	01800044 	movi	r6,1
 8003aa8:	180b883a 	mov	r5,r3
 8003aac:	2005883a 	mov	r2,r4
 8003ab0:	39803826 	beq	r7,r6,8003b94 <_dtoa_r+0x8f4>
 8003ab4:	000d883a 	mov	r6,zero
 8003ab8:	01d00934 	movhi	r7,16420
 8003abc:	800c4300 	call	800c430 <__muldf3>
 8003ac0:	000d883a 	mov	r6,zero
 8003ac4:	000f883a 	mov	r7,zero
 8003ac8:	1009883a 	mov	r4,r2
 8003acc:	180b883a 	mov	r5,r3
 8003ad0:	1025883a 	mov	r18,r2
 8003ad4:	1827883a 	mov	r19,r3
 8003ad8:	800c1d80 	call	800c1d8 <__eqdf2>
 8003adc:	103f9a26 	beq	r2,zero,8003948 <__alt_data_end+0xfc003948>
 8003ae0:	d9c00617 	ldw	r7,24(sp)
 8003ae4:	d8c00717 	ldw	r3,28(sp)
 8003ae8:	b829883a 	mov	r20,r23
 8003aec:	38bfffc4 	addi	r2,r7,-1
 8003af0:	18ad883a 	add	r22,r3,r2
 8003af4:	00000a06 	br	8003b20 <_dtoa_r+0x880>
 8003af8:	800c4300 	call	800c430 <__muldf3>
 8003afc:	000d883a 	mov	r6,zero
 8003b00:	000f883a 	mov	r7,zero
 8003b04:	1009883a 	mov	r4,r2
 8003b08:	180b883a 	mov	r5,r3
 8003b0c:	1025883a 	mov	r18,r2
 8003b10:	1827883a 	mov	r19,r3
 8003b14:	b829883a 	mov	r20,r23
 8003b18:	800c1d80 	call	800c1d8 <__eqdf2>
 8003b1c:	103f8a26 	beq	r2,zero,8003948 <__alt_data_end+0xfc003948>
 8003b20:	800d883a 	mov	r6,r16
 8003b24:	880f883a 	mov	r7,r17
 8003b28:	9009883a 	mov	r4,r18
 8003b2c:	980b883a 	mov	r5,r19
 8003b30:	800b8080 	call	800b808 <__divdf3>
 8003b34:	180b883a 	mov	r5,r3
 8003b38:	1009883a 	mov	r4,r2
 8003b3c:	800d5980 	call	800d598 <__fixdfsi>
 8003b40:	1009883a 	mov	r4,r2
 8003b44:	102b883a 	mov	r21,r2
 8003b48:	800d6180 	call	800d618 <__floatsidf>
 8003b4c:	800d883a 	mov	r6,r16
 8003b50:	880f883a 	mov	r7,r17
 8003b54:	1009883a 	mov	r4,r2
 8003b58:	180b883a 	mov	r5,r3
 8003b5c:	800c4300 	call	800c430 <__muldf3>
 8003b60:	100d883a 	mov	r6,r2
 8003b64:	180f883a 	mov	r7,r3
 8003b68:	9009883a 	mov	r4,r18
 8003b6c:	980b883a 	mov	r5,r19
 8003b70:	800cc9c0 	call	800cc9c <__subdf3>
 8003b74:	aa000c04 	addi	r8,r21,48
 8003b78:	a2000005 	stb	r8,0(r20)
 8003b7c:	000d883a 	mov	r6,zero
 8003b80:	01d00934 	movhi	r7,16420
 8003b84:	1009883a 	mov	r4,r2
 8003b88:	180b883a 	mov	r5,r3
 8003b8c:	a5c00044 	addi	r23,r20,1
 8003b90:	b53fd91e 	bne	r22,r20,8003af8 <__alt_data_end+0xfc003af8>
 8003b94:	100d883a 	mov	r6,r2
 8003b98:	180f883a 	mov	r7,r3
 8003b9c:	1009883a 	mov	r4,r2
 8003ba0:	180b883a 	mov	r5,r3
 8003ba4:	800af5c0 	call	800af5c <__adddf3>
 8003ba8:	100d883a 	mov	r6,r2
 8003bac:	180f883a 	mov	r7,r3
 8003bb0:	8009883a 	mov	r4,r16
 8003bb4:	880b883a 	mov	r5,r17
 8003bb8:	1027883a 	mov	r19,r2
 8003bbc:	1825883a 	mov	r18,r3
 8003bc0:	800c33c0 	call	800c33c <__ledf2>
 8003bc4:	10000816 	blt	r2,zero,8003be8 <_dtoa_r+0x948>
 8003bc8:	980d883a 	mov	r6,r19
 8003bcc:	900f883a 	mov	r7,r18
 8003bd0:	8009883a 	mov	r4,r16
 8003bd4:	880b883a 	mov	r5,r17
 8003bd8:	800c1d80 	call	800c1d8 <__eqdf2>
 8003bdc:	103f5a1e 	bne	r2,zero,8003948 <__alt_data_end+0xfc003948>
 8003be0:	ad40004c 	andi	r21,r21,1
 8003be4:	a83f5826 	beq	r21,zero,8003948 <__alt_data_end+0xfc003948>
 8003be8:	bd3fffc3 	ldbu	r20,-1(r23)
 8003bec:	b8bfffc4 	addi	r2,r23,-1
 8003bf0:	1007883a 	mov	r3,r2
 8003bf4:	01400e44 	movi	r5,57
 8003bf8:	d9800717 	ldw	r6,28(sp)
 8003bfc:	00000506 	br	8003c14 <_dtoa_r+0x974>
 8003c00:	18ffffc4 	addi	r3,r3,-1
 8003c04:	11824726 	beq	r2,r6,8004524 <_dtoa_r+0x1284>
 8003c08:	1d000003 	ldbu	r20,0(r3)
 8003c0c:	102f883a 	mov	r23,r2
 8003c10:	10bfffc4 	addi	r2,r2,-1
 8003c14:	a1003fcc 	andi	r4,r20,255
 8003c18:	2100201c 	xori	r4,r4,128
 8003c1c:	213fe004 	addi	r4,r4,-128
 8003c20:	217ff726 	beq	r4,r5,8003c00 <__alt_data_end+0xfc003c00>
 8003c24:	a2000044 	addi	r8,r20,1
 8003c28:	12000005 	stb	r8,0(r2)
 8003c2c:	003f4606 	br	8003948 <__alt_data_end+0xfc003948>
 8003c30:	d9000b17 	ldw	r4,44(sp)
 8003c34:	2000c826 	beq	r4,zero,8003f58 <_dtoa_r+0xcb8>
 8003c38:	d9800317 	ldw	r6,12(sp)
 8003c3c:	00c00044 	movi	r3,1
 8003c40:	1980f90e 	bge	r3,r6,8004028 <_dtoa_r+0xd88>
 8003c44:	d8800617 	ldw	r2,24(sp)
 8003c48:	d8c00a17 	ldw	r3,40(sp)
 8003c4c:	157fffc4 	addi	r21,r2,-1
 8003c50:	1d41f316 	blt	r3,r21,8004420 <_dtoa_r+0x1180>
 8003c54:	1d6bc83a 	sub	r21,r3,r21
 8003c58:	d9c00617 	ldw	r7,24(sp)
 8003c5c:	3802aa16 	blt	r7,zero,8004708 <_dtoa_r+0x1468>
 8003c60:	dd000817 	ldw	r20,32(sp)
 8003c64:	d8800617 	ldw	r2,24(sp)
 8003c68:	d8c00817 	ldw	r3,32(sp)
 8003c6c:	01400044 	movi	r5,1
 8003c70:	e009883a 	mov	r4,fp
 8003c74:	1887883a 	add	r3,r3,r2
 8003c78:	d8c00815 	stw	r3,32(sp)
 8003c7c:	b0ad883a 	add	r22,r22,r2
 8003c80:	80066200 	call	8006620 <__i2b>
 8003c84:	1023883a 	mov	r17,r2
 8003c88:	a0000826 	beq	r20,zero,8003cac <_dtoa_r+0xa0c>
 8003c8c:	0580070e 	bge	zero,r22,8003cac <_dtoa_r+0xa0c>
 8003c90:	a005883a 	mov	r2,r20
 8003c94:	b500b916 	blt	r22,r20,8003f7c <_dtoa_r+0xcdc>
 8003c98:	d9000817 	ldw	r4,32(sp)
 8003c9c:	a0a9c83a 	sub	r20,r20,r2
 8003ca0:	b0adc83a 	sub	r22,r22,r2
 8003ca4:	2089c83a 	sub	r4,r4,r2
 8003ca8:	d9000815 	stw	r4,32(sp)
 8003cac:	d9800a17 	ldw	r6,40(sp)
 8003cb0:	0181810e 	bge	zero,r6,80042b8 <_dtoa_r+0x1018>
 8003cb4:	d9c00b17 	ldw	r7,44(sp)
 8003cb8:	3800b326 	beq	r7,zero,8003f88 <_dtoa_r+0xce8>
 8003cbc:	a800b226 	beq	r21,zero,8003f88 <_dtoa_r+0xce8>
 8003cc0:	880b883a 	mov	r5,r17
 8003cc4:	a80d883a 	mov	r6,r21
 8003cc8:	e009883a 	mov	r4,fp
 8003ccc:	80068e80 	call	80068e8 <__pow5mult>
 8003cd0:	d9800917 	ldw	r6,36(sp)
 8003cd4:	100b883a 	mov	r5,r2
 8003cd8:	e009883a 	mov	r4,fp
 8003cdc:	1023883a 	mov	r17,r2
 8003ce0:	800665c0 	call	800665c <__multiply>
 8003ce4:	1021883a 	mov	r16,r2
 8003ce8:	d8800a17 	ldw	r2,40(sp)
 8003cec:	d9400917 	ldw	r5,36(sp)
 8003cf0:	e009883a 	mov	r4,fp
 8003cf4:	1545c83a 	sub	r2,r2,r21
 8003cf8:	d8800a15 	stw	r2,40(sp)
 8003cfc:	80062940 	call	8006294 <_Bfree>
 8003d00:	d8c00a17 	ldw	r3,40(sp)
 8003d04:	18009f1e 	bne	r3,zero,8003f84 <_dtoa_r+0xce4>
 8003d08:	05c00044 	movi	r23,1
 8003d0c:	e009883a 	mov	r4,fp
 8003d10:	b80b883a 	mov	r5,r23
 8003d14:	80066200 	call	8006620 <__i2b>
 8003d18:	d9000d17 	ldw	r4,52(sp)
 8003d1c:	102b883a 	mov	r21,r2
 8003d20:	2000ce26 	beq	r4,zero,800405c <_dtoa_r+0xdbc>
 8003d24:	200d883a 	mov	r6,r4
 8003d28:	100b883a 	mov	r5,r2
 8003d2c:	e009883a 	mov	r4,fp
 8003d30:	80068e80 	call	80068e8 <__pow5mult>
 8003d34:	d9800317 	ldw	r6,12(sp)
 8003d38:	102b883a 	mov	r21,r2
 8003d3c:	b981810e 	bge	r23,r6,8004344 <_dtoa_r+0x10a4>
 8003d40:	0027883a 	mov	r19,zero
 8003d44:	a8800417 	ldw	r2,16(r21)
 8003d48:	05c00804 	movi	r23,32
 8003d4c:	10800104 	addi	r2,r2,4
 8003d50:	1085883a 	add	r2,r2,r2
 8003d54:	1085883a 	add	r2,r2,r2
 8003d58:	a885883a 	add	r2,r21,r2
 8003d5c:	11000017 	ldw	r4,0(r2)
 8003d60:	80065080 	call	8006508 <__hi0bits>
 8003d64:	b885c83a 	sub	r2,r23,r2
 8003d68:	1585883a 	add	r2,r2,r22
 8003d6c:	108007cc 	andi	r2,r2,31
 8003d70:	1000b326 	beq	r2,zero,8004040 <_dtoa_r+0xda0>
 8003d74:	00c00804 	movi	r3,32
 8003d78:	1887c83a 	sub	r3,r3,r2
 8003d7c:	01000104 	movi	r4,4
 8003d80:	20c2cd0e 	bge	r4,r3,80048b8 <_dtoa_r+0x1618>
 8003d84:	00c00704 	movi	r3,28
 8003d88:	1885c83a 	sub	r2,r3,r2
 8003d8c:	d8c00817 	ldw	r3,32(sp)
 8003d90:	a0a9883a 	add	r20,r20,r2
 8003d94:	b0ad883a 	add	r22,r22,r2
 8003d98:	1887883a 	add	r3,r3,r2
 8003d9c:	d8c00815 	stw	r3,32(sp)
 8003da0:	d9800817 	ldw	r6,32(sp)
 8003da4:	0180040e 	bge	zero,r6,8003db8 <_dtoa_r+0xb18>
 8003da8:	800b883a 	mov	r5,r16
 8003dac:	e009883a 	mov	r4,fp
 8003db0:	8006a280 	call	8006a28 <__lshift>
 8003db4:	1021883a 	mov	r16,r2
 8003db8:	0580050e 	bge	zero,r22,8003dd0 <_dtoa_r+0xb30>
 8003dbc:	a80b883a 	mov	r5,r21
 8003dc0:	b00d883a 	mov	r6,r22
 8003dc4:	e009883a 	mov	r4,fp
 8003dc8:	8006a280 	call	8006a28 <__lshift>
 8003dcc:	102b883a 	mov	r21,r2
 8003dd0:	d9c00e17 	ldw	r7,56(sp)
 8003dd4:	3801211e 	bne	r7,zero,800425c <_dtoa_r+0xfbc>
 8003dd8:	d9800617 	ldw	r6,24(sp)
 8003ddc:	0181380e 	bge	zero,r6,80042c0 <_dtoa_r+0x1020>
 8003de0:	d8c00b17 	ldw	r3,44(sp)
 8003de4:	1800ab1e 	bne	r3,zero,8004094 <_dtoa_r+0xdf4>
 8003de8:	dc800717 	ldw	r18,28(sp)
 8003dec:	dcc00617 	ldw	r19,24(sp)
 8003df0:	9029883a 	mov	r20,r18
 8003df4:	00000206 	br	8003e00 <_dtoa_r+0xb60>
 8003df8:	80062bc0 	call	80062bc <__multadd>
 8003dfc:	1021883a 	mov	r16,r2
 8003e00:	a80b883a 	mov	r5,r21
 8003e04:	8009883a 	mov	r4,r16
 8003e08:	80030780 	call	8003078 <quorem>
 8003e0c:	10800c04 	addi	r2,r2,48
 8003e10:	90800005 	stb	r2,0(r18)
 8003e14:	94800044 	addi	r18,r18,1
 8003e18:	9507c83a 	sub	r3,r18,r20
 8003e1c:	000f883a 	mov	r7,zero
 8003e20:	01800284 	movi	r6,10
 8003e24:	800b883a 	mov	r5,r16
 8003e28:	e009883a 	mov	r4,fp
 8003e2c:	1cfff216 	blt	r3,r19,8003df8 <__alt_data_end+0xfc003df8>
 8003e30:	1011883a 	mov	r8,r2
 8003e34:	d8800617 	ldw	r2,24(sp)
 8003e38:	0082370e 	bge	zero,r2,8004718 <_dtoa_r+0x1478>
 8003e3c:	d9000717 	ldw	r4,28(sp)
 8003e40:	0025883a 	mov	r18,zero
 8003e44:	20af883a 	add	r23,r4,r2
 8003e48:	01800044 	movi	r6,1
 8003e4c:	800b883a 	mov	r5,r16
 8003e50:	e009883a 	mov	r4,fp
 8003e54:	da001715 	stw	r8,92(sp)
 8003e58:	8006a280 	call	8006a28 <__lshift>
 8003e5c:	a80b883a 	mov	r5,r21
 8003e60:	1009883a 	mov	r4,r2
 8003e64:	d8800915 	stw	r2,36(sp)
 8003e68:	8006b700 	call	8006b70 <__mcmp>
 8003e6c:	da001717 	ldw	r8,92(sp)
 8003e70:	0081800e 	bge	zero,r2,8004474 <_dtoa_r+0x11d4>
 8003e74:	b93fffc3 	ldbu	r4,-1(r23)
 8003e78:	b8bfffc4 	addi	r2,r23,-1
 8003e7c:	1007883a 	mov	r3,r2
 8003e80:	01800e44 	movi	r6,57
 8003e84:	d9c00717 	ldw	r7,28(sp)
 8003e88:	00000506 	br	8003ea0 <_dtoa_r+0xc00>
 8003e8c:	18ffffc4 	addi	r3,r3,-1
 8003e90:	11c12326 	beq	r2,r7,8004320 <_dtoa_r+0x1080>
 8003e94:	19000003 	ldbu	r4,0(r3)
 8003e98:	102f883a 	mov	r23,r2
 8003e9c:	10bfffc4 	addi	r2,r2,-1
 8003ea0:	21403fcc 	andi	r5,r4,255
 8003ea4:	2940201c 	xori	r5,r5,128
 8003ea8:	297fe004 	addi	r5,r5,-128
 8003eac:	29bff726 	beq	r5,r6,8003e8c <__alt_data_end+0xfc003e8c>
 8003eb0:	21000044 	addi	r4,r4,1
 8003eb4:	11000005 	stb	r4,0(r2)
 8003eb8:	a80b883a 	mov	r5,r21
 8003ebc:	e009883a 	mov	r4,fp
 8003ec0:	80062940 	call	8006294 <_Bfree>
 8003ec4:	883ea026 	beq	r17,zero,8003948 <__alt_data_end+0xfc003948>
 8003ec8:	90000426 	beq	r18,zero,8003edc <_dtoa_r+0xc3c>
 8003ecc:	94400326 	beq	r18,r17,8003edc <_dtoa_r+0xc3c>
 8003ed0:	900b883a 	mov	r5,r18
 8003ed4:	e009883a 	mov	r4,fp
 8003ed8:	80062940 	call	8006294 <_Bfree>
 8003edc:	880b883a 	mov	r5,r17
 8003ee0:	e009883a 	mov	r4,fp
 8003ee4:	80062940 	call	8006294 <_Bfree>
 8003ee8:	003e9706 	br	8003948 <__alt_data_end+0xfc003948>
 8003eec:	01800044 	movi	r6,1
 8003ef0:	d9800e15 	stw	r6,56(sp)
 8003ef4:	003d9606 	br	8003550 <__alt_data_end+0xfc003550>
 8003ef8:	d8800817 	ldw	r2,32(sp)
 8003efc:	d8c00517 	ldw	r3,20(sp)
 8003f00:	d8000d15 	stw	zero,52(sp)
 8003f04:	10c5c83a 	sub	r2,r2,r3
 8003f08:	00c9c83a 	sub	r4,zero,r3
 8003f0c:	d8800815 	stw	r2,32(sp)
 8003f10:	d9000a15 	stw	r4,40(sp)
 8003f14:	003d9706 	br	8003574 <__alt_data_end+0xfc003574>
 8003f18:	05adc83a 	sub	r22,zero,r22
 8003f1c:	dd800815 	stw	r22,32(sp)
 8003f20:	002d883a 	mov	r22,zero
 8003f24:	003d8e06 	br	8003560 <__alt_data_end+0xfc003560>
 8003f28:	d9000517 	ldw	r4,20(sp)
 8003f2c:	800d6180 	call	800d618 <__floatsidf>
 8003f30:	100d883a 	mov	r6,r2
 8003f34:	180f883a 	mov	r7,r3
 8003f38:	a009883a 	mov	r4,r20
 8003f3c:	880b883a 	mov	r5,r17
 8003f40:	800c1d80 	call	800c1d8 <__eqdf2>
 8003f44:	103d7126 	beq	r2,zero,800350c <__alt_data_end+0xfc00350c>
 8003f48:	d9c00517 	ldw	r7,20(sp)
 8003f4c:	39ffffc4 	addi	r7,r7,-1
 8003f50:	d9c00515 	stw	r7,20(sp)
 8003f54:	003d6d06 	br	800350c <__alt_data_end+0xfc00350c>
 8003f58:	dd400a17 	ldw	r21,40(sp)
 8003f5c:	dd000817 	ldw	r20,32(sp)
 8003f60:	0023883a 	mov	r17,zero
 8003f64:	003f4806 	br	8003c88 <__alt_data_end+0xfc003c88>
 8003f68:	10e3c83a 	sub	r17,r2,r3
 8003f6c:	9448983a 	sll	r4,r18,r17
 8003f70:	003d3206 	br	800343c <__alt_data_end+0xfc00343c>
 8003f74:	d8000e15 	stw	zero,56(sp)
 8003f78:	003d7506 	br	8003550 <__alt_data_end+0xfc003550>
 8003f7c:	b005883a 	mov	r2,r22
 8003f80:	003f4506 	br	8003c98 <__alt_data_end+0xfc003c98>
 8003f84:	dc000915 	stw	r16,36(sp)
 8003f88:	d9800a17 	ldw	r6,40(sp)
 8003f8c:	d9400917 	ldw	r5,36(sp)
 8003f90:	e009883a 	mov	r4,fp
 8003f94:	80068e80 	call	80068e8 <__pow5mult>
 8003f98:	1021883a 	mov	r16,r2
 8003f9c:	003f5a06 	br	8003d08 <__alt_data_end+0xfc003d08>
 8003fa0:	01c00044 	movi	r7,1
 8003fa4:	d9c00b15 	stw	r7,44(sp)
 8003fa8:	d8802217 	ldw	r2,136(sp)
 8003fac:	0081280e 	bge	zero,r2,8004450 <_dtoa_r+0x11b0>
 8003fb0:	100d883a 	mov	r6,r2
 8003fb4:	1021883a 	mov	r16,r2
 8003fb8:	d8800c15 	stw	r2,48(sp)
 8003fbc:	d8800615 	stw	r2,24(sp)
 8003fc0:	003d8806 	br	80035e4 <__alt_data_end+0xfc0035e4>
 8003fc4:	d8800617 	ldw	r2,24(sp)
 8003fc8:	00be9b16 	blt	zero,r2,8003a38 <__alt_data_end+0xfc003a38>
 8003fcc:	10010f1e 	bne	r2,zero,800440c <_dtoa_r+0x116c>
 8003fd0:	880b883a 	mov	r5,r17
 8003fd4:	000d883a 	mov	r6,zero
 8003fd8:	01d00534 	movhi	r7,16404
 8003fdc:	8009883a 	mov	r4,r16
 8003fe0:	800c4300 	call	800c430 <__muldf3>
 8003fe4:	900d883a 	mov	r6,r18
 8003fe8:	980f883a 	mov	r7,r19
 8003fec:	1009883a 	mov	r4,r2
 8003ff0:	180b883a 	mov	r5,r3
 8003ff4:	800c2600 	call	800c260 <__gedf2>
 8003ff8:	002b883a 	mov	r21,zero
 8003ffc:	0023883a 	mov	r17,zero
 8004000:	1000bf16 	blt	r2,zero,8004300 <_dtoa_r+0x1060>
 8004004:	d9802217 	ldw	r6,136(sp)
 8004008:	ddc00717 	ldw	r23,28(sp)
 800400c:	018c303a 	nor	r6,zero,r6
 8004010:	d9800515 	stw	r6,20(sp)
 8004014:	a80b883a 	mov	r5,r21
 8004018:	e009883a 	mov	r4,fp
 800401c:	80062940 	call	8006294 <_Bfree>
 8004020:	883e4926 	beq	r17,zero,8003948 <__alt_data_end+0xfc003948>
 8004024:	003fad06 	br	8003edc <__alt_data_end+0xfc003edc>
 8004028:	d9c01117 	ldw	r7,68(sp)
 800402c:	3801bc26 	beq	r7,zero,8004720 <_dtoa_r+0x1480>
 8004030:	10810cc4 	addi	r2,r2,1075
 8004034:	dd400a17 	ldw	r21,40(sp)
 8004038:	dd000817 	ldw	r20,32(sp)
 800403c:	003f0a06 	br	8003c68 <__alt_data_end+0xfc003c68>
 8004040:	00800704 	movi	r2,28
 8004044:	d9000817 	ldw	r4,32(sp)
 8004048:	a0a9883a 	add	r20,r20,r2
 800404c:	b0ad883a 	add	r22,r22,r2
 8004050:	2089883a 	add	r4,r4,r2
 8004054:	d9000815 	stw	r4,32(sp)
 8004058:	003f5106 	br	8003da0 <__alt_data_end+0xfc003da0>
 800405c:	d8c00317 	ldw	r3,12(sp)
 8004060:	b8c1fc0e 	bge	r23,r3,8004854 <_dtoa_r+0x15b4>
 8004064:	0027883a 	mov	r19,zero
 8004068:	b805883a 	mov	r2,r23
 800406c:	003f3e06 	br	8003d68 <__alt_data_end+0xfc003d68>
 8004070:	880b883a 	mov	r5,r17
 8004074:	e009883a 	mov	r4,fp
 8004078:	000f883a 	mov	r7,zero
 800407c:	01800284 	movi	r6,10
 8004080:	80062bc0 	call	80062bc <__multadd>
 8004084:	d9000c17 	ldw	r4,48(sp)
 8004088:	1023883a 	mov	r17,r2
 800408c:	0102040e 	bge	zero,r4,80048a0 <_dtoa_r+0x1600>
 8004090:	d9000615 	stw	r4,24(sp)
 8004094:	0500050e 	bge	zero,r20,80040ac <_dtoa_r+0xe0c>
 8004098:	880b883a 	mov	r5,r17
 800409c:	a00d883a 	mov	r6,r20
 80040a0:	e009883a 	mov	r4,fp
 80040a4:	8006a280 	call	8006a28 <__lshift>
 80040a8:	1023883a 	mov	r17,r2
 80040ac:	9801241e 	bne	r19,zero,8004540 <_dtoa_r+0x12a0>
 80040b0:	8829883a 	mov	r20,r17
 80040b4:	d9000617 	ldw	r4,24(sp)
 80040b8:	dcc00717 	ldw	r19,28(sp)
 80040bc:	9480004c 	andi	r18,r18,1
 80040c0:	20bfffc4 	addi	r2,r4,-1
 80040c4:	9885883a 	add	r2,r19,r2
 80040c8:	d8800415 	stw	r2,16(sp)
 80040cc:	dc800615 	stw	r18,24(sp)
 80040d0:	a80b883a 	mov	r5,r21
 80040d4:	8009883a 	mov	r4,r16
 80040d8:	80030780 	call	8003078 <quorem>
 80040dc:	880b883a 	mov	r5,r17
 80040e0:	8009883a 	mov	r4,r16
 80040e4:	102f883a 	mov	r23,r2
 80040e8:	8006b700 	call	8006b70 <__mcmp>
 80040ec:	a80b883a 	mov	r5,r21
 80040f0:	a00d883a 	mov	r6,r20
 80040f4:	e009883a 	mov	r4,fp
 80040f8:	102d883a 	mov	r22,r2
 80040fc:	8006bd00 	call	8006bd0 <__mdiff>
 8004100:	1007883a 	mov	r3,r2
 8004104:	10800317 	ldw	r2,12(r2)
 8004108:	bc800c04 	addi	r18,r23,48
 800410c:	180b883a 	mov	r5,r3
 8004110:	10004e1e 	bne	r2,zero,800424c <_dtoa_r+0xfac>
 8004114:	8009883a 	mov	r4,r16
 8004118:	d8c01615 	stw	r3,88(sp)
 800411c:	8006b700 	call	8006b70 <__mcmp>
 8004120:	d8c01617 	ldw	r3,88(sp)
 8004124:	e009883a 	mov	r4,fp
 8004128:	d8801615 	stw	r2,88(sp)
 800412c:	180b883a 	mov	r5,r3
 8004130:	80062940 	call	8006294 <_Bfree>
 8004134:	d8801617 	ldw	r2,88(sp)
 8004138:	1000041e 	bne	r2,zero,800414c <_dtoa_r+0xeac>
 800413c:	d9800317 	ldw	r6,12(sp)
 8004140:	3000021e 	bne	r6,zero,800414c <_dtoa_r+0xeac>
 8004144:	d8c00617 	ldw	r3,24(sp)
 8004148:	18003726 	beq	r3,zero,8004228 <_dtoa_r+0xf88>
 800414c:	b0002016 	blt	r22,zero,80041d0 <_dtoa_r+0xf30>
 8004150:	b000041e 	bne	r22,zero,8004164 <_dtoa_r+0xec4>
 8004154:	d9000317 	ldw	r4,12(sp)
 8004158:	2000021e 	bne	r4,zero,8004164 <_dtoa_r+0xec4>
 800415c:	d8c00617 	ldw	r3,24(sp)
 8004160:	18001b26 	beq	r3,zero,80041d0 <_dtoa_r+0xf30>
 8004164:	00810716 	blt	zero,r2,8004584 <_dtoa_r+0x12e4>
 8004168:	d8c00417 	ldw	r3,16(sp)
 800416c:	9d800044 	addi	r22,r19,1
 8004170:	9c800005 	stb	r18,0(r19)
 8004174:	b02f883a 	mov	r23,r22
 8004178:	98c10626 	beq	r19,r3,8004594 <_dtoa_r+0x12f4>
 800417c:	800b883a 	mov	r5,r16
 8004180:	000f883a 	mov	r7,zero
 8004184:	01800284 	movi	r6,10
 8004188:	e009883a 	mov	r4,fp
 800418c:	80062bc0 	call	80062bc <__multadd>
 8004190:	1021883a 	mov	r16,r2
 8004194:	000f883a 	mov	r7,zero
 8004198:	01800284 	movi	r6,10
 800419c:	880b883a 	mov	r5,r17
 80041a0:	e009883a 	mov	r4,fp
 80041a4:	8d002526 	beq	r17,r20,800423c <_dtoa_r+0xf9c>
 80041a8:	80062bc0 	call	80062bc <__multadd>
 80041ac:	a00b883a 	mov	r5,r20
 80041b0:	000f883a 	mov	r7,zero
 80041b4:	01800284 	movi	r6,10
 80041b8:	e009883a 	mov	r4,fp
 80041bc:	1023883a 	mov	r17,r2
 80041c0:	80062bc0 	call	80062bc <__multadd>
 80041c4:	1029883a 	mov	r20,r2
 80041c8:	b027883a 	mov	r19,r22
 80041cc:	003fc006 	br	80040d0 <__alt_data_end+0xfc0040d0>
 80041d0:	9011883a 	mov	r8,r18
 80041d4:	00800e0e 	bge	zero,r2,8004210 <_dtoa_r+0xf70>
 80041d8:	800b883a 	mov	r5,r16
 80041dc:	01800044 	movi	r6,1
 80041e0:	e009883a 	mov	r4,fp
 80041e4:	da001715 	stw	r8,92(sp)
 80041e8:	8006a280 	call	8006a28 <__lshift>
 80041ec:	a80b883a 	mov	r5,r21
 80041f0:	1009883a 	mov	r4,r2
 80041f4:	1021883a 	mov	r16,r2
 80041f8:	8006b700 	call	8006b70 <__mcmp>
 80041fc:	da001717 	ldw	r8,92(sp)
 8004200:	0081960e 	bge	zero,r2,800485c <_dtoa_r+0x15bc>
 8004204:	00800e44 	movi	r2,57
 8004208:	40817026 	beq	r8,r2,80047cc <_dtoa_r+0x152c>
 800420c:	ba000c44 	addi	r8,r23,49
 8004210:	8825883a 	mov	r18,r17
 8004214:	9dc00044 	addi	r23,r19,1
 8004218:	9a000005 	stb	r8,0(r19)
 800421c:	a023883a 	mov	r17,r20
 8004220:	dc000915 	stw	r16,36(sp)
 8004224:	003f2406 	br	8003eb8 <__alt_data_end+0xfc003eb8>
 8004228:	00800e44 	movi	r2,57
 800422c:	9011883a 	mov	r8,r18
 8004230:	90816626 	beq	r18,r2,80047cc <_dtoa_r+0x152c>
 8004234:	05bff516 	blt	zero,r22,800420c <__alt_data_end+0xfc00420c>
 8004238:	003ff506 	br	8004210 <__alt_data_end+0xfc004210>
 800423c:	80062bc0 	call	80062bc <__multadd>
 8004240:	1023883a 	mov	r17,r2
 8004244:	1029883a 	mov	r20,r2
 8004248:	003fdf06 	br	80041c8 <__alt_data_end+0xfc0041c8>
 800424c:	e009883a 	mov	r4,fp
 8004250:	80062940 	call	8006294 <_Bfree>
 8004254:	00800044 	movi	r2,1
 8004258:	003fbc06 	br	800414c <__alt_data_end+0xfc00414c>
 800425c:	a80b883a 	mov	r5,r21
 8004260:	8009883a 	mov	r4,r16
 8004264:	8006b700 	call	8006b70 <__mcmp>
 8004268:	103edb0e 	bge	r2,zero,8003dd8 <__alt_data_end+0xfc003dd8>
 800426c:	800b883a 	mov	r5,r16
 8004270:	000f883a 	mov	r7,zero
 8004274:	01800284 	movi	r6,10
 8004278:	e009883a 	mov	r4,fp
 800427c:	80062bc0 	call	80062bc <__multadd>
 8004280:	1021883a 	mov	r16,r2
 8004284:	d8800517 	ldw	r2,20(sp)
 8004288:	d8c00b17 	ldw	r3,44(sp)
 800428c:	10bfffc4 	addi	r2,r2,-1
 8004290:	d8800515 	stw	r2,20(sp)
 8004294:	183f761e 	bne	r3,zero,8004070 <__alt_data_end+0xfc004070>
 8004298:	d9000c17 	ldw	r4,48(sp)
 800429c:	0101730e 	bge	zero,r4,800486c <_dtoa_r+0x15cc>
 80042a0:	d9000615 	stw	r4,24(sp)
 80042a4:	003ed006 	br	8003de8 <__alt_data_end+0xfc003de8>
 80042a8:	00800084 	movi	r2,2
 80042ac:	3081861e 	bne	r6,r2,80048c8 <_dtoa_r+0x1628>
 80042b0:	d8000b15 	stw	zero,44(sp)
 80042b4:	003f3c06 	br	8003fa8 <__alt_data_end+0xfc003fa8>
 80042b8:	dc000917 	ldw	r16,36(sp)
 80042bc:	003e9206 	br	8003d08 <__alt_data_end+0xfc003d08>
 80042c0:	d9c00317 	ldw	r7,12(sp)
 80042c4:	00800084 	movi	r2,2
 80042c8:	11fec50e 	bge	r2,r7,8003de0 <__alt_data_end+0xfc003de0>
 80042cc:	d9000617 	ldw	r4,24(sp)
 80042d0:	20013c1e 	bne	r4,zero,80047c4 <_dtoa_r+0x1524>
 80042d4:	a80b883a 	mov	r5,r21
 80042d8:	000f883a 	mov	r7,zero
 80042dc:	01800144 	movi	r6,5
 80042e0:	e009883a 	mov	r4,fp
 80042e4:	80062bc0 	call	80062bc <__multadd>
 80042e8:	100b883a 	mov	r5,r2
 80042ec:	8009883a 	mov	r4,r16
 80042f0:	102b883a 	mov	r21,r2
 80042f4:	8006b700 	call	8006b70 <__mcmp>
 80042f8:	dc000915 	stw	r16,36(sp)
 80042fc:	00bf410e 	bge	zero,r2,8004004 <__alt_data_end+0xfc004004>
 8004300:	d9c00717 	ldw	r7,28(sp)
 8004304:	00800c44 	movi	r2,49
 8004308:	38800005 	stb	r2,0(r7)
 800430c:	d8800517 	ldw	r2,20(sp)
 8004310:	3dc00044 	addi	r23,r7,1
 8004314:	10800044 	addi	r2,r2,1
 8004318:	d8800515 	stw	r2,20(sp)
 800431c:	003f3d06 	br	8004014 <__alt_data_end+0xfc004014>
 8004320:	d9800517 	ldw	r6,20(sp)
 8004324:	d9c00717 	ldw	r7,28(sp)
 8004328:	00800c44 	movi	r2,49
 800432c:	31800044 	addi	r6,r6,1
 8004330:	d9800515 	stw	r6,20(sp)
 8004334:	38800005 	stb	r2,0(r7)
 8004338:	003edf06 	br	8003eb8 <__alt_data_end+0xfc003eb8>
 800433c:	d8000b15 	stw	zero,44(sp)
 8004340:	003c9f06 	br	80035c0 <__alt_data_end+0xfc0035c0>
 8004344:	903e7e1e 	bne	r18,zero,8003d40 <__alt_data_end+0xfc003d40>
 8004348:	00800434 	movhi	r2,16
 800434c:	10bfffc4 	addi	r2,r2,-1
 8004350:	9884703a 	and	r2,r19,r2
 8004354:	1000ea1e 	bne	r2,zero,8004700 <_dtoa_r+0x1460>
 8004358:	9cdffc2c 	andhi	r19,r19,32752
 800435c:	9800e826 	beq	r19,zero,8004700 <_dtoa_r+0x1460>
 8004360:	d9c00817 	ldw	r7,32(sp)
 8004364:	b5800044 	addi	r22,r22,1
 8004368:	04c00044 	movi	r19,1
 800436c:	39c00044 	addi	r7,r7,1
 8004370:	d9c00815 	stw	r7,32(sp)
 8004374:	d8800d17 	ldw	r2,52(sp)
 8004378:	103e721e 	bne	r2,zero,8003d44 <__alt_data_end+0xfc003d44>
 800437c:	00800044 	movi	r2,1
 8004380:	003e7906 	br	8003d68 <__alt_data_end+0xfc003d68>
 8004384:	8009883a 	mov	r4,r16
 8004388:	800d6180 	call	800d618 <__floatsidf>
 800438c:	d9800f17 	ldw	r6,60(sp)
 8004390:	d9c01017 	ldw	r7,64(sp)
 8004394:	1009883a 	mov	r4,r2
 8004398:	180b883a 	mov	r5,r3
 800439c:	800c4300 	call	800c430 <__muldf3>
 80043a0:	000d883a 	mov	r6,zero
 80043a4:	01d00734 	movhi	r7,16412
 80043a8:	1009883a 	mov	r4,r2
 80043ac:	180b883a 	mov	r5,r3
 80043b0:	800af5c0 	call	800af5c <__adddf3>
 80043b4:	047f3034 	movhi	r17,64704
 80043b8:	1021883a 	mov	r16,r2
 80043bc:	1c63883a 	add	r17,r3,r17
 80043c0:	d9000f17 	ldw	r4,60(sp)
 80043c4:	d9401017 	ldw	r5,64(sp)
 80043c8:	000d883a 	mov	r6,zero
 80043cc:	01d00534 	movhi	r7,16404
 80043d0:	800cc9c0 	call	800cc9c <__subdf3>
 80043d4:	800d883a 	mov	r6,r16
 80043d8:	880f883a 	mov	r7,r17
 80043dc:	1009883a 	mov	r4,r2
 80043e0:	180b883a 	mov	r5,r3
 80043e4:	102b883a 	mov	r21,r2
 80043e8:	1829883a 	mov	r20,r3
 80043ec:	800c2600 	call	800c260 <__gedf2>
 80043f0:	00806c16 	blt	zero,r2,80045a4 <_dtoa_r+0x1304>
 80043f4:	89e0003c 	xorhi	r7,r17,32768
 80043f8:	800d883a 	mov	r6,r16
 80043fc:	a809883a 	mov	r4,r21
 8004400:	a00b883a 	mov	r5,r20
 8004404:	800c33c0 	call	800c33c <__ledf2>
 8004408:	103d7e0e 	bge	r2,zero,8003a04 <__alt_data_end+0xfc003a04>
 800440c:	002b883a 	mov	r21,zero
 8004410:	0023883a 	mov	r17,zero
 8004414:	003efb06 	br	8004004 <__alt_data_end+0xfc004004>
 8004418:	d8800717 	ldw	r2,28(sp)
 800441c:	003bd006 	br	8003360 <__alt_data_end+0xfc003360>
 8004420:	d9000a17 	ldw	r4,40(sp)
 8004424:	d9800d17 	ldw	r6,52(sp)
 8004428:	dd400a15 	stw	r21,40(sp)
 800442c:	a905c83a 	sub	r2,r21,r4
 8004430:	308d883a 	add	r6,r6,r2
 8004434:	d9800d15 	stw	r6,52(sp)
 8004438:	002b883a 	mov	r21,zero
 800443c:	003e0606 	br	8003c58 <__alt_data_end+0xfc003c58>
 8004440:	9023883a 	mov	r17,r18
 8004444:	9829883a 	mov	r20,r19
 8004448:	04000084 	movi	r16,2
 800444c:	003c9206 	br	8003698 <__alt_data_end+0xfc003698>
 8004450:	04000044 	movi	r16,1
 8004454:	dc000c15 	stw	r16,48(sp)
 8004458:	dc000615 	stw	r16,24(sp)
 800445c:	dc002215 	stw	r16,136(sp)
 8004460:	e0001115 	stw	zero,68(fp)
 8004464:	000b883a 	mov	r5,zero
 8004468:	003c6906 	br	8003610 <__alt_data_end+0xfc003610>
 800446c:	3021883a 	mov	r16,r6
 8004470:	003ffb06 	br	8004460 <__alt_data_end+0xfc004460>
 8004474:	1000021e 	bne	r2,zero,8004480 <_dtoa_r+0x11e0>
 8004478:	4200004c 	andi	r8,r8,1
 800447c:	403e7d1e 	bne	r8,zero,8003e74 <__alt_data_end+0xfc003e74>
 8004480:	01000c04 	movi	r4,48
 8004484:	00000106 	br	800448c <_dtoa_r+0x11ec>
 8004488:	102f883a 	mov	r23,r2
 800448c:	b8bfffc4 	addi	r2,r23,-1
 8004490:	10c00007 	ldb	r3,0(r2)
 8004494:	193ffc26 	beq	r3,r4,8004488 <__alt_data_end+0xfc004488>
 8004498:	003e8706 	br	8003eb8 <__alt_data_end+0xfc003eb8>
 800449c:	d8800517 	ldw	r2,20(sp)
 80044a0:	00a3c83a 	sub	r17,zero,r2
 80044a4:	8800a426 	beq	r17,zero,8004738 <_dtoa_r+0x1498>
 80044a8:	888003cc 	andi	r2,r17,15
 80044ac:	100490fa 	slli	r2,r2,3
 80044b0:	00c20074 	movhi	r3,2049
 80044b4:	18c0ca04 	addi	r3,r3,808
 80044b8:	1885883a 	add	r2,r3,r2
 80044bc:	11800017 	ldw	r6,0(r2)
 80044c0:	11c00117 	ldw	r7,4(r2)
 80044c4:	9009883a 	mov	r4,r18
 80044c8:	980b883a 	mov	r5,r19
 80044cc:	8823d13a 	srai	r17,r17,4
 80044d0:	800c4300 	call	800c430 <__muldf3>
 80044d4:	d8800f15 	stw	r2,60(sp)
 80044d8:	d8c01015 	stw	r3,64(sp)
 80044dc:	8800e826 	beq	r17,zero,8004880 <_dtoa_r+0x15e0>
 80044e0:	05020074 	movhi	r20,2049
 80044e4:	a500c004 	addi	r20,r20,768
 80044e8:	04000084 	movi	r16,2
 80044ec:	8980004c 	andi	r6,r17,1
 80044f0:	1009883a 	mov	r4,r2
 80044f4:	8823d07a 	srai	r17,r17,1
 80044f8:	180b883a 	mov	r5,r3
 80044fc:	30000426 	beq	r6,zero,8004510 <_dtoa_r+0x1270>
 8004500:	a1800017 	ldw	r6,0(r20)
 8004504:	a1c00117 	ldw	r7,4(r20)
 8004508:	84000044 	addi	r16,r16,1
 800450c:	800c4300 	call	800c430 <__muldf3>
 8004510:	a5000204 	addi	r20,r20,8
 8004514:	883ff51e 	bne	r17,zero,80044ec <__alt_data_end+0xfc0044ec>
 8004518:	d8800f15 	stw	r2,60(sp)
 800451c:	d8c01015 	stw	r3,64(sp)
 8004520:	003c7606 	br	80036fc <__alt_data_end+0xfc0036fc>
 8004524:	00c00c04 	movi	r3,48
 8004528:	10c00005 	stb	r3,0(r2)
 800452c:	d8c00517 	ldw	r3,20(sp)
 8004530:	bd3fffc3 	ldbu	r20,-1(r23)
 8004534:	18c00044 	addi	r3,r3,1
 8004538:	d8c00515 	stw	r3,20(sp)
 800453c:	003db906 	br	8003c24 <__alt_data_end+0xfc003c24>
 8004540:	89400117 	ldw	r5,4(r17)
 8004544:	e009883a 	mov	r4,fp
 8004548:	80061ec0 	call	80061ec <_Balloc>
 800454c:	89800417 	ldw	r6,16(r17)
 8004550:	89400304 	addi	r5,r17,12
 8004554:	11000304 	addi	r4,r2,12
 8004558:	31800084 	addi	r6,r6,2
 800455c:	318d883a 	add	r6,r6,r6
 8004560:	318d883a 	add	r6,r6,r6
 8004564:	1027883a 	mov	r19,r2
 8004568:	80009bc0 	call	80009bc <memcpy>
 800456c:	01800044 	movi	r6,1
 8004570:	980b883a 	mov	r5,r19
 8004574:	e009883a 	mov	r4,fp
 8004578:	8006a280 	call	8006a28 <__lshift>
 800457c:	1029883a 	mov	r20,r2
 8004580:	003ecc06 	br	80040b4 <__alt_data_end+0xfc0040b4>
 8004584:	00800e44 	movi	r2,57
 8004588:	90809026 	beq	r18,r2,80047cc <_dtoa_r+0x152c>
 800458c:	92000044 	addi	r8,r18,1
 8004590:	003f1f06 	br	8004210 <__alt_data_end+0xfc004210>
 8004594:	9011883a 	mov	r8,r18
 8004598:	8825883a 	mov	r18,r17
 800459c:	a023883a 	mov	r17,r20
 80045a0:	003e2906 	br	8003e48 <__alt_data_end+0xfc003e48>
 80045a4:	002b883a 	mov	r21,zero
 80045a8:	0023883a 	mov	r17,zero
 80045ac:	003f5406 	br	8004300 <__alt_data_end+0xfc004300>
 80045b0:	61bfffc4 	addi	r6,r12,-1
 80045b4:	300490fa 	slli	r2,r6,3
 80045b8:	00c20074 	movhi	r3,2049
 80045bc:	18c0ca04 	addi	r3,r3,808
 80045c0:	1885883a 	add	r2,r3,r2
 80045c4:	11000017 	ldw	r4,0(r2)
 80045c8:	11400117 	ldw	r5,4(r2)
 80045cc:	d8800717 	ldw	r2,28(sp)
 80045d0:	880f883a 	mov	r7,r17
 80045d4:	d9801215 	stw	r6,72(sp)
 80045d8:	800d883a 	mov	r6,r16
 80045dc:	db001615 	stw	r12,88(sp)
 80045e0:	15c00044 	addi	r23,r2,1
 80045e4:	800c4300 	call	800c430 <__muldf3>
 80045e8:	d9401017 	ldw	r5,64(sp)
 80045ec:	d9000f17 	ldw	r4,60(sp)
 80045f0:	d8c01515 	stw	r3,84(sp)
 80045f4:	d8801415 	stw	r2,80(sp)
 80045f8:	800d5980 	call	800d598 <__fixdfsi>
 80045fc:	1009883a 	mov	r4,r2
 8004600:	1021883a 	mov	r16,r2
 8004604:	800d6180 	call	800d618 <__floatsidf>
 8004608:	d9000f17 	ldw	r4,60(sp)
 800460c:	d9401017 	ldw	r5,64(sp)
 8004610:	100d883a 	mov	r6,r2
 8004614:	180f883a 	mov	r7,r3
 8004618:	800cc9c0 	call	800cc9c <__subdf3>
 800461c:	1829883a 	mov	r20,r3
 8004620:	d8c00717 	ldw	r3,28(sp)
 8004624:	84000c04 	addi	r16,r16,48
 8004628:	1023883a 	mov	r17,r2
 800462c:	1c000005 	stb	r16,0(r3)
 8004630:	db001617 	ldw	r12,88(sp)
 8004634:	00800044 	movi	r2,1
 8004638:	60802226 	beq	r12,r2,80046c4 <_dtoa_r+0x1424>
 800463c:	d9c00717 	ldw	r7,28(sp)
 8004640:	8805883a 	mov	r2,r17
 8004644:	b82b883a 	mov	r21,r23
 8004648:	3b19883a 	add	r12,r7,r12
 800464c:	6023883a 	mov	r17,r12
 8004650:	a007883a 	mov	r3,r20
 8004654:	dc800f15 	stw	r18,60(sp)
 8004658:	000d883a 	mov	r6,zero
 800465c:	01d00934 	movhi	r7,16420
 8004660:	1009883a 	mov	r4,r2
 8004664:	180b883a 	mov	r5,r3
 8004668:	800c4300 	call	800c430 <__muldf3>
 800466c:	180b883a 	mov	r5,r3
 8004670:	1009883a 	mov	r4,r2
 8004674:	1829883a 	mov	r20,r3
 8004678:	1025883a 	mov	r18,r2
 800467c:	800d5980 	call	800d598 <__fixdfsi>
 8004680:	1009883a 	mov	r4,r2
 8004684:	1021883a 	mov	r16,r2
 8004688:	800d6180 	call	800d618 <__floatsidf>
 800468c:	100d883a 	mov	r6,r2
 8004690:	180f883a 	mov	r7,r3
 8004694:	9009883a 	mov	r4,r18
 8004698:	a00b883a 	mov	r5,r20
 800469c:	84000c04 	addi	r16,r16,48
 80046a0:	800cc9c0 	call	800cc9c <__subdf3>
 80046a4:	ad400044 	addi	r21,r21,1
 80046a8:	ac3fffc5 	stb	r16,-1(r21)
 80046ac:	ac7fea1e 	bne	r21,r17,8004658 <__alt_data_end+0xfc004658>
 80046b0:	1023883a 	mov	r17,r2
 80046b4:	d8801217 	ldw	r2,72(sp)
 80046b8:	dc800f17 	ldw	r18,60(sp)
 80046bc:	1829883a 	mov	r20,r3
 80046c0:	b8af883a 	add	r23,r23,r2
 80046c4:	d9001417 	ldw	r4,80(sp)
 80046c8:	d9401517 	ldw	r5,84(sp)
 80046cc:	000d883a 	mov	r6,zero
 80046d0:	01cff834 	movhi	r7,16352
 80046d4:	800af5c0 	call	800af5c <__adddf3>
 80046d8:	880d883a 	mov	r6,r17
 80046dc:	a00f883a 	mov	r7,r20
 80046e0:	1009883a 	mov	r4,r2
 80046e4:	180b883a 	mov	r5,r3
 80046e8:	800c33c0 	call	800c33c <__ledf2>
 80046ec:	10003e0e 	bge	r2,zero,80047e8 <_dtoa_r+0x1548>
 80046f0:	d9001317 	ldw	r4,76(sp)
 80046f4:	bd3fffc3 	ldbu	r20,-1(r23)
 80046f8:	d9000515 	stw	r4,20(sp)
 80046fc:	003d3b06 	br	8003bec <__alt_data_end+0xfc003bec>
 8004700:	0027883a 	mov	r19,zero
 8004704:	003f1b06 	br	8004374 <__alt_data_end+0xfc004374>
 8004708:	d8800817 	ldw	r2,32(sp)
 800470c:	11e9c83a 	sub	r20,r2,r7
 8004710:	0005883a 	mov	r2,zero
 8004714:	003d5406 	br	8003c68 <__alt_data_end+0xfc003c68>
 8004718:	00800044 	movi	r2,1
 800471c:	003dc706 	br	8003e3c <__alt_data_end+0xfc003e3c>
 8004720:	d8c00217 	ldw	r3,8(sp)
 8004724:	00800d84 	movi	r2,54
 8004728:	dd400a17 	ldw	r21,40(sp)
 800472c:	10c5c83a 	sub	r2,r2,r3
 8004730:	dd000817 	ldw	r20,32(sp)
 8004734:	003d4c06 	br	8003c68 <__alt_data_end+0xfc003c68>
 8004738:	dc800f15 	stw	r18,60(sp)
 800473c:	dcc01015 	stw	r19,64(sp)
 8004740:	04000084 	movi	r16,2
 8004744:	003bed06 	br	80036fc <__alt_data_end+0xfc0036fc>
 8004748:	d9000617 	ldw	r4,24(sp)
 800474c:	203f0d26 	beq	r4,zero,8004384 <__alt_data_end+0xfc004384>
 8004750:	d9800c17 	ldw	r6,48(sp)
 8004754:	01bcab0e 	bge	zero,r6,8003a04 <__alt_data_end+0xfc003a04>
 8004758:	d9401017 	ldw	r5,64(sp)
 800475c:	d9000f17 	ldw	r4,60(sp)
 8004760:	000d883a 	mov	r6,zero
 8004764:	01d00934 	movhi	r7,16420
 8004768:	800c4300 	call	800c430 <__muldf3>
 800476c:	81000044 	addi	r4,r16,1
 8004770:	d8800f15 	stw	r2,60(sp)
 8004774:	d8c01015 	stw	r3,64(sp)
 8004778:	800d6180 	call	800d618 <__floatsidf>
 800477c:	d9800f17 	ldw	r6,60(sp)
 8004780:	d9c01017 	ldw	r7,64(sp)
 8004784:	1009883a 	mov	r4,r2
 8004788:	180b883a 	mov	r5,r3
 800478c:	800c4300 	call	800c430 <__muldf3>
 8004790:	01d00734 	movhi	r7,16412
 8004794:	000d883a 	mov	r6,zero
 8004798:	1009883a 	mov	r4,r2
 800479c:	180b883a 	mov	r5,r3
 80047a0:	800af5c0 	call	800af5c <__adddf3>
 80047a4:	d9c00517 	ldw	r7,20(sp)
 80047a8:	047f3034 	movhi	r17,64704
 80047ac:	1021883a 	mov	r16,r2
 80047b0:	39ffffc4 	addi	r7,r7,-1
 80047b4:	d9c01315 	stw	r7,76(sp)
 80047b8:	1c63883a 	add	r17,r3,r17
 80047bc:	db000c17 	ldw	r12,48(sp)
 80047c0:	003bea06 	br	800376c <__alt_data_end+0xfc00376c>
 80047c4:	dc000915 	stw	r16,36(sp)
 80047c8:	003e0e06 	br	8004004 <__alt_data_end+0xfc004004>
 80047cc:	01000e44 	movi	r4,57
 80047d0:	8825883a 	mov	r18,r17
 80047d4:	9dc00044 	addi	r23,r19,1
 80047d8:	99000005 	stb	r4,0(r19)
 80047dc:	a023883a 	mov	r17,r20
 80047e0:	dc000915 	stw	r16,36(sp)
 80047e4:	003da406 	br	8003e78 <__alt_data_end+0xfc003e78>
 80047e8:	d9801417 	ldw	r6,80(sp)
 80047ec:	d9c01517 	ldw	r7,84(sp)
 80047f0:	0009883a 	mov	r4,zero
 80047f4:	014ff834 	movhi	r5,16352
 80047f8:	800cc9c0 	call	800cc9c <__subdf3>
 80047fc:	880d883a 	mov	r6,r17
 8004800:	a00f883a 	mov	r7,r20
 8004804:	1009883a 	mov	r4,r2
 8004808:	180b883a 	mov	r5,r3
 800480c:	800c2600 	call	800c260 <__gedf2>
 8004810:	00bc7c0e 	bge	zero,r2,8003a04 <__alt_data_end+0xfc003a04>
 8004814:	01000c04 	movi	r4,48
 8004818:	00000106 	br	8004820 <_dtoa_r+0x1580>
 800481c:	102f883a 	mov	r23,r2
 8004820:	b8bfffc4 	addi	r2,r23,-1
 8004824:	10c00007 	ldb	r3,0(r2)
 8004828:	193ffc26 	beq	r3,r4,800481c <__alt_data_end+0xfc00481c>
 800482c:	d9801317 	ldw	r6,76(sp)
 8004830:	d9800515 	stw	r6,20(sp)
 8004834:	003c4406 	br	8003948 <__alt_data_end+0xfc003948>
 8004838:	d9801317 	ldw	r6,76(sp)
 800483c:	d9800515 	stw	r6,20(sp)
 8004840:	003cea06 	br	8003bec <__alt_data_end+0xfc003bec>
 8004844:	dd800f17 	ldw	r22,60(sp)
 8004848:	dcc01017 	ldw	r19,64(sp)
 800484c:	dc801217 	ldw	r18,72(sp)
 8004850:	003c6c06 	br	8003a04 <__alt_data_end+0xfc003a04>
 8004854:	903e031e 	bne	r18,zero,8004064 <__alt_data_end+0xfc004064>
 8004858:	003ebb06 	br	8004348 <__alt_data_end+0xfc004348>
 800485c:	103e6c1e 	bne	r2,zero,8004210 <__alt_data_end+0xfc004210>
 8004860:	4080004c 	andi	r2,r8,1
 8004864:	103e6a26 	beq	r2,zero,8004210 <__alt_data_end+0xfc004210>
 8004868:	003e6606 	br	8004204 <__alt_data_end+0xfc004204>
 800486c:	d8c00317 	ldw	r3,12(sp)
 8004870:	00800084 	movi	r2,2
 8004874:	10c02916 	blt	r2,r3,800491c <_dtoa_r+0x167c>
 8004878:	d9000c17 	ldw	r4,48(sp)
 800487c:	003e8806 	br	80042a0 <__alt_data_end+0xfc0042a0>
 8004880:	04000084 	movi	r16,2
 8004884:	003b9d06 	br	80036fc <__alt_data_end+0xfc0036fc>
 8004888:	d9001317 	ldw	r4,76(sp)
 800488c:	d9000515 	stw	r4,20(sp)
 8004890:	003cd606 	br	8003bec <__alt_data_end+0xfc003bec>
 8004894:	d8801317 	ldw	r2,76(sp)
 8004898:	d8800515 	stw	r2,20(sp)
 800489c:	003c2a06 	br	8003948 <__alt_data_end+0xfc003948>
 80048a0:	d9800317 	ldw	r6,12(sp)
 80048a4:	00800084 	movi	r2,2
 80048a8:	11801516 	blt	r2,r6,8004900 <_dtoa_r+0x1660>
 80048ac:	d9c00c17 	ldw	r7,48(sp)
 80048b0:	d9c00615 	stw	r7,24(sp)
 80048b4:	003df706 	br	8004094 <__alt_data_end+0xfc004094>
 80048b8:	193d3926 	beq	r3,r4,8003da0 <__alt_data_end+0xfc003da0>
 80048bc:	00c00f04 	movi	r3,60
 80048c0:	1885c83a 	sub	r2,r3,r2
 80048c4:	003ddf06 	br	8004044 <__alt_data_end+0xfc004044>
 80048c8:	e009883a 	mov	r4,fp
 80048cc:	e0001115 	stw	zero,68(fp)
 80048d0:	000b883a 	mov	r5,zero
 80048d4:	80061ec0 	call	80061ec <_Balloc>
 80048d8:	d8800715 	stw	r2,28(sp)
 80048dc:	d8c00717 	ldw	r3,28(sp)
 80048e0:	00bfffc4 	movi	r2,-1
 80048e4:	01000044 	movi	r4,1
 80048e8:	d8800c15 	stw	r2,48(sp)
 80048ec:	e0c01015 	stw	r3,64(fp)
 80048f0:	d9000b15 	stw	r4,44(sp)
 80048f4:	d8800615 	stw	r2,24(sp)
 80048f8:	d8002215 	stw	zero,136(sp)
 80048fc:	003c4106 	br	8003a04 <__alt_data_end+0xfc003a04>
 8004900:	d8c00c17 	ldw	r3,48(sp)
 8004904:	d8c00615 	stw	r3,24(sp)
 8004908:	003e7006 	br	80042cc <__alt_data_end+0xfc0042cc>
 800490c:	04400044 	movi	r17,1
 8004910:	003b2006 	br	8003594 <__alt_data_end+0xfc003594>
 8004914:	000b883a 	mov	r5,zero
 8004918:	003b3d06 	br	8003610 <__alt_data_end+0xfc003610>
 800491c:	d8800c17 	ldw	r2,48(sp)
 8004920:	d8800615 	stw	r2,24(sp)
 8004924:	003e6906 	br	80042cc <__alt_data_end+0xfc0042cc>

08004928 <__sflush_r>:
 8004928:	2880030b 	ldhu	r2,12(r5)
 800492c:	defffb04 	addi	sp,sp,-20
 8004930:	dcc00315 	stw	r19,12(sp)
 8004934:	dc400115 	stw	r17,4(sp)
 8004938:	dfc00415 	stw	ra,16(sp)
 800493c:	dc800215 	stw	r18,8(sp)
 8004940:	dc000015 	stw	r16,0(sp)
 8004944:	10c0020c 	andi	r3,r2,8
 8004948:	2823883a 	mov	r17,r5
 800494c:	2027883a 	mov	r19,r4
 8004950:	1800311e 	bne	r3,zero,8004a18 <__sflush_r+0xf0>
 8004954:	28c00117 	ldw	r3,4(r5)
 8004958:	10820014 	ori	r2,r2,2048
 800495c:	2880030d 	sth	r2,12(r5)
 8004960:	00c04b0e 	bge	zero,r3,8004a90 <__sflush_r+0x168>
 8004964:	8a000a17 	ldw	r8,40(r17)
 8004968:	40002326 	beq	r8,zero,80049f8 <__sflush_r+0xd0>
 800496c:	9c000017 	ldw	r16,0(r19)
 8004970:	10c4000c 	andi	r3,r2,4096
 8004974:	98000015 	stw	zero,0(r19)
 8004978:	18004826 	beq	r3,zero,8004a9c <__sflush_r+0x174>
 800497c:	89801417 	ldw	r6,80(r17)
 8004980:	10c0010c 	andi	r3,r2,4
 8004984:	18000626 	beq	r3,zero,80049a0 <__sflush_r+0x78>
 8004988:	88c00117 	ldw	r3,4(r17)
 800498c:	88800c17 	ldw	r2,48(r17)
 8004990:	30cdc83a 	sub	r6,r6,r3
 8004994:	10000226 	beq	r2,zero,80049a0 <__sflush_r+0x78>
 8004998:	88800f17 	ldw	r2,60(r17)
 800499c:	308dc83a 	sub	r6,r6,r2
 80049a0:	89400717 	ldw	r5,28(r17)
 80049a4:	000f883a 	mov	r7,zero
 80049a8:	9809883a 	mov	r4,r19
 80049ac:	403ee83a 	callr	r8
 80049b0:	00ffffc4 	movi	r3,-1
 80049b4:	10c04426 	beq	r2,r3,8004ac8 <__sflush_r+0x1a0>
 80049b8:	88c0030b 	ldhu	r3,12(r17)
 80049bc:	89000417 	ldw	r4,16(r17)
 80049c0:	88000115 	stw	zero,4(r17)
 80049c4:	197dffcc 	andi	r5,r3,63487
 80049c8:	8940030d 	sth	r5,12(r17)
 80049cc:	89000015 	stw	r4,0(r17)
 80049d0:	18c4000c 	andi	r3,r3,4096
 80049d4:	18002c1e 	bne	r3,zero,8004a88 <__sflush_r+0x160>
 80049d8:	89400c17 	ldw	r5,48(r17)
 80049dc:	9c000015 	stw	r16,0(r19)
 80049e0:	28000526 	beq	r5,zero,80049f8 <__sflush_r+0xd0>
 80049e4:	88801004 	addi	r2,r17,64
 80049e8:	28800226 	beq	r5,r2,80049f4 <__sflush_r+0xcc>
 80049ec:	9809883a 	mov	r4,r19
 80049f0:	80050a40 	call	80050a4 <_free_r>
 80049f4:	88000c15 	stw	zero,48(r17)
 80049f8:	0005883a 	mov	r2,zero
 80049fc:	dfc00417 	ldw	ra,16(sp)
 8004a00:	dcc00317 	ldw	r19,12(sp)
 8004a04:	dc800217 	ldw	r18,8(sp)
 8004a08:	dc400117 	ldw	r17,4(sp)
 8004a0c:	dc000017 	ldw	r16,0(sp)
 8004a10:	dec00504 	addi	sp,sp,20
 8004a14:	f800283a 	ret
 8004a18:	2c800417 	ldw	r18,16(r5)
 8004a1c:	903ff626 	beq	r18,zero,80049f8 <__alt_data_end+0xfc0049f8>
 8004a20:	2c000017 	ldw	r16,0(r5)
 8004a24:	108000cc 	andi	r2,r2,3
 8004a28:	2c800015 	stw	r18,0(r5)
 8004a2c:	84a1c83a 	sub	r16,r16,r18
 8004a30:	1000131e 	bne	r2,zero,8004a80 <__sflush_r+0x158>
 8004a34:	28800517 	ldw	r2,20(r5)
 8004a38:	88800215 	stw	r2,8(r17)
 8004a3c:	04000316 	blt	zero,r16,8004a4c <__sflush_r+0x124>
 8004a40:	003fed06 	br	80049f8 <__alt_data_end+0xfc0049f8>
 8004a44:	90a5883a 	add	r18,r18,r2
 8004a48:	043feb0e 	bge	zero,r16,80049f8 <__alt_data_end+0xfc0049f8>
 8004a4c:	88800917 	ldw	r2,36(r17)
 8004a50:	89400717 	ldw	r5,28(r17)
 8004a54:	800f883a 	mov	r7,r16
 8004a58:	900d883a 	mov	r6,r18
 8004a5c:	9809883a 	mov	r4,r19
 8004a60:	103ee83a 	callr	r2
 8004a64:	80a1c83a 	sub	r16,r16,r2
 8004a68:	00bff616 	blt	zero,r2,8004a44 <__alt_data_end+0xfc004a44>
 8004a6c:	88c0030b 	ldhu	r3,12(r17)
 8004a70:	00bfffc4 	movi	r2,-1
 8004a74:	18c01014 	ori	r3,r3,64
 8004a78:	88c0030d 	sth	r3,12(r17)
 8004a7c:	003fdf06 	br	80049fc <__alt_data_end+0xfc0049fc>
 8004a80:	0005883a 	mov	r2,zero
 8004a84:	003fec06 	br	8004a38 <__alt_data_end+0xfc004a38>
 8004a88:	88801415 	stw	r2,80(r17)
 8004a8c:	003fd206 	br	80049d8 <__alt_data_end+0xfc0049d8>
 8004a90:	28c00f17 	ldw	r3,60(r5)
 8004a94:	00ffb316 	blt	zero,r3,8004964 <__alt_data_end+0xfc004964>
 8004a98:	003fd706 	br	80049f8 <__alt_data_end+0xfc0049f8>
 8004a9c:	89400717 	ldw	r5,28(r17)
 8004aa0:	000d883a 	mov	r6,zero
 8004aa4:	01c00044 	movi	r7,1
 8004aa8:	9809883a 	mov	r4,r19
 8004aac:	403ee83a 	callr	r8
 8004ab0:	100d883a 	mov	r6,r2
 8004ab4:	00bfffc4 	movi	r2,-1
 8004ab8:	30801426 	beq	r6,r2,8004b0c <__sflush_r+0x1e4>
 8004abc:	8880030b 	ldhu	r2,12(r17)
 8004ac0:	8a000a17 	ldw	r8,40(r17)
 8004ac4:	003fae06 	br	8004980 <__alt_data_end+0xfc004980>
 8004ac8:	98c00017 	ldw	r3,0(r19)
 8004acc:	183fba26 	beq	r3,zero,80049b8 <__alt_data_end+0xfc0049b8>
 8004ad0:	01000744 	movi	r4,29
 8004ad4:	19000626 	beq	r3,r4,8004af0 <__sflush_r+0x1c8>
 8004ad8:	01000584 	movi	r4,22
 8004adc:	19000426 	beq	r3,r4,8004af0 <__sflush_r+0x1c8>
 8004ae0:	88c0030b 	ldhu	r3,12(r17)
 8004ae4:	18c01014 	ori	r3,r3,64
 8004ae8:	88c0030d 	sth	r3,12(r17)
 8004aec:	003fc306 	br	80049fc <__alt_data_end+0xfc0049fc>
 8004af0:	8880030b 	ldhu	r2,12(r17)
 8004af4:	88c00417 	ldw	r3,16(r17)
 8004af8:	88000115 	stw	zero,4(r17)
 8004afc:	10bdffcc 	andi	r2,r2,63487
 8004b00:	8880030d 	sth	r2,12(r17)
 8004b04:	88c00015 	stw	r3,0(r17)
 8004b08:	003fb306 	br	80049d8 <__alt_data_end+0xfc0049d8>
 8004b0c:	98800017 	ldw	r2,0(r19)
 8004b10:	103fea26 	beq	r2,zero,8004abc <__alt_data_end+0xfc004abc>
 8004b14:	00c00744 	movi	r3,29
 8004b18:	10c00226 	beq	r2,r3,8004b24 <__sflush_r+0x1fc>
 8004b1c:	00c00584 	movi	r3,22
 8004b20:	10c0031e 	bne	r2,r3,8004b30 <__sflush_r+0x208>
 8004b24:	9c000015 	stw	r16,0(r19)
 8004b28:	0005883a 	mov	r2,zero
 8004b2c:	003fb306 	br	80049fc <__alt_data_end+0xfc0049fc>
 8004b30:	88c0030b 	ldhu	r3,12(r17)
 8004b34:	3005883a 	mov	r2,r6
 8004b38:	18c01014 	ori	r3,r3,64
 8004b3c:	88c0030d 	sth	r3,12(r17)
 8004b40:	003fae06 	br	80049fc <__alt_data_end+0xfc0049fc>

08004b44 <_fflush_r>:
 8004b44:	defffd04 	addi	sp,sp,-12
 8004b48:	dc000115 	stw	r16,4(sp)
 8004b4c:	dfc00215 	stw	ra,8(sp)
 8004b50:	2021883a 	mov	r16,r4
 8004b54:	20000226 	beq	r4,zero,8004b60 <_fflush_r+0x1c>
 8004b58:	20800e17 	ldw	r2,56(r4)
 8004b5c:	10000c26 	beq	r2,zero,8004b90 <_fflush_r+0x4c>
 8004b60:	2880030f 	ldh	r2,12(r5)
 8004b64:	1000051e 	bne	r2,zero,8004b7c <_fflush_r+0x38>
 8004b68:	0005883a 	mov	r2,zero
 8004b6c:	dfc00217 	ldw	ra,8(sp)
 8004b70:	dc000117 	ldw	r16,4(sp)
 8004b74:	dec00304 	addi	sp,sp,12
 8004b78:	f800283a 	ret
 8004b7c:	8009883a 	mov	r4,r16
 8004b80:	dfc00217 	ldw	ra,8(sp)
 8004b84:	dc000117 	ldw	r16,4(sp)
 8004b88:	dec00304 	addi	sp,sp,12
 8004b8c:	80049281 	jmpi	8004928 <__sflush_r>
 8004b90:	d9400015 	stw	r5,0(sp)
 8004b94:	8004f300 	call	8004f30 <__sinit>
 8004b98:	d9400017 	ldw	r5,0(sp)
 8004b9c:	003ff006 	br	8004b60 <__alt_data_end+0xfc004b60>

08004ba0 <fflush>:
 8004ba0:	20000526 	beq	r4,zero,8004bb8 <fflush+0x18>
 8004ba4:	00820074 	movhi	r2,2049
 8004ba8:	1087fd04 	addi	r2,r2,8180
 8004bac:	200b883a 	mov	r5,r4
 8004bb0:	11000017 	ldw	r4,0(r2)
 8004bb4:	8004b441 	jmpi	8004b44 <_fflush_r>
 8004bb8:	00820074 	movhi	r2,2049
 8004bbc:	1087fc04 	addi	r2,r2,8176
 8004bc0:	11000017 	ldw	r4,0(r2)
 8004bc4:	01420034 	movhi	r5,2048
 8004bc8:	2952d104 	addi	r5,r5,19268
 8004bcc:	80054781 	jmpi	8005478 <_fwalk_reent>

08004bd0 <__fp_unlock>:
 8004bd0:	0005883a 	mov	r2,zero
 8004bd4:	f800283a 	ret

08004bd8 <_cleanup_r>:
 8004bd8:	01420074 	movhi	r5,2049
 8004bdc:	2963a904 	addi	r5,r5,-29020
 8004be0:	80054781 	jmpi	8005478 <_fwalk_reent>

08004be4 <__sinit.part.1>:
 8004be4:	defff704 	addi	sp,sp,-36
 8004be8:	00c20034 	movhi	r3,2048
 8004bec:	dfc00815 	stw	ra,32(sp)
 8004bf0:	ddc00715 	stw	r23,28(sp)
 8004bf4:	dd800615 	stw	r22,24(sp)
 8004bf8:	dd400515 	stw	r21,20(sp)
 8004bfc:	dd000415 	stw	r20,16(sp)
 8004c00:	dcc00315 	stw	r19,12(sp)
 8004c04:	dc800215 	stw	r18,8(sp)
 8004c08:	dc400115 	stw	r17,4(sp)
 8004c0c:	dc000015 	stw	r16,0(sp)
 8004c10:	18d2f604 	addi	r3,r3,19416
 8004c14:	24000117 	ldw	r16,4(r4)
 8004c18:	20c00f15 	stw	r3,60(r4)
 8004c1c:	2080bb04 	addi	r2,r4,748
 8004c20:	00c000c4 	movi	r3,3
 8004c24:	20c0b915 	stw	r3,740(r4)
 8004c28:	2080ba15 	stw	r2,744(r4)
 8004c2c:	2000b815 	stw	zero,736(r4)
 8004c30:	05c00204 	movi	r23,8
 8004c34:	00800104 	movi	r2,4
 8004c38:	2025883a 	mov	r18,r4
 8004c3c:	b80d883a 	mov	r6,r23
 8004c40:	81001704 	addi	r4,r16,92
 8004c44:	000b883a 	mov	r5,zero
 8004c48:	80000015 	stw	zero,0(r16)
 8004c4c:	80000115 	stw	zero,4(r16)
 8004c50:	80000215 	stw	zero,8(r16)
 8004c54:	8080030d 	sth	r2,12(r16)
 8004c58:	80001915 	stw	zero,100(r16)
 8004c5c:	8000038d 	sth	zero,14(r16)
 8004c60:	80000415 	stw	zero,16(r16)
 8004c64:	80000515 	stw	zero,20(r16)
 8004c68:	80000615 	stw	zero,24(r16)
 8004c6c:	80060c40 	call	80060c4 <memset>
 8004c70:	05820034 	movhi	r22,2048
 8004c74:	94400217 	ldw	r17,8(r18)
 8004c78:	05420034 	movhi	r21,2048
 8004c7c:	05020034 	movhi	r20,2048
 8004c80:	04c20034 	movhi	r19,2048
 8004c84:	b59cdb04 	addi	r22,r22,29548
 8004c88:	ad5cf204 	addi	r21,r21,29640
 8004c8c:	a51d1104 	addi	r20,r20,29764
 8004c90:	9cdd2804 	addi	r19,r19,29856
 8004c94:	85800815 	stw	r22,32(r16)
 8004c98:	85400915 	stw	r21,36(r16)
 8004c9c:	85000a15 	stw	r20,40(r16)
 8004ca0:	84c00b15 	stw	r19,44(r16)
 8004ca4:	84000715 	stw	r16,28(r16)
 8004ca8:	00800284 	movi	r2,10
 8004cac:	8880030d 	sth	r2,12(r17)
 8004cb0:	00800044 	movi	r2,1
 8004cb4:	b80d883a 	mov	r6,r23
 8004cb8:	89001704 	addi	r4,r17,92
 8004cbc:	000b883a 	mov	r5,zero
 8004cc0:	88000015 	stw	zero,0(r17)
 8004cc4:	88000115 	stw	zero,4(r17)
 8004cc8:	88000215 	stw	zero,8(r17)
 8004ccc:	88001915 	stw	zero,100(r17)
 8004cd0:	8880038d 	sth	r2,14(r17)
 8004cd4:	88000415 	stw	zero,16(r17)
 8004cd8:	88000515 	stw	zero,20(r17)
 8004cdc:	88000615 	stw	zero,24(r17)
 8004ce0:	80060c40 	call	80060c4 <memset>
 8004ce4:	94000317 	ldw	r16,12(r18)
 8004ce8:	00800484 	movi	r2,18
 8004cec:	8c400715 	stw	r17,28(r17)
 8004cf0:	8d800815 	stw	r22,32(r17)
 8004cf4:	8d400915 	stw	r21,36(r17)
 8004cf8:	8d000a15 	stw	r20,40(r17)
 8004cfc:	8cc00b15 	stw	r19,44(r17)
 8004d00:	8080030d 	sth	r2,12(r16)
 8004d04:	00800084 	movi	r2,2
 8004d08:	80000015 	stw	zero,0(r16)
 8004d0c:	80000115 	stw	zero,4(r16)
 8004d10:	80000215 	stw	zero,8(r16)
 8004d14:	80001915 	stw	zero,100(r16)
 8004d18:	8080038d 	sth	r2,14(r16)
 8004d1c:	80000415 	stw	zero,16(r16)
 8004d20:	80000515 	stw	zero,20(r16)
 8004d24:	80000615 	stw	zero,24(r16)
 8004d28:	b80d883a 	mov	r6,r23
 8004d2c:	000b883a 	mov	r5,zero
 8004d30:	81001704 	addi	r4,r16,92
 8004d34:	80060c40 	call	80060c4 <memset>
 8004d38:	00800044 	movi	r2,1
 8004d3c:	84000715 	stw	r16,28(r16)
 8004d40:	85800815 	stw	r22,32(r16)
 8004d44:	85400915 	stw	r21,36(r16)
 8004d48:	85000a15 	stw	r20,40(r16)
 8004d4c:	84c00b15 	stw	r19,44(r16)
 8004d50:	90800e15 	stw	r2,56(r18)
 8004d54:	dfc00817 	ldw	ra,32(sp)
 8004d58:	ddc00717 	ldw	r23,28(sp)
 8004d5c:	dd800617 	ldw	r22,24(sp)
 8004d60:	dd400517 	ldw	r21,20(sp)
 8004d64:	dd000417 	ldw	r20,16(sp)
 8004d68:	dcc00317 	ldw	r19,12(sp)
 8004d6c:	dc800217 	ldw	r18,8(sp)
 8004d70:	dc400117 	ldw	r17,4(sp)
 8004d74:	dc000017 	ldw	r16,0(sp)
 8004d78:	dec00904 	addi	sp,sp,36
 8004d7c:	f800283a 	ret

08004d80 <__fp_lock>:
 8004d80:	0005883a 	mov	r2,zero
 8004d84:	f800283a 	ret

08004d88 <__sfmoreglue>:
 8004d88:	defffc04 	addi	sp,sp,-16
 8004d8c:	dc800215 	stw	r18,8(sp)
 8004d90:	2825883a 	mov	r18,r5
 8004d94:	dc000015 	stw	r16,0(sp)
 8004d98:	01401a04 	movi	r5,104
 8004d9c:	2021883a 	mov	r16,r4
 8004da0:	913fffc4 	addi	r4,r18,-1
 8004da4:	dfc00315 	stw	ra,12(sp)
 8004da8:	dc400115 	stw	r17,4(sp)
 8004dac:	80009940 	call	8000994 <__mulsi3>
 8004db0:	8009883a 	mov	r4,r16
 8004db4:	11401d04 	addi	r5,r2,116
 8004db8:	1023883a 	mov	r17,r2
 8004dbc:	80057d40 	call	80057d4 <_malloc_r>
 8004dc0:	1021883a 	mov	r16,r2
 8004dc4:	10000726 	beq	r2,zero,8004de4 <__sfmoreglue+0x5c>
 8004dc8:	11000304 	addi	r4,r2,12
 8004dcc:	10000015 	stw	zero,0(r2)
 8004dd0:	14800115 	stw	r18,4(r2)
 8004dd4:	11000215 	stw	r4,8(r2)
 8004dd8:	89801a04 	addi	r6,r17,104
 8004ddc:	000b883a 	mov	r5,zero
 8004de0:	80060c40 	call	80060c4 <memset>
 8004de4:	8005883a 	mov	r2,r16
 8004de8:	dfc00317 	ldw	ra,12(sp)
 8004dec:	dc800217 	ldw	r18,8(sp)
 8004df0:	dc400117 	ldw	r17,4(sp)
 8004df4:	dc000017 	ldw	r16,0(sp)
 8004df8:	dec00404 	addi	sp,sp,16
 8004dfc:	f800283a 	ret

08004e00 <__sfp>:
 8004e00:	defffb04 	addi	sp,sp,-20
 8004e04:	dc000015 	stw	r16,0(sp)
 8004e08:	04020074 	movhi	r16,2049
 8004e0c:	8407fc04 	addi	r16,r16,8176
 8004e10:	dcc00315 	stw	r19,12(sp)
 8004e14:	2027883a 	mov	r19,r4
 8004e18:	81000017 	ldw	r4,0(r16)
 8004e1c:	dfc00415 	stw	ra,16(sp)
 8004e20:	dc800215 	stw	r18,8(sp)
 8004e24:	20800e17 	ldw	r2,56(r4)
 8004e28:	dc400115 	stw	r17,4(sp)
 8004e2c:	1000021e 	bne	r2,zero,8004e38 <__sfp+0x38>
 8004e30:	8004be40 	call	8004be4 <__sinit.part.1>
 8004e34:	81000017 	ldw	r4,0(r16)
 8004e38:	2480b804 	addi	r18,r4,736
 8004e3c:	047fffc4 	movi	r17,-1
 8004e40:	91000117 	ldw	r4,4(r18)
 8004e44:	94000217 	ldw	r16,8(r18)
 8004e48:	213fffc4 	addi	r4,r4,-1
 8004e4c:	20000a16 	blt	r4,zero,8004e78 <__sfp+0x78>
 8004e50:	8080030f 	ldh	r2,12(r16)
 8004e54:	10000c26 	beq	r2,zero,8004e88 <__sfp+0x88>
 8004e58:	80c01d04 	addi	r3,r16,116
 8004e5c:	00000206 	br	8004e68 <__sfp+0x68>
 8004e60:	18bfe60f 	ldh	r2,-104(r3)
 8004e64:	10000826 	beq	r2,zero,8004e88 <__sfp+0x88>
 8004e68:	213fffc4 	addi	r4,r4,-1
 8004e6c:	1c3ffd04 	addi	r16,r3,-12
 8004e70:	18c01a04 	addi	r3,r3,104
 8004e74:	247ffa1e 	bne	r4,r17,8004e60 <__alt_data_end+0xfc004e60>
 8004e78:	90800017 	ldw	r2,0(r18)
 8004e7c:	10001d26 	beq	r2,zero,8004ef4 <__sfp+0xf4>
 8004e80:	1025883a 	mov	r18,r2
 8004e84:	003fee06 	br	8004e40 <__alt_data_end+0xfc004e40>
 8004e88:	00bfffc4 	movi	r2,-1
 8004e8c:	8080038d 	sth	r2,14(r16)
 8004e90:	00800044 	movi	r2,1
 8004e94:	8080030d 	sth	r2,12(r16)
 8004e98:	80001915 	stw	zero,100(r16)
 8004e9c:	80000015 	stw	zero,0(r16)
 8004ea0:	80000215 	stw	zero,8(r16)
 8004ea4:	80000115 	stw	zero,4(r16)
 8004ea8:	80000415 	stw	zero,16(r16)
 8004eac:	80000515 	stw	zero,20(r16)
 8004eb0:	80000615 	stw	zero,24(r16)
 8004eb4:	01800204 	movi	r6,8
 8004eb8:	000b883a 	mov	r5,zero
 8004ebc:	81001704 	addi	r4,r16,92
 8004ec0:	80060c40 	call	80060c4 <memset>
 8004ec4:	8005883a 	mov	r2,r16
 8004ec8:	80000c15 	stw	zero,48(r16)
 8004ecc:	80000d15 	stw	zero,52(r16)
 8004ed0:	80001115 	stw	zero,68(r16)
 8004ed4:	80001215 	stw	zero,72(r16)
 8004ed8:	dfc00417 	ldw	ra,16(sp)
 8004edc:	dcc00317 	ldw	r19,12(sp)
 8004ee0:	dc800217 	ldw	r18,8(sp)
 8004ee4:	dc400117 	ldw	r17,4(sp)
 8004ee8:	dc000017 	ldw	r16,0(sp)
 8004eec:	dec00504 	addi	sp,sp,20
 8004ef0:	f800283a 	ret
 8004ef4:	01400104 	movi	r5,4
 8004ef8:	9809883a 	mov	r4,r19
 8004efc:	8004d880 	call	8004d88 <__sfmoreglue>
 8004f00:	90800015 	stw	r2,0(r18)
 8004f04:	103fde1e 	bne	r2,zero,8004e80 <__alt_data_end+0xfc004e80>
 8004f08:	00800304 	movi	r2,12
 8004f0c:	98800015 	stw	r2,0(r19)
 8004f10:	0005883a 	mov	r2,zero
 8004f14:	003ff006 	br	8004ed8 <__alt_data_end+0xfc004ed8>

08004f18 <_cleanup>:
 8004f18:	00820074 	movhi	r2,2049
 8004f1c:	1087fc04 	addi	r2,r2,8176
 8004f20:	11000017 	ldw	r4,0(r2)
 8004f24:	01420074 	movhi	r5,2049
 8004f28:	2963a904 	addi	r5,r5,-29020
 8004f2c:	80054781 	jmpi	8005478 <_fwalk_reent>

08004f30 <__sinit>:
 8004f30:	20800e17 	ldw	r2,56(r4)
 8004f34:	10000126 	beq	r2,zero,8004f3c <__sinit+0xc>
 8004f38:	f800283a 	ret
 8004f3c:	8004be41 	jmpi	8004be4 <__sinit.part.1>

08004f40 <__sfp_lock_acquire>:
 8004f40:	f800283a 	ret

08004f44 <__sfp_lock_release>:
 8004f44:	f800283a 	ret

08004f48 <__sinit_lock_acquire>:
 8004f48:	f800283a 	ret

08004f4c <__sinit_lock_release>:
 8004f4c:	f800283a 	ret

08004f50 <__fp_lock_all>:
 8004f50:	00820074 	movhi	r2,2049
 8004f54:	1087fd04 	addi	r2,r2,8180
 8004f58:	11000017 	ldw	r4,0(r2)
 8004f5c:	01420034 	movhi	r5,2048
 8004f60:	29536004 	addi	r5,r5,19840
 8004f64:	80053b41 	jmpi	80053b4 <_fwalk>

08004f68 <__fp_unlock_all>:
 8004f68:	00820074 	movhi	r2,2049
 8004f6c:	1087fd04 	addi	r2,r2,8180
 8004f70:	11000017 	ldw	r4,0(r2)
 8004f74:	01420034 	movhi	r5,2048
 8004f78:	2952f404 	addi	r5,r5,19408
 8004f7c:	80053b41 	jmpi	80053b4 <_fwalk>

08004f80 <_malloc_trim_r>:
 8004f80:	defffb04 	addi	sp,sp,-20
 8004f84:	dcc00315 	stw	r19,12(sp)
 8004f88:	04c20074 	movhi	r19,2049
 8004f8c:	dc800215 	stw	r18,8(sp)
 8004f90:	dc400115 	stw	r17,4(sp)
 8004f94:	dc000015 	stw	r16,0(sp)
 8004f98:	dfc00415 	stw	ra,16(sp)
 8004f9c:	2821883a 	mov	r16,r5
 8004fa0:	9cc27604 	addi	r19,r19,2520
 8004fa4:	2025883a 	mov	r18,r4
 8004fa8:	800dd9c0 	call	800dd9c <__malloc_lock>
 8004fac:	98800217 	ldw	r2,8(r19)
 8004fb0:	14400117 	ldw	r17,4(r2)
 8004fb4:	00bfff04 	movi	r2,-4
 8004fb8:	88a2703a 	and	r17,r17,r2
 8004fbc:	8c21c83a 	sub	r16,r17,r16
 8004fc0:	8403fbc4 	addi	r16,r16,4079
 8004fc4:	8020d33a 	srli	r16,r16,12
 8004fc8:	0083ffc4 	movi	r2,4095
 8004fcc:	843fffc4 	addi	r16,r16,-1
 8004fd0:	8020933a 	slli	r16,r16,12
 8004fd4:	1400060e 	bge	r2,r16,8004ff0 <_malloc_trim_r+0x70>
 8004fd8:	000b883a 	mov	r5,zero
 8004fdc:	9009883a 	mov	r4,r18
 8004fe0:	80073180 	call	8007318 <_sbrk_r>
 8004fe4:	98c00217 	ldw	r3,8(r19)
 8004fe8:	1c47883a 	add	r3,r3,r17
 8004fec:	10c00a26 	beq	r2,r3,8005018 <_malloc_trim_r+0x98>
 8004ff0:	9009883a 	mov	r4,r18
 8004ff4:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8004ff8:	0005883a 	mov	r2,zero
 8004ffc:	dfc00417 	ldw	ra,16(sp)
 8005000:	dcc00317 	ldw	r19,12(sp)
 8005004:	dc800217 	ldw	r18,8(sp)
 8005008:	dc400117 	ldw	r17,4(sp)
 800500c:	dc000017 	ldw	r16,0(sp)
 8005010:	dec00504 	addi	sp,sp,20
 8005014:	f800283a 	ret
 8005018:	040bc83a 	sub	r5,zero,r16
 800501c:	9009883a 	mov	r4,r18
 8005020:	80073180 	call	8007318 <_sbrk_r>
 8005024:	00ffffc4 	movi	r3,-1
 8005028:	10c00d26 	beq	r2,r3,8005060 <_malloc_trim_r+0xe0>
 800502c:	00c20074 	movhi	r3,2049
 8005030:	18ced704 	addi	r3,r3,15196
 8005034:	18800017 	ldw	r2,0(r3)
 8005038:	99000217 	ldw	r4,8(r19)
 800503c:	8c23c83a 	sub	r17,r17,r16
 8005040:	8c400054 	ori	r17,r17,1
 8005044:	1421c83a 	sub	r16,r2,r16
 8005048:	24400115 	stw	r17,4(r4)
 800504c:	9009883a 	mov	r4,r18
 8005050:	1c000015 	stw	r16,0(r3)
 8005054:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8005058:	00800044 	movi	r2,1
 800505c:	003fe706 	br	8004ffc <__alt_data_end+0xfc004ffc>
 8005060:	000b883a 	mov	r5,zero
 8005064:	9009883a 	mov	r4,r18
 8005068:	80073180 	call	8007318 <_sbrk_r>
 800506c:	99000217 	ldw	r4,8(r19)
 8005070:	014003c4 	movi	r5,15
 8005074:	1107c83a 	sub	r3,r2,r4
 8005078:	28ffdd0e 	bge	r5,r3,8004ff0 <__alt_data_end+0xfc004ff0>
 800507c:	01420074 	movhi	r5,2049
 8005080:	2947ff04 	addi	r5,r5,8188
 8005084:	29400017 	ldw	r5,0(r5)
 8005088:	18c00054 	ori	r3,r3,1
 800508c:	20c00115 	stw	r3,4(r4)
 8005090:	00c20074 	movhi	r3,2049
 8005094:	1145c83a 	sub	r2,r2,r5
 8005098:	18ced704 	addi	r3,r3,15196
 800509c:	18800015 	stw	r2,0(r3)
 80050a0:	003fd306 	br	8004ff0 <__alt_data_end+0xfc004ff0>

080050a4 <_free_r>:
 80050a4:	28004126 	beq	r5,zero,80051ac <_free_r+0x108>
 80050a8:	defffd04 	addi	sp,sp,-12
 80050ac:	dc400115 	stw	r17,4(sp)
 80050b0:	dc000015 	stw	r16,0(sp)
 80050b4:	2023883a 	mov	r17,r4
 80050b8:	2821883a 	mov	r16,r5
 80050bc:	dfc00215 	stw	ra,8(sp)
 80050c0:	800dd9c0 	call	800dd9c <__malloc_lock>
 80050c4:	81ffff17 	ldw	r7,-4(r16)
 80050c8:	00bfff84 	movi	r2,-2
 80050cc:	01020074 	movhi	r4,2049
 80050d0:	81bffe04 	addi	r6,r16,-8
 80050d4:	3884703a 	and	r2,r7,r2
 80050d8:	21027604 	addi	r4,r4,2520
 80050dc:	308b883a 	add	r5,r6,r2
 80050e0:	2a400117 	ldw	r9,4(r5)
 80050e4:	22000217 	ldw	r8,8(r4)
 80050e8:	00ffff04 	movi	r3,-4
 80050ec:	48c6703a 	and	r3,r9,r3
 80050f0:	2a005726 	beq	r5,r8,8005250 <_free_r+0x1ac>
 80050f4:	28c00115 	stw	r3,4(r5)
 80050f8:	39c0004c 	andi	r7,r7,1
 80050fc:	3800091e 	bne	r7,zero,8005124 <_free_r+0x80>
 8005100:	823ffe17 	ldw	r8,-8(r16)
 8005104:	22400204 	addi	r9,r4,8
 8005108:	320dc83a 	sub	r6,r6,r8
 800510c:	31c00217 	ldw	r7,8(r6)
 8005110:	1205883a 	add	r2,r2,r8
 8005114:	3a406526 	beq	r7,r9,80052ac <_free_r+0x208>
 8005118:	32000317 	ldw	r8,12(r6)
 800511c:	3a000315 	stw	r8,12(r7)
 8005120:	41c00215 	stw	r7,8(r8)
 8005124:	28cf883a 	add	r7,r5,r3
 8005128:	39c00117 	ldw	r7,4(r7)
 800512c:	39c0004c 	andi	r7,r7,1
 8005130:	38003a26 	beq	r7,zero,800521c <_free_r+0x178>
 8005134:	10c00054 	ori	r3,r2,1
 8005138:	30c00115 	stw	r3,4(r6)
 800513c:	3087883a 	add	r3,r6,r2
 8005140:	18800015 	stw	r2,0(r3)
 8005144:	00c07fc4 	movi	r3,511
 8005148:	18801936 	bltu	r3,r2,80051b0 <_free_r+0x10c>
 800514c:	1004d0fa 	srli	r2,r2,3
 8005150:	01c00044 	movi	r7,1
 8005154:	21400117 	ldw	r5,4(r4)
 8005158:	10c00044 	addi	r3,r2,1
 800515c:	18c7883a 	add	r3,r3,r3
 8005160:	1005d0ba 	srai	r2,r2,2
 8005164:	18c7883a 	add	r3,r3,r3
 8005168:	18c7883a 	add	r3,r3,r3
 800516c:	1907883a 	add	r3,r3,r4
 8005170:	3884983a 	sll	r2,r7,r2
 8005174:	19c00017 	ldw	r7,0(r3)
 8005178:	1a3ffe04 	addi	r8,r3,-8
 800517c:	1144b03a 	or	r2,r2,r5
 8005180:	32000315 	stw	r8,12(r6)
 8005184:	31c00215 	stw	r7,8(r6)
 8005188:	20800115 	stw	r2,4(r4)
 800518c:	19800015 	stw	r6,0(r3)
 8005190:	39800315 	stw	r6,12(r7)
 8005194:	8809883a 	mov	r4,r17
 8005198:	dfc00217 	ldw	ra,8(sp)
 800519c:	dc400117 	ldw	r17,4(sp)
 80051a0:	dc000017 	ldw	r16,0(sp)
 80051a4:	dec00304 	addi	sp,sp,12
 80051a8:	800ddc01 	jmpi	800ddc0 <__malloc_unlock>
 80051ac:	f800283a 	ret
 80051b0:	100ad27a 	srli	r5,r2,9
 80051b4:	00c00104 	movi	r3,4
 80051b8:	19404a36 	bltu	r3,r5,80052e4 <_free_r+0x240>
 80051bc:	100ad1ba 	srli	r5,r2,6
 80051c0:	28c00e44 	addi	r3,r5,57
 80051c4:	18c7883a 	add	r3,r3,r3
 80051c8:	29400e04 	addi	r5,r5,56
 80051cc:	18c7883a 	add	r3,r3,r3
 80051d0:	18c7883a 	add	r3,r3,r3
 80051d4:	1909883a 	add	r4,r3,r4
 80051d8:	20c00017 	ldw	r3,0(r4)
 80051dc:	01c20074 	movhi	r7,2049
 80051e0:	213ffe04 	addi	r4,r4,-8
 80051e4:	39c27604 	addi	r7,r7,2520
 80051e8:	20c04426 	beq	r4,r3,80052fc <_free_r+0x258>
 80051ec:	01ffff04 	movi	r7,-4
 80051f0:	19400117 	ldw	r5,4(r3)
 80051f4:	29ca703a 	and	r5,r5,r7
 80051f8:	1140022e 	bgeu	r2,r5,8005204 <_free_r+0x160>
 80051fc:	18c00217 	ldw	r3,8(r3)
 8005200:	20fffb1e 	bne	r4,r3,80051f0 <__alt_data_end+0xfc0051f0>
 8005204:	19000317 	ldw	r4,12(r3)
 8005208:	31000315 	stw	r4,12(r6)
 800520c:	30c00215 	stw	r3,8(r6)
 8005210:	21800215 	stw	r6,8(r4)
 8005214:	19800315 	stw	r6,12(r3)
 8005218:	003fde06 	br	8005194 <__alt_data_end+0xfc005194>
 800521c:	29c00217 	ldw	r7,8(r5)
 8005220:	10c5883a 	add	r2,r2,r3
 8005224:	00c20074 	movhi	r3,2049
 8005228:	18c27804 	addi	r3,r3,2528
 800522c:	38c03b26 	beq	r7,r3,800531c <_free_r+0x278>
 8005230:	2a000317 	ldw	r8,12(r5)
 8005234:	11400054 	ori	r5,r2,1
 8005238:	3087883a 	add	r3,r6,r2
 800523c:	3a000315 	stw	r8,12(r7)
 8005240:	41c00215 	stw	r7,8(r8)
 8005244:	31400115 	stw	r5,4(r6)
 8005248:	18800015 	stw	r2,0(r3)
 800524c:	003fbd06 	br	8005144 <__alt_data_end+0xfc005144>
 8005250:	39c0004c 	andi	r7,r7,1
 8005254:	10c5883a 	add	r2,r2,r3
 8005258:	3800071e 	bne	r7,zero,8005278 <_free_r+0x1d4>
 800525c:	81fffe17 	ldw	r7,-8(r16)
 8005260:	31cdc83a 	sub	r6,r6,r7
 8005264:	30c00317 	ldw	r3,12(r6)
 8005268:	31400217 	ldw	r5,8(r6)
 800526c:	11c5883a 	add	r2,r2,r7
 8005270:	28c00315 	stw	r3,12(r5)
 8005274:	19400215 	stw	r5,8(r3)
 8005278:	10c00054 	ori	r3,r2,1
 800527c:	30c00115 	stw	r3,4(r6)
 8005280:	00c20074 	movhi	r3,2049
 8005284:	18c80004 	addi	r3,r3,8192
 8005288:	18c00017 	ldw	r3,0(r3)
 800528c:	21800215 	stw	r6,8(r4)
 8005290:	10ffc036 	bltu	r2,r3,8005194 <__alt_data_end+0xfc005194>
 8005294:	00820074 	movhi	r2,2049
 8005298:	108ece04 	addi	r2,r2,15160
 800529c:	11400017 	ldw	r5,0(r2)
 80052a0:	8809883a 	mov	r4,r17
 80052a4:	8004f800 	call	8004f80 <_malloc_trim_r>
 80052a8:	003fba06 	br	8005194 <__alt_data_end+0xfc005194>
 80052ac:	28c9883a 	add	r4,r5,r3
 80052b0:	21000117 	ldw	r4,4(r4)
 80052b4:	2100004c 	andi	r4,r4,1
 80052b8:	2000391e 	bne	r4,zero,80053a0 <_free_r+0x2fc>
 80052bc:	29c00217 	ldw	r7,8(r5)
 80052c0:	29000317 	ldw	r4,12(r5)
 80052c4:	1885883a 	add	r2,r3,r2
 80052c8:	10c00054 	ori	r3,r2,1
 80052cc:	39000315 	stw	r4,12(r7)
 80052d0:	21c00215 	stw	r7,8(r4)
 80052d4:	30c00115 	stw	r3,4(r6)
 80052d8:	308d883a 	add	r6,r6,r2
 80052dc:	30800015 	stw	r2,0(r6)
 80052e0:	003fac06 	br	8005194 <__alt_data_end+0xfc005194>
 80052e4:	00c00504 	movi	r3,20
 80052e8:	19401536 	bltu	r3,r5,8005340 <_free_r+0x29c>
 80052ec:	28c01704 	addi	r3,r5,92
 80052f0:	18c7883a 	add	r3,r3,r3
 80052f4:	294016c4 	addi	r5,r5,91
 80052f8:	003fb406 	br	80051cc <__alt_data_end+0xfc0051cc>
 80052fc:	280bd0ba 	srai	r5,r5,2
 8005300:	00c00044 	movi	r3,1
 8005304:	38800117 	ldw	r2,4(r7)
 8005308:	194a983a 	sll	r5,r3,r5
 800530c:	2007883a 	mov	r3,r4
 8005310:	2884b03a 	or	r2,r5,r2
 8005314:	38800115 	stw	r2,4(r7)
 8005318:	003fbb06 	br	8005208 <__alt_data_end+0xfc005208>
 800531c:	21800515 	stw	r6,20(r4)
 8005320:	21800415 	stw	r6,16(r4)
 8005324:	10c00054 	ori	r3,r2,1
 8005328:	31c00315 	stw	r7,12(r6)
 800532c:	31c00215 	stw	r7,8(r6)
 8005330:	30c00115 	stw	r3,4(r6)
 8005334:	308d883a 	add	r6,r6,r2
 8005338:	30800015 	stw	r2,0(r6)
 800533c:	003f9506 	br	8005194 <__alt_data_end+0xfc005194>
 8005340:	00c01504 	movi	r3,84
 8005344:	19400536 	bltu	r3,r5,800535c <_free_r+0x2b8>
 8005348:	100ad33a 	srli	r5,r2,12
 800534c:	28c01bc4 	addi	r3,r5,111
 8005350:	18c7883a 	add	r3,r3,r3
 8005354:	29401b84 	addi	r5,r5,110
 8005358:	003f9c06 	br	80051cc <__alt_data_end+0xfc0051cc>
 800535c:	00c05504 	movi	r3,340
 8005360:	19400536 	bltu	r3,r5,8005378 <_free_r+0x2d4>
 8005364:	100ad3fa 	srli	r5,r2,15
 8005368:	28c01e04 	addi	r3,r5,120
 800536c:	18c7883a 	add	r3,r3,r3
 8005370:	29401dc4 	addi	r5,r5,119
 8005374:	003f9506 	br	80051cc <__alt_data_end+0xfc0051cc>
 8005378:	00c15504 	movi	r3,1364
 800537c:	19400536 	bltu	r3,r5,8005394 <_free_r+0x2f0>
 8005380:	100ad4ba 	srli	r5,r2,18
 8005384:	28c01f44 	addi	r3,r5,125
 8005388:	18c7883a 	add	r3,r3,r3
 800538c:	29401f04 	addi	r5,r5,124
 8005390:	003f8e06 	br	80051cc <__alt_data_end+0xfc0051cc>
 8005394:	00c03f84 	movi	r3,254
 8005398:	01401f84 	movi	r5,126
 800539c:	003f8b06 	br	80051cc <__alt_data_end+0xfc0051cc>
 80053a0:	10c00054 	ori	r3,r2,1
 80053a4:	30c00115 	stw	r3,4(r6)
 80053a8:	308d883a 	add	r6,r6,r2
 80053ac:	30800015 	stw	r2,0(r6)
 80053b0:	003f7806 	br	8005194 <__alt_data_end+0xfc005194>

080053b4 <_fwalk>:
 80053b4:	defff704 	addi	sp,sp,-36
 80053b8:	dd000415 	stw	r20,16(sp)
 80053bc:	dfc00815 	stw	ra,32(sp)
 80053c0:	ddc00715 	stw	r23,28(sp)
 80053c4:	dd800615 	stw	r22,24(sp)
 80053c8:	dd400515 	stw	r21,20(sp)
 80053cc:	dcc00315 	stw	r19,12(sp)
 80053d0:	dc800215 	stw	r18,8(sp)
 80053d4:	dc400115 	stw	r17,4(sp)
 80053d8:	dc000015 	stw	r16,0(sp)
 80053dc:	2500b804 	addi	r20,r4,736
 80053e0:	a0002326 	beq	r20,zero,8005470 <_fwalk+0xbc>
 80053e4:	282b883a 	mov	r21,r5
 80053e8:	002f883a 	mov	r23,zero
 80053ec:	05800044 	movi	r22,1
 80053f0:	04ffffc4 	movi	r19,-1
 80053f4:	a4400117 	ldw	r17,4(r20)
 80053f8:	a4800217 	ldw	r18,8(r20)
 80053fc:	8c7fffc4 	addi	r17,r17,-1
 8005400:	88000d16 	blt	r17,zero,8005438 <_fwalk+0x84>
 8005404:	94000304 	addi	r16,r18,12
 8005408:	94800384 	addi	r18,r18,14
 800540c:	8080000b 	ldhu	r2,0(r16)
 8005410:	8c7fffc4 	addi	r17,r17,-1
 8005414:	813ffd04 	addi	r4,r16,-12
 8005418:	b080042e 	bgeu	r22,r2,800542c <_fwalk+0x78>
 800541c:	9080000f 	ldh	r2,0(r18)
 8005420:	14c00226 	beq	r2,r19,800542c <_fwalk+0x78>
 8005424:	a83ee83a 	callr	r21
 8005428:	b8aeb03a 	or	r23,r23,r2
 800542c:	84001a04 	addi	r16,r16,104
 8005430:	94801a04 	addi	r18,r18,104
 8005434:	8cfff51e 	bne	r17,r19,800540c <__alt_data_end+0xfc00540c>
 8005438:	a5000017 	ldw	r20,0(r20)
 800543c:	a03fed1e 	bne	r20,zero,80053f4 <__alt_data_end+0xfc0053f4>
 8005440:	b805883a 	mov	r2,r23
 8005444:	dfc00817 	ldw	ra,32(sp)
 8005448:	ddc00717 	ldw	r23,28(sp)
 800544c:	dd800617 	ldw	r22,24(sp)
 8005450:	dd400517 	ldw	r21,20(sp)
 8005454:	dd000417 	ldw	r20,16(sp)
 8005458:	dcc00317 	ldw	r19,12(sp)
 800545c:	dc800217 	ldw	r18,8(sp)
 8005460:	dc400117 	ldw	r17,4(sp)
 8005464:	dc000017 	ldw	r16,0(sp)
 8005468:	dec00904 	addi	sp,sp,36
 800546c:	f800283a 	ret
 8005470:	002f883a 	mov	r23,zero
 8005474:	003ff206 	br	8005440 <__alt_data_end+0xfc005440>

08005478 <_fwalk_reent>:
 8005478:	defff704 	addi	sp,sp,-36
 800547c:	dd000415 	stw	r20,16(sp)
 8005480:	dfc00815 	stw	ra,32(sp)
 8005484:	ddc00715 	stw	r23,28(sp)
 8005488:	dd800615 	stw	r22,24(sp)
 800548c:	dd400515 	stw	r21,20(sp)
 8005490:	dcc00315 	stw	r19,12(sp)
 8005494:	dc800215 	stw	r18,8(sp)
 8005498:	dc400115 	stw	r17,4(sp)
 800549c:	dc000015 	stw	r16,0(sp)
 80054a0:	2500b804 	addi	r20,r4,736
 80054a4:	a0002326 	beq	r20,zero,8005534 <_fwalk_reent+0xbc>
 80054a8:	282b883a 	mov	r21,r5
 80054ac:	2027883a 	mov	r19,r4
 80054b0:	002f883a 	mov	r23,zero
 80054b4:	05800044 	movi	r22,1
 80054b8:	04bfffc4 	movi	r18,-1
 80054bc:	a4400117 	ldw	r17,4(r20)
 80054c0:	a4000217 	ldw	r16,8(r20)
 80054c4:	8c7fffc4 	addi	r17,r17,-1
 80054c8:	88000c16 	blt	r17,zero,80054fc <_fwalk_reent+0x84>
 80054cc:	84000304 	addi	r16,r16,12
 80054d0:	8080000b 	ldhu	r2,0(r16)
 80054d4:	8c7fffc4 	addi	r17,r17,-1
 80054d8:	817ffd04 	addi	r5,r16,-12
 80054dc:	b080052e 	bgeu	r22,r2,80054f4 <_fwalk_reent+0x7c>
 80054e0:	8080008f 	ldh	r2,2(r16)
 80054e4:	9809883a 	mov	r4,r19
 80054e8:	14800226 	beq	r2,r18,80054f4 <_fwalk_reent+0x7c>
 80054ec:	a83ee83a 	callr	r21
 80054f0:	b8aeb03a 	or	r23,r23,r2
 80054f4:	84001a04 	addi	r16,r16,104
 80054f8:	8cbff51e 	bne	r17,r18,80054d0 <__alt_data_end+0xfc0054d0>
 80054fc:	a5000017 	ldw	r20,0(r20)
 8005500:	a03fee1e 	bne	r20,zero,80054bc <__alt_data_end+0xfc0054bc>
 8005504:	b805883a 	mov	r2,r23
 8005508:	dfc00817 	ldw	ra,32(sp)
 800550c:	ddc00717 	ldw	r23,28(sp)
 8005510:	dd800617 	ldw	r22,24(sp)
 8005514:	dd400517 	ldw	r21,20(sp)
 8005518:	dd000417 	ldw	r20,16(sp)
 800551c:	dcc00317 	ldw	r19,12(sp)
 8005520:	dc800217 	ldw	r18,8(sp)
 8005524:	dc400117 	ldw	r17,4(sp)
 8005528:	dc000017 	ldw	r16,0(sp)
 800552c:	dec00904 	addi	sp,sp,36
 8005530:	f800283a 	ret
 8005534:	002f883a 	mov	r23,zero
 8005538:	003ff206 	br	8005504 <__alt_data_end+0xfc005504>

0800553c <_setlocale_r>:
 800553c:	30001b26 	beq	r6,zero,80055ac <_setlocale_r+0x70>
 8005540:	01420074 	movhi	r5,2049
 8005544:	defffe04 	addi	sp,sp,-8
 8005548:	2940b004 	addi	r5,r5,704
 800554c:	3009883a 	mov	r4,r6
 8005550:	dc000015 	stw	r16,0(sp)
 8005554:	dfc00115 	stw	ra,4(sp)
 8005558:	3021883a 	mov	r16,r6
 800555c:	80074a80 	call	80074a8 <strcmp>
 8005560:	1000061e 	bne	r2,zero,800557c <_setlocale_r+0x40>
 8005564:	00820074 	movhi	r2,2049
 8005568:	1080af04 	addi	r2,r2,700
 800556c:	dfc00117 	ldw	ra,4(sp)
 8005570:	dc000017 	ldw	r16,0(sp)
 8005574:	dec00204 	addi	sp,sp,8
 8005578:	f800283a 	ret
 800557c:	01420074 	movhi	r5,2049
 8005580:	2940af04 	addi	r5,r5,700
 8005584:	8009883a 	mov	r4,r16
 8005588:	80074a80 	call	80074a8 <strcmp>
 800558c:	103ff526 	beq	r2,zero,8005564 <__alt_data_end+0xfc005564>
 8005590:	01420074 	movhi	r5,2049
 8005594:	29409a04 	addi	r5,r5,616
 8005598:	8009883a 	mov	r4,r16
 800559c:	80074a80 	call	80074a8 <strcmp>
 80055a0:	103ff026 	beq	r2,zero,8005564 <__alt_data_end+0xfc005564>
 80055a4:	0005883a 	mov	r2,zero
 80055a8:	003ff006 	br	800556c <__alt_data_end+0xfc00556c>
 80055ac:	00820074 	movhi	r2,2049
 80055b0:	1080af04 	addi	r2,r2,700
 80055b4:	f800283a 	ret

080055b8 <__locale_charset>:
 80055b8:	00820074 	movhi	r2,2049
 80055bc:	10826004 	addi	r2,r2,2432
 80055c0:	f800283a 	ret

080055c4 <__locale_mb_cur_max>:
 80055c4:	00820074 	movhi	r2,2049
 80055c8:	1087fe04 	addi	r2,r2,8184
 80055cc:	10800017 	ldw	r2,0(r2)
 80055d0:	f800283a 	ret

080055d4 <__locale_msgcharset>:
 80055d4:	00820074 	movhi	r2,2049
 80055d8:	10825804 	addi	r2,r2,2400
 80055dc:	f800283a 	ret

080055e0 <__locale_cjk_lang>:
 80055e0:	0005883a 	mov	r2,zero
 80055e4:	f800283a 	ret

080055e8 <_localeconv_r>:
 80055e8:	00820074 	movhi	r2,2049
 80055ec:	10826804 	addi	r2,r2,2464
 80055f0:	f800283a 	ret

080055f4 <setlocale>:
 80055f4:	00820074 	movhi	r2,2049
 80055f8:	1087fd04 	addi	r2,r2,8180
 80055fc:	280d883a 	mov	r6,r5
 8005600:	200b883a 	mov	r5,r4
 8005604:	11000017 	ldw	r4,0(r2)
 8005608:	800553c1 	jmpi	800553c <_setlocale_r>

0800560c <localeconv>:
 800560c:	00820074 	movhi	r2,2049
 8005610:	10826804 	addi	r2,r2,2464
 8005614:	f800283a 	ret

08005618 <__smakebuf_r>:
 8005618:	2880030b 	ldhu	r2,12(r5)
 800561c:	10c0008c 	andi	r3,r2,2
 8005620:	1800411e 	bne	r3,zero,8005728 <__smakebuf_r+0x110>
 8005624:	deffec04 	addi	sp,sp,-80
 8005628:	dc000f15 	stw	r16,60(sp)
 800562c:	2821883a 	mov	r16,r5
 8005630:	2940038f 	ldh	r5,14(r5)
 8005634:	dc401015 	stw	r17,64(sp)
 8005638:	dfc01315 	stw	ra,76(sp)
 800563c:	dcc01215 	stw	r19,72(sp)
 8005640:	dc801115 	stw	r18,68(sp)
 8005644:	2023883a 	mov	r17,r4
 8005648:	28001c16 	blt	r5,zero,80056bc <__smakebuf_r+0xa4>
 800564c:	d80d883a 	mov	r6,sp
 8005650:	80091b00 	call	80091b0 <_fstat_r>
 8005654:	10001816 	blt	r2,zero,80056b8 <__smakebuf_r+0xa0>
 8005658:	d8800117 	ldw	r2,4(sp)
 800565c:	00e00014 	movui	r3,32768
 8005660:	10bc000c 	andi	r2,r2,61440
 8005664:	14c80020 	cmpeqi	r19,r2,8192
 8005668:	10c03726 	beq	r2,r3,8005748 <__smakebuf_r+0x130>
 800566c:	80c0030b 	ldhu	r3,12(r16)
 8005670:	18c20014 	ori	r3,r3,2048
 8005674:	80c0030d 	sth	r3,12(r16)
 8005678:	00c80004 	movi	r3,8192
 800567c:	10c0521e 	bne	r2,r3,80057c8 <__smakebuf_r+0x1b0>
 8005680:	8140038f 	ldh	r5,14(r16)
 8005684:	8809883a 	mov	r4,r17
 8005688:	80096d40 	call	80096d4 <_isatty_r>
 800568c:	10004c26 	beq	r2,zero,80057c0 <__smakebuf_r+0x1a8>
 8005690:	8080030b 	ldhu	r2,12(r16)
 8005694:	80c010c4 	addi	r3,r16,67
 8005698:	80c00015 	stw	r3,0(r16)
 800569c:	10800054 	ori	r2,r2,1
 80056a0:	8080030d 	sth	r2,12(r16)
 80056a4:	00800044 	movi	r2,1
 80056a8:	80c00415 	stw	r3,16(r16)
 80056ac:	80800515 	stw	r2,20(r16)
 80056b0:	04810004 	movi	r18,1024
 80056b4:	00000706 	br	80056d4 <__smakebuf_r+0xbc>
 80056b8:	8080030b 	ldhu	r2,12(r16)
 80056bc:	10c0200c 	andi	r3,r2,128
 80056c0:	18001f1e 	bne	r3,zero,8005740 <__smakebuf_r+0x128>
 80056c4:	04810004 	movi	r18,1024
 80056c8:	10820014 	ori	r2,r2,2048
 80056cc:	8080030d 	sth	r2,12(r16)
 80056d0:	0027883a 	mov	r19,zero
 80056d4:	900b883a 	mov	r5,r18
 80056d8:	8809883a 	mov	r4,r17
 80056dc:	80057d40 	call	80057d4 <_malloc_r>
 80056e0:	10002c26 	beq	r2,zero,8005794 <__smakebuf_r+0x17c>
 80056e4:	80c0030b 	ldhu	r3,12(r16)
 80056e8:	01020034 	movhi	r4,2048
 80056ec:	2112f604 	addi	r4,r4,19416
 80056f0:	89000f15 	stw	r4,60(r17)
 80056f4:	18c02014 	ori	r3,r3,128
 80056f8:	80c0030d 	sth	r3,12(r16)
 80056fc:	80800015 	stw	r2,0(r16)
 8005700:	80800415 	stw	r2,16(r16)
 8005704:	84800515 	stw	r18,20(r16)
 8005708:	98001a1e 	bne	r19,zero,8005774 <__smakebuf_r+0x15c>
 800570c:	dfc01317 	ldw	ra,76(sp)
 8005710:	dcc01217 	ldw	r19,72(sp)
 8005714:	dc801117 	ldw	r18,68(sp)
 8005718:	dc401017 	ldw	r17,64(sp)
 800571c:	dc000f17 	ldw	r16,60(sp)
 8005720:	dec01404 	addi	sp,sp,80
 8005724:	f800283a 	ret
 8005728:	288010c4 	addi	r2,r5,67
 800572c:	28800015 	stw	r2,0(r5)
 8005730:	28800415 	stw	r2,16(r5)
 8005734:	00800044 	movi	r2,1
 8005738:	28800515 	stw	r2,20(r5)
 800573c:	f800283a 	ret
 8005740:	04801004 	movi	r18,64
 8005744:	003fe006 	br	80056c8 <__alt_data_end+0xfc0056c8>
 8005748:	81000a17 	ldw	r4,40(r16)
 800574c:	00c20034 	movhi	r3,2048
 8005750:	18dd1104 	addi	r3,r3,29764
 8005754:	20ffc51e 	bne	r4,r3,800566c <__alt_data_end+0xfc00566c>
 8005758:	8080030b 	ldhu	r2,12(r16)
 800575c:	04810004 	movi	r18,1024
 8005760:	84801315 	stw	r18,76(r16)
 8005764:	1484b03a 	or	r2,r2,r18
 8005768:	8080030d 	sth	r2,12(r16)
 800576c:	0027883a 	mov	r19,zero
 8005770:	003fd806 	br	80056d4 <__alt_data_end+0xfc0056d4>
 8005774:	8140038f 	ldh	r5,14(r16)
 8005778:	8809883a 	mov	r4,r17
 800577c:	80096d40 	call	80096d4 <_isatty_r>
 8005780:	103fe226 	beq	r2,zero,800570c <__alt_data_end+0xfc00570c>
 8005784:	8080030b 	ldhu	r2,12(r16)
 8005788:	10800054 	ori	r2,r2,1
 800578c:	8080030d 	sth	r2,12(r16)
 8005790:	003fde06 	br	800570c <__alt_data_end+0xfc00570c>
 8005794:	8080030b 	ldhu	r2,12(r16)
 8005798:	10c0800c 	andi	r3,r2,512
 800579c:	183fdb1e 	bne	r3,zero,800570c <__alt_data_end+0xfc00570c>
 80057a0:	10800094 	ori	r2,r2,2
 80057a4:	80c010c4 	addi	r3,r16,67
 80057a8:	8080030d 	sth	r2,12(r16)
 80057ac:	00800044 	movi	r2,1
 80057b0:	80c00015 	stw	r3,0(r16)
 80057b4:	80c00415 	stw	r3,16(r16)
 80057b8:	80800515 	stw	r2,20(r16)
 80057bc:	003fd306 	br	800570c <__alt_data_end+0xfc00570c>
 80057c0:	04810004 	movi	r18,1024
 80057c4:	003fc306 	br	80056d4 <__alt_data_end+0xfc0056d4>
 80057c8:	0027883a 	mov	r19,zero
 80057cc:	04810004 	movi	r18,1024
 80057d0:	003fc006 	br	80056d4 <__alt_data_end+0xfc0056d4>

080057d4 <_malloc_r>:
 80057d4:	defff504 	addi	sp,sp,-44
 80057d8:	dc800315 	stw	r18,12(sp)
 80057dc:	dfc00a15 	stw	ra,40(sp)
 80057e0:	df000915 	stw	fp,36(sp)
 80057e4:	ddc00815 	stw	r23,32(sp)
 80057e8:	dd800715 	stw	r22,28(sp)
 80057ec:	dd400615 	stw	r21,24(sp)
 80057f0:	dd000515 	stw	r20,20(sp)
 80057f4:	dcc00415 	stw	r19,16(sp)
 80057f8:	dc400215 	stw	r17,8(sp)
 80057fc:	dc000115 	stw	r16,4(sp)
 8005800:	288002c4 	addi	r2,r5,11
 8005804:	00c00584 	movi	r3,22
 8005808:	2025883a 	mov	r18,r4
 800580c:	18807f2e 	bgeu	r3,r2,8005a0c <_malloc_r+0x238>
 8005810:	047ffe04 	movi	r17,-8
 8005814:	1462703a 	and	r17,r2,r17
 8005818:	8800a316 	blt	r17,zero,8005aa8 <_malloc_r+0x2d4>
 800581c:	8940a236 	bltu	r17,r5,8005aa8 <_malloc_r+0x2d4>
 8005820:	800dd9c0 	call	800dd9c <__malloc_lock>
 8005824:	00807dc4 	movi	r2,503
 8005828:	1441e92e 	bgeu	r2,r17,8005fd0 <_malloc_r+0x7fc>
 800582c:	8804d27a 	srli	r2,r17,9
 8005830:	1000a126 	beq	r2,zero,8005ab8 <_malloc_r+0x2e4>
 8005834:	00c00104 	movi	r3,4
 8005838:	18811e36 	bltu	r3,r2,8005cb4 <_malloc_r+0x4e0>
 800583c:	8804d1ba 	srli	r2,r17,6
 8005840:	12000e44 	addi	r8,r2,57
 8005844:	11c00e04 	addi	r7,r2,56
 8005848:	4209883a 	add	r4,r8,r8
 800584c:	04c20074 	movhi	r19,2049
 8005850:	2109883a 	add	r4,r4,r4
 8005854:	9cc27604 	addi	r19,r19,2520
 8005858:	2109883a 	add	r4,r4,r4
 800585c:	9909883a 	add	r4,r19,r4
 8005860:	24000117 	ldw	r16,4(r4)
 8005864:	213ffe04 	addi	r4,r4,-8
 8005868:	24009726 	beq	r4,r16,8005ac8 <_malloc_r+0x2f4>
 800586c:	80800117 	ldw	r2,4(r16)
 8005870:	01bfff04 	movi	r6,-4
 8005874:	014003c4 	movi	r5,15
 8005878:	1184703a 	and	r2,r2,r6
 800587c:	1447c83a 	sub	r3,r2,r17
 8005880:	28c00716 	blt	r5,r3,80058a0 <_malloc_r+0xcc>
 8005884:	1800920e 	bge	r3,zero,8005ad0 <_malloc_r+0x2fc>
 8005888:	84000317 	ldw	r16,12(r16)
 800588c:	24008e26 	beq	r4,r16,8005ac8 <_malloc_r+0x2f4>
 8005890:	80800117 	ldw	r2,4(r16)
 8005894:	1184703a 	and	r2,r2,r6
 8005898:	1447c83a 	sub	r3,r2,r17
 800589c:	28fff90e 	bge	r5,r3,8005884 <__alt_data_end+0xfc005884>
 80058a0:	3809883a 	mov	r4,r7
 80058a4:	01820074 	movhi	r6,2049
 80058a8:	9c000417 	ldw	r16,16(r19)
 80058ac:	31827604 	addi	r6,r6,2520
 80058b0:	32000204 	addi	r8,r6,8
 80058b4:	82013426 	beq	r16,r8,8005d88 <_malloc_r+0x5b4>
 80058b8:	80c00117 	ldw	r3,4(r16)
 80058bc:	00bfff04 	movi	r2,-4
 80058c0:	188e703a 	and	r7,r3,r2
 80058c4:	3c45c83a 	sub	r2,r7,r17
 80058c8:	00c003c4 	movi	r3,15
 80058cc:	18811f16 	blt	r3,r2,8005d4c <_malloc_r+0x578>
 80058d0:	32000515 	stw	r8,20(r6)
 80058d4:	32000415 	stw	r8,16(r6)
 80058d8:	10007f0e 	bge	r2,zero,8005ad8 <_malloc_r+0x304>
 80058dc:	00807fc4 	movi	r2,511
 80058e0:	11c0fd36 	bltu	r2,r7,8005cd8 <_malloc_r+0x504>
 80058e4:	3806d0fa 	srli	r3,r7,3
 80058e8:	01c00044 	movi	r7,1
 80058ec:	30800117 	ldw	r2,4(r6)
 80058f0:	19400044 	addi	r5,r3,1
 80058f4:	294b883a 	add	r5,r5,r5
 80058f8:	1807d0ba 	srai	r3,r3,2
 80058fc:	294b883a 	add	r5,r5,r5
 8005900:	294b883a 	add	r5,r5,r5
 8005904:	298b883a 	add	r5,r5,r6
 8005908:	38c6983a 	sll	r3,r7,r3
 800590c:	29c00017 	ldw	r7,0(r5)
 8005910:	2a7ffe04 	addi	r9,r5,-8
 8005914:	1886b03a 	or	r3,r3,r2
 8005918:	82400315 	stw	r9,12(r16)
 800591c:	81c00215 	stw	r7,8(r16)
 8005920:	30c00115 	stw	r3,4(r6)
 8005924:	2c000015 	stw	r16,0(r5)
 8005928:	3c000315 	stw	r16,12(r7)
 800592c:	2005d0ba 	srai	r2,r4,2
 8005930:	01400044 	movi	r5,1
 8005934:	288a983a 	sll	r5,r5,r2
 8005938:	19406f36 	bltu	r3,r5,8005af8 <_malloc_r+0x324>
 800593c:	28c4703a 	and	r2,r5,r3
 8005940:	10000a1e 	bne	r2,zero,800596c <_malloc_r+0x198>
 8005944:	00bfff04 	movi	r2,-4
 8005948:	294b883a 	add	r5,r5,r5
 800594c:	2088703a 	and	r4,r4,r2
 8005950:	28c4703a 	and	r2,r5,r3
 8005954:	21000104 	addi	r4,r4,4
 8005958:	1000041e 	bne	r2,zero,800596c <_malloc_r+0x198>
 800595c:	294b883a 	add	r5,r5,r5
 8005960:	28c4703a 	and	r2,r5,r3
 8005964:	21000104 	addi	r4,r4,4
 8005968:	103ffc26 	beq	r2,zero,800595c <__alt_data_end+0xfc00595c>
 800596c:	02bfff04 	movi	r10,-4
 8005970:	024003c4 	movi	r9,15
 8005974:	21800044 	addi	r6,r4,1
 8005978:	318d883a 	add	r6,r6,r6
 800597c:	318d883a 	add	r6,r6,r6
 8005980:	318d883a 	add	r6,r6,r6
 8005984:	998d883a 	add	r6,r19,r6
 8005988:	333ffe04 	addi	r12,r6,-8
 800598c:	2017883a 	mov	r11,r4
 8005990:	31800104 	addi	r6,r6,4
 8005994:	34000017 	ldw	r16,0(r6)
 8005998:	31fffd04 	addi	r7,r6,-12
 800599c:	81c0041e 	bne	r16,r7,80059b0 <_malloc_r+0x1dc>
 80059a0:	0000fb06 	br	8005d90 <_malloc_r+0x5bc>
 80059a4:	1801030e 	bge	r3,zero,8005db4 <_malloc_r+0x5e0>
 80059a8:	84000317 	ldw	r16,12(r16)
 80059ac:	81c0f826 	beq	r16,r7,8005d90 <_malloc_r+0x5bc>
 80059b0:	80800117 	ldw	r2,4(r16)
 80059b4:	1284703a 	and	r2,r2,r10
 80059b8:	1447c83a 	sub	r3,r2,r17
 80059bc:	48fff90e 	bge	r9,r3,80059a4 <__alt_data_end+0xfc0059a4>
 80059c0:	80800317 	ldw	r2,12(r16)
 80059c4:	81000217 	ldw	r4,8(r16)
 80059c8:	89400054 	ori	r5,r17,1
 80059cc:	81400115 	stw	r5,4(r16)
 80059d0:	20800315 	stw	r2,12(r4)
 80059d4:	11000215 	stw	r4,8(r2)
 80059d8:	8463883a 	add	r17,r16,r17
 80059dc:	9c400515 	stw	r17,20(r19)
 80059e0:	9c400415 	stw	r17,16(r19)
 80059e4:	18800054 	ori	r2,r3,1
 80059e8:	88800115 	stw	r2,4(r17)
 80059ec:	8a000315 	stw	r8,12(r17)
 80059f0:	8a000215 	stw	r8,8(r17)
 80059f4:	88e3883a 	add	r17,r17,r3
 80059f8:	88c00015 	stw	r3,0(r17)
 80059fc:	9009883a 	mov	r4,r18
 8005a00:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8005a04:	80800204 	addi	r2,r16,8
 8005a08:	00001b06 	br	8005a78 <_malloc_r+0x2a4>
 8005a0c:	04400404 	movi	r17,16
 8005a10:	89402536 	bltu	r17,r5,8005aa8 <_malloc_r+0x2d4>
 8005a14:	800dd9c0 	call	800dd9c <__malloc_lock>
 8005a18:	00800184 	movi	r2,6
 8005a1c:	01000084 	movi	r4,2
 8005a20:	04c20074 	movhi	r19,2049
 8005a24:	1085883a 	add	r2,r2,r2
 8005a28:	9cc27604 	addi	r19,r19,2520
 8005a2c:	1085883a 	add	r2,r2,r2
 8005a30:	9885883a 	add	r2,r19,r2
 8005a34:	14000117 	ldw	r16,4(r2)
 8005a38:	10fffe04 	addi	r3,r2,-8
 8005a3c:	80c0d926 	beq	r16,r3,8005da4 <_malloc_r+0x5d0>
 8005a40:	80c00117 	ldw	r3,4(r16)
 8005a44:	81000317 	ldw	r4,12(r16)
 8005a48:	00bfff04 	movi	r2,-4
 8005a4c:	1884703a 	and	r2,r3,r2
 8005a50:	81400217 	ldw	r5,8(r16)
 8005a54:	8085883a 	add	r2,r16,r2
 8005a58:	10c00117 	ldw	r3,4(r2)
 8005a5c:	29000315 	stw	r4,12(r5)
 8005a60:	21400215 	stw	r5,8(r4)
 8005a64:	18c00054 	ori	r3,r3,1
 8005a68:	10c00115 	stw	r3,4(r2)
 8005a6c:	9009883a 	mov	r4,r18
 8005a70:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8005a74:	80800204 	addi	r2,r16,8
 8005a78:	dfc00a17 	ldw	ra,40(sp)
 8005a7c:	df000917 	ldw	fp,36(sp)
 8005a80:	ddc00817 	ldw	r23,32(sp)
 8005a84:	dd800717 	ldw	r22,28(sp)
 8005a88:	dd400617 	ldw	r21,24(sp)
 8005a8c:	dd000517 	ldw	r20,20(sp)
 8005a90:	dcc00417 	ldw	r19,16(sp)
 8005a94:	dc800317 	ldw	r18,12(sp)
 8005a98:	dc400217 	ldw	r17,8(sp)
 8005a9c:	dc000117 	ldw	r16,4(sp)
 8005aa0:	dec00b04 	addi	sp,sp,44
 8005aa4:	f800283a 	ret
 8005aa8:	00800304 	movi	r2,12
 8005aac:	90800015 	stw	r2,0(r18)
 8005ab0:	0005883a 	mov	r2,zero
 8005ab4:	003ff006 	br	8005a78 <__alt_data_end+0xfc005a78>
 8005ab8:	01002004 	movi	r4,128
 8005abc:	02001004 	movi	r8,64
 8005ac0:	01c00fc4 	movi	r7,63
 8005ac4:	003f6106 	br	800584c <__alt_data_end+0xfc00584c>
 8005ac8:	4009883a 	mov	r4,r8
 8005acc:	003f7506 	br	80058a4 <__alt_data_end+0xfc0058a4>
 8005ad0:	81000317 	ldw	r4,12(r16)
 8005ad4:	003fde06 	br	8005a50 <__alt_data_end+0xfc005a50>
 8005ad8:	81c5883a 	add	r2,r16,r7
 8005adc:	11400117 	ldw	r5,4(r2)
 8005ae0:	9009883a 	mov	r4,r18
 8005ae4:	29400054 	ori	r5,r5,1
 8005ae8:	11400115 	stw	r5,4(r2)
 8005aec:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8005af0:	80800204 	addi	r2,r16,8
 8005af4:	003fe006 	br	8005a78 <__alt_data_end+0xfc005a78>
 8005af8:	9c000217 	ldw	r16,8(r19)
 8005afc:	00bfff04 	movi	r2,-4
 8005b00:	85800117 	ldw	r22,4(r16)
 8005b04:	b0ac703a 	and	r22,r22,r2
 8005b08:	b4400336 	bltu	r22,r17,8005b18 <_malloc_r+0x344>
 8005b0c:	b445c83a 	sub	r2,r22,r17
 8005b10:	00c003c4 	movi	r3,15
 8005b14:	18805d16 	blt	r3,r2,8005c8c <_malloc_r+0x4b8>
 8005b18:	05c20074 	movhi	r23,2049
 8005b1c:	00820074 	movhi	r2,2049
 8005b20:	108ece04 	addi	r2,r2,15160
 8005b24:	bdc7ff04 	addi	r23,r23,8188
 8005b28:	15400017 	ldw	r21,0(r2)
 8005b2c:	b8c00017 	ldw	r3,0(r23)
 8005b30:	00bfffc4 	movi	r2,-1
 8005b34:	858d883a 	add	r6,r16,r22
 8005b38:	8d6b883a 	add	r21,r17,r21
 8005b3c:	1880ea26 	beq	r3,r2,8005ee8 <_malloc_r+0x714>
 8005b40:	ad4403c4 	addi	r21,r21,4111
 8005b44:	00bc0004 	movi	r2,-4096
 8005b48:	a8aa703a 	and	r21,r21,r2
 8005b4c:	a80b883a 	mov	r5,r21
 8005b50:	9009883a 	mov	r4,r18
 8005b54:	d9800015 	stw	r6,0(sp)
 8005b58:	80073180 	call	8007318 <_sbrk_r>
 8005b5c:	1029883a 	mov	r20,r2
 8005b60:	00bfffc4 	movi	r2,-1
 8005b64:	d9800017 	ldw	r6,0(sp)
 8005b68:	a080e826 	beq	r20,r2,8005f0c <_malloc_r+0x738>
 8005b6c:	a180a636 	bltu	r20,r6,8005e08 <_malloc_r+0x634>
 8005b70:	07020074 	movhi	fp,2049
 8005b74:	e70ed704 	addi	fp,fp,15196
 8005b78:	e0800017 	ldw	r2,0(fp)
 8005b7c:	a887883a 	add	r3,r21,r2
 8005b80:	e0c00015 	stw	r3,0(fp)
 8005b84:	3500e626 	beq	r6,r20,8005f20 <_malloc_r+0x74c>
 8005b88:	b9000017 	ldw	r4,0(r23)
 8005b8c:	00bfffc4 	movi	r2,-1
 8005b90:	2080ee26 	beq	r4,r2,8005f4c <_malloc_r+0x778>
 8005b94:	a185c83a 	sub	r2,r20,r6
 8005b98:	10c5883a 	add	r2,r2,r3
 8005b9c:	e0800015 	stw	r2,0(fp)
 8005ba0:	a0c001cc 	andi	r3,r20,7
 8005ba4:	1800bc26 	beq	r3,zero,8005e98 <_malloc_r+0x6c4>
 8005ba8:	a0e9c83a 	sub	r20,r20,r3
 8005bac:	00840204 	movi	r2,4104
 8005bb0:	a5000204 	addi	r20,r20,8
 8005bb4:	10c7c83a 	sub	r3,r2,r3
 8005bb8:	a545883a 	add	r2,r20,r21
 8005bbc:	1083ffcc 	andi	r2,r2,4095
 8005bc0:	18abc83a 	sub	r21,r3,r2
 8005bc4:	a80b883a 	mov	r5,r21
 8005bc8:	9009883a 	mov	r4,r18
 8005bcc:	80073180 	call	8007318 <_sbrk_r>
 8005bd0:	00ffffc4 	movi	r3,-1
 8005bd4:	10c0e126 	beq	r2,r3,8005f5c <_malloc_r+0x788>
 8005bd8:	1505c83a 	sub	r2,r2,r20
 8005bdc:	1545883a 	add	r2,r2,r21
 8005be0:	10800054 	ori	r2,r2,1
 8005be4:	e0c00017 	ldw	r3,0(fp)
 8005be8:	9d000215 	stw	r20,8(r19)
 8005bec:	a0800115 	stw	r2,4(r20)
 8005bf0:	a8c7883a 	add	r3,r21,r3
 8005bf4:	e0c00015 	stw	r3,0(fp)
 8005bf8:	84c00e26 	beq	r16,r19,8005c34 <_malloc_r+0x460>
 8005bfc:	018003c4 	movi	r6,15
 8005c00:	3580a72e 	bgeu	r6,r22,8005ea0 <_malloc_r+0x6cc>
 8005c04:	81400117 	ldw	r5,4(r16)
 8005c08:	013ffe04 	movi	r4,-8
 8005c0c:	b0bffd04 	addi	r2,r22,-12
 8005c10:	1104703a 	and	r2,r2,r4
 8005c14:	2900004c 	andi	r4,r5,1
 8005c18:	2088b03a 	or	r4,r4,r2
 8005c1c:	81000115 	stw	r4,4(r16)
 8005c20:	01400144 	movi	r5,5
 8005c24:	8089883a 	add	r4,r16,r2
 8005c28:	21400115 	stw	r5,4(r4)
 8005c2c:	21400215 	stw	r5,8(r4)
 8005c30:	3080cd36 	bltu	r6,r2,8005f68 <_malloc_r+0x794>
 8005c34:	00820074 	movhi	r2,2049
 8005c38:	108ecd04 	addi	r2,r2,15156
 8005c3c:	11000017 	ldw	r4,0(r2)
 8005c40:	20c0012e 	bgeu	r4,r3,8005c48 <_malloc_r+0x474>
 8005c44:	10c00015 	stw	r3,0(r2)
 8005c48:	00820074 	movhi	r2,2049
 8005c4c:	108ecc04 	addi	r2,r2,15152
 8005c50:	11000017 	ldw	r4,0(r2)
 8005c54:	9c000217 	ldw	r16,8(r19)
 8005c58:	20c0012e 	bgeu	r4,r3,8005c60 <_malloc_r+0x48c>
 8005c5c:	10c00015 	stw	r3,0(r2)
 8005c60:	80c00117 	ldw	r3,4(r16)
 8005c64:	00bfff04 	movi	r2,-4
 8005c68:	1886703a 	and	r3,r3,r2
 8005c6c:	1c45c83a 	sub	r2,r3,r17
 8005c70:	1c400236 	bltu	r3,r17,8005c7c <_malloc_r+0x4a8>
 8005c74:	00c003c4 	movi	r3,15
 8005c78:	18800416 	blt	r3,r2,8005c8c <_malloc_r+0x4b8>
 8005c7c:	9009883a 	mov	r4,r18
 8005c80:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8005c84:	0005883a 	mov	r2,zero
 8005c88:	003f7b06 	br	8005a78 <__alt_data_end+0xfc005a78>
 8005c8c:	88c00054 	ori	r3,r17,1
 8005c90:	80c00115 	stw	r3,4(r16)
 8005c94:	8463883a 	add	r17,r16,r17
 8005c98:	10800054 	ori	r2,r2,1
 8005c9c:	9c400215 	stw	r17,8(r19)
 8005ca0:	88800115 	stw	r2,4(r17)
 8005ca4:	9009883a 	mov	r4,r18
 8005ca8:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8005cac:	80800204 	addi	r2,r16,8
 8005cb0:	003f7106 	br	8005a78 <__alt_data_end+0xfc005a78>
 8005cb4:	00c00504 	movi	r3,20
 8005cb8:	18804a2e 	bgeu	r3,r2,8005de4 <_malloc_r+0x610>
 8005cbc:	00c01504 	movi	r3,84
 8005cc0:	18806e36 	bltu	r3,r2,8005e7c <_malloc_r+0x6a8>
 8005cc4:	8804d33a 	srli	r2,r17,12
 8005cc8:	12001bc4 	addi	r8,r2,111
 8005ccc:	11c01b84 	addi	r7,r2,110
 8005cd0:	4209883a 	add	r4,r8,r8
 8005cd4:	003edd06 	br	800584c <__alt_data_end+0xfc00584c>
 8005cd8:	3804d27a 	srli	r2,r7,9
 8005cdc:	00c00104 	movi	r3,4
 8005ce0:	1880442e 	bgeu	r3,r2,8005df4 <_malloc_r+0x620>
 8005ce4:	00c00504 	movi	r3,20
 8005ce8:	18808136 	bltu	r3,r2,8005ef0 <_malloc_r+0x71c>
 8005cec:	11401704 	addi	r5,r2,92
 8005cf0:	10c016c4 	addi	r3,r2,91
 8005cf4:	294b883a 	add	r5,r5,r5
 8005cf8:	294b883a 	add	r5,r5,r5
 8005cfc:	294b883a 	add	r5,r5,r5
 8005d00:	994b883a 	add	r5,r19,r5
 8005d04:	28800017 	ldw	r2,0(r5)
 8005d08:	01820074 	movhi	r6,2049
 8005d0c:	297ffe04 	addi	r5,r5,-8
 8005d10:	31827604 	addi	r6,r6,2520
 8005d14:	28806526 	beq	r5,r2,8005eac <_malloc_r+0x6d8>
 8005d18:	01bfff04 	movi	r6,-4
 8005d1c:	10c00117 	ldw	r3,4(r2)
 8005d20:	1986703a 	and	r3,r3,r6
 8005d24:	38c0022e 	bgeu	r7,r3,8005d30 <_malloc_r+0x55c>
 8005d28:	10800217 	ldw	r2,8(r2)
 8005d2c:	28bffb1e 	bne	r5,r2,8005d1c <__alt_data_end+0xfc005d1c>
 8005d30:	11400317 	ldw	r5,12(r2)
 8005d34:	98c00117 	ldw	r3,4(r19)
 8005d38:	81400315 	stw	r5,12(r16)
 8005d3c:	80800215 	stw	r2,8(r16)
 8005d40:	2c000215 	stw	r16,8(r5)
 8005d44:	14000315 	stw	r16,12(r2)
 8005d48:	003ef806 	br	800592c <__alt_data_end+0xfc00592c>
 8005d4c:	88c00054 	ori	r3,r17,1
 8005d50:	80c00115 	stw	r3,4(r16)
 8005d54:	8463883a 	add	r17,r16,r17
 8005d58:	34400515 	stw	r17,20(r6)
 8005d5c:	34400415 	stw	r17,16(r6)
 8005d60:	10c00054 	ori	r3,r2,1
 8005d64:	8a000315 	stw	r8,12(r17)
 8005d68:	8a000215 	stw	r8,8(r17)
 8005d6c:	88c00115 	stw	r3,4(r17)
 8005d70:	88a3883a 	add	r17,r17,r2
 8005d74:	88800015 	stw	r2,0(r17)
 8005d78:	9009883a 	mov	r4,r18
 8005d7c:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8005d80:	80800204 	addi	r2,r16,8
 8005d84:	003f3c06 	br	8005a78 <__alt_data_end+0xfc005a78>
 8005d88:	30c00117 	ldw	r3,4(r6)
 8005d8c:	003ee706 	br	800592c <__alt_data_end+0xfc00592c>
 8005d90:	5ac00044 	addi	r11,r11,1
 8005d94:	588000cc 	andi	r2,r11,3
 8005d98:	31800204 	addi	r6,r6,8
 8005d9c:	103efd1e 	bne	r2,zero,8005994 <__alt_data_end+0xfc005994>
 8005da0:	00002406 	br	8005e34 <_malloc_r+0x660>
 8005da4:	14000317 	ldw	r16,12(r2)
 8005da8:	143f251e 	bne	r2,r16,8005a40 <__alt_data_end+0xfc005a40>
 8005dac:	21000084 	addi	r4,r4,2
 8005db0:	003ebc06 	br	80058a4 <__alt_data_end+0xfc0058a4>
 8005db4:	8085883a 	add	r2,r16,r2
 8005db8:	10c00117 	ldw	r3,4(r2)
 8005dbc:	81000317 	ldw	r4,12(r16)
 8005dc0:	81400217 	ldw	r5,8(r16)
 8005dc4:	18c00054 	ori	r3,r3,1
 8005dc8:	10c00115 	stw	r3,4(r2)
 8005dcc:	29000315 	stw	r4,12(r5)
 8005dd0:	21400215 	stw	r5,8(r4)
 8005dd4:	9009883a 	mov	r4,r18
 8005dd8:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8005ddc:	80800204 	addi	r2,r16,8
 8005de0:	003f2506 	br	8005a78 <__alt_data_end+0xfc005a78>
 8005de4:	12001704 	addi	r8,r2,92
 8005de8:	11c016c4 	addi	r7,r2,91
 8005dec:	4209883a 	add	r4,r8,r8
 8005df0:	003e9606 	br	800584c <__alt_data_end+0xfc00584c>
 8005df4:	3804d1ba 	srli	r2,r7,6
 8005df8:	11400e44 	addi	r5,r2,57
 8005dfc:	10c00e04 	addi	r3,r2,56
 8005e00:	294b883a 	add	r5,r5,r5
 8005e04:	003fbc06 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 8005e08:	84ff5926 	beq	r16,r19,8005b70 <__alt_data_end+0xfc005b70>
 8005e0c:	00820074 	movhi	r2,2049
 8005e10:	10827604 	addi	r2,r2,2520
 8005e14:	14000217 	ldw	r16,8(r2)
 8005e18:	00bfff04 	movi	r2,-4
 8005e1c:	80c00117 	ldw	r3,4(r16)
 8005e20:	1886703a 	and	r3,r3,r2
 8005e24:	003f9106 	br	8005c6c <__alt_data_end+0xfc005c6c>
 8005e28:	60800217 	ldw	r2,8(r12)
 8005e2c:	213fffc4 	addi	r4,r4,-1
 8005e30:	1300651e 	bne	r2,r12,8005fc8 <_malloc_r+0x7f4>
 8005e34:	208000cc 	andi	r2,r4,3
 8005e38:	633ffe04 	addi	r12,r12,-8
 8005e3c:	103ffa1e 	bne	r2,zero,8005e28 <__alt_data_end+0xfc005e28>
 8005e40:	98800117 	ldw	r2,4(r19)
 8005e44:	0146303a 	nor	r3,zero,r5
 8005e48:	1884703a 	and	r2,r3,r2
 8005e4c:	98800115 	stw	r2,4(r19)
 8005e50:	294b883a 	add	r5,r5,r5
 8005e54:	117f2836 	bltu	r2,r5,8005af8 <__alt_data_end+0xfc005af8>
 8005e58:	283f2726 	beq	r5,zero,8005af8 <__alt_data_end+0xfc005af8>
 8005e5c:	2886703a 	and	r3,r5,r2
 8005e60:	5809883a 	mov	r4,r11
 8005e64:	183ec31e 	bne	r3,zero,8005974 <__alt_data_end+0xfc005974>
 8005e68:	294b883a 	add	r5,r5,r5
 8005e6c:	2886703a 	and	r3,r5,r2
 8005e70:	21000104 	addi	r4,r4,4
 8005e74:	183ffc26 	beq	r3,zero,8005e68 <__alt_data_end+0xfc005e68>
 8005e78:	003ebe06 	br	8005974 <__alt_data_end+0xfc005974>
 8005e7c:	00c05504 	movi	r3,340
 8005e80:	18801236 	bltu	r3,r2,8005ecc <_malloc_r+0x6f8>
 8005e84:	8804d3fa 	srli	r2,r17,15
 8005e88:	12001e04 	addi	r8,r2,120
 8005e8c:	11c01dc4 	addi	r7,r2,119
 8005e90:	4209883a 	add	r4,r8,r8
 8005e94:	003e6d06 	br	800584c <__alt_data_end+0xfc00584c>
 8005e98:	00c40004 	movi	r3,4096
 8005e9c:	003f4606 	br	8005bb8 <__alt_data_end+0xfc005bb8>
 8005ea0:	00800044 	movi	r2,1
 8005ea4:	a0800115 	stw	r2,4(r20)
 8005ea8:	003f7406 	br	8005c7c <__alt_data_end+0xfc005c7c>
 8005eac:	1805d0ba 	srai	r2,r3,2
 8005eb0:	01c00044 	movi	r7,1
 8005eb4:	30c00117 	ldw	r3,4(r6)
 8005eb8:	388e983a 	sll	r7,r7,r2
 8005ebc:	2805883a 	mov	r2,r5
 8005ec0:	38c6b03a 	or	r3,r7,r3
 8005ec4:	30c00115 	stw	r3,4(r6)
 8005ec8:	003f9b06 	br	8005d38 <__alt_data_end+0xfc005d38>
 8005ecc:	00c15504 	movi	r3,1364
 8005ed0:	18801a36 	bltu	r3,r2,8005f3c <_malloc_r+0x768>
 8005ed4:	8804d4ba 	srli	r2,r17,18
 8005ed8:	12001f44 	addi	r8,r2,125
 8005edc:	11c01f04 	addi	r7,r2,124
 8005ee0:	4209883a 	add	r4,r8,r8
 8005ee4:	003e5906 	br	800584c <__alt_data_end+0xfc00584c>
 8005ee8:	ad400404 	addi	r21,r21,16
 8005eec:	003f1706 	br	8005b4c <__alt_data_end+0xfc005b4c>
 8005ef0:	00c01504 	movi	r3,84
 8005ef4:	18802336 	bltu	r3,r2,8005f84 <_malloc_r+0x7b0>
 8005ef8:	3804d33a 	srli	r2,r7,12
 8005efc:	11401bc4 	addi	r5,r2,111
 8005f00:	10c01b84 	addi	r3,r2,110
 8005f04:	294b883a 	add	r5,r5,r5
 8005f08:	003f7b06 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 8005f0c:	9c000217 	ldw	r16,8(r19)
 8005f10:	00bfff04 	movi	r2,-4
 8005f14:	80c00117 	ldw	r3,4(r16)
 8005f18:	1886703a 	and	r3,r3,r2
 8005f1c:	003f5306 	br	8005c6c <__alt_data_end+0xfc005c6c>
 8005f20:	3083ffcc 	andi	r2,r6,4095
 8005f24:	103f181e 	bne	r2,zero,8005b88 <__alt_data_end+0xfc005b88>
 8005f28:	99000217 	ldw	r4,8(r19)
 8005f2c:	b545883a 	add	r2,r22,r21
 8005f30:	10800054 	ori	r2,r2,1
 8005f34:	20800115 	stw	r2,4(r4)
 8005f38:	003f3e06 	br	8005c34 <__alt_data_end+0xfc005c34>
 8005f3c:	01003f84 	movi	r4,254
 8005f40:	02001fc4 	movi	r8,127
 8005f44:	01c01f84 	movi	r7,126
 8005f48:	003e4006 	br	800584c <__alt_data_end+0xfc00584c>
 8005f4c:	00820074 	movhi	r2,2049
 8005f50:	1087ff04 	addi	r2,r2,8188
 8005f54:	15000015 	stw	r20,0(r2)
 8005f58:	003f1106 	br	8005ba0 <__alt_data_end+0xfc005ba0>
 8005f5c:	00800044 	movi	r2,1
 8005f60:	002b883a 	mov	r21,zero
 8005f64:	003f1f06 	br	8005be4 <__alt_data_end+0xfc005be4>
 8005f68:	81400204 	addi	r5,r16,8
 8005f6c:	9009883a 	mov	r4,r18
 8005f70:	80050a40 	call	80050a4 <_free_r>
 8005f74:	00820074 	movhi	r2,2049
 8005f78:	108ed704 	addi	r2,r2,15196
 8005f7c:	10c00017 	ldw	r3,0(r2)
 8005f80:	003f2c06 	br	8005c34 <__alt_data_end+0xfc005c34>
 8005f84:	00c05504 	movi	r3,340
 8005f88:	18800536 	bltu	r3,r2,8005fa0 <_malloc_r+0x7cc>
 8005f8c:	3804d3fa 	srli	r2,r7,15
 8005f90:	11401e04 	addi	r5,r2,120
 8005f94:	10c01dc4 	addi	r3,r2,119
 8005f98:	294b883a 	add	r5,r5,r5
 8005f9c:	003f5606 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 8005fa0:	00c15504 	movi	r3,1364
 8005fa4:	18800536 	bltu	r3,r2,8005fbc <_malloc_r+0x7e8>
 8005fa8:	3804d4ba 	srli	r2,r7,18
 8005fac:	11401f44 	addi	r5,r2,125
 8005fb0:	10c01f04 	addi	r3,r2,124
 8005fb4:	294b883a 	add	r5,r5,r5
 8005fb8:	003f4f06 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 8005fbc:	01403f84 	movi	r5,254
 8005fc0:	00c01f84 	movi	r3,126
 8005fc4:	003f4c06 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 8005fc8:	98800117 	ldw	r2,4(r19)
 8005fcc:	003fa006 	br	8005e50 <__alt_data_end+0xfc005e50>
 8005fd0:	8808d0fa 	srli	r4,r17,3
 8005fd4:	20800044 	addi	r2,r4,1
 8005fd8:	1085883a 	add	r2,r2,r2
 8005fdc:	003e9006 	br	8005a20 <__alt_data_end+0xfc005a20>

08005fe0 <memchr>:
 8005fe0:	208000cc 	andi	r2,r4,3
 8005fe4:	280f883a 	mov	r7,r5
 8005fe8:	10003426 	beq	r2,zero,80060bc <memchr+0xdc>
 8005fec:	30bfffc4 	addi	r2,r6,-1
 8005ff0:	30001a26 	beq	r6,zero,800605c <memchr+0x7c>
 8005ff4:	20c00003 	ldbu	r3,0(r4)
 8005ff8:	29803fcc 	andi	r6,r5,255
 8005ffc:	30c0051e 	bne	r6,r3,8006014 <memchr+0x34>
 8006000:	00001806 	br	8006064 <memchr+0x84>
 8006004:	10001526 	beq	r2,zero,800605c <memchr+0x7c>
 8006008:	20c00003 	ldbu	r3,0(r4)
 800600c:	10bfffc4 	addi	r2,r2,-1
 8006010:	30c01426 	beq	r6,r3,8006064 <memchr+0x84>
 8006014:	21000044 	addi	r4,r4,1
 8006018:	20c000cc 	andi	r3,r4,3
 800601c:	183ff91e 	bne	r3,zero,8006004 <__alt_data_end+0xfc006004>
 8006020:	020000c4 	movi	r8,3
 8006024:	40801136 	bltu	r8,r2,800606c <memchr+0x8c>
 8006028:	10000c26 	beq	r2,zero,800605c <memchr+0x7c>
 800602c:	20c00003 	ldbu	r3,0(r4)
 8006030:	29403fcc 	andi	r5,r5,255
 8006034:	28c00b26 	beq	r5,r3,8006064 <memchr+0x84>
 8006038:	20c00044 	addi	r3,r4,1
 800603c:	39803fcc 	andi	r6,r7,255
 8006040:	2089883a 	add	r4,r4,r2
 8006044:	00000306 	br	8006054 <memchr+0x74>
 8006048:	18c00044 	addi	r3,r3,1
 800604c:	197fffc3 	ldbu	r5,-1(r3)
 8006050:	31400526 	beq	r6,r5,8006068 <memchr+0x88>
 8006054:	1805883a 	mov	r2,r3
 8006058:	20fffb1e 	bne	r4,r3,8006048 <__alt_data_end+0xfc006048>
 800605c:	0005883a 	mov	r2,zero
 8006060:	f800283a 	ret
 8006064:	2005883a 	mov	r2,r4
 8006068:	f800283a 	ret
 800606c:	28c03fcc 	andi	r3,r5,255
 8006070:	1812923a 	slli	r9,r3,8
 8006074:	02ffbff4 	movhi	r11,65279
 8006078:	02a02074 	movhi	r10,32897
 800607c:	48d2b03a 	or	r9,r9,r3
 8006080:	4806943a 	slli	r3,r9,16
 8006084:	5affbfc4 	addi	r11,r11,-257
 8006088:	52a02004 	addi	r10,r10,-32640
 800608c:	48d2b03a 	or	r9,r9,r3
 8006090:	20c00017 	ldw	r3,0(r4)
 8006094:	48c6f03a 	xor	r3,r9,r3
 8006098:	1acd883a 	add	r6,r3,r11
 800609c:	00c6303a 	nor	r3,zero,r3
 80060a0:	30c6703a 	and	r3,r6,r3
 80060a4:	1a86703a 	and	r3,r3,r10
 80060a8:	183fe01e 	bne	r3,zero,800602c <__alt_data_end+0xfc00602c>
 80060ac:	10bfff04 	addi	r2,r2,-4
 80060b0:	21000104 	addi	r4,r4,4
 80060b4:	40bff636 	bltu	r8,r2,8006090 <__alt_data_end+0xfc006090>
 80060b8:	003fdb06 	br	8006028 <__alt_data_end+0xfc006028>
 80060bc:	3005883a 	mov	r2,r6
 80060c0:	003fd706 	br	8006020 <__alt_data_end+0xfc006020>

080060c4 <memset>:
 80060c4:	20c000cc 	andi	r3,r4,3
 80060c8:	2005883a 	mov	r2,r4
 80060cc:	18004426 	beq	r3,zero,80061e0 <memset+0x11c>
 80060d0:	31ffffc4 	addi	r7,r6,-1
 80060d4:	30004026 	beq	r6,zero,80061d8 <memset+0x114>
 80060d8:	2813883a 	mov	r9,r5
 80060dc:	200d883a 	mov	r6,r4
 80060e0:	2007883a 	mov	r3,r4
 80060e4:	00000406 	br	80060f8 <memset+0x34>
 80060e8:	3a3fffc4 	addi	r8,r7,-1
 80060ec:	31800044 	addi	r6,r6,1
 80060f0:	38003926 	beq	r7,zero,80061d8 <memset+0x114>
 80060f4:	400f883a 	mov	r7,r8
 80060f8:	18c00044 	addi	r3,r3,1
 80060fc:	32400005 	stb	r9,0(r6)
 8006100:	1a0000cc 	andi	r8,r3,3
 8006104:	403ff81e 	bne	r8,zero,80060e8 <__alt_data_end+0xfc0060e8>
 8006108:	010000c4 	movi	r4,3
 800610c:	21c02d2e 	bgeu	r4,r7,80061c4 <memset+0x100>
 8006110:	29003fcc 	andi	r4,r5,255
 8006114:	200c923a 	slli	r6,r4,8
 8006118:	3108b03a 	or	r4,r6,r4
 800611c:	200c943a 	slli	r6,r4,16
 8006120:	218cb03a 	or	r6,r4,r6
 8006124:	010003c4 	movi	r4,15
 8006128:	21c0182e 	bgeu	r4,r7,800618c <memset+0xc8>
 800612c:	3b3ffc04 	addi	r12,r7,-16
 8006130:	6018d13a 	srli	r12,r12,4
 8006134:	1a000104 	addi	r8,r3,4
 8006138:	1ac00204 	addi	r11,r3,8
 800613c:	6008913a 	slli	r4,r12,4
 8006140:	1a800304 	addi	r10,r3,12
 8006144:	1813883a 	mov	r9,r3
 8006148:	21000504 	addi	r4,r4,20
 800614c:	1909883a 	add	r4,r3,r4
 8006150:	49800015 	stw	r6,0(r9)
 8006154:	41800015 	stw	r6,0(r8)
 8006158:	59800015 	stw	r6,0(r11)
 800615c:	51800015 	stw	r6,0(r10)
 8006160:	42000404 	addi	r8,r8,16
 8006164:	4a400404 	addi	r9,r9,16
 8006168:	5ac00404 	addi	r11,r11,16
 800616c:	52800404 	addi	r10,r10,16
 8006170:	413ff71e 	bne	r8,r4,8006150 <__alt_data_end+0xfc006150>
 8006174:	63000044 	addi	r12,r12,1
 8006178:	6018913a 	slli	r12,r12,4
 800617c:	39c003cc 	andi	r7,r7,15
 8006180:	010000c4 	movi	r4,3
 8006184:	1b07883a 	add	r3,r3,r12
 8006188:	21c00e2e 	bgeu	r4,r7,80061c4 <memset+0x100>
 800618c:	1813883a 	mov	r9,r3
 8006190:	3811883a 	mov	r8,r7
 8006194:	010000c4 	movi	r4,3
 8006198:	49800015 	stw	r6,0(r9)
 800619c:	423fff04 	addi	r8,r8,-4
 80061a0:	4a400104 	addi	r9,r9,4
 80061a4:	223ffc36 	bltu	r4,r8,8006198 <__alt_data_end+0xfc006198>
 80061a8:	393fff04 	addi	r4,r7,-4
 80061ac:	2008d0ba 	srli	r4,r4,2
 80061b0:	39c000cc 	andi	r7,r7,3
 80061b4:	21000044 	addi	r4,r4,1
 80061b8:	2109883a 	add	r4,r4,r4
 80061bc:	2109883a 	add	r4,r4,r4
 80061c0:	1907883a 	add	r3,r3,r4
 80061c4:	38000526 	beq	r7,zero,80061dc <memset+0x118>
 80061c8:	19cf883a 	add	r7,r3,r7
 80061cc:	19400005 	stb	r5,0(r3)
 80061d0:	18c00044 	addi	r3,r3,1
 80061d4:	38fffd1e 	bne	r7,r3,80061cc <__alt_data_end+0xfc0061cc>
 80061d8:	f800283a 	ret
 80061dc:	f800283a 	ret
 80061e0:	2007883a 	mov	r3,r4
 80061e4:	300f883a 	mov	r7,r6
 80061e8:	003fc706 	br	8006108 <__alt_data_end+0xfc006108>

080061ec <_Balloc>:
 80061ec:	20801317 	ldw	r2,76(r4)
 80061f0:	defffc04 	addi	sp,sp,-16
 80061f4:	dc400115 	stw	r17,4(sp)
 80061f8:	dc000015 	stw	r16,0(sp)
 80061fc:	dfc00315 	stw	ra,12(sp)
 8006200:	dc800215 	stw	r18,8(sp)
 8006204:	2023883a 	mov	r17,r4
 8006208:	2821883a 	mov	r16,r5
 800620c:	10000f26 	beq	r2,zero,800624c <_Balloc+0x60>
 8006210:	8407883a 	add	r3,r16,r16
 8006214:	18c7883a 	add	r3,r3,r3
 8006218:	10c7883a 	add	r3,r2,r3
 800621c:	18800017 	ldw	r2,0(r3)
 8006220:	10001126 	beq	r2,zero,8006268 <_Balloc+0x7c>
 8006224:	11000017 	ldw	r4,0(r2)
 8006228:	19000015 	stw	r4,0(r3)
 800622c:	10000415 	stw	zero,16(r2)
 8006230:	10000315 	stw	zero,12(r2)
 8006234:	dfc00317 	ldw	ra,12(sp)
 8006238:	dc800217 	ldw	r18,8(sp)
 800623c:	dc400117 	ldw	r17,4(sp)
 8006240:	dc000017 	ldw	r16,0(sp)
 8006244:	dec00404 	addi	sp,sp,16
 8006248:	f800283a 	ret
 800624c:	01800844 	movi	r6,33
 8006250:	01400104 	movi	r5,4
 8006254:	8008dc80 	call	8008dc8 <_calloc_r>
 8006258:	88801315 	stw	r2,76(r17)
 800625c:	103fec1e 	bne	r2,zero,8006210 <__alt_data_end+0xfc006210>
 8006260:	0005883a 	mov	r2,zero
 8006264:	003ff306 	br	8006234 <__alt_data_end+0xfc006234>
 8006268:	01400044 	movi	r5,1
 800626c:	2c24983a 	sll	r18,r5,r16
 8006270:	8809883a 	mov	r4,r17
 8006274:	91800144 	addi	r6,r18,5
 8006278:	318d883a 	add	r6,r6,r6
 800627c:	318d883a 	add	r6,r6,r6
 8006280:	8008dc80 	call	8008dc8 <_calloc_r>
 8006284:	103ff626 	beq	r2,zero,8006260 <__alt_data_end+0xfc006260>
 8006288:	14000115 	stw	r16,4(r2)
 800628c:	14800215 	stw	r18,8(r2)
 8006290:	003fe606 	br	800622c <__alt_data_end+0xfc00622c>

08006294 <_Bfree>:
 8006294:	28000826 	beq	r5,zero,80062b8 <_Bfree+0x24>
 8006298:	28c00117 	ldw	r3,4(r5)
 800629c:	20801317 	ldw	r2,76(r4)
 80062a0:	18c7883a 	add	r3,r3,r3
 80062a4:	18c7883a 	add	r3,r3,r3
 80062a8:	10c5883a 	add	r2,r2,r3
 80062ac:	10c00017 	ldw	r3,0(r2)
 80062b0:	28c00015 	stw	r3,0(r5)
 80062b4:	11400015 	stw	r5,0(r2)
 80062b8:	f800283a 	ret

080062bc <__multadd>:
 80062bc:	defff704 	addi	sp,sp,-36
 80062c0:	dc800215 	stw	r18,8(sp)
 80062c4:	2c800417 	ldw	r18,16(r5)
 80062c8:	dd800615 	stw	r22,24(sp)
 80062cc:	dd400515 	stw	r21,20(sp)
 80062d0:	dd000415 	stw	r20,16(sp)
 80062d4:	dcc00315 	stw	r19,12(sp)
 80062d8:	dc400115 	stw	r17,4(sp)
 80062dc:	dc000015 	stw	r16,0(sp)
 80062e0:	dfc00815 	stw	ra,32(sp)
 80062e4:	ddc00715 	stw	r23,28(sp)
 80062e8:	2827883a 	mov	r19,r5
 80062ec:	2029883a 	mov	r20,r4
 80062f0:	3023883a 	mov	r17,r6
 80062f4:	3821883a 	mov	r16,r7
 80062f8:	2d400504 	addi	r21,r5,20
 80062fc:	002d883a 	mov	r22,zero
 8006300:	adc00017 	ldw	r23,0(r21)
 8006304:	880b883a 	mov	r5,r17
 8006308:	ad400104 	addi	r21,r21,4
 800630c:	b93fffcc 	andi	r4,r23,65535
 8006310:	80009940 	call	8000994 <__mulsi3>
 8006314:	b808d43a 	srli	r4,r23,16
 8006318:	880b883a 	mov	r5,r17
 800631c:	1421883a 	add	r16,r2,r16
 8006320:	80009940 	call	8000994 <__mulsi3>
 8006324:	800ed43a 	srli	r7,r16,16
 8006328:	80ffffcc 	andi	r3,r16,65535
 800632c:	b5800044 	addi	r22,r22,1
 8006330:	11c5883a 	add	r2,r2,r7
 8006334:	100e943a 	slli	r7,r2,16
 8006338:	1020d43a 	srli	r16,r2,16
 800633c:	38c7883a 	add	r3,r7,r3
 8006340:	a8ffff15 	stw	r3,-4(r21)
 8006344:	b4bfee16 	blt	r22,r18,8006300 <__alt_data_end+0xfc006300>
 8006348:	80000926 	beq	r16,zero,8006370 <__multadd+0xb4>
 800634c:	98800217 	ldw	r2,8(r19)
 8006350:	9080130e 	bge	r18,r2,80063a0 <__multadd+0xe4>
 8006354:	90800144 	addi	r2,r18,5
 8006358:	1085883a 	add	r2,r2,r2
 800635c:	1085883a 	add	r2,r2,r2
 8006360:	9885883a 	add	r2,r19,r2
 8006364:	14000015 	stw	r16,0(r2)
 8006368:	94800044 	addi	r18,r18,1
 800636c:	9c800415 	stw	r18,16(r19)
 8006370:	9805883a 	mov	r2,r19
 8006374:	dfc00817 	ldw	ra,32(sp)
 8006378:	ddc00717 	ldw	r23,28(sp)
 800637c:	dd800617 	ldw	r22,24(sp)
 8006380:	dd400517 	ldw	r21,20(sp)
 8006384:	dd000417 	ldw	r20,16(sp)
 8006388:	dcc00317 	ldw	r19,12(sp)
 800638c:	dc800217 	ldw	r18,8(sp)
 8006390:	dc400117 	ldw	r17,4(sp)
 8006394:	dc000017 	ldw	r16,0(sp)
 8006398:	dec00904 	addi	sp,sp,36
 800639c:	f800283a 	ret
 80063a0:	99400117 	ldw	r5,4(r19)
 80063a4:	a009883a 	mov	r4,r20
 80063a8:	29400044 	addi	r5,r5,1
 80063ac:	80061ec0 	call	80061ec <_Balloc>
 80063b0:	99800417 	ldw	r6,16(r19)
 80063b4:	99400304 	addi	r5,r19,12
 80063b8:	11000304 	addi	r4,r2,12
 80063bc:	31800084 	addi	r6,r6,2
 80063c0:	318d883a 	add	r6,r6,r6
 80063c4:	318d883a 	add	r6,r6,r6
 80063c8:	1023883a 	mov	r17,r2
 80063cc:	80009bc0 	call	80009bc <memcpy>
 80063d0:	98000a26 	beq	r19,zero,80063fc <__multadd+0x140>
 80063d4:	98c00117 	ldw	r3,4(r19)
 80063d8:	a0801317 	ldw	r2,76(r20)
 80063dc:	18c7883a 	add	r3,r3,r3
 80063e0:	18c7883a 	add	r3,r3,r3
 80063e4:	10c5883a 	add	r2,r2,r3
 80063e8:	10c00017 	ldw	r3,0(r2)
 80063ec:	98c00015 	stw	r3,0(r19)
 80063f0:	14c00015 	stw	r19,0(r2)
 80063f4:	8827883a 	mov	r19,r17
 80063f8:	003fd606 	br	8006354 <__alt_data_end+0xfc006354>
 80063fc:	8827883a 	mov	r19,r17
 8006400:	003fd406 	br	8006354 <__alt_data_end+0xfc006354>

08006404 <__s2b>:
 8006404:	defff904 	addi	sp,sp,-28
 8006408:	dc400115 	stw	r17,4(sp)
 800640c:	dc000015 	stw	r16,0(sp)
 8006410:	2023883a 	mov	r17,r4
 8006414:	2821883a 	mov	r16,r5
 8006418:	39000204 	addi	r4,r7,8
 800641c:	01400244 	movi	r5,9
 8006420:	dcc00315 	stw	r19,12(sp)
 8006424:	dc800215 	stw	r18,8(sp)
 8006428:	dfc00615 	stw	ra,24(sp)
 800642c:	dd400515 	stw	r21,20(sp)
 8006430:	dd000415 	stw	r20,16(sp)
 8006434:	3825883a 	mov	r18,r7
 8006438:	3027883a 	mov	r19,r6
 800643c:	800ada80 	call	800ada8 <__divsi3>
 8006440:	00c00044 	movi	r3,1
 8006444:	000b883a 	mov	r5,zero
 8006448:	1880030e 	bge	r3,r2,8006458 <__s2b+0x54>
 800644c:	18c7883a 	add	r3,r3,r3
 8006450:	29400044 	addi	r5,r5,1
 8006454:	18bffd16 	blt	r3,r2,800644c <__alt_data_end+0xfc00644c>
 8006458:	8809883a 	mov	r4,r17
 800645c:	80061ec0 	call	80061ec <_Balloc>
 8006460:	d8c00717 	ldw	r3,28(sp)
 8006464:	10c00515 	stw	r3,20(r2)
 8006468:	00c00044 	movi	r3,1
 800646c:	10c00415 	stw	r3,16(r2)
 8006470:	00c00244 	movi	r3,9
 8006474:	1cc0210e 	bge	r3,r19,80064fc <__s2b+0xf8>
 8006478:	80eb883a 	add	r21,r16,r3
 800647c:	a829883a 	mov	r20,r21
 8006480:	84e1883a 	add	r16,r16,r19
 8006484:	a1c00007 	ldb	r7,0(r20)
 8006488:	01800284 	movi	r6,10
 800648c:	a5000044 	addi	r20,r20,1
 8006490:	100b883a 	mov	r5,r2
 8006494:	39fff404 	addi	r7,r7,-48
 8006498:	8809883a 	mov	r4,r17
 800649c:	80062bc0 	call	80062bc <__multadd>
 80064a0:	a43ff81e 	bne	r20,r16,8006484 <__alt_data_end+0xfc006484>
 80064a4:	ace1883a 	add	r16,r21,r19
 80064a8:	843ffe04 	addi	r16,r16,-8
 80064ac:	9c800a0e 	bge	r19,r18,80064d8 <__s2b+0xd4>
 80064b0:	94e5c83a 	sub	r18,r18,r19
 80064b4:	84a5883a 	add	r18,r16,r18
 80064b8:	81c00007 	ldb	r7,0(r16)
 80064bc:	01800284 	movi	r6,10
 80064c0:	84000044 	addi	r16,r16,1
 80064c4:	100b883a 	mov	r5,r2
 80064c8:	39fff404 	addi	r7,r7,-48
 80064cc:	8809883a 	mov	r4,r17
 80064d0:	80062bc0 	call	80062bc <__multadd>
 80064d4:	84bff81e 	bne	r16,r18,80064b8 <__alt_data_end+0xfc0064b8>
 80064d8:	dfc00617 	ldw	ra,24(sp)
 80064dc:	dd400517 	ldw	r21,20(sp)
 80064e0:	dd000417 	ldw	r20,16(sp)
 80064e4:	dcc00317 	ldw	r19,12(sp)
 80064e8:	dc800217 	ldw	r18,8(sp)
 80064ec:	dc400117 	ldw	r17,4(sp)
 80064f0:	dc000017 	ldw	r16,0(sp)
 80064f4:	dec00704 	addi	sp,sp,28
 80064f8:	f800283a 	ret
 80064fc:	84000284 	addi	r16,r16,10
 8006500:	1827883a 	mov	r19,r3
 8006504:	003fe906 	br	80064ac <__alt_data_end+0xfc0064ac>

08006508 <__hi0bits>:
 8006508:	20bfffec 	andhi	r2,r4,65535
 800650c:	1000141e 	bne	r2,zero,8006560 <__hi0bits+0x58>
 8006510:	2008943a 	slli	r4,r4,16
 8006514:	00800404 	movi	r2,16
 8006518:	20ffc02c 	andhi	r3,r4,65280
 800651c:	1800021e 	bne	r3,zero,8006528 <__hi0bits+0x20>
 8006520:	2008923a 	slli	r4,r4,8
 8006524:	10800204 	addi	r2,r2,8
 8006528:	20fc002c 	andhi	r3,r4,61440
 800652c:	1800021e 	bne	r3,zero,8006538 <__hi0bits+0x30>
 8006530:	2008913a 	slli	r4,r4,4
 8006534:	10800104 	addi	r2,r2,4
 8006538:	20f0002c 	andhi	r3,r4,49152
 800653c:	1800031e 	bne	r3,zero,800654c <__hi0bits+0x44>
 8006540:	2109883a 	add	r4,r4,r4
 8006544:	10800084 	addi	r2,r2,2
 8006548:	2109883a 	add	r4,r4,r4
 800654c:	20000316 	blt	r4,zero,800655c <__hi0bits+0x54>
 8006550:	2110002c 	andhi	r4,r4,16384
 8006554:	2000041e 	bne	r4,zero,8006568 <__hi0bits+0x60>
 8006558:	00800804 	movi	r2,32
 800655c:	f800283a 	ret
 8006560:	0005883a 	mov	r2,zero
 8006564:	003fec06 	br	8006518 <__alt_data_end+0xfc006518>
 8006568:	10800044 	addi	r2,r2,1
 800656c:	f800283a 	ret

08006570 <__lo0bits>:
 8006570:	20c00017 	ldw	r3,0(r4)
 8006574:	188001cc 	andi	r2,r3,7
 8006578:	10000826 	beq	r2,zero,800659c <__lo0bits+0x2c>
 800657c:	1880004c 	andi	r2,r3,1
 8006580:	1000211e 	bne	r2,zero,8006608 <__lo0bits+0x98>
 8006584:	1880008c 	andi	r2,r3,2
 8006588:	1000211e 	bne	r2,zero,8006610 <__lo0bits+0xa0>
 800658c:	1806d0ba 	srli	r3,r3,2
 8006590:	00800084 	movi	r2,2
 8006594:	20c00015 	stw	r3,0(r4)
 8006598:	f800283a 	ret
 800659c:	18bfffcc 	andi	r2,r3,65535
 80065a0:	10001326 	beq	r2,zero,80065f0 <__lo0bits+0x80>
 80065a4:	0005883a 	mov	r2,zero
 80065a8:	19403fcc 	andi	r5,r3,255
 80065ac:	2800021e 	bne	r5,zero,80065b8 <__lo0bits+0x48>
 80065b0:	1806d23a 	srli	r3,r3,8
 80065b4:	10800204 	addi	r2,r2,8
 80065b8:	194003cc 	andi	r5,r3,15
 80065bc:	2800021e 	bne	r5,zero,80065c8 <__lo0bits+0x58>
 80065c0:	1806d13a 	srli	r3,r3,4
 80065c4:	10800104 	addi	r2,r2,4
 80065c8:	194000cc 	andi	r5,r3,3
 80065cc:	2800021e 	bne	r5,zero,80065d8 <__lo0bits+0x68>
 80065d0:	1806d0ba 	srli	r3,r3,2
 80065d4:	10800084 	addi	r2,r2,2
 80065d8:	1940004c 	andi	r5,r3,1
 80065dc:	2800081e 	bne	r5,zero,8006600 <__lo0bits+0x90>
 80065e0:	1806d07a 	srli	r3,r3,1
 80065e4:	1800051e 	bne	r3,zero,80065fc <__lo0bits+0x8c>
 80065e8:	00800804 	movi	r2,32
 80065ec:	f800283a 	ret
 80065f0:	1806d43a 	srli	r3,r3,16
 80065f4:	00800404 	movi	r2,16
 80065f8:	003feb06 	br	80065a8 <__alt_data_end+0xfc0065a8>
 80065fc:	10800044 	addi	r2,r2,1
 8006600:	20c00015 	stw	r3,0(r4)
 8006604:	f800283a 	ret
 8006608:	0005883a 	mov	r2,zero
 800660c:	f800283a 	ret
 8006610:	1806d07a 	srli	r3,r3,1
 8006614:	00800044 	movi	r2,1
 8006618:	20c00015 	stw	r3,0(r4)
 800661c:	f800283a 	ret

08006620 <__i2b>:
 8006620:	defffd04 	addi	sp,sp,-12
 8006624:	dc000015 	stw	r16,0(sp)
 8006628:	04000044 	movi	r16,1
 800662c:	dc400115 	stw	r17,4(sp)
 8006630:	2823883a 	mov	r17,r5
 8006634:	800b883a 	mov	r5,r16
 8006638:	dfc00215 	stw	ra,8(sp)
 800663c:	80061ec0 	call	80061ec <_Balloc>
 8006640:	14400515 	stw	r17,20(r2)
 8006644:	14000415 	stw	r16,16(r2)
 8006648:	dfc00217 	ldw	ra,8(sp)
 800664c:	dc400117 	ldw	r17,4(sp)
 8006650:	dc000017 	ldw	r16,0(sp)
 8006654:	dec00304 	addi	sp,sp,12
 8006658:	f800283a 	ret

0800665c <__multiply>:
 800665c:	deffef04 	addi	sp,sp,-68
 8006660:	dc400815 	stw	r17,32(sp)
 8006664:	dc000715 	stw	r16,28(sp)
 8006668:	34400417 	ldw	r17,16(r6)
 800666c:	2c000417 	ldw	r16,16(r5)
 8006670:	dd800d15 	stw	r22,52(sp)
 8006674:	dc800915 	stw	r18,36(sp)
 8006678:	dfc01015 	stw	ra,64(sp)
 800667c:	df000f15 	stw	fp,60(sp)
 8006680:	ddc00e15 	stw	r23,56(sp)
 8006684:	dd400c15 	stw	r21,48(sp)
 8006688:	dd000b15 	stw	r20,44(sp)
 800668c:	dcc00a15 	stw	r19,40(sp)
 8006690:	2825883a 	mov	r18,r5
 8006694:	302d883a 	mov	r22,r6
 8006698:	8440050e 	bge	r16,r17,80066b0 <__multiply+0x54>
 800669c:	8007883a 	mov	r3,r16
 80066a0:	3025883a 	mov	r18,r6
 80066a4:	8821883a 	mov	r16,r17
 80066a8:	282d883a 	mov	r22,r5
 80066ac:	1823883a 	mov	r17,r3
 80066b0:	90800217 	ldw	r2,8(r18)
 80066b4:	8447883a 	add	r3,r16,r17
 80066b8:	d8c00215 	stw	r3,8(sp)
 80066bc:	91400117 	ldw	r5,4(r18)
 80066c0:	10c0010e 	bge	r2,r3,80066c8 <__multiply+0x6c>
 80066c4:	29400044 	addi	r5,r5,1
 80066c8:	80061ec0 	call	80061ec <_Balloc>
 80066cc:	d8c00217 	ldw	r3,8(sp)
 80066d0:	d8800615 	stw	r2,24(sp)
 80066d4:	18eb883a 	add	r21,r3,r3
 80066d8:	ad6b883a 	add	r21,r21,r21
 80066dc:	10c00504 	addi	r3,r2,20
 80066e0:	1d6b883a 	add	r21,r3,r21
 80066e4:	d8c00115 	stw	r3,4(sp)
 80066e8:	dd400315 	stw	r21,12(sp)
 80066ec:	1805883a 	mov	r2,r3
 80066f0:	1d40042e 	bgeu	r3,r21,8006704 <__multiply+0xa8>
 80066f4:	d8c00317 	ldw	r3,12(sp)
 80066f8:	10000015 	stw	zero,0(r2)
 80066fc:	10800104 	addi	r2,r2,4
 8006700:	10fffc36 	bltu	r2,r3,80066f4 <__alt_data_end+0xfc0066f4>
 8006704:	8c63883a 	add	r17,r17,r17
 8006708:	b5800504 	addi	r22,r22,20
 800670c:	8c63883a 	add	r17,r17,r17
 8006710:	94800504 	addi	r18,r18,20
 8006714:	8421883a 	add	r16,r16,r16
 8006718:	b463883a 	add	r17,r22,r17
 800671c:	8421883a 	add	r16,r16,r16
 8006720:	dd800015 	stw	r22,0(sp)
 8006724:	dc800415 	stw	r18,16(sp)
 8006728:	dc400515 	stw	r17,20(sp)
 800672c:	9429883a 	add	r20,r18,r16
 8006730:	b4404f2e 	bgeu	r22,r17,8006870 <__multiply+0x214>
 8006734:	d8c00017 	ldw	r3,0(sp)
 8006738:	1c800017 	ldw	r18,0(r3)
 800673c:	947fffcc 	andi	r17,r18,65535
 8006740:	88001e26 	beq	r17,zero,80067bc <__multiply+0x160>
 8006744:	dd800117 	ldw	r22,4(sp)
 8006748:	dd400417 	ldw	r21,16(sp)
 800674c:	0027883a 	mov	r19,zero
 8006750:	ac800017 	ldw	r18,0(r21)
 8006754:	b4000017 	ldw	r16,0(r22)
 8006758:	880b883a 	mov	r5,r17
 800675c:	913fffcc 	andi	r4,r18,65535
 8006760:	80009940 	call	8000994 <__mulsi3>
 8006764:	9008d43a 	srli	r4,r18,16
 8006768:	84bfffcc 	andi	r18,r16,65535
 800676c:	1485883a 	add	r2,r2,r18
 8006770:	14e5883a 	add	r18,r2,r19
 8006774:	8020d43a 	srli	r16,r16,16
 8006778:	9026d43a 	srli	r19,r18,16
 800677c:	880b883a 	mov	r5,r17
 8006780:	80009940 	call	8000994 <__mulsi3>
 8006784:	1405883a 	add	r2,r2,r16
 8006788:	14e1883a 	add	r16,r2,r19
 800678c:	90ffffcc 	andi	r3,r18,65535
 8006790:	8024943a 	slli	r18,r16,16
 8006794:	ad400104 	addi	r21,r21,4
 8006798:	b005883a 	mov	r2,r22
 800679c:	90c6b03a 	or	r3,r18,r3
 80067a0:	b0c00015 	stw	r3,0(r22)
 80067a4:	8026d43a 	srli	r19,r16,16
 80067a8:	b5800104 	addi	r22,r22,4
 80067ac:	ad3fe836 	bltu	r21,r20,8006750 <__alt_data_end+0xfc006750>
 80067b0:	d8c00017 	ldw	r3,0(sp)
 80067b4:	14c00115 	stw	r19,4(r2)
 80067b8:	1c800017 	ldw	r18,0(r3)
 80067bc:	9024d43a 	srli	r18,r18,16
 80067c0:	90002226 	beq	r18,zero,800684c <__multiply+0x1f0>
 80067c4:	d8c00117 	ldw	r3,4(sp)
 80067c8:	dd800417 	ldw	r22,16(sp)
 80067cc:	002f883a 	mov	r23,zero
 80067d0:	1f000017 	ldw	fp,0(r3)
 80067d4:	1823883a 	mov	r17,r3
 80067d8:	182b883a 	mov	r21,r3
 80067dc:	e021883a 	mov	r16,fp
 80067e0:	00000106 	br	80067e8 <__multiply+0x18c>
 80067e4:	982b883a 	mov	r21,r19
 80067e8:	b100000b 	ldhu	r4,0(r22)
 80067ec:	8020d43a 	srli	r16,r16,16
 80067f0:	900b883a 	mov	r5,r18
 80067f4:	80009940 	call	8000994 <__mulsi3>
 80067f8:	1405883a 	add	r2,r2,r16
 80067fc:	15ef883a 	add	r23,r2,r23
 8006800:	b804943a 	slli	r2,r23,16
 8006804:	e0ffffcc 	andi	r3,fp,65535
 8006808:	8c400104 	addi	r17,r17,4
 800680c:	10c6b03a 	or	r3,r2,r3
 8006810:	88ffff15 	stw	r3,-4(r17)
 8006814:	b5800104 	addi	r22,r22,4
 8006818:	b13fff17 	ldw	r4,-4(r22)
 800681c:	acc00104 	addi	r19,r21,4
 8006820:	900b883a 	mov	r5,r18
 8006824:	2008d43a 	srli	r4,r4,16
 8006828:	9c000017 	ldw	r16,0(r19)
 800682c:	80009940 	call	8000994 <__mulsi3>
 8006830:	b806d43a 	srli	r3,r23,16
 8006834:	813fffcc 	andi	r4,r16,65535
 8006838:	1105883a 	add	r2,r2,r4
 800683c:	10f9883a 	add	fp,r2,r3
 8006840:	e02ed43a 	srli	r23,fp,16
 8006844:	b53fe736 	bltu	r22,r20,80067e4 <__alt_data_end+0xfc0067e4>
 8006848:	af000115 	stw	fp,4(r21)
 800684c:	d8c00017 	ldw	r3,0(sp)
 8006850:	d9000517 	ldw	r4,20(sp)
 8006854:	18c00104 	addi	r3,r3,4
 8006858:	d8c00015 	stw	r3,0(sp)
 800685c:	d8c00117 	ldw	r3,4(sp)
 8006860:	18c00104 	addi	r3,r3,4
 8006864:	d8c00115 	stw	r3,4(sp)
 8006868:	d8c00017 	ldw	r3,0(sp)
 800686c:	193fb136 	bltu	r3,r4,8006734 <__alt_data_end+0xfc006734>
 8006870:	d8c00217 	ldw	r3,8(sp)
 8006874:	00c00c0e 	bge	zero,r3,80068a8 <__multiply+0x24c>
 8006878:	d8c00317 	ldw	r3,12(sp)
 800687c:	18bfff17 	ldw	r2,-4(r3)
 8006880:	1d7fff04 	addi	r21,r3,-4
 8006884:	10000326 	beq	r2,zero,8006894 <__multiply+0x238>
 8006888:	00000706 	br	80068a8 <__multiply+0x24c>
 800688c:	a8800017 	ldw	r2,0(r21)
 8006890:	1000051e 	bne	r2,zero,80068a8 <__multiply+0x24c>
 8006894:	d8c00217 	ldw	r3,8(sp)
 8006898:	ad7fff04 	addi	r21,r21,-4
 800689c:	18ffffc4 	addi	r3,r3,-1
 80068a0:	d8c00215 	stw	r3,8(sp)
 80068a4:	183ff91e 	bne	r3,zero,800688c <__alt_data_end+0xfc00688c>
 80068a8:	d8c00617 	ldw	r3,24(sp)
 80068ac:	d9000217 	ldw	r4,8(sp)
 80068b0:	1805883a 	mov	r2,r3
 80068b4:	19000415 	stw	r4,16(r3)
 80068b8:	dfc01017 	ldw	ra,64(sp)
 80068bc:	df000f17 	ldw	fp,60(sp)
 80068c0:	ddc00e17 	ldw	r23,56(sp)
 80068c4:	dd800d17 	ldw	r22,52(sp)
 80068c8:	dd400c17 	ldw	r21,48(sp)
 80068cc:	dd000b17 	ldw	r20,44(sp)
 80068d0:	dcc00a17 	ldw	r19,40(sp)
 80068d4:	dc800917 	ldw	r18,36(sp)
 80068d8:	dc400817 	ldw	r17,32(sp)
 80068dc:	dc000717 	ldw	r16,28(sp)
 80068e0:	dec01104 	addi	sp,sp,68
 80068e4:	f800283a 	ret

080068e8 <__pow5mult>:
 80068e8:	defffa04 	addi	sp,sp,-24
 80068ec:	dcc00315 	stw	r19,12(sp)
 80068f0:	dc000015 	stw	r16,0(sp)
 80068f4:	dfc00515 	stw	ra,20(sp)
 80068f8:	dd000415 	stw	r20,16(sp)
 80068fc:	dc800215 	stw	r18,8(sp)
 8006900:	dc400115 	stw	r17,4(sp)
 8006904:	308000cc 	andi	r2,r6,3
 8006908:	3021883a 	mov	r16,r6
 800690c:	2027883a 	mov	r19,r4
 8006910:	10002f1e 	bne	r2,zero,80069d0 <__pow5mult+0xe8>
 8006914:	2825883a 	mov	r18,r5
 8006918:	8021d0ba 	srai	r16,r16,2
 800691c:	80001a26 	beq	r16,zero,8006988 <__pow5mult+0xa0>
 8006920:	9c401217 	ldw	r17,72(r19)
 8006924:	8800061e 	bne	r17,zero,8006940 <__pow5mult+0x58>
 8006928:	00003406 	br	80069fc <__pow5mult+0x114>
 800692c:	8021d07a 	srai	r16,r16,1
 8006930:	80001526 	beq	r16,zero,8006988 <__pow5mult+0xa0>
 8006934:	88800017 	ldw	r2,0(r17)
 8006938:	10001c26 	beq	r2,zero,80069ac <__pow5mult+0xc4>
 800693c:	1023883a 	mov	r17,r2
 8006940:	8080004c 	andi	r2,r16,1
 8006944:	103ff926 	beq	r2,zero,800692c <__alt_data_end+0xfc00692c>
 8006948:	880d883a 	mov	r6,r17
 800694c:	900b883a 	mov	r5,r18
 8006950:	9809883a 	mov	r4,r19
 8006954:	800665c0 	call	800665c <__multiply>
 8006958:	90001b26 	beq	r18,zero,80069c8 <__pow5mult+0xe0>
 800695c:	91000117 	ldw	r4,4(r18)
 8006960:	98c01317 	ldw	r3,76(r19)
 8006964:	8021d07a 	srai	r16,r16,1
 8006968:	2109883a 	add	r4,r4,r4
 800696c:	2109883a 	add	r4,r4,r4
 8006970:	1907883a 	add	r3,r3,r4
 8006974:	19000017 	ldw	r4,0(r3)
 8006978:	91000015 	stw	r4,0(r18)
 800697c:	1c800015 	stw	r18,0(r3)
 8006980:	1025883a 	mov	r18,r2
 8006984:	803feb1e 	bne	r16,zero,8006934 <__alt_data_end+0xfc006934>
 8006988:	9005883a 	mov	r2,r18
 800698c:	dfc00517 	ldw	ra,20(sp)
 8006990:	dd000417 	ldw	r20,16(sp)
 8006994:	dcc00317 	ldw	r19,12(sp)
 8006998:	dc800217 	ldw	r18,8(sp)
 800699c:	dc400117 	ldw	r17,4(sp)
 80069a0:	dc000017 	ldw	r16,0(sp)
 80069a4:	dec00604 	addi	sp,sp,24
 80069a8:	f800283a 	ret
 80069ac:	880d883a 	mov	r6,r17
 80069b0:	880b883a 	mov	r5,r17
 80069b4:	9809883a 	mov	r4,r19
 80069b8:	800665c0 	call	800665c <__multiply>
 80069bc:	88800015 	stw	r2,0(r17)
 80069c0:	10000015 	stw	zero,0(r2)
 80069c4:	003fdd06 	br	800693c <__alt_data_end+0xfc00693c>
 80069c8:	1025883a 	mov	r18,r2
 80069cc:	003fd706 	br	800692c <__alt_data_end+0xfc00692c>
 80069d0:	10bfffc4 	addi	r2,r2,-1
 80069d4:	1085883a 	add	r2,r2,r2
 80069d8:	00c20074 	movhi	r3,2049
 80069dc:	18c0b304 	addi	r3,r3,716
 80069e0:	1085883a 	add	r2,r2,r2
 80069e4:	1885883a 	add	r2,r3,r2
 80069e8:	11800017 	ldw	r6,0(r2)
 80069ec:	000f883a 	mov	r7,zero
 80069f0:	80062bc0 	call	80062bc <__multadd>
 80069f4:	1025883a 	mov	r18,r2
 80069f8:	003fc706 	br	8006918 <__alt_data_end+0xfc006918>
 80069fc:	05000044 	movi	r20,1
 8006a00:	a00b883a 	mov	r5,r20
 8006a04:	9809883a 	mov	r4,r19
 8006a08:	80061ec0 	call	80061ec <_Balloc>
 8006a0c:	1023883a 	mov	r17,r2
 8006a10:	00809c44 	movi	r2,625
 8006a14:	88800515 	stw	r2,20(r17)
 8006a18:	8d000415 	stw	r20,16(r17)
 8006a1c:	9c401215 	stw	r17,72(r19)
 8006a20:	88000015 	stw	zero,0(r17)
 8006a24:	003fc606 	br	8006940 <__alt_data_end+0xfc006940>

08006a28 <__lshift>:
 8006a28:	defff904 	addi	sp,sp,-28
 8006a2c:	dd400515 	stw	r21,20(sp)
 8006a30:	dcc00315 	stw	r19,12(sp)
 8006a34:	302bd17a 	srai	r21,r6,5
 8006a38:	2cc00417 	ldw	r19,16(r5)
 8006a3c:	28800217 	ldw	r2,8(r5)
 8006a40:	dd000415 	stw	r20,16(sp)
 8006a44:	ace7883a 	add	r19,r21,r19
 8006a48:	dc800215 	stw	r18,8(sp)
 8006a4c:	dc400115 	stw	r17,4(sp)
 8006a50:	dc000015 	stw	r16,0(sp)
 8006a54:	dfc00615 	stw	ra,24(sp)
 8006a58:	9c000044 	addi	r16,r19,1
 8006a5c:	2823883a 	mov	r17,r5
 8006a60:	3029883a 	mov	r20,r6
 8006a64:	2025883a 	mov	r18,r4
 8006a68:	29400117 	ldw	r5,4(r5)
 8006a6c:	1400030e 	bge	r2,r16,8006a7c <__lshift+0x54>
 8006a70:	1085883a 	add	r2,r2,r2
 8006a74:	29400044 	addi	r5,r5,1
 8006a78:	143ffd16 	blt	r2,r16,8006a70 <__alt_data_end+0xfc006a70>
 8006a7c:	9009883a 	mov	r4,r18
 8006a80:	80061ec0 	call	80061ec <_Balloc>
 8006a84:	10c00504 	addi	r3,r2,20
 8006a88:	0540070e 	bge	zero,r21,8006aa8 <__lshift+0x80>
 8006a8c:	ad6b883a 	add	r21,r21,r21
 8006a90:	ad6b883a 	add	r21,r21,r21
 8006a94:	1809883a 	mov	r4,r3
 8006a98:	1d47883a 	add	r3,r3,r21
 8006a9c:	20000015 	stw	zero,0(r4)
 8006aa0:	21000104 	addi	r4,r4,4
 8006aa4:	193ffd1e 	bne	r3,r4,8006a9c <__alt_data_end+0xfc006a9c>
 8006aa8:	8a000417 	ldw	r8,16(r17)
 8006aac:	89000504 	addi	r4,r17,20
 8006ab0:	a18007cc 	andi	r6,r20,31
 8006ab4:	4211883a 	add	r8,r8,r8
 8006ab8:	4211883a 	add	r8,r8,r8
 8006abc:	2211883a 	add	r8,r4,r8
 8006ac0:	30002326 	beq	r6,zero,8006b50 <__lshift+0x128>
 8006ac4:	02400804 	movi	r9,32
 8006ac8:	4993c83a 	sub	r9,r9,r6
 8006acc:	000b883a 	mov	r5,zero
 8006ad0:	21c00017 	ldw	r7,0(r4)
 8006ad4:	1815883a 	mov	r10,r3
 8006ad8:	18c00104 	addi	r3,r3,4
 8006adc:	398e983a 	sll	r7,r7,r6
 8006ae0:	21000104 	addi	r4,r4,4
 8006ae4:	394ab03a 	or	r5,r7,r5
 8006ae8:	197fff15 	stw	r5,-4(r3)
 8006aec:	217fff17 	ldw	r5,-4(r4)
 8006af0:	2a4ad83a 	srl	r5,r5,r9
 8006af4:	223ff636 	bltu	r4,r8,8006ad0 <__alt_data_end+0xfc006ad0>
 8006af8:	51400115 	stw	r5,4(r10)
 8006afc:	28001a1e 	bne	r5,zero,8006b68 <__lshift+0x140>
 8006b00:	843fffc4 	addi	r16,r16,-1
 8006b04:	14000415 	stw	r16,16(r2)
 8006b08:	88000826 	beq	r17,zero,8006b2c <__lshift+0x104>
 8006b0c:	89000117 	ldw	r4,4(r17)
 8006b10:	90c01317 	ldw	r3,76(r18)
 8006b14:	2109883a 	add	r4,r4,r4
 8006b18:	2109883a 	add	r4,r4,r4
 8006b1c:	1907883a 	add	r3,r3,r4
 8006b20:	19000017 	ldw	r4,0(r3)
 8006b24:	89000015 	stw	r4,0(r17)
 8006b28:	1c400015 	stw	r17,0(r3)
 8006b2c:	dfc00617 	ldw	ra,24(sp)
 8006b30:	dd400517 	ldw	r21,20(sp)
 8006b34:	dd000417 	ldw	r20,16(sp)
 8006b38:	dcc00317 	ldw	r19,12(sp)
 8006b3c:	dc800217 	ldw	r18,8(sp)
 8006b40:	dc400117 	ldw	r17,4(sp)
 8006b44:	dc000017 	ldw	r16,0(sp)
 8006b48:	dec00704 	addi	sp,sp,28
 8006b4c:	f800283a 	ret
 8006b50:	21400017 	ldw	r5,0(r4)
 8006b54:	18c00104 	addi	r3,r3,4
 8006b58:	21000104 	addi	r4,r4,4
 8006b5c:	197fff15 	stw	r5,-4(r3)
 8006b60:	223ffb36 	bltu	r4,r8,8006b50 <__alt_data_end+0xfc006b50>
 8006b64:	003fe606 	br	8006b00 <__alt_data_end+0xfc006b00>
 8006b68:	9c000084 	addi	r16,r19,2
 8006b6c:	003fe406 	br	8006b00 <__alt_data_end+0xfc006b00>

08006b70 <__mcmp>:
 8006b70:	20800417 	ldw	r2,16(r4)
 8006b74:	28c00417 	ldw	r3,16(r5)
 8006b78:	10c5c83a 	sub	r2,r2,r3
 8006b7c:	1000111e 	bne	r2,zero,8006bc4 <__mcmp+0x54>
 8006b80:	18c7883a 	add	r3,r3,r3
 8006b84:	18c7883a 	add	r3,r3,r3
 8006b88:	21000504 	addi	r4,r4,20
 8006b8c:	29400504 	addi	r5,r5,20
 8006b90:	20c5883a 	add	r2,r4,r3
 8006b94:	28cb883a 	add	r5,r5,r3
 8006b98:	00000106 	br	8006ba0 <__mcmp+0x30>
 8006b9c:	20800a2e 	bgeu	r4,r2,8006bc8 <__mcmp+0x58>
 8006ba0:	10bfff04 	addi	r2,r2,-4
 8006ba4:	297fff04 	addi	r5,r5,-4
 8006ba8:	11800017 	ldw	r6,0(r2)
 8006bac:	28c00017 	ldw	r3,0(r5)
 8006bb0:	30fffa26 	beq	r6,r3,8006b9c <__alt_data_end+0xfc006b9c>
 8006bb4:	30c00236 	bltu	r6,r3,8006bc0 <__mcmp+0x50>
 8006bb8:	00800044 	movi	r2,1
 8006bbc:	f800283a 	ret
 8006bc0:	00bfffc4 	movi	r2,-1
 8006bc4:	f800283a 	ret
 8006bc8:	0005883a 	mov	r2,zero
 8006bcc:	f800283a 	ret

08006bd0 <__mdiff>:
 8006bd0:	28c00417 	ldw	r3,16(r5)
 8006bd4:	30800417 	ldw	r2,16(r6)
 8006bd8:	defffa04 	addi	sp,sp,-24
 8006bdc:	dcc00315 	stw	r19,12(sp)
 8006be0:	dc800215 	stw	r18,8(sp)
 8006be4:	dfc00515 	stw	ra,20(sp)
 8006be8:	dd000415 	stw	r20,16(sp)
 8006bec:	dc400115 	stw	r17,4(sp)
 8006bf0:	dc000015 	stw	r16,0(sp)
 8006bf4:	1887c83a 	sub	r3,r3,r2
 8006bf8:	2825883a 	mov	r18,r5
 8006bfc:	3027883a 	mov	r19,r6
 8006c00:	1800141e 	bne	r3,zero,8006c54 <__mdiff+0x84>
 8006c04:	1085883a 	add	r2,r2,r2
 8006c08:	1085883a 	add	r2,r2,r2
 8006c0c:	2a000504 	addi	r8,r5,20
 8006c10:	34000504 	addi	r16,r6,20
 8006c14:	4087883a 	add	r3,r8,r2
 8006c18:	8085883a 	add	r2,r16,r2
 8006c1c:	00000106 	br	8006c24 <__mdiff+0x54>
 8006c20:	40c0592e 	bgeu	r8,r3,8006d88 <__mdiff+0x1b8>
 8006c24:	18ffff04 	addi	r3,r3,-4
 8006c28:	10bfff04 	addi	r2,r2,-4
 8006c2c:	19c00017 	ldw	r7,0(r3)
 8006c30:	11400017 	ldw	r5,0(r2)
 8006c34:	397ffa26 	beq	r7,r5,8006c20 <__alt_data_end+0xfc006c20>
 8006c38:	3940592e 	bgeu	r7,r5,8006da0 <__mdiff+0x1d0>
 8006c3c:	9005883a 	mov	r2,r18
 8006c40:	4023883a 	mov	r17,r8
 8006c44:	9825883a 	mov	r18,r19
 8006c48:	05000044 	movi	r20,1
 8006c4c:	1027883a 	mov	r19,r2
 8006c50:	00000406 	br	8006c64 <__mdiff+0x94>
 8006c54:	18005616 	blt	r3,zero,8006db0 <__mdiff+0x1e0>
 8006c58:	34400504 	addi	r17,r6,20
 8006c5c:	2c000504 	addi	r16,r5,20
 8006c60:	0029883a 	mov	r20,zero
 8006c64:	91400117 	ldw	r5,4(r18)
 8006c68:	80061ec0 	call	80061ec <_Balloc>
 8006c6c:	92400417 	ldw	r9,16(r18)
 8006c70:	9b000417 	ldw	r12,16(r19)
 8006c74:	12c00504 	addi	r11,r2,20
 8006c78:	4a51883a 	add	r8,r9,r9
 8006c7c:	6319883a 	add	r12,r12,r12
 8006c80:	4211883a 	add	r8,r8,r8
 8006c84:	6319883a 	add	r12,r12,r12
 8006c88:	15000315 	stw	r20,12(r2)
 8006c8c:	8211883a 	add	r8,r16,r8
 8006c90:	8b19883a 	add	r12,r17,r12
 8006c94:	0007883a 	mov	r3,zero
 8006c98:	81400017 	ldw	r5,0(r16)
 8006c9c:	89c00017 	ldw	r7,0(r17)
 8006ca0:	59800104 	addi	r6,r11,4
 8006ca4:	293fffcc 	andi	r4,r5,65535
 8006ca8:	20c7883a 	add	r3,r4,r3
 8006cac:	393fffcc 	andi	r4,r7,65535
 8006cb0:	1909c83a 	sub	r4,r3,r4
 8006cb4:	280ad43a 	srli	r5,r5,16
 8006cb8:	380ed43a 	srli	r7,r7,16
 8006cbc:	2007d43a 	srai	r3,r4,16
 8006cc0:	213fffcc 	andi	r4,r4,65535
 8006cc4:	29cbc83a 	sub	r5,r5,r7
 8006cc8:	28c7883a 	add	r3,r5,r3
 8006ccc:	180a943a 	slli	r5,r3,16
 8006cd0:	8c400104 	addi	r17,r17,4
 8006cd4:	84000104 	addi	r16,r16,4
 8006cd8:	2908b03a 	or	r4,r5,r4
 8006cdc:	59000015 	stw	r4,0(r11)
 8006ce0:	1807d43a 	srai	r3,r3,16
 8006ce4:	3015883a 	mov	r10,r6
 8006ce8:	3017883a 	mov	r11,r6
 8006cec:	8b3fea36 	bltu	r17,r12,8006c98 <__alt_data_end+0xfc006c98>
 8006cf0:	8200162e 	bgeu	r16,r8,8006d4c <__mdiff+0x17c>
 8006cf4:	8017883a 	mov	r11,r16
 8006cf8:	59400017 	ldw	r5,0(r11)
 8006cfc:	31800104 	addi	r6,r6,4
 8006d00:	5ac00104 	addi	r11,r11,4
 8006d04:	293fffcc 	andi	r4,r5,65535
 8006d08:	20c7883a 	add	r3,r4,r3
 8006d0c:	280ed43a 	srli	r7,r5,16
 8006d10:	180bd43a 	srai	r5,r3,16
 8006d14:	193fffcc 	andi	r4,r3,65535
 8006d18:	3947883a 	add	r3,r7,r5
 8006d1c:	180a943a 	slli	r5,r3,16
 8006d20:	1807d43a 	srai	r3,r3,16
 8006d24:	2908b03a 	or	r4,r5,r4
 8006d28:	313fff15 	stw	r4,-4(r6)
 8006d2c:	5a3ff236 	bltu	r11,r8,8006cf8 <__alt_data_end+0xfc006cf8>
 8006d30:	0406303a 	nor	r3,zero,r16
 8006d34:	1a07883a 	add	r3,r3,r8
 8006d38:	1806d0ba 	srli	r3,r3,2
 8006d3c:	18c00044 	addi	r3,r3,1
 8006d40:	18c7883a 	add	r3,r3,r3
 8006d44:	18c7883a 	add	r3,r3,r3
 8006d48:	50d5883a 	add	r10,r10,r3
 8006d4c:	50ffff04 	addi	r3,r10,-4
 8006d50:	2000041e 	bne	r4,zero,8006d64 <__mdiff+0x194>
 8006d54:	18ffff04 	addi	r3,r3,-4
 8006d58:	19000017 	ldw	r4,0(r3)
 8006d5c:	4a7fffc4 	addi	r9,r9,-1
 8006d60:	203ffc26 	beq	r4,zero,8006d54 <__alt_data_end+0xfc006d54>
 8006d64:	12400415 	stw	r9,16(r2)
 8006d68:	dfc00517 	ldw	ra,20(sp)
 8006d6c:	dd000417 	ldw	r20,16(sp)
 8006d70:	dcc00317 	ldw	r19,12(sp)
 8006d74:	dc800217 	ldw	r18,8(sp)
 8006d78:	dc400117 	ldw	r17,4(sp)
 8006d7c:	dc000017 	ldw	r16,0(sp)
 8006d80:	dec00604 	addi	sp,sp,24
 8006d84:	f800283a 	ret
 8006d88:	000b883a 	mov	r5,zero
 8006d8c:	80061ec0 	call	80061ec <_Balloc>
 8006d90:	00c00044 	movi	r3,1
 8006d94:	10c00415 	stw	r3,16(r2)
 8006d98:	10000515 	stw	zero,20(r2)
 8006d9c:	003ff206 	br	8006d68 <__alt_data_end+0xfc006d68>
 8006da0:	8023883a 	mov	r17,r16
 8006da4:	0029883a 	mov	r20,zero
 8006da8:	4021883a 	mov	r16,r8
 8006dac:	003fad06 	br	8006c64 <__alt_data_end+0xfc006c64>
 8006db0:	9005883a 	mov	r2,r18
 8006db4:	94400504 	addi	r17,r18,20
 8006db8:	9c000504 	addi	r16,r19,20
 8006dbc:	9825883a 	mov	r18,r19
 8006dc0:	05000044 	movi	r20,1
 8006dc4:	1027883a 	mov	r19,r2
 8006dc8:	003fa606 	br	8006c64 <__alt_data_end+0xfc006c64>

08006dcc <__ulp>:
 8006dcc:	295ffc2c 	andhi	r5,r5,32752
 8006dd0:	00bf3034 	movhi	r2,64704
 8006dd4:	2887883a 	add	r3,r5,r2
 8006dd8:	00c0020e 	bge	zero,r3,8006de4 <__ulp+0x18>
 8006ddc:	0005883a 	mov	r2,zero
 8006de0:	f800283a 	ret
 8006de4:	00c7c83a 	sub	r3,zero,r3
 8006de8:	1807d53a 	srai	r3,r3,20
 8006dec:	008004c4 	movi	r2,19
 8006df0:	10c00b0e 	bge	r2,r3,8006e20 <__ulp+0x54>
 8006df4:	18bffb04 	addi	r2,r3,-20
 8006df8:	01000784 	movi	r4,30
 8006dfc:	0007883a 	mov	r3,zero
 8006e00:	20800516 	blt	r4,r2,8006e18 <__ulp+0x4c>
 8006e04:	010007c4 	movi	r4,31
 8006e08:	2089c83a 	sub	r4,r4,r2
 8006e0c:	00800044 	movi	r2,1
 8006e10:	1104983a 	sll	r2,r2,r4
 8006e14:	f800283a 	ret
 8006e18:	00800044 	movi	r2,1
 8006e1c:	f800283a 	ret
 8006e20:	01400234 	movhi	r5,8
 8006e24:	28c7d83a 	sra	r3,r5,r3
 8006e28:	0005883a 	mov	r2,zero
 8006e2c:	f800283a 	ret

08006e30 <__b2d>:
 8006e30:	defffa04 	addi	sp,sp,-24
 8006e34:	dc000015 	stw	r16,0(sp)
 8006e38:	24000417 	ldw	r16,16(r4)
 8006e3c:	dc400115 	stw	r17,4(sp)
 8006e40:	24400504 	addi	r17,r4,20
 8006e44:	8421883a 	add	r16,r16,r16
 8006e48:	8421883a 	add	r16,r16,r16
 8006e4c:	8c21883a 	add	r16,r17,r16
 8006e50:	dc800215 	stw	r18,8(sp)
 8006e54:	84bfff17 	ldw	r18,-4(r16)
 8006e58:	dd000415 	stw	r20,16(sp)
 8006e5c:	dcc00315 	stw	r19,12(sp)
 8006e60:	9009883a 	mov	r4,r18
 8006e64:	2829883a 	mov	r20,r5
 8006e68:	dfc00515 	stw	ra,20(sp)
 8006e6c:	80065080 	call	8006508 <__hi0bits>
 8006e70:	00c00804 	movi	r3,32
 8006e74:	1889c83a 	sub	r4,r3,r2
 8006e78:	a1000015 	stw	r4,0(r20)
 8006e7c:	01000284 	movi	r4,10
 8006e80:	84ffff04 	addi	r19,r16,-4
 8006e84:	20801216 	blt	r4,r2,8006ed0 <__b2d+0xa0>
 8006e88:	018002c4 	movi	r6,11
 8006e8c:	308dc83a 	sub	r6,r6,r2
 8006e90:	9186d83a 	srl	r3,r18,r6
 8006e94:	18cffc34 	orhi	r3,r3,16368
 8006e98:	8cc0212e 	bgeu	r17,r19,8006f20 <__b2d+0xf0>
 8006e9c:	813ffe17 	ldw	r4,-8(r16)
 8006ea0:	218cd83a 	srl	r6,r4,r6
 8006ea4:	10800544 	addi	r2,r2,21
 8006ea8:	9084983a 	sll	r2,r18,r2
 8006eac:	1184b03a 	or	r2,r2,r6
 8006eb0:	dfc00517 	ldw	ra,20(sp)
 8006eb4:	dd000417 	ldw	r20,16(sp)
 8006eb8:	dcc00317 	ldw	r19,12(sp)
 8006ebc:	dc800217 	ldw	r18,8(sp)
 8006ec0:	dc400117 	ldw	r17,4(sp)
 8006ec4:	dc000017 	ldw	r16,0(sp)
 8006ec8:	dec00604 	addi	sp,sp,24
 8006ecc:	f800283a 	ret
 8006ed0:	8cc00f2e 	bgeu	r17,r19,8006f10 <__b2d+0xe0>
 8006ed4:	117ffd44 	addi	r5,r2,-11
 8006ed8:	80bffe17 	ldw	r2,-8(r16)
 8006edc:	28000e26 	beq	r5,zero,8006f18 <__b2d+0xe8>
 8006ee0:	1949c83a 	sub	r4,r3,r5
 8006ee4:	9164983a 	sll	r18,r18,r5
 8006ee8:	1106d83a 	srl	r3,r2,r4
 8006eec:	81bffe04 	addi	r6,r16,-8
 8006ef0:	948ffc34 	orhi	r18,r18,16368
 8006ef4:	90c6b03a 	or	r3,r18,r3
 8006ef8:	89800e2e 	bgeu	r17,r6,8006f34 <__b2d+0x104>
 8006efc:	81bffd17 	ldw	r6,-12(r16)
 8006f00:	1144983a 	sll	r2,r2,r5
 8006f04:	310ad83a 	srl	r5,r6,r4
 8006f08:	2884b03a 	or	r2,r5,r2
 8006f0c:	003fe806 	br	8006eb0 <__alt_data_end+0xfc006eb0>
 8006f10:	10bffd44 	addi	r2,r2,-11
 8006f14:	1000041e 	bne	r2,zero,8006f28 <__b2d+0xf8>
 8006f18:	90cffc34 	orhi	r3,r18,16368
 8006f1c:	003fe406 	br	8006eb0 <__alt_data_end+0xfc006eb0>
 8006f20:	000d883a 	mov	r6,zero
 8006f24:	003fdf06 	br	8006ea4 <__alt_data_end+0xfc006ea4>
 8006f28:	90a4983a 	sll	r18,r18,r2
 8006f2c:	0005883a 	mov	r2,zero
 8006f30:	003ff906 	br	8006f18 <__alt_data_end+0xfc006f18>
 8006f34:	1144983a 	sll	r2,r2,r5
 8006f38:	003fdd06 	br	8006eb0 <__alt_data_end+0xfc006eb0>

08006f3c <__d2b>:
 8006f3c:	defff804 	addi	sp,sp,-32
 8006f40:	dc000215 	stw	r16,8(sp)
 8006f44:	3021883a 	mov	r16,r6
 8006f48:	dc400315 	stw	r17,12(sp)
 8006f4c:	8022907a 	slli	r17,r16,1
 8006f50:	dd000615 	stw	r20,24(sp)
 8006f54:	2829883a 	mov	r20,r5
 8006f58:	01400044 	movi	r5,1
 8006f5c:	dcc00515 	stw	r19,20(sp)
 8006f60:	dc800415 	stw	r18,16(sp)
 8006f64:	dfc00715 	stw	ra,28(sp)
 8006f68:	3825883a 	mov	r18,r7
 8006f6c:	8822d57a 	srli	r17,r17,21
 8006f70:	80061ec0 	call	80061ec <_Balloc>
 8006f74:	1027883a 	mov	r19,r2
 8006f78:	00800434 	movhi	r2,16
 8006f7c:	10bfffc4 	addi	r2,r2,-1
 8006f80:	808c703a 	and	r6,r16,r2
 8006f84:	88000126 	beq	r17,zero,8006f8c <__d2b+0x50>
 8006f88:	31800434 	orhi	r6,r6,16
 8006f8c:	d9800015 	stw	r6,0(sp)
 8006f90:	a0002426 	beq	r20,zero,8007024 <__d2b+0xe8>
 8006f94:	d9000104 	addi	r4,sp,4
 8006f98:	dd000115 	stw	r20,4(sp)
 8006f9c:	80065700 	call	8006570 <__lo0bits>
 8006fa0:	d8c00017 	ldw	r3,0(sp)
 8006fa4:	10002f1e 	bne	r2,zero,8007064 <__d2b+0x128>
 8006fa8:	d9000117 	ldw	r4,4(sp)
 8006fac:	99000515 	stw	r4,20(r19)
 8006fb0:	1821003a 	cmpeq	r16,r3,zero
 8006fb4:	01000084 	movi	r4,2
 8006fb8:	2421c83a 	sub	r16,r4,r16
 8006fbc:	98c00615 	stw	r3,24(r19)
 8006fc0:	9c000415 	stw	r16,16(r19)
 8006fc4:	88001f1e 	bne	r17,zero,8007044 <__d2b+0x108>
 8006fc8:	10bef384 	addi	r2,r2,-1074
 8006fcc:	90800015 	stw	r2,0(r18)
 8006fd0:	00900034 	movhi	r2,16384
 8006fd4:	10bfffc4 	addi	r2,r2,-1
 8006fd8:	8085883a 	add	r2,r16,r2
 8006fdc:	1085883a 	add	r2,r2,r2
 8006fe0:	1085883a 	add	r2,r2,r2
 8006fe4:	9885883a 	add	r2,r19,r2
 8006fe8:	11000517 	ldw	r4,20(r2)
 8006fec:	8020917a 	slli	r16,r16,5
 8006ff0:	80065080 	call	8006508 <__hi0bits>
 8006ff4:	d8c00817 	ldw	r3,32(sp)
 8006ff8:	8085c83a 	sub	r2,r16,r2
 8006ffc:	18800015 	stw	r2,0(r3)
 8007000:	9805883a 	mov	r2,r19
 8007004:	dfc00717 	ldw	ra,28(sp)
 8007008:	dd000617 	ldw	r20,24(sp)
 800700c:	dcc00517 	ldw	r19,20(sp)
 8007010:	dc800417 	ldw	r18,16(sp)
 8007014:	dc400317 	ldw	r17,12(sp)
 8007018:	dc000217 	ldw	r16,8(sp)
 800701c:	dec00804 	addi	sp,sp,32
 8007020:	f800283a 	ret
 8007024:	d809883a 	mov	r4,sp
 8007028:	80065700 	call	8006570 <__lo0bits>
 800702c:	d8c00017 	ldw	r3,0(sp)
 8007030:	04000044 	movi	r16,1
 8007034:	9c000415 	stw	r16,16(r19)
 8007038:	98c00515 	stw	r3,20(r19)
 800703c:	10800804 	addi	r2,r2,32
 8007040:	883fe126 	beq	r17,zero,8006fc8 <__alt_data_end+0xfc006fc8>
 8007044:	00c00d44 	movi	r3,53
 8007048:	8c7ef344 	addi	r17,r17,-1075
 800704c:	88a3883a 	add	r17,r17,r2
 8007050:	1885c83a 	sub	r2,r3,r2
 8007054:	d8c00817 	ldw	r3,32(sp)
 8007058:	94400015 	stw	r17,0(r18)
 800705c:	18800015 	stw	r2,0(r3)
 8007060:	003fe706 	br	8007000 <__alt_data_end+0xfc007000>
 8007064:	01000804 	movi	r4,32
 8007068:	2089c83a 	sub	r4,r4,r2
 800706c:	1908983a 	sll	r4,r3,r4
 8007070:	d9400117 	ldw	r5,4(sp)
 8007074:	1886d83a 	srl	r3,r3,r2
 8007078:	2148b03a 	or	r4,r4,r5
 800707c:	99000515 	stw	r4,20(r19)
 8007080:	d8c00015 	stw	r3,0(sp)
 8007084:	003fca06 	br	8006fb0 <__alt_data_end+0xfc006fb0>

08007088 <__ratio>:
 8007088:	defff904 	addi	sp,sp,-28
 800708c:	dc400315 	stw	r17,12(sp)
 8007090:	2823883a 	mov	r17,r5
 8007094:	d9400104 	addi	r5,sp,4
 8007098:	dfc00615 	stw	ra,24(sp)
 800709c:	dcc00515 	stw	r19,20(sp)
 80070a0:	dc800415 	stw	r18,16(sp)
 80070a4:	2027883a 	mov	r19,r4
 80070a8:	dc000215 	stw	r16,8(sp)
 80070ac:	8006e300 	call	8006e30 <__b2d>
 80070b0:	d80b883a 	mov	r5,sp
 80070b4:	8809883a 	mov	r4,r17
 80070b8:	1025883a 	mov	r18,r2
 80070bc:	1821883a 	mov	r16,r3
 80070c0:	8006e300 	call	8006e30 <__b2d>
 80070c4:	8a000417 	ldw	r8,16(r17)
 80070c8:	99000417 	ldw	r4,16(r19)
 80070cc:	d9400117 	ldw	r5,4(sp)
 80070d0:	2209c83a 	sub	r4,r4,r8
 80070d4:	2010917a 	slli	r8,r4,5
 80070d8:	d9000017 	ldw	r4,0(sp)
 80070dc:	2909c83a 	sub	r4,r5,r4
 80070e0:	4109883a 	add	r4,r8,r4
 80070e4:	01000e0e 	bge	zero,r4,8007120 <__ratio+0x98>
 80070e8:	2008953a 	slli	r4,r4,20
 80070ec:	2421883a 	add	r16,r4,r16
 80070f0:	100d883a 	mov	r6,r2
 80070f4:	180f883a 	mov	r7,r3
 80070f8:	9009883a 	mov	r4,r18
 80070fc:	800b883a 	mov	r5,r16
 8007100:	800b8080 	call	800b808 <__divdf3>
 8007104:	dfc00617 	ldw	ra,24(sp)
 8007108:	dcc00517 	ldw	r19,20(sp)
 800710c:	dc800417 	ldw	r18,16(sp)
 8007110:	dc400317 	ldw	r17,12(sp)
 8007114:	dc000217 	ldw	r16,8(sp)
 8007118:	dec00704 	addi	sp,sp,28
 800711c:	f800283a 	ret
 8007120:	2008953a 	slli	r4,r4,20
 8007124:	1907c83a 	sub	r3,r3,r4
 8007128:	003ff106 	br	80070f0 <__alt_data_end+0xfc0070f0>

0800712c <_mprec_log10>:
 800712c:	defffe04 	addi	sp,sp,-8
 8007130:	dc000015 	stw	r16,0(sp)
 8007134:	dfc00115 	stw	ra,4(sp)
 8007138:	008005c4 	movi	r2,23
 800713c:	2021883a 	mov	r16,r4
 8007140:	11000d0e 	bge	r2,r4,8007178 <_mprec_log10+0x4c>
 8007144:	0005883a 	mov	r2,zero
 8007148:	00cffc34 	movhi	r3,16368
 800714c:	843fffc4 	addi	r16,r16,-1
 8007150:	000d883a 	mov	r6,zero
 8007154:	01d00934 	movhi	r7,16420
 8007158:	1009883a 	mov	r4,r2
 800715c:	180b883a 	mov	r5,r3
 8007160:	800c4300 	call	800c430 <__muldf3>
 8007164:	803ff91e 	bne	r16,zero,800714c <__alt_data_end+0xfc00714c>
 8007168:	dfc00117 	ldw	ra,4(sp)
 800716c:	dc000017 	ldw	r16,0(sp)
 8007170:	dec00204 	addi	sp,sp,8
 8007174:	f800283a 	ret
 8007178:	202090fa 	slli	r16,r4,3
 800717c:	00820074 	movhi	r2,2049
 8007180:	1080ca04 	addi	r2,r2,808
 8007184:	1421883a 	add	r16,r2,r16
 8007188:	80800017 	ldw	r2,0(r16)
 800718c:	80c00117 	ldw	r3,4(r16)
 8007190:	dfc00117 	ldw	ra,4(sp)
 8007194:	dc000017 	ldw	r16,0(sp)
 8007198:	dec00204 	addi	sp,sp,8
 800719c:	f800283a 	ret

080071a0 <__copybits>:
 80071a0:	297fffc4 	addi	r5,r5,-1
 80071a4:	280fd17a 	srai	r7,r5,5
 80071a8:	30c00417 	ldw	r3,16(r6)
 80071ac:	30800504 	addi	r2,r6,20
 80071b0:	39c00044 	addi	r7,r7,1
 80071b4:	18c7883a 	add	r3,r3,r3
 80071b8:	39cf883a 	add	r7,r7,r7
 80071bc:	18c7883a 	add	r3,r3,r3
 80071c0:	39cf883a 	add	r7,r7,r7
 80071c4:	10c7883a 	add	r3,r2,r3
 80071c8:	21cf883a 	add	r7,r4,r7
 80071cc:	10c00d2e 	bgeu	r2,r3,8007204 <__copybits+0x64>
 80071d0:	200b883a 	mov	r5,r4
 80071d4:	12000017 	ldw	r8,0(r2)
 80071d8:	29400104 	addi	r5,r5,4
 80071dc:	10800104 	addi	r2,r2,4
 80071e0:	2a3fff15 	stw	r8,-4(r5)
 80071e4:	10fffb36 	bltu	r2,r3,80071d4 <__alt_data_end+0xfc0071d4>
 80071e8:	1985c83a 	sub	r2,r3,r6
 80071ec:	10bffac4 	addi	r2,r2,-21
 80071f0:	1004d0ba 	srli	r2,r2,2
 80071f4:	10800044 	addi	r2,r2,1
 80071f8:	1085883a 	add	r2,r2,r2
 80071fc:	1085883a 	add	r2,r2,r2
 8007200:	2089883a 	add	r4,r4,r2
 8007204:	21c0032e 	bgeu	r4,r7,8007214 <__copybits+0x74>
 8007208:	20000015 	stw	zero,0(r4)
 800720c:	21000104 	addi	r4,r4,4
 8007210:	21fffd36 	bltu	r4,r7,8007208 <__alt_data_end+0xfc007208>
 8007214:	f800283a 	ret

08007218 <__any_on>:
 8007218:	20c00417 	ldw	r3,16(r4)
 800721c:	2805d17a 	srai	r2,r5,5
 8007220:	21000504 	addi	r4,r4,20
 8007224:	18800d0e 	bge	r3,r2,800725c <__any_on+0x44>
 8007228:	18c7883a 	add	r3,r3,r3
 800722c:	18c7883a 	add	r3,r3,r3
 8007230:	20c7883a 	add	r3,r4,r3
 8007234:	20c0192e 	bgeu	r4,r3,800729c <__any_on+0x84>
 8007238:	18bfff17 	ldw	r2,-4(r3)
 800723c:	18ffff04 	addi	r3,r3,-4
 8007240:	1000041e 	bne	r2,zero,8007254 <__any_on+0x3c>
 8007244:	20c0142e 	bgeu	r4,r3,8007298 <__any_on+0x80>
 8007248:	18ffff04 	addi	r3,r3,-4
 800724c:	19400017 	ldw	r5,0(r3)
 8007250:	283ffc26 	beq	r5,zero,8007244 <__alt_data_end+0xfc007244>
 8007254:	00800044 	movi	r2,1
 8007258:	f800283a 	ret
 800725c:	10c00a0e 	bge	r2,r3,8007288 <__any_on+0x70>
 8007260:	1085883a 	add	r2,r2,r2
 8007264:	1085883a 	add	r2,r2,r2
 8007268:	294007cc 	andi	r5,r5,31
 800726c:	2087883a 	add	r3,r4,r2
 8007270:	283ff026 	beq	r5,zero,8007234 <__alt_data_end+0xfc007234>
 8007274:	19800017 	ldw	r6,0(r3)
 8007278:	3144d83a 	srl	r2,r6,r5
 800727c:	114a983a 	sll	r5,r2,r5
 8007280:	317ff41e 	bne	r6,r5,8007254 <__alt_data_end+0xfc007254>
 8007284:	003feb06 	br	8007234 <__alt_data_end+0xfc007234>
 8007288:	1085883a 	add	r2,r2,r2
 800728c:	1085883a 	add	r2,r2,r2
 8007290:	2087883a 	add	r3,r4,r2
 8007294:	003fe706 	br	8007234 <__alt_data_end+0xfc007234>
 8007298:	f800283a 	ret
 800729c:	0005883a 	mov	r2,zero
 80072a0:	f800283a 	ret

080072a4 <__fpclassifyd>:
 80072a4:	00a00034 	movhi	r2,32768
 80072a8:	10bfffc4 	addi	r2,r2,-1
 80072ac:	2884703a 	and	r2,r5,r2
 80072b0:	10000726 	beq	r2,zero,80072d0 <__fpclassifyd+0x2c>
 80072b4:	00fffc34 	movhi	r3,65520
 80072b8:	019ff834 	movhi	r6,32736
 80072bc:	28c7883a 	add	r3,r5,r3
 80072c0:	31bfffc4 	addi	r6,r6,-1
 80072c4:	30c00536 	bltu	r6,r3,80072dc <__fpclassifyd+0x38>
 80072c8:	00800104 	movi	r2,4
 80072cc:	f800283a 	ret
 80072d0:	2000021e 	bne	r4,zero,80072dc <__fpclassifyd+0x38>
 80072d4:	00800084 	movi	r2,2
 80072d8:	f800283a 	ret
 80072dc:	00dffc34 	movhi	r3,32752
 80072e0:	019ff834 	movhi	r6,32736
 80072e4:	28cb883a 	add	r5,r5,r3
 80072e8:	31bfffc4 	addi	r6,r6,-1
 80072ec:	317ff62e 	bgeu	r6,r5,80072c8 <__alt_data_end+0xfc0072c8>
 80072f0:	01400434 	movhi	r5,16
 80072f4:	297fffc4 	addi	r5,r5,-1
 80072f8:	28800236 	bltu	r5,r2,8007304 <__fpclassifyd+0x60>
 80072fc:	008000c4 	movi	r2,3
 8007300:	f800283a 	ret
 8007304:	10c00226 	beq	r2,r3,8007310 <__fpclassifyd+0x6c>
 8007308:	0005883a 	mov	r2,zero
 800730c:	f800283a 	ret
 8007310:	2005003a 	cmpeq	r2,r4,zero
 8007314:	f800283a 	ret

08007318 <_sbrk_r>:
 8007318:	defffd04 	addi	sp,sp,-12
 800731c:	dc000015 	stw	r16,0(sp)
 8007320:	04020074 	movhi	r16,2049
 8007324:	dc400115 	stw	r17,4(sp)
 8007328:	840ecf04 	addi	r16,r16,15164
 800732c:	2023883a 	mov	r17,r4
 8007330:	2809883a 	mov	r4,r5
 8007334:	dfc00215 	stw	ra,8(sp)
 8007338:	80000015 	stw	zero,0(r16)
 800733c:	800dfa80 	call	800dfa8 <sbrk>
 8007340:	00ffffc4 	movi	r3,-1
 8007344:	10c00526 	beq	r2,r3,800735c <_sbrk_r+0x44>
 8007348:	dfc00217 	ldw	ra,8(sp)
 800734c:	dc400117 	ldw	r17,4(sp)
 8007350:	dc000017 	ldw	r16,0(sp)
 8007354:	dec00304 	addi	sp,sp,12
 8007358:	f800283a 	ret
 800735c:	80c00017 	ldw	r3,0(r16)
 8007360:	183ff926 	beq	r3,zero,8007348 <__alt_data_end+0xfc007348>
 8007364:	88c00015 	stw	r3,0(r17)
 8007368:	003ff706 	br	8007348 <__alt_data_end+0xfc007348>

0800736c <__sread>:
 800736c:	defffe04 	addi	sp,sp,-8
 8007370:	dc000015 	stw	r16,0(sp)
 8007374:	2821883a 	mov	r16,r5
 8007378:	2940038f 	ldh	r5,14(r5)
 800737c:	dfc00115 	stw	ra,4(sp)
 8007380:	80098e40 	call	80098e4 <_read_r>
 8007384:	10000716 	blt	r2,zero,80073a4 <__sread+0x38>
 8007388:	80c01417 	ldw	r3,80(r16)
 800738c:	1887883a 	add	r3,r3,r2
 8007390:	80c01415 	stw	r3,80(r16)
 8007394:	dfc00117 	ldw	ra,4(sp)
 8007398:	dc000017 	ldw	r16,0(sp)
 800739c:	dec00204 	addi	sp,sp,8
 80073a0:	f800283a 	ret
 80073a4:	80c0030b 	ldhu	r3,12(r16)
 80073a8:	18fbffcc 	andi	r3,r3,61439
 80073ac:	80c0030d 	sth	r3,12(r16)
 80073b0:	dfc00117 	ldw	ra,4(sp)
 80073b4:	dc000017 	ldw	r16,0(sp)
 80073b8:	dec00204 	addi	sp,sp,8
 80073bc:	f800283a 	ret

080073c0 <__seofread>:
 80073c0:	0005883a 	mov	r2,zero
 80073c4:	f800283a 	ret

080073c8 <__swrite>:
 80073c8:	2880030b 	ldhu	r2,12(r5)
 80073cc:	defffb04 	addi	sp,sp,-20
 80073d0:	dcc00315 	stw	r19,12(sp)
 80073d4:	dc800215 	stw	r18,8(sp)
 80073d8:	dc400115 	stw	r17,4(sp)
 80073dc:	dc000015 	stw	r16,0(sp)
 80073e0:	dfc00415 	stw	ra,16(sp)
 80073e4:	10c0400c 	andi	r3,r2,256
 80073e8:	2821883a 	mov	r16,r5
 80073ec:	2023883a 	mov	r17,r4
 80073f0:	3025883a 	mov	r18,r6
 80073f4:	3827883a 	mov	r19,r7
 80073f8:	18000526 	beq	r3,zero,8007410 <__swrite+0x48>
 80073fc:	2940038f 	ldh	r5,14(r5)
 8007400:	01c00084 	movi	r7,2
 8007404:	000d883a 	mov	r6,zero
 8007408:	80097280 	call	8009728 <_lseek_r>
 800740c:	8080030b 	ldhu	r2,12(r16)
 8007410:	8140038f 	ldh	r5,14(r16)
 8007414:	10bbffcc 	andi	r2,r2,61439
 8007418:	980f883a 	mov	r7,r19
 800741c:	900d883a 	mov	r6,r18
 8007420:	8809883a 	mov	r4,r17
 8007424:	8080030d 	sth	r2,12(r16)
 8007428:	dfc00417 	ldw	ra,16(sp)
 800742c:	dcc00317 	ldw	r19,12(sp)
 8007430:	dc800217 	ldw	r18,8(sp)
 8007434:	dc400117 	ldw	r17,4(sp)
 8007438:	dc000017 	ldw	r16,0(sp)
 800743c:	dec00504 	addi	sp,sp,20
 8007440:	8008d141 	jmpi	8008d14 <_write_r>

08007444 <__sseek>:
 8007444:	defffe04 	addi	sp,sp,-8
 8007448:	dc000015 	stw	r16,0(sp)
 800744c:	2821883a 	mov	r16,r5
 8007450:	2940038f 	ldh	r5,14(r5)
 8007454:	dfc00115 	stw	ra,4(sp)
 8007458:	80097280 	call	8009728 <_lseek_r>
 800745c:	00ffffc4 	movi	r3,-1
 8007460:	10c00826 	beq	r2,r3,8007484 <__sseek+0x40>
 8007464:	80c0030b 	ldhu	r3,12(r16)
 8007468:	80801415 	stw	r2,80(r16)
 800746c:	18c40014 	ori	r3,r3,4096
 8007470:	80c0030d 	sth	r3,12(r16)
 8007474:	dfc00117 	ldw	ra,4(sp)
 8007478:	dc000017 	ldw	r16,0(sp)
 800747c:	dec00204 	addi	sp,sp,8
 8007480:	f800283a 	ret
 8007484:	80c0030b 	ldhu	r3,12(r16)
 8007488:	18fbffcc 	andi	r3,r3,61439
 800748c:	80c0030d 	sth	r3,12(r16)
 8007490:	dfc00117 	ldw	ra,4(sp)
 8007494:	dc000017 	ldw	r16,0(sp)
 8007498:	dec00204 	addi	sp,sp,8
 800749c:	f800283a 	ret

080074a0 <__sclose>:
 80074a0:	2940038f 	ldh	r5,14(r5)
 80074a4:	8008d741 	jmpi	8008d74 <_close_r>

080074a8 <strcmp>:
 80074a8:	2144b03a 	or	r2,r4,r5
 80074ac:	108000cc 	andi	r2,r2,3
 80074b0:	1000171e 	bne	r2,zero,8007510 <strcmp+0x68>
 80074b4:	20800017 	ldw	r2,0(r4)
 80074b8:	28c00017 	ldw	r3,0(r5)
 80074bc:	10c0141e 	bne	r2,r3,8007510 <strcmp+0x68>
 80074c0:	027fbff4 	movhi	r9,65279
 80074c4:	4a7fbfc4 	addi	r9,r9,-257
 80074c8:	0086303a 	nor	r3,zero,r2
 80074cc:	02202074 	movhi	r8,32897
 80074d0:	1245883a 	add	r2,r2,r9
 80074d4:	42202004 	addi	r8,r8,-32640
 80074d8:	10c4703a 	and	r2,r2,r3
 80074dc:	1204703a 	and	r2,r2,r8
 80074e0:	10000226 	beq	r2,zero,80074ec <strcmp+0x44>
 80074e4:	00002306 	br	8007574 <strcmp+0xcc>
 80074e8:	1000221e 	bne	r2,zero,8007574 <strcmp+0xcc>
 80074ec:	21000104 	addi	r4,r4,4
 80074f0:	20c00017 	ldw	r3,0(r4)
 80074f4:	29400104 	addi	r5,r5,4
 80074f8:	29800017 	ldw	r6,0(r5)
 80074fc:	1a4f883a 	add	r7,r3,r9
 8007500:	00c4303a 	nor	r2,zero,r3
 8007504:	3884703a 	and	r2,r7,r2
 8007508:	1204703a 	and	r2,r2,r8
 800750c:	19bff626 	beq	r3,r6,80074e8 <__alt_data_end+0xfc0074e8>
 8007510:	20800003 	ldbu	r2,0(r4)
 8007514:	10c03fcc 	andi	r3,r2,255
 8007518:	18c0201c 	xori	r3,r3,128
 800751c:	18ffe004 	addi	r3,r3,-128
 8007520:	18000c26 	beq	r3,zero,8007554 <strcmp+0xac>
 8007524:	29800007 	ldb	r6,0(r5)
 8007528:	19800326 	beq	r3,r6,8007538 <strcmp+0x90>
 800752c:	00001306 	br	800757c <strcmp+0xd4>
 8007530:	29800007 	ldb	r6,0(r5)
 8007534:	11800b1e 	bne	r2,r6,8007564 <strcmp+0xbc>
 8007538:	21000044 	addi	r4,r4,1
 800753c:	20c00003 	ldbu	r3,0(r4)
 8007540:	29400044 	addi	r5,r5,1
 8007544:	18803fcc 	andi	r2,r3,255
 8007548:	1080201c 	xori	r2,r2,128
 800754c:	10bfe004 	addi	r2,r2,-128
 8007550:	103ff71e 	bne	r2,zero,8007530 <__alt_data_end+0xfc007530>
 8007554:	0007883a 	mov	r3,zero
 8007558:	28800003 	ldbu	r2,0(r5)
 800755c:	1885c83a 	sub	r2,r3,r2
 8007560:	f800283a 	ret
 8007564:	28800003 	ldbu	r2,0(r5)
 8007568:	18c03fcc 	andi	r3,r3,255
 800756c:	1885c83a 	sub	r2,r3,r2
 8007570:	f800283a 	ret
 8007574:	0005883a 	mov	r2,zero
 8007578:	f800283a 	ret
 800757c:	10c03fcc 	andi	r3,r2,255
 8007580:	003ff506 	br	8007558 <__alt_data_end+0xfc007558>

08007584 <strlen>:
 8007584:	208000cc 	andi	r2,r4,3
 8007588:	10002026 	beq	r2,zero,800760c <strlen+0x88>
 800758c:	20800007 	ldb	r2,0(r4)
 8007590:	10002026 	beq	r2,zero,8007614 <strlen+0x90>
 8007594:	2005883a 	mov	r2,r4
 8007598:	00000206 	br	80075a4 <strlen+0x20>
 800759c:	10c00007 	ldb	r3,0(r2)
 80075a0:	18001826 	beq	r3,zero,8007604 <strlen+0x80>
 80075a4:	10800044 	addi	r2,r2,1
 80075a8:	10c000cc 	andi	r3,r2,3
 80075ac:	183ffb1e 	bne	r3,zero,800759c <__alt_data_end+0xfc00759c>
 80075b0:	10c00017 	ldw	r3,0(r2)
 80075b4:	01ffbff4 	movhi	r7,65279
 80075b8:	39ffbfc4 	addi	r7,r7,-257
 80075bc:	00ca303a 	nor	r5,zero,r3
 80075c0:	01a02074 	movhi	r6,32897
 80075c4:	19c7883a 	add	r3,r3,r7
 80075c8:	31a02004 	addi	r6,r6,-32640
 80075cc:	1946703a 	and	r3,r3,r5
 80075d0:	1986703a 	and	r3,r3,r6
 80075d4:	1800091e 	bne	r3,zero,80075fc <strlen+0x78>
 80075d8:	10800104 	addi	r2,r2,4
 80075dc:	10c00017 	ldw	r3,0(r2)
 80075e0:	19cb883a 	add	r5,r3,r7
 80075e4:	00c6303a 	nor	r3,zero,r3
 80075e8:	28c6703a 	and	r3,r5,r3
 80075ec:	1986703a 	and	r3,r3,r6
 80075f0:	183ff926 	beq	r3,zero,80075d8 <__alt_data_end+0xfc0075d8>
 80075f4:	00000106 	br	80075fc <strlen+0x78>
 80075f8:	10800044 	addi	r2,r2,1
 80075fc:	10c00007 	ldb	r3,0(r2)
 8007600:	183ffd1e 	bne	r3,zero,80075f8 <__alt_data_end+0xfc0075f8>
 8007604:	1105c83a 	sub	r2,r2,r4
 8007608:	f800283a 	ret
 800760c:	2005883a 	mov	r2,r4
 8007610:	003fe706 	br	80075b0 <__alt_data_end+0xfc0075b0>
 8007614:	0005883a 	mov	r2,zero
 8007618:	f800283a 	ret

0800761c <__sprint_r.part.0>:
 800761c:	28801917 	ldw	r2,100(r5)
 8007620:	defff604 	addi	sp,sp,-40
 8007624:	dd400515 	stw	r21,20(sp)
 8007628:	dfc00915 	stw	ra,36(sp)
 800762c:	df000815 	stw	fp,32(sp)
 8007630:	ddc00715 	stw	r23,28(sp)
 8007634:	dd800615 	stw	r22,24(sp)
 8007638:	dd000415 	stw	r20,16(sp)
 800763c:	dcc00315 	stw	r19,12(sp)
 8007640:	dc800215 	stw	r18,8(sp)
 8007644:	dc400115 	stw	r17,4(sp)
 8007648:	dc000015 	stw	r16,0(sp)
 800764c:	1088000c 	andi	r2,r2,8192
 8007650:	302b883a 	mov	r21,r6
 8007654:	10002e26 	beq	r2,zero,8007710 <__sprint_r.part.0+0xf4>
 8007658:	30800217 	ldw	r2,8(r6)
 800765c:	35800017 	ldw	r22,0(r6)
 8007660:	10002926 	beq	r2,zero,8007708 <__sprint_r.part.0+0xec>
 8007664:	2827883a 	mov	r19,r5
 8007668:	2029883a 	mov	r20,r4
 800766c:	b5c00104 	addi	r23,r22,4
 8007670:	04bfffc4 	movi	r18,-1
 8007674:	bc400017 	ldw	r17,0(r23)
 8007678:	b4000017 	ldw	r16,0(r22)
 800767c:	0039883a 	mov	fp,zero
 8007680:	8822d0ba 	srli	r17,r17,2
 8007684:	8800031e 	bne	r17,zero,8007694 <__sprint_r.part.0+0x78>
 8007688:	00001806 	br	80076ec <__sprint_r.part.0+0xd0>
 800768c:	84000104 	addi	r16,r16,4
 8007690:	8f001526 	beq	r17,fp,80076e8 <__sprint_r.part.0+0xcc>
 8007694:	81400017 	ldw	r5,0(r16)
 8007698:	980d883a 	mov	r6,r19
 800769c:	a009883a 	mov	r4,r20
 80076a0:	800910c0 	call	800910c <_fputwc_r>
 80076a4:	e7000044 	addi	fp,fp,1
 80076a8:	14bff81e 	bne	r2,r18,800768c <__alt_data_end+0xfc00768c>
 80076ac:	9005883a 	mov	r2,r18
 80076b0:	a8000215 	stw	zero,8(r21)
 80076b4:	a8000115 	stw	zero,4(r21)
 80076b8:	dfc00917 	ldw	ra,36(sp)
 80076bc:	df000817 	ldw	fp,32(sp)
 80076c0:	ddc00717 	ldw	r23,28(sp)
 80076c4:	dd800617 	ldw	r22,24(sp)
 80076c8:	dd400517 	ldw	r21,20(sp)
 80076cc:	dd000417 	ldw	r20,16(sp)
 80076d0:	dcc00317 	ldw	r19,12(sp)
 80076d4:	dc800217 	ldw	r18,8(sp)
 80076d8:	dc400117 	ldw	r17,4(sp)
 80076dc:	dc000017 	ldw	r16,0(sp)
 80076e0:	dec00a04 	addi	sp,sp,40
 80076e4:	f800283a 	ret
 80076e8:	a8800217 	ldw	r2,8(r21)
 80076ec:	8c63883a 	add	r17,r17,r17
 80076f0:	8c63883a 	add	r17,r17,r17
 80076f4:	1445c83a 	sub	r2,r2,r17
 80076f8:	a8800215 	stw	r2,8(r21)
 80076fc:	b5800204 	addi	r22,r22,8
 8007700:	bdc00204 	addi	r23,r23,8
 8007704:	103fdb1e 	bne	r2,zero,8007674 <__alt_data_end+0xfc007674>
 8007708:	0005883a 	mov	r2,zero
 800770c:	003fe806 	br	80076b0 <__alt_data_end+0xfc0076b0>
 8007710:	800920c0 	call	800920c <__sfvwrite_r>
 8007714:	003fe606 	br	80076b0 <__alt_data_end+0xfc0076b0>

08007718 <__sprint_r>:
 8007718:	30c00217 	ldw	r3,8(r6)
 800771c:	18000126 	beq	r3,zero,8007724 <__sprint_r+0xc>
 8007720:	800761c1 	jmpi	800761c <__sprint_r.part.0>
 8007724:	30000115 	stw	zero,4(r6)
 8007728:	0005883a 	mov	r2,zero
 800772c:	f800283a 	ret

08007730 <___vfiprintf_internal_r>:
 8007730:	deffca04 	addi	sp,sp,-216
 8007734:	dd403115 	stw	r21,196(sp)
 8007738:	dfc03515 	stw	ra,212(sp)
 800773c:	df003415 	stw	fp,208(sp)
 8007740:	ddc03315 	stw	r23,204(sp)
 8007744:	dd803215 	stw	r22,200(sp)
 8007748:	dd003015 	stw	r20,192(sp)
 800774c:	dcc02f15 	stw	r19,188(sp)
 8007750:	dc802e15 	stw	r18,184(sp)
 8007754:	dc402d15 	stw	r17,180(sp)
 8007758:	dc002c15 	stw	r16,176(sp)
 800775c:	d9002115 	stw	r4,132(sp)
 8007760:	d9402015 	stw	r5,128(sp)
 8007764:	d9c02215 	stw	r7,136(sp)
 8007768:	302b883a 	mov	r21,r6
 800776c:	20000226 	beq	r4,zero,8007778 <___vfiprintf_internal_r+0x48>
 8007770:	20800e17 	ldw	r2,56(r4)
 8007774:	1000cf26 	beq	r2,zero,8007ab4 <___vfiprintf_internal_r+0x384>
 8007778:	d8c02017 	ldw	r3,128(sp)
 800777c:	1880030b 	ldhu	r2,12(r3)
 8007780:	10c8000c 	andi	r3,r2,8192
 8007784:	1800071e 	bne	r3,zero,80077a4 <___vfiprintf_internal_r+0x74>
 8007788:	d9402017 	ldw	r5,128(sp)
 800778c:	00f7ffc4 	movi	r3,-8193
 8007790:	10880014 	ori	r2,r2,8192
 8007794:	29001917 	ldw	r4,100(r5)
 8007798:	2880030d 	sth	r2,12(r5)
 800779c:	20c6703a 	and	r3,r4,r3
 80077a0:	28c01915 	stw	r3,100(r5)
 80077a4:	10c0020c 	andi	r3,r2,8
 80077a8:	1800a526 	beq	r3,zero,8007a40 <___vfiprintf_internal_r+0x310>
 80077ac:	d9002017 	ldw	r4,128(sp)
 80077b0:	20c00417 	ldw	r3,16(r4)
 80077b4:	1800a226 	beq	r3,zero,8007a40 <___vfiprintf_internal_r+0x310>
 80077b8:	1080068c 	andi	r2,r2,26
 80077bc:	00c00284 	movi	r3,10
 80077c0:	10c0a826 	beq	r2,r3,8007a64 <___vfiprintf_internal_r+0x334>
 80077c4:	d9001a04 	addi	r4,sp,104
 80077c8:	d94019c4 	addi	r5,sp,103
 80077cc:	04820074 	movhi	r18,2049
 80077d0:	2145c83a 	sub	r2,r4,r5
 80077d4:	9480fc04 	addi	r18,r18,1008
 80077d8:	d9001e15 	stw	r4,120(sp)
 80077dc:	d9401f15 	stw	r5,124(sp)
 80077e0:	dec01a15 	stw	sp,104(sp)
 80077e4:	d8001c15 	stw	zero,112(sp)
 80077e8:	d8001b15 	stw	zero,108(sp)
 80077ec:	d811883a 	mov	r8,sp
 80077f0:	d8002615 	stw	zero,152(sp)
 80077f4:	d8002415 	stw	zero,144(sp)
 80077f8:	d8802815 	stw	r2,160(sp)
 80077fc:	a82d883a 	mov	r22,r21
 8007800:	b0800007 	ldb	r2,0(r22)
 8007804:	10040d26 	beq	r2,zero,800883c <___vfiprintf_internal_r+0x110c>
 8007808:	00c00944 	movi	r3,37
 800780c:	b029883a 	mov	r20,r22
 8007810:	10c0021e 	bne	r2,r3,800781c <___vfiprintf_internal_r+0xec>
 8007814:	00001606 	br	8007870 <___vfiprintf_internal_r+0x140>
 8007818:	10c00326 	beq	r2,r3,8007828 <___vfiprintf_internal_r+0xf8>
 800781c:	a5000044 	addi	r20,r20,1
 8007820:	a0800007 	ldb	r2,0(r20)
 8007824:	103ffc1e 	bne	r2,zero,8007818 <__alt_data_end+0xfc007818>
 8007828:	a5a1c83a 	sub	r16,r20,r22
 800782c:	80001026 	beq	r16,zero,8007870 <___vfiprintf_internal_r+0x140>
 8007830:	d8c01c17 	ldw	r3,112(sp)
 8007834:	d8801b17 	ldw	r2,108(sp)
 8007838:	45800015 	stw	r22,0(r8)
 800783c:	80c7883a 	add	r3,r16,r3
 8007840:	10800044 	addi	r2,r2,1
 8007844:	44000115 	stw	r16,4(r8)
 8007848:	d8c01c15 	stw	r3,112(sp)
 800784c:	d8801b15 	stw	r2,108(sp)
 8007850:	010001c4 	movi	r4,7
 8007854:	2080750e 	bge	r4,r2,8007a2c <___vfiprintf_internal_r+0x2fc>
 8007858:	1803951e 	bne	r3,zero,80086b0 <___vfiprintf_internal_r+0xf80>
 800785c:	d8c02417 	ldw	r3,144(sp)
 8007860:	d8001b15 	stw	zero,108(sp)
 8007864:	d811883a 	mov	r8,sp
 8007868:	1c07883a 	add	r3,r3,r16
 800786c:	d8c02415 	stw	r3,144(sp)
 8007870:	a0800007 	ldb	r2,0(r20)
 8007874:	1002e026 	beq	r2,zero,80083f8 <___vfiprintf_internal_r+0xcc8>
 8007878:	a5800044 	addi	r22,r20,1
 800787c:	a0c00047 	ldb	r3,1(r20)
 8007880:	d8001d85 	stb	zero,118(sp)
 8007884:	0027883a 	mov	r19,zero
 8007888:	d8002305 	stb	zero,140(sp)
 800788c:	043fffc4 	movi	r16,-1
 8007890:	d8002515 	stw	zero,148(sp)
 8007894:	0023883a 	mov	r17,zero
 8007898:	05001604 	movi	r20,88
 800789c:	05400244 	movi	r21,9
 80078a0:	402f883a 	mov	r23,r8
 80078a4:	b5800044 	addi	r22,r22,1
 80078a8:	18bff804 	addi	r2,r3,-32
 80078ac:	a0827736 	bltu	r20,r2,800828c <___vfiprintf_internal_r+0xb5c>
 80078b0:	100490ba 	slli	r2,r2,2
 80078b4:	01020034 	movhi	r4,2048
 80078b8:	211e3204 	addi	r4,r4,30920
 80078bc:	1105883a 	add	r2,r2,r4
 80078c0:	10800017 	ldw	r2,0(r2)
 80078c4:	1000683a 	jmp	r2
 80078c8:	08007f8c 	andi	zero,at,510
 80078cc:	0800828c 	andi	zero,at,522
 80078d0:	0800828c 	andi	zero,at,522
 80078d4:	08007fa8 	cmpgeui	zero,at,510
 80078d8:	0800828c 	andi	zero,at,522
 80078dc:	0800828c 	andi	zero,at,522
 80078e0:	0800828c 	andi	zero,at,522
 80078e4:	0800828c 	andi	zero,at,522
 80078e8:	0800828c 	andi	zero,at,522
 80078ec:	0800828c 	andi	zero,at,522
 80078f0:	080081b0 	cmpltui	zero,at,518
 80078f4:	080081d4 	ori	zero,at,519
 80078f8:	0800828c 	andi	zero,at,522
 80078fc:	08007acc 	andi	zero,at,491
 8007900:	080081e8 	cmpgeui	zero,at,519
 8007904:	0800828c 	andi	zero,at,522
 8007908:	08007fb4 	orhi	zero,at,510
 800790c:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 8007910:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 8007914:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 8007918:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 800791c:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 8007920:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 8007924:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 8007928:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 800792c:	08007fc0 	call	8007fc <__alt_mem_onchip_memory2_0+0x8007fc>
 8007930:	0800828c 	andi	zero,at,522
 8007934:	0800828c 	andi	zero,at,522
 8007938:	0800828c 	andi	zero,at,522
 800793c:	0800828c 	andi	zero,at,522
 8007940:	0800828c 	andi	zero,at,522
 8007944:	0800828c 	andi	zero,at,522
 8007948:	0800828c 	andi	zero,at,522
 800794c:	0800828c 	andi	zero,at,522
 8007950:	0800828c 	andi	zero,at,522
 8007954:	0800828c 	andi	zero,at,522
 8007958:	08008000 	call	800800 <__alt_mem_onchip_memory2_0+0x800800>
 800795c:	0800828c 	andi	zero,at,522
 8007960:	0800828c 	andi	zero,at,522
 8007964:	0800828c 	andi	zero,at,522
 8007968:	0800828c 	andi	zero,at,522
 800796c:	0800828c 	andi	zero,at,522
 8007970:	0800828c 	andi	zero,at,522
 8007974:	0800828c 	andi	zero,at,522
 8007978:	0800828c 	andi	zero,at,522
 800797c:	0800828c 	andi	zero,at,522
 8007980:	0800828c 	andi	zero,at,522
 8007984:	0800803c 	xorhi	zero,at,512
 8007988:	0800828c 	andi	zero,at,522
 800798c:	0800828c 	andi	zero,at,522
 8007990:	0800828c 	andi	zero,at,522
 8007994:	0800828c 	andi	zero,at,522
 8007998:	0800828c 	andi	zero,at,522
 800799c:	08008098 	cmpnei	zero,at,514
 80079a0:	0800828c 	andi	zero,at,522
 80079a4:	0800828c 	andi	zero,at,522
 80079a8:	0800810c 	andi	zero,at,516
 80079ac:	0800828c 	andi	zero,at,522
 80079b0:	0800828c 	andi	zero,at,522
 80079b4:	0800828c 	andi	zero,at,522
 80079b8:	0800828c 	andi	zero,at,522
 80079bc:	0800828c 	andi	zero,at,522
 80079c0:	0800828c 	andi	zero,at,522
 80079c4:	0800828c 	andi	zero,at,522
 80079c8:	0800828c 	andi	zero,at,522
 80079cc:	0800828c 	andi	zero,at,522
 80079d0:	0800828c 	andi	zero,at,522
 80079d4:	08007eb4 	orhi	zero,at,506
 80079d8:	08007ee4 	muli	zero,at,507
 80079dc:	0800828c 	andi	zero,at,522
 80079e0:	0800828c 	andi	zero,at,522
 80079e4:	0800828c 	andi	zero,at,522
 80079e8:	08008234 	orhi	zero,at,520
 80079ec:	08007ee4 	muli	zero,at,507
 80079f0:	0800828c 	andi	zero,at,522
 80079f4:	0800828c 	andi	zero,at,522
 80079f8:	08007d8c 	andi	zero,at,502
 80079fc:	0800828c 	andi	zero,at,522
 8007a00:	08007da0 	cmpeqi	zero,at,502
 8007a04:	08007dd8 	cmpnei	zero,at,503
 8007a08:	08007ad8 	cmpnei	zero,at,491
 8007a0c:	08007d80 	call	8007d8 <__alt_mem_onchip_memory2_0+0x8007d8>
 8007a10:	0800828c 	andi	zero,at,522
 8007a14:	0800814c 	andi	zero,at,517
 8007a18:	0800828c 	andi	zero,at,522
 8007a1c:	08008198 	cmpnei	zero,at,518
 8007a20:	0800828c 	andi	zero,at,522
 8007a24:	0800828c 	andi	zero,at,522
 8007a28:	08007e5c 	xori	zero,at,505
 8007a2c:	42000204 	addi	r8,r8,8
 8007a30:	d8c02417 	ldw	r3,144(sp)
 8007a34:	1c07883a 	add	r3,r3,r16
 8007a38:	d8c02415 	stw	r3,144(sp)
 8007a3c:	003f8c06 	br	8007870 <__alt_data_end+0xfc007870>
 8007a40:	d9402017 	ldw	r5,128(sp)
 8007a44:	d9002117 	ldw	r4,132(sp)
 8007a48:	8002f240 	call	8002f24 <__swsetup_r>
 8007a4c:	1003c11e 	bne	r2,zero,8008954 <___vfiprintf_internal_r+0x1224>
 8007a50:	d9402017 	ldw	r5,128(sp)
 8007a54:	00c00284 	movi	r3,10
 8007a58:	2880030b 	ldhu	r2,12(r5)
 8007a5c:	1080068c 	andi	r2,r2,26
 8007a60:	10ff581e 	bne	r2,r3,80077c4 <__alt_data_end+0xfc0077c4>
 8007a64:	d8c02017 	ldw	r3,128(sp)
 8007a68:	1880038f 	ldh	r2,14(r3)
 8007a6c:	103f5516 	blt	r2,zero,80077c4 <__alt_data_end+0xfc0077c4>
 8007a70:	d9c02217 	ldw	r7,136(sp)
 8007a74:	d9002117 	ldw	r4,132(sp)
 8007a78:	a80d883a 	mov	r6,r21
 8007a7c:	180b883a 	mov	r5,r3
 8007a80:	8008c580 	call	8008c58 <__sbprintf>
 8007a84:	dfc03517 	ldw	ra,212(sp)
 8007a88:	df003417 	ldw	fp,208(sp)
 8007a8c:	ddc03317 	ldw	r23,204(sp)
 8007a90:	dd803217 	ldw	r22,200(sp)
 8007a94:	dd403117 	ldw	r21,196(sp)
 8007a98:	dd003017 	ldw	r20,192(sp)
 8007a9c:	dcc02f17 	ldw	r19,188(sp)
 8007aa0:	dc802e17 	ldw	r18,184(sp)
 8007aa4:	dc402d17 	ldw	r17,180(sp)
 8007aa8:	dc002c17 	ldw	r16,176(sp)
 8007aac:	dec03604 	addi	sp,sp,216
 8007ab0:	f800283a 	ret
 8007ab4:	8004f300 	call	8004f30 <__sinit>
 8007ab8:	003f2f06 	br	8007778 <__alt_data_end+0xfc007778>
 8007abc:	d8c02517 	ldw	r3,148(sp)
 8007ac0:	d8802215 	stw	r2,136(sp)
 8007ac4:	00c7c83a 	sub	r3,zero,r3
 8007ac8:	d8c02515 	stw	r3,148(sp)
 8007acc:	8c400114 	ori	r17,r17,4
 8007ad0:	b0c00007 	ldb	r3,0(r22)
 8007ad4:	003f7306 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8007ad8:	00800c04 	movi	r2,48
 8007adc:	d9402217 	ldw	r5,136(sp)
 8007ae0:	d8801d05 	stb	r2,116(sp)
 8007ae4:	00801e04 	movi	r2,120
 8007ae8:	d8801d45 	stb	r2,117(sp)
 8007aec:	d8001d85 	stb	zero,118(sp)
 8007af0:	b811883a 	mov	r8,r23
 8007af4:	28c00104 	addi	r3,r5,4
 8007af8:	2cc00017 	ldw	r19,0(r5)
 8007afc:	0029883a 	mov	r20,zero
 8007b00:	88800094 	ori	r2,r17,2
 8007b04:	80032516 	blt	r16,zero,800879c <___vfiprintf_internal_r+0x106c>
 8007b08:	00bfdfc4 	movi	r2,-129
 8007b0c:	88a2703a 	and	r17,r17,r2
 8007b10:	d8c02215 	stw	r3,136(sp)
 8007b14:	8c400094 	ori	r17,r17,2
 8007b18:	98032a1e 	bne	r19,zero,80087c4 <___vfiprintf_internal_r+0x1094>
 8007b1c:	00820074 	movhi	r2,2049
 8007b20:	10809b04 	addi	r2,r2,620
 8007b24:	d8802615 	stw	r2,152(sp)
 8007b28:	002b883a 	mov	r21,zero
 8007b2c:	8001741e 	bne	r16,zero,8008100 <___vfiprintf_internal_r+0x9d0>
 8007b30:	0021883a 	mov	r16,zero
 8007b34:	0029883a 	mov	r20,zero
 8007b38:	ddc01a04 	addi	r23,sp,104
 8007b3c:	8027883a 	mov	r19,r16
 8007b40:	8500010e 	bge	r16,r20,8007b48 <___vfiprintf_internal_r+0x418>
 8007b44:	a027883a 	mov	r19,r20
 8007b48:	ad403fcc 	andi	r21,r21,255
 8007b4c:	ad40201c 	xori	r21,r21,128
 8007b50:	ad7fe004 	addi	r21,r21,-128
 8007b54:	a8000126 	beq	r21,zero,8007b5c <___vfiprintf_internal_r+0x42c>
 8007b58:	9cc00044 	addi	r19,r19,1
 8007b5c:	89c0008c 	andi	r7,r17,2
 8007b60:	38000126 	beq	r7,zero,8007b68 <___vfiprintf_internal_r+0x438>
 8007b64:	9cc00084 	addi	r19,r19,2
 8007b68:	88c0210c 	andi	r3,r17,132
 8007b6c:	1801dd1e 	bne	r3,zero,80082e4 <___vfiprintf_internal_r+0xbb4>
 8007b70:	d9402517 	ldw	r5,148(sp)
 8007b74:	2cebc83a 	sub	r21,r5,r19
 8007b78:	0541da0e 	bge	zero,r21,80082e4 <___vfiprintf_internal_r+0xbb4>
 8007b7c:	07000404 	movi	fp,16
 8007b80:	d8801c17 	ldw	r2,112(sp)
 8007b84:	e543be0e 	bge	fp,r21,8008a80 <___vfiprintf_internal_r+0x1350>
 8007b88:	01420074 	movhi	r5,2049
 8007b8c:	29410004 	addi	r5,r5,1024
 8007b90:	dc002715 	stw	r16,156(sp)
 8007b94:	d9801b17 	ldw	r6,108(sp)
 8007b98:	a821883a 	mov	r16,r21
 8007b9c:	d9402315 	stw	r5,140(sp)
 8007ba0:	028001c4 	movi	r10,7
 8007ba4:	d9c02915 	stw	r7,164(sp)
 8007ba8:	182b883a 	mov	r21,r3
 8007bac:	00000506 	br	8007bc4 <___vfiprintf_internal_r+0x494>
 8007bb0:	31000084 	addi	r4,r6,2
 8007bb4:	42000204 	addi	r8,r8,8
 8007bb8:	180d883a 	mov	r6,r3
 8007bbc:	843ffc04 	addi	r16,r16,-16
 8007bc0:	e4000f0e 	bge	fp,r16,8007c00 <___vfiprintf_internal_r+0x4d0>
 8007bc4:	01020074 	movhi	r4,2049
 8007bc8:	10800404 	addi	r2,r2,16
 8007bcc:	30c00044 	addi	r3,r6,1
 8007bd0:	21010004 	addi	r4,r4,1024
 8007bd4:	41000015 	stw	r4,0(r8)
 8007bd8:	47000115 	stw	fp,4(r8)
 8007bdc:	d8801c15 	stw	r2,112(sp)
 8007be0:	d8c01b15 	stw	r3,108(sp)
 8007be4:	50fff20e 	bge	r10,r3,8007bb0 <__alt_data_end+0xfc007bb0>
 8007be8:	1001b21e 	bne	r2,zero,80082b4 <___vfiprintf_internal_r+0xb84>
 8007bec:	843ffc04 	addi	r16,r16,-16
 8007bf0:	000d883a 	mov	r6,zero
 8007bf4:	01000044 	movi	r4,1
 8007bf8:	d811883a 	mov	r8,sp
 8007bfc:	e43ff116 	blt	fp,r16,8007bc4 <__alt_data_end+0xfc007bc4>
 8007c00:	a807883a 	mov	r3,r21
 8007c04:	d9c02917 	ldw	r7,164(sp)
 8007c08:	802b883a 	mov	r21,r16
 8007c0c:	dc002717 	ldw	r16,156(sp)
 8007c10:	d9402317 	ldw	r5,140(sp)
 8007c14:	a885883a 	add	r2,r21,r2
 8007c18:	45400115 	stw	r21,4(r8)
 8007c1c:	41400015 	stw	r5,0(r8)
 8007c20:	d8801c15 	stw	r2,112(sp)
 8007c24:	d9001b15 	stw	r4,108(sp)
 8007c28:	014001c4 	movi	r5,7
 8007c2c:	29026216 	blt	r5,r4,80085b8 <___vfiprintf_internal_r+0xe88>
 8007c30:	d9801d87 	ldb	r6,118(sp)
 8007c34:	42000204 	addi	r8,r8,8
 8007c38:	21400044 	addi	r5,r4,1
 8007c3c:	3001ae1e 	bne	r6,zero,80082f8 <___vfiprintf_internal_r+0xbc8>
 8007c40:	3801bb26 	beq	r7,zero,8008330 <___vfiprintf_internal_r+0xc00>
 8007c44:	d9001d04 	addi	r4,sp,116
 8007c48:	10800084 	addi	r2,r2,2
 8007c4c:	41000015 	stw	r4,0(r8)
 8007c50:	01000084 	movi	r4,2
 8007c54:	41000115 	stw	r4,4(r8)
 8007c58:	d8801c15 	stw	r2,112(sp)
 8007c5c:	d9401b15 	stw	r5,108(sp)
 8007c60:	010001c4 	movi	r4,7
 8007c64:	2142680e 	bge	r4,r5,8008608 <___vfiprintf_internal_r+0xed8>
 8007c68:	1002b11e 	bne	r2,zero,8008730 <___vfiprintf_internal_r+0x1000>
 8007c6c:	01802004 	movi	r6,128
 8007c70:	01400044 	movi	r5,1
 8007c74:	0009883a 	mov	r4,zero
 8007c78:	d811883a 	mov	r8,sp
 8007c7c:	1981ae1e 	bne	r3,r6,8008338 <___vfiprintf_internal_r+0xc08>
 8007c80:	d8c02517 	ldw	r3,148(sp)
 8007c84:	1cf9c83a 	sub	fp,r3,r19
 8007c88:	0701ab0e 	bge	zero,fp,8008338 <___vfiprintf_internal_r+0xc08>
 8007c8c:	05400404 	movi	r21,16
 8007c90:	af03a90e 	bge	r21,fp,8008b38 <___vfiprintf_internal_r+0x1408>
 8007c94:	01420074 	movhi	r5,2049
 8007c98:	2940fc04 	addi	r5,r5,1008
 8007c9c:	d9402315 	stw	r5,140(sp)
 8007ca0:	01c001c4 	movi	r7,7
 8007ca4:	00000506 	br	8007cbc <___vfiprintf_internal_r+0x58c>
 8007ca8:	21800084 	addi	r6,r4,2
 8007cac:	42000204 	addi	r8,r8,8
 8007cb0:	1809883a 	mov	r4,r3
 8007cb4:	e73ffc04 	addi	fp,fp,-16
 8007cb8:	af000d0e 	bge	r21,fp,8007cf0 <___vfiprintf_internal_r+0x5c0>
 8007cbc:	10800404 	addi	r2,r2,16
 8007cc0:	20c00044 	addi	r3,r4,1
 8007cc4:	44800015 	stw	r18,0(r8)
 8007cc8:	45400115 	stw	r21,4(r8)
 8007ccc:	d8801c15 	stw	r2,112(sp)
 8007cd0:	d8c01b15 	stw	r3,108(sp)
 8007cd4:	38fff40e 	bge	r7,r3,8007ca8 <__alt_data_end+0xfc007ca8>
 8007cd8:	10022b1e 	bne	r2,zero,8008588 <___vfiprintf_internal_r+0xe58>
 8007cdc:	e73ffc04 	addi	fp,fp,-16
 8007ce0:	01800044 	movi	r6,1
 8007ce4:	0009883a 	mov	r4,zero
 8007ce8:	d811883a 	mov	r8,sp
 8007cec:	af3ff316 	blt	r21,fp,8007cbc <__alt_data_end+0xfc007cbc>
 8007cf0:	d8c02317 	ldw	r3,140(sp)
 8007cf4:	1705883a 	add	r2,r2,fp
 8007cf8:	47000115 	stw	fp,4(r8)
 8007cfc:	40c00015 	stw	r3,0(r8)
 8007d00:	d8801c15 	stw	r2,112(sp)
 8007d04:	d9801b15 	stw	r6,108(sp)
 8007d08:	00c001c4 	movi	r3,7
 8007d0c:	19829416 	blt	r3,r6,8008760 <___vfiprintf_internal_r+0x1030>
 8007d10:	8521c83a 	sub	r16,r16,r20
 8007d14:	42000204 	addi	r8,r8,8
 8007d18:	31400044 	addi	r5,r6,1
 8007d1c:	3009883a 	mov	r4,r6
 8007d20:	04018716 	blt	zero,r16,8008340 <___vfiprintf_internal_r+0xc10>
 8007d24:	a085883a 	add	r2,r20,r2
 8007d28:	45c00015 	stw	r23,0(r8)
 8007d2c:	45000115 	stw	r20,4(r8)
 8007d30:	d8801c15 	stw	r2,112(sp)
 8007d34:	d9401b15 	stw	r5,108(sp)
 8007d38:	00c001c4 	movi	r3,7
 8007d3c:	1941c20e 	bge	r3,r5,8008448 <___vfiprintf_internal_r+0xd18>
 8007d40:	1002531e 	bne	r2,zero,8008690 <___vfiprintf_internal_r+0xf60>
 8007d44:	d8001b15 	stw	zero,108(sp)
 8007d48:	8c40010c 	andi	r17,r17,4
 8007d4c:	88023226 	beq	r17,zero,8008618 <___vfiprintf_internal_r+0xee8>
 8007d50:	d9002517 	ldw	r4,148(sp)
 8007d54:	24e3c83a 	sub	r17,r4,r19
 8007d58:	04432916 	blt	zero,r17,8008a00 <___vfiprintf_internal_r+0x12d0>
 8007d5c:	d8802517 	ldw	r2,148(sp)
 8007d60:	14c0010e 	bge	r2,r19,8007d68 <___vfiprintf_internal_r+0x638>
 8007d64:	9805883a 	mov	r2,r19
 8007d68:	d8c02417 	ldw	r3,144(sp)
 8007d6c:	1887883a 	add	r3,r3,r2
 8007d70:	d8c02415 	stw	r3,144(sp)
 8007d74:	d8001b15 	stw	zero,108(sp)
 8007d78:	d811883a 	mov	r8,sp
 8007d7c:	003ea006 	br	8007800 <__alt_data_end+0xfc007800>
 8007d80:	8c400814 	ori	r17,r17,32
 8007d84:	b0c00007 	ldb	r3,0(r22)
 8007d88:	003ec606 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8007d8c:	b0c00007 	ldb	r3,0(r22)
 8007d90:	00801b04 	movi	r2,108
 8007d94:	18832026 	beq	r3,r2,8008a18 <___vfiprintf_internal_r+0x12e8>
 8007d98:	8c400414 	ori	r17,r17,16
 8007d9c:	003ec106 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8007da0:	9cc03fcc 	andi	r19,r19,255
 8007da4:	b811883a 	mov	r8,r23
 8007da8:	9803981e 	bne	r19,zero,8008c0c <___vfiprintf_internal_r+0x14dc>
 8007dac:	8880080c 	andi	r2,r17,32
 8007db0:	1002be26 	beq	r2,zero,80088ac <___vfiprintf_internal_r+0x117c>
 8007db4:	d9002217 	ldw	r4,136(sp)
 8007db8:	d9402417 	ldw	r5,144(sp)
 8007dbc:	20800017 	ldw	r2,0(r4)
 8007dc0:	2807d7fa 	srai	r3,r5,31
 8007dc4:	21000104 	addi	r4,r4,4
 8007dc8:	d9002215 	stw	r4,136(sp)
 8007dcc:	11400015 	stw	r5,0(r2)
 8007dd0:	10c00115 	stw	r3,4(r2)
 8007dd4:	003e8a06 	br	8007800 <__alt_data_end+0xfc007800>
 8007dd8:	9cc03fcc 	andi	r19,r19,255
 8007ddc:	b811883a 	mov	r8,r23
 8007de0:	9803871e 	bne	r19,zero,8008c00 <___vfiprintf_internal_r+0x14d0>
 8007de4:	8880080c 	andi	r2,r17,32
 8007de8:	10009a26 	beq	r2,zero,8008054 <___vfiprintf_internal_r+0x924>
 8007dec:	d9002217 	ldw	r4,136(sp)
 8007df0:	d8001d85 	stb	zero,118(sp)
 8007df4:	20800204 	addi	r2,r4,8
 8007df8:	24c00017 	ldw	r19,0(r4)
 8007dfc:	25000117 	ldw	r20,4(r4)
 8007e00:	8002a416 	blt	r16,zero,8008894 <___vfiprintf_internal_r+0x1164>
 8007e04:	013fdfc4 	movi	r4,-129
 8007e08:	9d06b03a 	or	r3,r19,r20
 8007e0c:	d8802215 	stw	r2,136(sp)
 8007e10:	8922703a 	and	r17,r17,r4
 8007e14:	18009b26 	beq	r3,zero,8008084 <___vfiprintf_internal_r+0x954>
 8007e18:	002b883a 	mov	r21,zero
 8007e1c:	ddc01a04 	addi	r23,sp,104
 8007e20:	9806d0fa 	srli	r3,r19,3
 8007e24:	a008977a 	slli	r4,r20,29
 8007e28:	a028d0fa 	srli	r20,r20,3
 8007e2c:	9cc001cc 	andi	r19,r19,7
 8007e30:	98800c04 	addi	r2,r19,48
 8007e34:	bdffffc4 	addi	r23,r23,-1
 8007e38:	20e6b03a 	or	r19,r4,r3
 8007e3c:	b8800005 	stb	r2,0(r23)
 8007e40:	9d06b03a 	or	r3,r19,r20
 8007e44:	183ff61e 	bne	r3,zero,8007e20 <__alt_data_end+0xfc007e20>
 8007e48:	88c0004c 	andi	r3,r17,1
 8007e4c:	18021f1e 	bne	r3,zero,80086cc <___vfiprintf_internal_r+0xf9c>
 8007e50:	d9401e17 	ldw	r5,120(sp)
 8007e54:	2de9c83a 	sub	r20,r5,r23
 8007e58:	003f3806 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8007e5c:	9cc03fcc 	andi	r19,r19,255
 8007e60:	b811883a 	mov	r8,r23
 8007e64:	98034f1e 	bne	r19,zero,8008ba4 <___vfiprintf_internal_r+0x1474>
 8007e68:	00820074 	movhi	r2,2049
 8007e6c:	10809b04 	addi	r2,r2,620
 8007e70:	d8802615 	stw	r2,152(sp)
 8007e74:	8880080c 	andi	r2,r17,32
 8007e78:	1000ac26 	beq	r2,zero,800812c <___vfiprintf_internal_r+0x9fc>
 8007e7c:	d9002217 	ldw	r4,136(sp)
 8007e80:	24c00017 	ldw	r19,0(r4)
 8007e84:	25000117 	ldw	r20,4(r4)
 8007e88:	21000204 	addi	r4,r4,8
 8007e8c:	d9002215 	stw	r4,136(sp)
 8007e90:	8880004c 	andi	r2,r17,1
 8007e94:	1001e726 	beq	r2,zero,8008634 <___vfiprintf_internal_r+0xf04>
 8007e98:	9d04b03a 	or	r2,r19,r20
 8007e9c:	10025c1e 	bne	r2,zero,8008810 <___vfiprintf_internal_r+0x10e0>
 8007ea0:	d8001d85 	stb	zero,118(sp)
 8007ea4:	80024416 	blt	r16,zero,80087b8 <___vfiprintf_internal_r+0x1088>
 8007ea8:	00bfdfc4 	movi	r2,-129
 8007eac:	88a2703a 	and	r17,r17,r2
 8007eb0:	003f1d06 	br	8007b28 <__alt_data_end+0xfc007b28>
 8007eb4:	d8c02217 	ldw	r3,136(sp)
 8007eb8:	04c00044 	movi	r19,1
 8007ebc:	b811883a 	mov	r8,r23
 8007ec0:	18800017 	ldw	r2,0(r3)
 8007ec4:	18c00104 	addi	r3,r3,4
 8007ec8:	d8001d85 	stb	zero,118(sp)
 8007ecc:	d8801005 	stb	r2,64(sp)
 8007ed0:	d8c02215 	stw	r3,136(sp)
 8007ed4:	9829883a 	mov	r20,r19
 8007ed8:	ddc01004 	addi	r23,sp,64
 8007edc:	0021883a 	mov	r16,zero
 8007ee0:	003f1e06 	br	8007b5c <__alt_data_end+0xfc007b5c>
 8007ee4:	9cc03fcc 	andi	r19,r19,255
 8007ee8:	b811883a 	mov	r8,r23
 8007eec:	9803331e 	bne	r19,zero,8008bbc <___vfiprintf_internal_r+0x148c>
 8007ef0:	8880080c 	andi	r2,r17,32
 8007ef4:	10004826 	beq	r2,zero,8008018 <___vfiprintf_internal_r+0x8e8>
 8007ef8:	d9002217 	ldw	r4,136(sp)
 8007efc:	20800117 	ldw	r2,4(r4)
 8007f00:	24c00017 	ldw	r19,0(r4)
 8007f04:	21000204 	addi	r4,r4,8
 8007f08:	d9002215 	stw	r4,136(sp)
 8007f0c:	1029883a 	mov	r20,r2
 8007f10:	10024c16 	blt	r2,zero,8008844 <___vfiprintf_internal_r+0x1114>
 8007f14:	dd401d83 	ldbu	r21,118(sp)
 8007f18:	80007116 	blt	r16,zero,80080e0 <___vfiprintf_internal_r+0x9b0>
 8007f1c:	00ffdfc4 	movi	r3,-129
 8007f20:	9d04b03a 	or	r2,r19,r20
 8007f24:	88e2703a 	and	r17,r17,r3
 8007f28:	1000d126 	beq	r2,zero,8008270 <___vfiprintf_internal_r+0xb40>
 8007f2c:	a0023526 	beq	r20,zero,8008804 <___vfiprintf_internal_r+0x10d4>
 8007f30:	ddc01a04 	addi	r23,sp,104
 8007f34:	4039883a 	mov	fp,r8
 8007f38:	9809883a 	mov	r4,r19
 8007f3c:	a00b883a 	mov	r5,r20
 8007f40:	01800284 	movi	r6,10
 8007f44:	000f883a 	mov	r7,zero
 8007f48:	800a7e40 	call	800a7e4 <__umoddi3>
 8007f4c:	10800c04 	addi	r2,r2,48
 8007f50:	bdffffc4 	addi	r23,r23,-1
 8007f54:	9809883a 	mov	r4,r19
 8007f58:	a00b883a 	mov	r5,r20
 8007f5c:	b8800005 	stb	r2,0(r23)
 8007f60:	01800284 	movi	r6,10
 8007f64:	000f883a 	mov	r7,zero
 8007f68:	800a1e80 	call	800a1e8 <__udivdi3>
 8007f6c:	1027883a 	mov	r19,r2
 8007f70:	10c4b03a 	or	r2,r2,r3
 8007f74:	1829883a 	mov	r20,r3
 8007f78:	103fef1e 	bne	r2,zero,8007f38 <__alt_data_end+0xfc007f38>
 8007f7c:	d9001e17 	ldw	r4,120(sp)
 8007f80:	e011883a 	mov	r8,fp
 8007f84:	25e9c83a 	sub	r20,r4,r23
 8007f88:	003eec06 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8007f8c:	d8802307 	ldb	r2,140(sp)
 8007f90:	1002361e 	bne	r2,zero,800886c <___vfiprintf_internal_r+0x113c>
 8007f94:	00c00804 	movi	r3,32
 8007f98:	d8c02305 	stb	r3,140(sp)
 8007f9c:	04c00044 	movi	r19,1
 8007fa0:	b0c00007 	ldb	r3,0(r22)
 8007fa4:	003e3f06 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8007fa8:	8c400054 	ori	r17,r17,1
 8007fac:	b0c00007 	ldb	r3,0(r22)
 8007fb0:	003e3c06 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8007fb4:	8c402014 	ori	r17,r17,128
 8007fb8:	b0c00007 	ldb	r3,0(r22)
 8007fbc:	003e3906 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8007fc0:	dc002715 	stw	r16,156(sp)
 8007fc4:	d8002515 	stw	zero,148(sp)
 8007fc8:	1f3ff404 	addi	fp,r3,-48
 8007fcc:	0009883a 	mov	r4,zero
 8007fd0:	b021883a 	mov	r16,r22
 8007fd4:	01400284 	movi	r5,10
 8007fd8:	80009940 	call	8000994 <__mulsi3>
 8007fdc:	80c00007 	ldb	r3,0(r16)
 8007fe0:	e089883a 	add	r4,fp,r2
 8007fe4:	b5800044 	addi	r22,r22,1
 8007fe8:	1f3ff404 	addi	fp,r3,-48
 8007fec:	b021883a 	mov	r16,r22
 8007ff0:	af3ff82e 	bgeu	r21,fp,8007fd4 <__alt_data_end+0xfc007fd4>
 8007ff4:	d9002515 	stw	r4,148(sp)
 8007ff8:	dc002717 	ldw	r16,156(sp)
 8007ffc:	003e2a06 	br	80078a8 <__alt_data_end+0xfc0078a8>
 8008000:	9cc03fcc 	andi	r19,r19,255
 8008004:	b811883a 	mov	r8,r23
 8008008:	9802e91e 	bne	r19,zero,8008bb0 <___vfiprintf_internal_r+0x1480>
 800800c:	8c400414 	ori	r17,r17,16
 8008010:	8880080c 	andi	r2,r17,32
 8008014:	103fb81e 	bne	r2,zero,8007ef8 <__alt_data_end+0xfc007ef8>
 8008018:	8880040c 	andi	r2,r17,16
 800801c:	10022e26 	beq	r2,zero,80088d8 <___vfiprintf_internal_r+0x11a8>
 8008020:	d9402217 	ldw	r5,136(sp)
 8008024:	2cc00017 	ldw	r19,0(r5)
 8008028:	29400104 	addi	r5,r5,4
 800802c:	d9402215 	stw	r5,136(sp)
 8008030:	9829d7fa 	srai	r20,r19,31
 8008034:	a005883a 	mov	r2,r20
 8008038:	003fb506 	br	8007f10 <__alt_data_end+0xfc007f10>
 800803c:	9cc03fcc 	andi	r19,r19,255
 8008040:	b811883a 	mov	r8,r23
 8008044:	9802fa1e 	bne	r19,zero,8008c30 <___vfiprintf_internal_r+0x1500>
 8008048:	8c400414 	ori	r17,r17,16
 800804c:	8880080c 	andi	r2,r17,32
 8008050:	103f661e 	bne	r2,zero,8007dec <__alt_data_end+0xfc007dec>
 8008054:	8880040c 	andi	r2,r17,16
 8008058:	10020626 	beq	r2,zero,8008874 <___vfiprintf_internal_r+0x1144>
 800805c:	d9402217 	ldw	r5,136(sp)
 8008060:	d8001d85 	stb	zero,118(sp)
 8008064:	0029883a 	mov	r20,zero
 8008068:	28800104 	addi	r2,r5,4
 800806c:	2cc00017 	ldw	r19,0(r5)
 8008070:	80020816 	blt	r16,zero,8008894 <___vfiprintf_internal_r+0x1164>
 8008074:	00ffdfc4 	movi	r3,-129
 8008078:	d8802215 	stw	r2,136(sp)
 800807c:	88e2703a 	and	r17,r17,r3
 8008080:	983f651e 	bne	r19,zero,8007e18 <__alt_data_end+0xfc007e18>
 8008084:	002b883a 	mov	r21,zero
 8008088:	8002cf26 	beq	r16,zero,8008bc8 <___vfiprintf_internal_r+0x1498>
 800808c:	0027883a 	mov	r19,zero
 8008090:	0029883a 	mov	r20,zero
 8008094:	003f6106 	br	8007e1c <__alt_data_end+0xfc007e1c>
 8008098:	9cc03fcc 	andi	r19,r19,255
 800809c:	b811883a 	mov	r8,r23
 80080a0:	9802e01e 	bne	r19,zero,8008c24 <___vfiprintf_internal_r+0x14f4>
 80080a4:	8c400414 	ori	r17,r17,16
 80080a8:	8880080c 	andi	r2,r17,32
 80080ac:	1000641e 	bne	r2,zero,8008240 <___vfiprintf_internal_r+0xb10>
 80080b0:	8880040c 	andi	r2,r17,16
 80080b4:	1001c81e 	bne	r2,zero,80087d8 <___vfiprintf_internal_r+0x10a8>
 80080b8:	8880100c 	andi	r2,r17,64
 80080bc:	d8001d85 	stb	zero,118(sp)
 80080c0:	1002281e 	bne	r2,zero,8008964 <___vfiprintf_internal_r+0x1234>
 80080c4:	d9002217 	ldw	r4,136(sp)
 80080c8:	0029883a 	mov	r20,zero
 80080cc:	20800104 	addi	r2,r4,4
 80080d0:	24c00017 	ldw	r19,0(r4)
 80080d4:	8001c60e 	bge	r16,zero,80087f0 <___vfiprintf_internal_r+0x10c0>
 80080d8:	d8802215 	stw	r2,136(sp)
 80080dc:	002b883a 	mov	r21,zero
 80080e0:	9d04b03a 	or	r2,r19,r20
 80080e4:	103f911e 	bne	r2,zero,8007f2c <__alt_data_end+0xfc007f2c>
 80080e8:	00800044 	movi	r2,1
 80080ec:	10803fcc 	andi	r2,r2,255
 80080f0:	00c00044 	movi	r3,1
 80080f4:	10c05f26 	beq	r2,r3,8008274 <___vfiprintf_internal_r+0xb44>
 80080f8:	00c00084 	movi	r3,2
 80080fc:	10ffe31e 	bne	r2,r3,800808c <__alt_data_end+0xfc00808c>
 8008100:	0027883a 	mov	r19,zero
 8008104:	0029883a 	mov	r20,zero
 8008108:	00015106 	br	8008650 <___vfiprintf_internal_r+0xf20>
 800810c:	9cc03fcc 	andi	r19,r19,255
 8008110:	b811883a 	mov	r8,r23
 8008114:	9802c01e 	bne	r19,zero,8008c18 <___vfiprintf_internal_r+0x14e8>
 8008118:	01420074 	movhi	r5,2049
 800811c:	29409604 	addi	r5,r5,600
 8008120:	d9402615 	stw	r5,152(sp)
 8008124:	8880080c 	andi	r2,r17,32
 8008128:	103f541e 	bne	r2,zero,8007e7c <__alt_data_end+0xfc007e7c>
 800812c:	8880040c 	andi	r2,r17,16
 8008130:	1001f226 	beq	r2,zero,80088fc <___vfiprintf_internal_r+0x11cc>
 8008134:	d9402217 	ldw	r5,136(sp)
 8008138:	0029883a 	mov	r20,zero
 800813c:	2cc00017 	ldw	r19,0(r5)
 8008140:	29400104 	addi	r5,r5,4
 8008144:	d9402215 	stw	r5,136(sp)
 8008148:	003f5106 	br	8007e90 <__alt_data_end+0xfc007e90>
 800814c:	d8c02217 	ldw	r3,136(sp)
 8008150:	b811883a 	mov	r8,r23
 8008154:	d8001d85 	stb	zero,118(sp)
 8008158:	1dc00017 	ldw	r23,0(r3)
 800815c:	1f000104 	addi	fp,r3,4
 8008160:	b8025926 	beq	r23,zero,8008ac8 <___vfiprintf_internal_r+0x1398>
 8008164:	80023316 	blt	r16,zero,8008a34 <___vfiprintf_internal_r+0x1304>
 8008168:	800d883a 	mov	r6,r16
 800816c:	000b883a 	mov	r5,zero
 8008170:	b809883a 	mov	r4,r23
 8008174:	da002a15 	stw	r8,168(sp)
 8008178:	8005fe00 	call	8005fe0 <memchr>
 800817c:	da002a17 	ldw	r8,168(sp)
 8008180:	10026826 	beq	r2,zero,8008b24 <___vfiprintf_internal_r+0x13f4>
 8008184:	15e9c83a 	sub	r20,r2,r23
 8008188:	dd401d83 	ldbu	r21,118(sp)
 800818c:	df002215 	stw	fp,136(sp)
 8008190:	0021883a 	mov	r16,zero
 8008194:	003e6906 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8008198:	9cc03fcc 	andi	r19,r19,255
 800819c:	b811883a 	mov	r8,r23
 80081a0:	983fc126 	beq	r19,zero,80080a8 <__alt_data_end+0xfc0080a8>
 80081a4:	d8c02303 	ldbu	r3,140(sp)
 80081a8:	d8c01d85 	stb	r3,118(sp)
 80081ac:	003fbe06 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80081b0:	d9002217 	ldw	r4,136(sp)
 80081b4:	d9402217 	ldw	r5,136(sp)
 80081b8:	21000017 	ldw	r4,0(r4)
 80081bc:	28800104 	addi	r2,r5,4
 80081c0:	d9002515 	stw	r4,148(sp)
 80081c4:	203e3d16 	blt	r4,zero,8007abc <__alt_data_end+0xfc007abc>
 80081c8:	d8802215 	stw	r2,136(sp)
 80081cc:	b0c00007 	ldb	r3,0(r22)
 80081d0:	003db406 	br	80078a4 <__alt_data_end+0xfc0078a4>
 80081d4:	00c00ac4 	movi	r3,43
 80081d8:	d8c02305 	stb	r3,140(sp)
 80081dc:	04c00044 	movi	r19,1
 80081e0:	b0c00007 	ldb	r3,0(r22)
 80081e4:	003daf06 	br	80078a4 <__alt_data_end+0xfc0078a4>
 80081e8:	b0c00007 	ldb	r3,0(r22)
 80081ec:	01000a84 	movi	r4,42
 80081f0:	b4000044 	addi	r16,r22,1
 80081f4:	19025e26 	beq	r3,r4,8008b70 <___vfiprintf_internal_r+0x1440>
 80081f8:	1f3ff404 	addi	fp,r3,-48
 80081fc:	0009883a 	mov	r4,zero
 8008200:	af025236 	bltu	r21,fp,8008b4c <___vfiprintf_internal_r+0x141c>
 8008204:	01400284 	movi	r5,10
 8008208:	80009940 	call	8000994 <__mulsi3>
 800820c:	80c00007 	ldb	r3,0(r16)
 8008210:	1709883a 	add	r4,r2,fp
 8008214:	85800044 	addi	r22,r16,1
 8008218:	1f3ff404 	addi	fp,r3,-48
 800821c:	b021883a 	mov	r16,r22
 8008220:	af3ff82e 	bgeu	r21,fp,8008204 <__alt_data_end+0xfc008204>
 8008224:	2021883a 	mov	r16,r4
 8008228:	203d9f0e 	bge	r4,zero,80078a8 <__alt_data_end+0xfc0078a8>
 800822c:	043fffc4 	movi	r16,-1
 8008230:	003d9d06 	br	80078a8 <__alt_data_end+0xfc0078a8>
 8008234:	8c401014 	ori	r17,r17,64
 8008238:	b0c00007 	ldb	r3,0(r22)
 800823c:	003d9906 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8008240:	d9002217 	ldw	r4,136(sp)
 8008244:	d8001d85 	stb	zero,118(sp)
 8008248:	20c00204 	addi	r3,r4,8
 800824c:	24c00017 	ldw	r19,0(r4)
 8008250:	25000117 	ldw	r20,4(r4)
 8008254:	8001e716 	blt	r16,zero,80089f4 <___vfiprintf_internal_r+0x12c4>
 8008258:	013fdfc4 	movi	r4,-129
 800825c:	9d04b03a 	or	r2,r19,r20
 8008260:	d8c02215 	stw	r3,136(sp)
 8008264:	8922703a 	and	r17,r17,r4
 8008268:	002b883a 	mov	r21,zero
 800826c:	103f2f1e 	bne	r2,zero,8007f2c <__alt_data_end+0xfc007f2c>
 8008270:	803e2f26 	beq	r16,zero,8007b30 <__alt_data_end+0xfc007b30>
 8008274:	0027883a 	mov	r19,zero
 8008278:	9cc00c04 	addi	r19,r19,48
 800827c:	dcc019c5 	stb	r19,103(sp)
 8008280:	dd002817 	ldw	r20,160(sp)
 8008284:	ddc019c4 	addi	r23,sp,103
 8008288:	003e2c06 	br	8007b3c <__alt_data_end+0xfc007b3c>
 800828c:	9cc03fcc 	andi	r19,r19,255
 8008290:	b811883a 	mov	r8,r23
 8008294:	9802571e 	bne	r19,zero,8008bf4 <___vfiprintf_internal_r+0x14c4>
 8008298:	18005726 	beq	r3,zero,80083f8 <___vfiprintf_internal_r+0xcc8>
 800829c:	04c00044 	movi	r19,1
 80082a0:	d8c01005 	stb	r3,64(sp)
 80082a4:	d8001d85 	stb	zero,118(sp)
 80082a8:	9829883a 	mov	r20,r19
 80082ac:	ddc01004 	addi	r23,sp,64
 80082b0:	003f0a06 	br	8007edc <__alt_data_end+0xfc007edc>
 80082b4:	d9402017 	ldw	r5,128(sp)
 80082b8:	d9002117 	ldw	r4,132(sp)
 80082bc:	d9801a04 	addi	r6,sp,104
 80082c0:	da802a15 	stw	r10,168(sp)
 80082c4:	800761c0 	call	800761c <__sprint_r.part.0>
 80082c8:	da802a17 	ldw	r10,168(sp)
 80082cc:	1000501e 	bne	r2,zero,8008410 <___vfiprintf_internal_r+0xce0>
 80082d0:	d9801b17 	ldw	r6,108(sp)
 80082d4:	d8801c17 	ldw	r2,112(sp)
 80082d8:	d811883a 	mov	r8,sp
 80082dc:	31000044 	addi	r4,r6,1
 80082e0:	003e3606 	br	8007bbc <__alt_data_end+0xfc007bbc>
 80082e4:	d9001b17 	ldw	r4,108(sp)
 80082e8:	d8801c17 	ldw	r2,112(sp)
 80082ec:	21400044 	addi	r5,r4,1
 80082f0:	d9801d87 	ldb	r6,118(sp)
 80082f4:	303e5226 	beq	r6,zero,8007c40 <__alt_data_end+0xfc007c40>
 80082f8:	01800044 	movi	r6,1
 80082fc:	d9001d84 	addi	r4,sp,118
 8008300:	1185883a 	add	r2,r2,r6
 8008304:	41000015 	stw	r4,0(r8)
 8008308:	41800115 	stw	r6,4(r8)
 800830c:	d8801c15 	stw	r2,112(sp)
 8008310:	d9401b15 	stw	r5,108(sp)
 8008314:	010001c4 	movi	r4,7
 8008318:	2140b00e 	bge	r4,r5,80085dc <___vfiprintf_internal_r+0xeac>
 800831c:	1000f61e 	bne	r2,zero,80086f8 <___vfiprintf_internal_r+0xfc8>
 8008320:	3800b31e 	bne	r7,zero,80085f0 <___vfiprintf_internal_r+0xec0>
 8008324:	0009883a 	mov	r4,zero
 8008328:	300b883a 	mov	r5,r6
 800832c:	d811883a 	mov	r8,sp
 8008330:	01802004 	movi	r6,128
 8008334:	19be5226 	beq	r3,r6,8007c80 <__alt_data_end+0xfc007c80>
 8008338:	8521c83a 	sub	r16,r16,r20
 800833c:	043e790e 	bge	zero,r16,8007d24 <__alt_data_end+0xfc007d24>
 8008340:	05400404 	movi	r21,16
 8008344:	ac01b00e 	bge	r21,r16,8008a08 <___vfiprintf_internal_r+0x12d8>
 8008348:	01420074 	movhi	r5,2049
 800834c:	2940fc04 	addi	r5,r5,1008
 8008350:	d9402315 	stw	r5,140(sp)
 8008354:	070001c4 	movi	fp,7
 8008358:	00000506 	br	8008370 <___vfiprintf_internal_r+0xc40>
 800835c:	21400084 	addi	r5,r4,2
 8008360:	42000204 	addi	r8,r8,8
 8008364:	1809883a 	mov	r4,r3
 8008368:	843ffc04 	addi	r16,r16,-16
 800836c:	ac000d0e 	bge	r21,r16,80083a4 <___vfiprintf_internal_r+0xc74>
 8008370:	10800404 	addi	r2,r2,16
 8008374:	20c00044 	addi	r3,r4,1
 8008378:	44800015 	stw	r18,0(r8)
 800837c:	45400115 	stw	r21,4(r8)
 8008380:	d8801c15 	stw	r2,112(sp)
 8008384:	d8c01b15 	stw	r3,108(sp)
 8008388:	e0fff40e 	bge	fp,r3,800835c <__alt_data_end+0xfc00835c>
 800838c:	1000101e 	bne	r2,zero,80083d0 <___vfiprintf_internal_r+0xca0>
 8008390:	843ffc04 	addi	r16,r16,-16
 8008394:	01400044 	movi	r5,1
 8008398:	0009883a 	mov	r4,zero
 800839c:	d811883a 	mov	r8,sp
 80083a0:	ac3ff316 	blt	r21,r16,8008370 <__alt_data_end+0xfc008370>
 80083a4:	d8c02317 	ldw	r3,140(sp)
 80083a8:	1405883a 	add	r2,r2,r16
 80083ac:	44000115 	stw	r16,4(r8)
 80083b0:	40c00015 	stw	r3,0(r8)
 80083b4:	d8801c15 	stw	r2,112(sp)
 80083b8:	d9401b15 	stw	r5,108(sp)
 80083bc:	00c001c4 	movi	r3,7
 80083c0:	19401916 	blt	r3,r5,8008428 <___vfiprintf_internal_r+0xcf8>
 80083c4:	42000204 	addi	r8,r8,8
 80083c8:	29400044 	addi	r5,r5,1
 80083cc:	003e5506 	br	8007d24 <__alt_data_end+0xfc007d24>
 80083d0:	d9402017 	ldw	r5,128(sp)
 80083d4:	d9002117 	ldw	r4,132(sp)
 80083d8:	d9801a04 	addi	r6,sp,104
 80083dc:	800761c0 	call	800761c <__sprint_r.part.0>
 80083e0:	10000b1e 	bne	r2,zero,8008410 <___vfiprintf_internal_r+0xce0>
 80083e4:	d9001b17 	ldw	r4,108(sp)
 80083e8:	d8801c17 	ldw	r2,112(sp)
 80083ec:	d811883a 	mov	r8,sp
 80083f0:	21400044 	addi	r5,r4,1
 80083f4:	003fdc06 	br	8008368 <__alt_data_end+0xfc008368>
 80083f8:	d8801c17 	ldw	r2,112(sp)
 80083fc:	10000426 	beq	r2,zero,8008410 <___vfiprintf_internal_r+0xce0>
 8008400:	d9402017 	ldw	r5,128(sp)
 8008404:	d9002117 	ldw	r4,132(sp)
 8008408:	d9801a04 	addi	r6,sp,104
 800840c:	800761c0 	call	800761c <__sprint_r.part.0>
 8008410:	d9402017 	ldw	r5,128(sp)
 8008414:	2880030b 	ldhu	r2,12(r5)
 8008418:	1080100c 	andi	r2,r2,64
 800841c:	10014d1e 	bne	r2,zero,8008954 <___vfiprintf_internal_r+0x1224>
 8008420:	d8802417 	ldw	r2,144(sp)
 8008424:	003d9706 	br	8007a84 <__alt_data_end+0xfc007a84>
 8008428:	1000d21e 	bne	r2,zero,8008774 <___vfiprintf_internal_r+0x1044>
 800842c:	00c00044 	movi	r3,1
 8008430:	a005883a 	mov	r2,r20
 8008434:	ddc00015 	stw	r23,0(sp)
 8008438:	dd000115 	stw	r20,4(sp)
 800843c:	dd001c15 	stw	r20,112(sp)
 8008440:	d8c01b15 	stw	r3,108(sp)
 8008444:	d811883a 	mov	r8,sp
 8008448:	42000204 	addi	r8,r8,8
 800844c:	8c40010c 	andi	r17,r17,4
 8008450:	88004026 	beq	r17,zero,8008554 <___vfiprintf_internal_r+0xe24>
 8008454:	d9002517 	ldw	r4,148(sp)
 8008458:	24e3c83a 	sub	r17,r4,r19
 800845c:	04403d0e 	bge	zero,r17,8008554 <___vfiprintf_internal_r+0xe24>
 8008460:	04000404 	movi	r16,16
 8008464:	8441a90e 	bge	r16,r17,8008b0c <___vfiprintf_internal_r+0x13dc>
 8008468:	00c20074 	movhi	r3,2049
 800846c:	18c10004 	addi	r3,r3,1024
 8008470:	d9001b17 	ldw	r4,108(sp)
 8008474:	d8c02315 	stw	r3,140(sp)
 8008478:	050001c4 	movi	r20,7
 800847c:	dd402117 	ldw	r21,132(sp)
 8008480:	ddc02017 	ldw	r23,128(sp)
 8008484:	00000506 	br	800849c <___vfiprintf_internal_r+0xd6c>
 8008488:	21400084 	addi	r5,r4,2
 800848c:	42000204 	addi	r8,r8,8
 8008490:	1809883a 	mov	r4,r3
 8008494:	8c7ffc04 	addi	r17,r17,-16
 8008498:	84400f0e 	bge	r16,r17,80084d8 <___vfiprintf_internal_r+0xda8>
 800849c:	01420074 	movhi	r5,2049
 80084a0:	10800404 	addi	r2,r2,16
 80084a4:	20c00044 	addi	r3,r4,1
 80084a8:	29410004 	addi	r5,r5,1024
 80084ac:	41400015 	stw	r5,0(r8)
 80084b0:	44000115 	stw	r16,4(r8)
 80084b4:	d8801c15 	stw	r2,112(sp)
 80084b8:	d8c01b15 	stw	r3,108(sp)
 80084bc:	a0fff20e 	bge	r20,r3,8008488 <__alt_data_end+0xfc008488>
 80084c0:	1000141e 	bne	r2,zero,8008514 <___vfiprintf_internal_r+0xde4>
 80084c4:	8c7ffc04 	addi	r17,r17,-16
 80084c8:	01400044 	movi	r5,1
 80084cc:	0009883a 	mov	r4,zero
 80084d0:	d811883a 	mov	r8,sp
 80084d4:	847ff116 	blt	r16,r17,800849c <__alt_data_end+0xfc00849c>
 80084d8:	d8c02317 	ldw	r3,140(sp)
 80084dc:	1445883a 	add	r2,r2,r17
 80084e0:	44400115 	stw	r17,4(r8)
 80084e4:	40c00015 	stw	r3,0(r8)
 80084e8:	d8801c15 	stw	r2,112(sp)
 80084ec:	d9401b15 	stw	r5,108(sp)
 80084f0:	00c001c4 	movi	r3,7
 80084f4:	1940170e 	bge	r3,r5,8008554 <___vfiprintf_internal_r+0xe24>
 80084f8:	1000101e 	bne	r2,zero,800853c <___vfiprintf_internal_r+0xe0c>
 80084fc:	d8802517 	ldw	r2,148(sp)
 8008500:	14c11616 	blt	r2,r19,800895c <___vfiprintf_internal_r+0x122c>
 8008504:	d9002417 	ldw	r4,144(sp)
 8008508:	2089883a 	add	r4,r4,r2
 800850c:	d9002415 	stw	r4,144(sp)
 8008510:	003e1806 	br	8007d74 <__alt_data_end+0xfc007d74>
 8008514:	d9801a04 	addi	r6,sp,104
 8008518:	b80b883a 	mov	r5,r23
 800851c:	a809883a 	mov	r4,r21
 8008520:	800761c0 	call	800761c <__sprint_r.part.0>
 8008524:	103fba1e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 8008528:	d9001b17 	ldw	r4,108(sp)
 800852c:	d8801c17 	ldw	r2,112(sp)
 8008530:	d811883a 	mov	r8,sp
 8008534:	21400044 	addi	r5,r4,1
 8008538:	003fd606 	br	8008494 <__alt_data_end+0xfc008494>
 800853c:	d9402017 	ldw	r5,128(sp)
 8008540:	d9002117 	ldw	r4,132(sp)
 8008544:	d9801a04 	addi	r6,sp,104
 8008548:	800761c0 	call	800761c <__sprint_r.part.0>
 800854c:	103fb01e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 8008550:	d8801c17 	ldw	r2,112(sp)
 8008554:	d8c02517 	ldw	r3,148(sp)
 8008558:	1cc0010e 	bge	r3,r19,8008560 <___vfiprintf_internal_r+0xe30>
 800855c:	9807883a 	mov	r3,r19
 8008560:	d9002417 	ldw	r4,144(sp)
 8008564:	20c9883a 	add	r4,r4,r3
 8008568:	d9002415 	stw	r4,144(sp)
 800856c:	103e0126 	beq	r2,zero,8007d74 <__alt_data_end+0xfc007d74>
 8008570:	d9402017 	ldw	r5,128(sp)
 8008574:	d9002117 	ldw	r4,132(sp)
 8008578:	d9801a04 	addi	r6,sp,104
 800857c:	800761c0 	call	800761c <__sprint_r.part.0>
 8008580:	103dfc26 	beq	r2,zero,8007d74 <__alt_data_end+0xfc007d74>
 8008584:	003fa206 	br	8008410 <__alt_data_end+0xfc008410>
 8008588:	d9402017 	ldw	r5,128(sp)
 800858c:	d9002117 	ldw	r4,132(sp)
 8008590:	d9801a04 	addi	r6,sp,104
 8008594:	d9c02b15 	stw	r7,172(sp)
 8008598:	800761c0 	call	800761c <__sprint_r.part.0>
 800859c:	d9c02b17 	ldw	r7,172(sp)
 80085a0:	103f9b1e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 80085a4:	d9001b17 	ldw	r4,108(sp)
 80085a8:	d8801c17 	ldw	r2,112(sp)
 80085ac:	d811883a 	mov	r8,sp
 80085b0:	21800044 	addi	r6,r4,1
 80085b4:	003dbf06 	br	8007cb4 <__alt_data_end+0xfc007cb4>
 80085b8:	1000d81e 	bne	r2,zero,800891c <___vfiprintf_internal_r+0x11ec>
 80085bc:	d9001d87 	ldb	r4,118(sp)
 80085c0:	20000a26 	beq	r4,zero,80085ec <___vfiprintf_internal_r+0xebc>
 80085c4:	00800044 	movi	r2,1
 80085c8:	d9001d84 	addi	r4,sp,118
 80085cc:	100b883a 	mov	r5,r2
 80085d0:	d9000015 	stw	r4,0(sp)
 80085d4:	d8800115 	stw	r2,4(sp)
 80085d8:	d811883a 	mov	r8,sp
 80085dc:	2809883a 	mov	r4,r5
 80085e0:	42000204 	addi	r8,r8,8
 80085e4:	29400044 	addi	r5,r5,1
 80085e8:	003d9506 	br	8007c40 <__alt_data_end+0xfc007c40>
 80085ec:	3800fd26 	beq	r7,zero,80089e4 <___vfiprintf_internal_r+0x12b4>
 80085f0:	00800084 	movi	r2,2
 80085f4:	d9001d04 	addi	r4,sp,116
 80085f8:	d9000015 	stw	r4,0(sp)
 80085fc:	d8800115 	stw	r2,4(sp)
 8008600:	01400044 	movi	r5,1
 8008604:	d811883a 	mov	r8,sp
 8008608:	2809883a 	mov	r4,r5
 800860c:	42000204 	addi	r8,r8,8
 8008610:	29400044 	addi	r5,r5,1
 8008614:	003f4606 	br	8008330 <__alt_data_end+0xfc008330>
 8008618:	d8802517 	ldw	r2,148(sp)
 800861c:	14c0010e 	bge	r2,r19,8008624 <___vfiprintf_internal_r+0xef4>
 8008620:	9805883a 	mov	r2,r19
 8008624:	d9402417 	ldw	r5,144(sp)
 8008628:	288b883a 	add	r5,r5,r2
 800862c:	d9402415 	stw	r5,144(sp)
 8008630:	003dd006 	br	8007d74 <__alt_data_end+0xfc007d74>
 8008634:	d8001d85 	stb	zero,118(sp)
 8008638:	80005d16 	blt	r16,zero,80087b0 <___vfiprintf_internal_r+0x1080>
 800863c:	00ffdfc4 	movi	r3,-129
 8008640:	9d04b03a 	or	r2,r19,r20
 8008644:	88e2703a 	and	r17,r17,r3
 8008648:	103d3726 	beq	r2,zero,8007b28 <__alt_data_end+0xfc007b28>
 800864c:	002b883a 	mov	r21,zero
 8008650:	d9002617 	ldw	r4,152(sp)
 8008654:	ddc01a04 	addi	r23,sp,104
 8008658:	988003cc 	andi	r2,r19,15
 800865c:	a006973a 	slli	r3,r20,28
 8008660:	2085883a 	add	r2,r4,r2
 8008664:	9826d13a 	srli	r19,r19,4
 8008668:	10800003 	ldbu	r2,0(r2)
 800866c:	a028d13a 	srli	r20,r20,4
 8008670:	bdffffc4 	addi	r23,r23,-1
 8008674:	1ce6b03a 	or	r19,r3,r19
 8008678:	b8800005 	stb	r2,0(r23)
 800867c:	9d04b03a 	or	r2,r19,r20
 8008680:	103ff51e 	bne	r2,zero,8008658 <__alt_data_end+0xfc008658>
 8008684:	d8801e17 	ldw	r2,120(sp)
 8008688:	15e9c83a 	sub	r20,r2,r23
 800868c:	003d2b06 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8008690:	d9402017 	ldw	r5,128(sp)
 8008694:	d9002117 	ldw	r4,132(sp)
 8008698:	d9801a04 	addi	r6,sp,104
 800869c:	800761c0 	call	800761c <__sprint_r.part.0>
 80086a0:	103f5b1e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 80086a4:	d8801c17 	ldw	r2,112(sp)
 80086a8:	d811883a 	mov	r8,sp
 80086ac:	003f6706 	br	800844c <__alt_data_end+0xfc00844c>
 80086b0:	d9402017 	ldw	r5,128(sp)
 80086b4:	d9002117 	ldw	r4,132(sp)
 80086b8:	d9801a04 	addi	r6,sp,104
 80086bc:	800761c0 	call	800761c <__sprint_r.part.0>
 80086c0:	103f531e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 80086c4:	d811883a 	mov	r8,sp
 80086c8:	003cd906 	br	8007a30 <__alt_data_end+0xfc007a30>
 80086cc:	10803fcc 	andi	r2,r2,255
 80086d0:	1080201c 	xori	r2,r2,128
 80086d4:	10bfe004 	addi	r2,r2,-128
 80086d8:	00c00c04 	movi	r3,48
 80086dc:	10ffe926 	beq	r2,r3,8008684 <__alt_data_end+0xfc008684>
 80086e0:	b8ffffc5 	stb	r3,-1(r23)
 80086e4:	d8c01e17 	ldw	r3,120(sp)
 80086e8:	b8bfffc4 	addi	r2,r23,-1
 80086ec:	102f883a 	mov	r23,r2
 80086f0:	18a9c83a 	sub	r20,r3,r2
 80086f4:	003d1106 	br	8007b3c <__alt_data_end+0xfc007b3c>
 80086f8:	d9402017 	ldw	r5,128(sp)
 80086fc:	d9002117 	ldw	r4,132(sp)
 8008700:	d9801a04 	addi	r6,sp,104
 8008704:	d8c02a15 	stw	r3,168(sp)
 8008708:	d9c02b15 	stw	r7,172(sp)
 800870c:	800761c0 	call	800761c <__sprint_r.part.0>
 8008710:	d8c02a17 	ldw	r3,168(sp)
 8008714:	d9c02b17 	ldw	r7,172(sp)
 8008718:	103f3d1e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 800871c:	d9001b17 	ldw	r4,108(sp)
 8008720:	d8801c17 	ldw	r2,112(sp)
 8008724:	d811883a 	mov	r8,sp
 8008728:	21400044 	addi	r5,r4,1
 800872c:	003d4406 	br	8007c40 <__alt_data_end+0xfc007c40>
 8008730:	d9402017 	ldw	r5,128(sp)
 8008734:	d9002117 	ldw	r4,132(sp)
 8008738:	d9801a04 	addi	r6,sp,104
 800873c:	d8c02a15 	stw	r3,168(sp)
 8008740:	800761c0 	call	800761c <__sprint_r.part.0>
 8008744:	d8c02a17 	ldw	r3,168(sp)
 8008748:	103f311e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 800874c:	d9001b17 	ldw	r4,108(sp)
 8008750:	d8801c17 	ldw	r2,112(sp)
 8008754:	d811883a 	mov	r8,sp
 8008758:	21400044 	addi	r5,r4,1
 800875c:	003ef406 	br	8008330 <__alt_data_end+0xfc008330>
 8008760:	1000bd1e 	bne	r2,zero,8008a58 <___vfiprintf_internal_r+0x1328>
 8008764:	01400044 	movi	r5,1
 8008768:	0009883a 	mov	r4,zero
 800876c:	d811883a 	mov	r8,sp
 8008770:	003ef106 	br	8008338 <__alt_data_end+0xfc008338>
 8008774:	d9402017 	ldw	r5,128(sp)
 8008778:	d9002117 	ldw	r4,132(sp)
 800877c:	d9801a04 	addi	r6,sp,104
 8008780:	800761c0 	call	800761c <__sprint_r.part.0>
 8008784:	103f221e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 8008788:	d9401b17 	ldw	r5,108(sp)
 800878c:	d8801c17 	ldw	r2,112(sp)
 8008790:	d811883a 	mov	r8,sp
 8008794:	29400044 	addi	r5,r5,1
 8008798:	003d6206 	br	8007d24 <__alt_data_end+0xfc007d24>
 800879c:	01420074 	movhi	r5,2049
 80087a0:	29409b04 	addi	r5,r5,620
 80087a4:	d9402615 	stw	r5,152(sp)
 80087a8:	d8c02215 	stw	r3,136(sp)
 80087ac:	1023883a 	mov	r17,r2
 80087b0:	9d04b03a 	or	r2,r19,r20
 80087b4:	103fa51e 	bne	r2,zero,800864c <__alt_data_end+0xfc00864c>
 80087b8:	002b883a 	mov	r21,zero
 80087bc:	00800084 	movi	r2,2
 80087c0:	003e4a06 	br	80080ec <__alt_data_end+0xfc0080ec>
 80087c4:	01420074 	movhi	r5,2049
 80087c8:	29409b04 	addi	r5,r5,620
 80087cc:	002b883a 	mov	r21,zero
 80087d0:	d9402615 	stw	r5,152(sp)
 80087d4:	003f9e06 	br	8008650 <__alt_data_end+0xfc008650>
 80087d8:	d9402217 	ldw	r5,136(sp)
 80087dc:	d8001d85 	stb	zero,118(sp)
 80087e0:	0029883a 	mov	r20,zero
 80087e4:	28800104 	addi	r2,r5,4
 80087e8:	2cc00017 	ldw	r19,0(r5)
 80087ec:	803e3a16 	blt	r16,zero,80080d8 <__alt_data_end+0xfc0080d8>
 80087f0:	00ffdfc4 	movi	r3,-129
 80087f4:	d8802215 	stw	r2,136(sp)
 80087f8:	88e2703a 	and	r17,r17,r3
 80087fc:	002b883a 	mov	r21,zero
 8008800:	983e9b26 	beq	r19,zero,8008270 <__alt_data_end+0xfc008270>
 8008804:	00800244 	movi	r2,9
 8008808:	14fdc936 	bltu	r2,r19,8007f30 <__alt_data_end+0xfc007f30>
 800880c:	003e9a06 	br	8008278 <__alt_data_end+0xfc008278>
 8008810:	00800c04 	movi	r2,48
 8008814:	d8c01d45 	stb	r3,117(sp)
 8008818:	d8801d05 	stb	r2,116(sp)
 800881c:	d8001d85 	stb	zero,118(sp)
 8008820:	88c00094 	ori	r3,r17,2
 8008824:	80009c16 	blt	r16,zero,8008a98 <___vfiprintf_internal_r+0x1368>
 8008828:	00bfdfc4 	movi	r2,-129
 800882c:	88a2703a 	and	r17,r17,r2
 8008830:	8c400094 	ori	r17,r17,2
 8008834:	002b883a 	mov	r21,zero
 8008838:	003f8506 	br	8008650 <__alt_data_end+0xfc008650>
 800883c:	b029883a 	mov	r20,r22
 8008840:	003c0b06 	br	8007870 <__alt_data_end+0xfc007870>
 8008844:	04e7c83a 	sub	r19,zero,r19
 8008848:	05400b44 	movi	r21,45
 800884c:	9804c03a 	cmpne	r2,r19,zero
 8008850:	0529c83a 	sub	r20,zero,r20
 8008854:	dd401d85 	stb	r21,118(sp)
 8008858:	a0a9c83a 	sub	r20,r20,r2
 800885c:	80009716 	blt	r16,zero,8008abc <___vfiprintf_internal_r+0x138c>
 8008860:	00bfdfc4 	movi	r2,-129
 8008864:	88a2703a 	and	r17,r17,r2
 8008868:	003db006 	br	8007f2c <__alt_data_end+0xfc007f2c>
 800886c:	b0c00007 	ldb	r3,0(r22)
 8008870:	003c0c06 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8008874:	8880100c 	andi	r2,r17,64
 8008878:	d8001d85 	stb	zero,118(sp)
 800887c:	1000461e 	bne	r2,zero,8008998 <___vfiprintf_internal_r+0x1268>
 8008880:	d9002217 	ldw	r4,136(sp)
 8008884:	0029883a 	mov	r20,zero
 8008888:	20800104 	addi	r2,r4,4
 800888c:	24c00017 	ldw	r19,0(r4)
 8008890:	803df80e 	bge	r16,zero,8008074 <__alt_data_end+0xfc008074>
 8008894:	9d06b03a 	or	r3,r19,r20
 8008898:	d8802215 	stw	r2,136(sp)
 800889c:	183d5e1e 	bne	r3,zero,8007e18 <__alt_data_end+0xfc007e18>
 80088a0:	002b883a 	mov	r21,zero
 80088a4:	0005883a 	mov	r2,zero
 80088a8:	003e1006 	br	80080ec <__alt_data_end+0xfc0080ec>
 80088ac:	8880040c 	andi	r2,r17,16
 80088b0:	1000321e 	bne	r2,zero,800897c <___vfiprintf_internal_r+0x124c>
 80088b4:	8c40100c 	andi	r17,r17,64
 80088b8:	88008d26 	beq	r17,zero,8008af0 <___vfiprintf_internal_r+0x13c0>
 80088bc:	d9402217 	ldw	r5,136(sp)
 80088c0:	d8c02417 	ldw	r3,144(sp)
 80088c4:	28800017 	ldw	r2,0(r5)
 80088c8:	29400104 	addi	r5,r5,4
 80088cc:	d9402215 	stw	r5,136(sp)
 80088d0:	10c0000d 	sth	r3,0(r2)
 80088d4:	003bca06 	br	8007800 <__alt_data_end+0xfc007800>
 80088d8:	8880100c 	andi	r2,r17,64
 80088dc:	10003a26 	beq	r2,zero,80089c8 <___vfiprintf_internal_r+0x1298>
 80088e0:	d8802217 	ldw	r2,136(sp)
 80088e4:	14c0000f 	ldh	r19,0(r2)
 80088e8:	10800104 	addi	r2,r2,4
 80088ec:	d8802215 	stw	r2,136(sp)
 80088f0:	9829d7fa 	srai	r20,r19,31
 80088f4:	a005883a 	mov	r2,r20
 80088f8:	003d8506 	br	8007f10 <__alt_data_end+0xfc007f10>
 80088fc:	8880100c 	andi	r2,r17,64
 8008900:	10002b26 	beq	r2,zero,80089b0 <___vfiprintf_internal_r+0x1280>
 8008904:	d8802217 	ldw	r2,136(sp)
 8008908:	0029883a 	mov	r20,zero
 800890c:	14c0000b 	ldhu	r19,0(r2)
 8008910:	10800104 	addi	r2,r2,4
 8008914:	d8802215 	stw	r2,136(sp)
 8008918:	003d5d06 	br	8007e90 <__alt_data_end+0xfc007e90>
 800891c:	d9402017 	ldw	r5,128(sp)
 8008920:	d9002117 	ldw	r4,132(sp)
 8008924:	d9801a04 	addi	r6,sp,104
 8008928:	d8c02a15 	stw	r3,168(sp)
 800892c:	d9c02b15 	stw	r7,172(sp)
 8008930:	800761c0 	call	800761c <__sprint_r.part.0>
 8008934:	d8c02a17 	ldw	r3,168(sp)
 8008938:	d9c02b17 	ldw	r7,172(sp)
 800893c:	103eb41e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 8008940:	d9001b17 	ldw	r4,108(sp)
 8008944:	d8801c17 	ldw	r2,112(sp)
 8008948:	d811883a 	mov	r8,sp
 800894c:	21400044 	addi	r5,r4,1
 8008950:	003e6706 	br	80082f0 <__alt_data_end+0xfc0082f0>
 8008954:	00bfffc4 	movi	r2,-1
 8008958:	003c4a06 	br	8007a84 <__alt_data_end+0xfc007a84>
 800895c:	9805883a 	mov	r2,r19
 8008960:	003ee806 	br	8008504 <__alt_data_end+0xfc008504>
 8008964:	d8c02217 	ldw	r3,136(sp)
 8008968:	0029883a 	mov	r20,zero
 800896c:	18800104 	addi	r2,r3,4
 8008970:	1cc0000b 	ldhu	r19,0(r3)
 8008974:	803f9e0e 	bge	r16,zero,80087f0 <__alt_data_end+0xfc0087f0>
 8008978:	003dd706 	br	80080d8 <__alt_data_end+0xfc0080d8>
 800897c:	d8c02217 	ldw	r3,136(sp)
 8008980:	d9002417 	ldw	r4,144(sp)
 8008984:	18800017 	ldw	r2,0(r3)
 8008988:	18c00104 	addi	r3,r3,4
 800898c:	d8c02215 	stw	r3,136(sp)
 8008990:	11000015 	stw	r4,0(r2)
 8008994:	003b9a06 	br	8007800 <__alt_data_end+0xfc007800>
 8008998:	d8c02217 	ldw	r3,136(sp)
 800899c:	0029883a 	mov	r20,zero
 80089a0:	18800104 	addi	r2,r3,4
 80089a4:	1cc0000b 	ldhu	r19,0(r3)
 80089a8:	803db20e 	bge	r16,zero,8008074 <__alt_data_end+0xfc008074>
 80089ac:	003fb906 	br	8008894 <__alt_data_end+0xfc008894>
 80089b0:	d9002217 	ldw	r4,136(sp)
 80089b4:	0029883a 	mov	r20,zero
 80089b8:	24c00017 	ldw	r19,0(r4)
 80089bc:	21000104 	addi	r4,r4,4
 80089c0:	d9002215 	stw	r4,136(sp)
 80089c4:	003d3206 	br	8007e90 <__alt_data_end+0xfc007e90>
 80089c8:	d8c02217 	ldw	r3,136(sp)
 80089cc:	1cc00017 	ldw	r19,0(r3)
 80089d0:	18c00104 	addi	r3,r3,4
 80089d4:	d8c02215 	stw	r3,136(sp)
 80089d8:	9829d7fa 	srai	r20,r19,31
 80089dc:	a005883a 	mov	r2,r20
 80089e0:	003d4b06 	br	8007f10 <__alt_data_end+0xfc007f10>
 80089e4:	0009883a 	mov	r4,zero
 80089e8:	01400044 	movi	r5,1
 80089ec:	d811883a 	mov	r8,sp
 80089f0:	003e4f06 	br	8008330 <__alt_data_end+0xfc008330>
 80089f4:	d8c02215 	stw	r3,136(sp)
 80089f8:	002b883a 	mov	r21,zero
 80089fc:	003db806 	br	80080e0 <__alt_data_end+0xfc0080e0>
 8008a00:	d811883a 	mov	r8,sp
 8008a04:	003e9606 	br	8008460 <__alt_data_end+0xfc008460>
 8008a08:	01020074 	movhi	r4,2049
 8008a0c:	2100fc04 	addi	r4,r4,1008
 8008a10:	d9002315 	stw	r4,140(sp)
 8008a14:	003e6306 	br	80083a4 <__alt_data_end+0xfc0083a4>
 8008a18:	b0c00043 	ldbu	r3,1(r22)
 8008a1c:	8c400814 	ori	r17,r17,32
 8008a20:	b5800044 	addi	r22,r22,1
 8008a24:	18c03fcc 	andi	r3,r3,255
 8008a28:	18c0201c 	xori	r3,r3,128
 8008a2c:	18ffe004 	addi	r3,r3,-128
 8008a30:	003b9c06 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8008a34:	b809883a 	mov	r4,r23
 8008a38:	da002a15 	stw	r8,168(sp)
 8008a3c:	80075840 	call	8007584 <strlen>
 8008a40:	1029883a 	mov	r20,r2
 8008a44:	dd401d83 	ldbu	r21,118(sp)
 8008a48:	df002215 	stw	fp,136(sp)
 8008a4c:	0021883a 	mov	r16,zero
 8008a50:	da002a17 	ldw	r8,168(sp)
 8008a54:	003c3906 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8008a58:	d9402017 	ldw	r5,128(sp)
 8008a5c:	d9002117 	ldw	r4,132(sp)
 8008a60:	d9801a04 	addi	r6,sp,104
 8008a64:	800761c0 	call	800761c <__sprint_r.part.0>
 8008a68:	103e691e 	bne	r2,zero,8008410 <__alt_data_end+0xfc008410>
 8008a6c:	d9001b17 	ldw	r4,108(sp)
 8008a70:	d8801c17 	ldw	r2,112(sp)
 8008a74:	d811883a 	mov	r8,sp
 8008a78:	21400044 	addi	r5,r4,1
 8008a7c:	003e2e06 	br	8008338 <__alt_data_end+0xfc008338>
 8008a80:	01020074 	movhi	r4,2049
 8008a84:	21010004 	addi	r4,r4,1024
 8008a88:	d9002315 	stw	r4,140(sp)
 8008a8c:	d9001b17 	ldw	r4,108(sp)
 8008a90:	21000044 	addi	r4,r4,1
 8008a94:	003c5e06 	br	8007c10 <__alt_data_end+0xfc007c10>
 8008a98:	002b883a 	mov	r21,zero
 8008a9c:	00800084 	movi	r2,2
 8008aa0:	10803fcc 	andi	r2,r2,255
 8008aa4:	01000044 	movi	r4,1
 8008aa8:	11002b26 	beq	r2,r4,8008b58 <___vfiprintf_internal_r+0x1428>
 8008aac:	01000084 	movi	r4,2
 8008ab0:	11002b1e 	bne	r2,r4,8008b60 <___vfiprintf_internal_r+0x1430>
 8008ab4:	1823883a 	mov	r17,r3
 8008ab8:	003ee506 	br	8008650 <__alt_data_end+0xfc008650>
 8008abc:	8807883a 	mov	r3,r17
 8008ac0:	00800044 	movi	r2,1
 8008ac4:	003ff606 	br	8008aa0 <__alt_data_end+0xfc008aa0>
 8008ac8:	00800184 	movi	r2,6
 8008acc:	1400012e 	bgeu	r2,r16,8008ad4 <___vfiprintf_internal_r+0x13a4>
 8008ad0:	1021883a 	mov	r16,r2
 8008ad4:	8029883a 	mov	r20,r16
 8008ad8:	8027883a 	mov	r19,r16
 8008adc:	80002216 	blt	r16,zero,8008b68 <___vfiprintf_internal_r+0x1438>
 8008ae0:	05c20074 	movhi	r23,2049
 8008ae4:	df002215 	stw	fp,136(sp)
 8008ae8:	bdc0a004 	addi	r23,r23,640
 8008aec:	003cfb06 	br	8007edc <__alt_data_end+0xfc007edc>
 8008af0:	d9002217 	ldw	r4,136(sp)
 8008af4:	d9402417 	ldw	r5,144(sp)
 8008af8:	20800017 	ldw	r2,0(r4)
 8008afc:	21000104 	addi	r4,r4,4
 8008b00:	d9002215 	stw	r4,136(sp)
 8008b04:	11400015 	stw	r5,0(r2)
 8008b08:	003b3d06 	br	8007800 <__alt_data_end+0xfc007800>
 8008b0c:	01420074 	movhi	r5,2049
 8008b10:	29410004 	addi	r5,r5,1024
 8008b14:	d9402315 	stw	r5,140(sp)
 8008b18:	d9401b17 	ldw	r5,108(sp)
 8008b1c:	29400044 	addi	r5,r5,1
 8008b20:	003e6d06 	br	80084d8 <__alt_data_end+0xfc0084d8>
 8008b24:	8029883a 	mov	r20,r16
 8008b28:	dd401d83 	ldbu	r21,118(sp)
 8008b2c:	df002215 	stw	fp,136(sp)
 8008b30:	0021883a 	mov	r16,zero
 8008b34:	003c0106 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8008b38:	00c20074 	movhi	r3,2049
 8008b3c:	18c0fc04 	addi	r3,r3,1008
 8008b40:	d8c02315 	stw	r3,140(sp)
 8008b44:	280d883a 	mov	r6,r5
 8008b48:	003c6906 	br	8007cf0 <__alt_data_end+0xfc007cf0>
 8008b4c:	802d883a 	mov	r22,r16
 8008b50:	0021883a 	mov	r16,zero
 8008b54:	003b5406 	br	80078a8 <__alt_data_end+0xfc0078a8>
 8008b58:	1823883a 	mov	r17,r3
 8008b5c:	003cf306 	br	8007f2c <__alt_data_end+0xfc007f2c>
 8008b60:	1823883a 	mov	r17,r3
 8008b64:	003cad06 	br	8007e1c <__alt_data_end+0xfc007e1c>
 8008b68:	0027883a 	mov	r19,zero
 8008b6c:	003fdc06 	br	8008ae0 <__alt_data_end+0xfc008ae0>
 8008b70:	d9402217 	ldw	r5,136(sp)
 8008b74:	8005883a 	mov	r2,r16
 8008b78:	b0c00043 	ldbu	r3,1(r22)
 8008b7c:	2c000017 	ldw	r16,0(r5)
 8008b80:	29000104 	addi	r4,r5,4
 8008b84:	d9002215 	stw	r4,136(sp)
 8008b88:	102d883a 	mov	r22,r2
 8008b8c:	803fa50e 	bge	r16,zero,8008a24 <__alt_data_end+0xfc008a24>
 8008b90:	18c03fcc 	andi	r3,r3,255
 8008b94:	18c0201c 	xori	r3,r3,128
 8008b98:	043fffc4 	movi	r16,-1
 8008b9c:	18ffe004 	addi	r3,r3,-128
 8008ba0:	003b4006 	br	80078a4 <__alt_data_end+0xfc0078a4>
 8008ba4:	d9402303 	ldbu	r5,140(sp)
 8008ba8:	d9401d85 	stb	r5,118(sp)
 8008bac:	003cae06 	br	8007e68 <__alt_data_end+0xfc007e68>
 8008bb0:	d8c02303 	ldbu	r3,140(sp)
 8008bb4:	d8c01d85 	stb	r3,118(sp)
 8008bb8:	003d1406 	br	800800c <__alt_data_end+0xfc00800c>
 8008bbc:	d8c02303 	ldbu	r3,140(sp)
 8008bc0:	d8c01d85 	stb	r3,118(sp)
 8008bc4:	003cca06 	br	8007ef0 <__alt_data_end+0xfc007ef0>
 8008bc8:	8880004c 	andi	r2,r17,1
 8008bcc:	002b883a 	mov	r21,zero
 8008bd0:	10000526 	beq	r2,zero,8008be8 <___vfiprintf_internal_r+0x14b8>
 8008bd4:	00800c04 	movi	r2,48
 8008bd8:	d88019c5 	stb	r2,103(sp)
 8008bdc:	dd002817 	ldw	r20,160(sp)
 8008be0:	ddc019c4 	addi	r23,sp,103
 8008be4:	003bd506 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8008be8:	0029883a 	mov	r20,zero
 8008bec:	ddc01a04 	addi	r23,sp,104
 8008bf0:	003bd206 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8008bf4:	d9002303 	ldbu	r4,140(sp)
 8008bf8:	d9001d85 	stb	r4,118(sp)
 8008bfc:	003da606 	br	8008298 <__alt_data_end+0xfc008298>
 8008c00:	d8c02303 	ldbu	r3,140(sp)
 8008c04:	d8c01d85 	stb	r3,118(sp)
 8008c08:	003c7606 	br	8007de4 <__alt_data_end+0xfc007de4>
 8008c0c:	d8c02303 	ldbu	r3,140(sp)
 8008c10:	d8c01d85 	stb	r3,118(sp)
 8008c14:	003c6506 	br	8007dac <__alt_data_end+0xfc007dac>
 8008c18:	d9002303 	ldbu	r4,140(sp)
 8008c1c:	d9001d85 	stb	r4,118(sp)
 8008c20:	003d3d06 	br	8008118 <__alt_data_end+0xfc008118>
 8008c24:	d8c02303 	ldbu	r3,140(sp)
 8008c28:	d8c01d85 	stb	r3,118(sp)
 8008c2c:	003d1d06 	br	80080a4 <__alt_data_end+0xfc0080a4>
 8008c30:	d8c02303 	ldbu	r3,140(sp)
 8008c34:	d8c01d85 	stb	r3,118(sp)
 8008c38:	003d0306 	br	8008048 <__alt_data_end+0xfc008048>

08008c3c <__vfiprintf_internal>:
 8008c3c:	00820074 	movhi	r2,2049
 8008c40:	1087fd04 	addi	r2,r2,8180
 8008c44:	300f883a 	mov	r7,r6
 8008c48:	280d883a 	mov	r6,r5
 8008c4c:	200b883a 	mov	r5,r4
 8008c50:	11000017 	ldw	r4,0(r2)
 8008c54:	80077301 	jmpi	8007730 <___vfiprintf_internal_r>

08008c58 <__sbprintf>:
 8008c58:	2880030b 	ldhu	r2,12(r5)
 8008c5c:	2ac01917 	ldw	r11,100(r5)
 8008c60:	2a80038b 	ldhu	r10,14(r5)
 8008c64:	2a400717 	ldw	r9,28(r5)
 8008c68:	2a000917 	ldw	r8,36(r5)
 8008c6c:	defee204 	addi	sp,sp,-1144
 8008c70:	00c10004 	movi	r3,1024
 8008c74:	dc011a15 	stw	r16,1128(sp)
 8008c78:	10bfff4c 	andi	r2,r2,65533
 8008c7c:	2821883a 	mov	r16,r5
 8008c80:	d8cb883a 	add	r5,sp,r3
 8008c84:	dc811c15 	stw	r18,1136(sp)
 8008c88:	dc411b15 	stw	r17,1132(sp)
 8008c8c:	dfc11d15 	stw	ra,1140(sp)
 8008c90:	2025883a 	mov	r18,r4
 8008c94:	d881030d 	sth	r2,1036(sp)
 8008c98:	dac11915 	stw	r11,1124(sp)
 8008c9c:	da81038d 	sth	r10,1038(sp)
 8008ca0:	da410715 	stw	r9,1052(sp)
 8008ca4:	da010915 	stw	r8,1060(sp)
 8008ca8:	dec10015 	stw	sp,1024(sp)
 8008cac:	dec10415 	stw	sp,1040(sp)
 8008cb0:	d8c10215 	stw	r3,1032(sp)
 8008cb4:	d8c10515 	stw	r3,1044(sp)
 8008cb8:	d8010615 	stw	zero,1048(sp)
 8008cbc:	80077300 	call	8007730 <___vfiprintf_internal_r>
 8008cc0:	1023883a 	mov	r17,r2
 8008cc4:	10000416 	blt	r2,zero,8008cd8 <__sbprintf+0x80>
 8008cc8:	d9410004 	addi	r5,sp,1024
 8008ccc:	9009883a 	mov	r4,r18
 8008cd0:	8004b440 	call	8004b44 <_fflush_r>
 8008cd4:	10000d1e 	bne	r2,zero,8008d0c <__sbprintf+0xb4>
 8008cd8:	d881030b 	ldhu	r2,1036(sp)
 8008cdc:	1080100c 	andi	r2,r2,64
 8008ce0:	10000326 	beq	r2,zero,8008cf0 <__sbprintf+0x98>
 8008ce4:	8080030b 	ldhu	r2,12(r16)
 8008ce8:	10801014 	ori	r2,r2,64
 8008cec:	8080030d 	sth	r2,12(r16)
 8008cf0:	8805883a 	mov	r2,r17
 8008cf4:	dfc11d17 	ldw	ra,1140(sp)
 8008cf8:	dc811c17 	ldw	r18,1136(sp)
 8008cfc:	dc411b17 	ldw	r17,1132(sp)
 8008d00:	dc011a17 	ldw	r16,1128(sp)
 8008d04:	dec11e04 	addi	sp,sp,1144
 8008d08:	f800283a 	ret
 8008d0c:	047fffc4 	movi	r17,-1
 8008d10:	003ff106 	br	8008cd8 <__alt_data_end+0xfc008cd8>

08008d14 <_write_r>:
 8008d14:	defffd04 	addi	sp,sp,-12
 8008d18:	2805883a 	mov	r2,r5
 8008d1c:	dc000015 	stw	r16,0(sp)
 8008d20:	04020074 	movhi	r16,2049
 8008d24:	dc400115 	stw	r17,4(sp)
 8008d28:	300b883a 	mov	r5,r6
 8008d2c:	840ecf04 	addi	r16,r16,15164
 8008d30:	2023883a 	mov	r17,r4
 8008d34:	380d883a 	mov	r6,r7
 8008d38:	1009883a 	mov	r4,r2
 8008d3c:	dfc00215 	stw	ra,8(sp)
 8008d40:	80000015 	stw	zero,0(r16)
 8008d44:	800e0c40 	call	800e0c4 <write>
 8008d48:	00ffffc4 	movi	r3,-1
 8008d4c:	10c00526 	beq	r2,r3,8008d64 <_write_r+0x50>
 8008d50:	dfc00217 	ldw	ra,8(sp)
 8008d54:	dc400117 	ldw	r17,4(sp)
 8008d58:	dc000017 	ldw	r16,0(sp)
 8008d5c:	dec00304 	addi	sp,sp,12
 8008d60:	f800283a 	ret
 8008d64:	80c00017 	ldw	r3,0(r16)
 8008d68:	183ff926 	beq	r3,zero,8008d50 <__alt_data_end+0xfc008d50>
 8008d6c:	88c00015 	stw	r3,0(r17)
 8008d70:	003ff706 	br	8008d50 <__alt_data_end+0xfc008d50>

08008d74 <_close_r>:
 8008d74:	defffd04 	addi	sp,sp,-12
 8008d78:	dc000015 	stw	r16,0(sp)
 8008d7c:	04020074 	movhi	r16,2049
 8008d80:	dc400115 	stw	r17,4(sp)
 8008d84:	840ecf04 	addi	r16,r16,15164
 8008d88:	2023883a 	mov	r17,r4
 8008d8c:	2809883a 	mov	r4,r5
 8008d90:	dfc00215 	stw	ra,8(sp)
 8008d94:	80000015 	stw	zero,0(r16)
 8008d98:	800d83c0 	call	800d83c <close>
 8008d9c:	00ffffc4 	movi	r3,-1
 8008da0:	10c00526 	beq	r2,r3,8008db8 <_close_r+0x44>
 8008da4:	dfc00217 	ldw	ra,8(sp)
 8008da8:	dc400117 	ldw	r17,4(sp)
 8008dac:	dc000017 	ldw	r16,0(sp)
 8008db0:	dec00304 	addi	sp,sp,12
 8008db4:	f800283a 	ret
 8008db8:	80c00017 	ldw	r3,0(r16)
 8008dbc:	183ff926 	beq	r3,zero,8008da4 <__alt_data_end+0xfc008da4>
 8008dc0:	88c00015 	stw	r3,0(r17)
 8008dc4:	003ff706 	br	8008da4 <__alt_data_end+0xfc008da4>

08008dc8 <_calloc_r>:
 8008dc8:	defffe04 	addi	sp,sp,-8
 8008dcc:	2805883a 	mov	r2,r5
 8008dd0:	dc000015 	stw	r16,0(sp)
 8008dd4:	300b883a 	mov	r5,r6
 8008dd8:	2021883a 	mov	r16,r4
 8008ddc:	1009883a 	mov	r4,r2
 8008de0:	dfc00115 	stw	ra,4(sp)
 8008de4:	80009940 	call	8000994 <__mulsi3>
 8008de8:	100b883a 	mov	r5,r2
 8008dec:	8009883a 	mov	r4,r16
 8008df0:	80057d40 	call	80057d4 <_malloc_r>
 8008df4:	10002926 	beq	r2,zero,8008e9c <_calloc_r+0xd4>
 8008df8:	11bfff17 	ldw	r6,-4(r2)
 8008dfc:	1021883a 	mov	r16,r2
 8008e00:	00bfff04 	movi	r2,-4
 8008e04:	308c703a 	and	r6,r6,r2
 8008e08:	00c00904 	movi	r3,36
 8008e0c:	308d883a 	add	r6,r6,r2
 8008e10:	19801636 	bltu	r3,r6,8008e6c <_calloc_r+0xa4>
 8008e14:	008004c4 	movi	r2,19
 8008e18:	11800b2e 	bgeu	r2,r6,8008e48 <_calloc_r+0x80>
 8008e1c:	80000015 	stw	zero,0(r16)
 8008e20:	80000115 	stw	zero,4(r16)
 8008e24:	008006c4 	movi	r2,27
 8008e28:	11801a2e 	bgeu	r2,r6,8008e94 <_calloc_r+0xcc>
 8008e2c:	80000215 	stw	zero,8(r16)
 8008e30:	80000315 	stw	zero,12(r16)
 8008e34:	30c0151e 	bne	r6,r3,8008e8c <_calloc_r+0xc4>
 8008e38:	80000415 	stw	zero,16(r16)
 8008e3c:	80800604 	addi	r2,r16,24
 8008e40:	80000515 	stw	zero,20(r16)
 8008e44:	00000106 	br	8008e4c <_calloc_r+0x84>
 8008e48:	8005883a 	mov	r2,r16
 8008e4c:	10000015 	stw	zero,0(r2)
 8008e50:	10000115 	stw	zero,4(r2)
 8008e54:	10000215 	stw	zero,8(r2)
 8008e58:	8005883a 	mov	r2,r16
 8008e5c:	dfc00117 	ldw	ra,4(sp)
 8008e60:	dc000017 	ldw	r16,0(sp)
 8008e64:	dec00204 	addi	sp,sp,8
 8008e68:	f800283a 	ret
 8008e6c:	000b883a 	mov	r5,zero
 8008e70:	8009883a 	mov	r4,r16
 8008e74:	80060c40 	call	80060c4 <memset>
 8008e78:	8005883a 	mov	r2,r16
 8008e7c:	dfc00117 	ldw	ra,4(sp)
 8008e80:	dc000017 	ldw	r16,0(sp)
 8008e84:	dec00204 	addi	sp,sp,8
 8008e88:	f800283a 	ret
 8008e8c:	80800404 	addi	r2,r16,16
 8008e90:	003fee06 	br	8008e4c <__alt_data_end+0xfc008e4c>
 8008e94:	80800204 	addi	r2,r16,8
 8008e98:	003fec06 	br	8008e4c <__alt_data_end+0xfc008e4c>
 8008e9c:	0005883a 	mov	r2,zero
 8008ea0:	003fee06 	br	8008e5c <__alt_data_end+0xfc008e5c>

08008ea4 <_fclose_r>:
 8008ea4:	28003926 	beq	r5,zero,8008f8c <_fclose_r+0xe8>
 8008ea8:	defffc04 	addi	sp,sp,-16
 8008eac:	dc400115 	stw	r17,4(sp)
 8008eb0:	dc000015 	stw	r16,0(sp)
 8008eb4:	dfc00315 	stw	ra,12(sp)
 8008eb8:	dc800215 	stw	r18,8(sp)
 8008ebc:	2023883a 	mov	r17,r4
 8008ec0:	2821883a 	mov	r16,r5
 8008ec4:	20000226 	beq	r4,zero,8008ed0 <_fclose_r+0x2c>
 8008ec8:	20800e17 	ldw	r2,56(r4)
 8008ecc:	10002726 	beq	r2,zero,8008f6c <_fclose_r+0xc8>
 8008ed0:	8080030f 	ldh	r2,12(r16)
 8008ed4:	1000071e 	bne	r2,zero,8008ef4 <_fclose_r+0x50>
 8008ed8:	0005883a 	mov	r2,zero
 8008edc:	dfc00317 	ldw	ra,12(sp)
 8008ee0:	dc800217 	ldw	r18,8(sp)
 8008ee4:	dc400117 	ldw	r17,4(sp)
 8008ee8:	dc000017 	ldw	r16,0(sp)
 8008eec:	dec00404 	addi	sp,sp,16
 8008ef0:	f800283a 	ret
 8008ef4:	800b883a 	mov	r5,r16
 8008ef8:	8809883a 	mov	r4,r17
 8008efc:	80049280 	call	8004928 <__sflush_r>
 8008f00:	1025883a 	mov	r18,r2
 8008f04:	80800b17 	ldw	r2,44(r16)
 8008f08:	10000426 	beq	r2,zero,8008f1c <_fclose_r+0x78>
 8008f0c:	81400717 	ldw	r5,28(r16)
 8008f10:	8809883a 	mov	r4,r17
 8008f14:	103ee83a 	callr	r2
 8008f18:	10001616 	blt	r2,zero,8008f74 <_fclose_r+0xd0>
 8008f1c:	8080030b 	ldhu	r2,12(r16)
 8008f20:	1080200c 	andi	r2,r2,128
 8008f24:	1000151e 	bne	r2,zero,8008f7c <_fclose_r+0xd8>
 8008f28:	81400c17 	ldw	r5,48(r16)
 8008f2c:	28000526 	beq	r5,zero,8008f44 <_fclose_r+0xa0>
 8008f30:	80801004 	addi	r2,r16,64
 8008f34:	28800226 	beq	r5,r2,8008f40 <_fclose_r+0x9c>
 8008f38:	8809883a 	mov	r4,r17
 8008f3c:	80050a40 	call	80050a4 <_free_r>
 8008f40:	80000c15 	stw	zero,48(r16)
 8008f44:	81401117 	ldw	r5,68(r16)
 8008f48:	28000326 	beq	r5,zero,8008f58 <_fclose_r+0xb4>
 8008f4c:	8809883a 	mov	r4,r17
 8008f50:	80050a40 	call	80050a4 <_free_r>
 8008f54:	80001115 	stw	zero,68(r16)
 8008f58:	8004f400 	call	8004f40 <__sfp_lock_acquire>
 8008f5c:	8000030d 	sth	zero,12(r16)
 8008f60:	8004f440 	call	8004f44 <__sfp_lock_release>
 8008f64:	9005883a 	mov	r2,r18
 8008f68:	003fdc06 	br	8008edc <__alt_data_end+0xfc008edc>
 8008f6c:	8004f300 	call	8004f30 <__sinit>
 8008f70:	003fd706 	br	8008ed0 <__alt_data_end+0xfc008ed0>
 8008f74:	04bfffc4 	movi	r18,-1
 8008f78:	003fe806 	br	8008f1c <__alt_data_end+0xfc008f1c>
 8008f7c:	81400417 	ldw	r5,16(r16)
 8008f80:	8809883a 	mov	r4,r17
 8008f84:	80050a40 	call	80050a4 <_free_r>
 8008f88:	003fe706 	br	8008f28 <__alt_data_end+0xfc008f28>
 8008f8c:	0005883a 	mov	r2,zero
 8008f90:	f800283a 	ret

08008f94 <fclose>:
 8008f94:	00820074 	movhi	r2,2049
 8008f98:	1087fd04 	addi	r2,r2,8180
 8008f9c:	200b883a 	mov	r5,r4
 8008fa0:	11000017 	ldw	r4,0(r2)
 8008fa4:	8008ea41 	jmpi	8008ea4 <_fclose_r>

08008fa8 <__fputwc>:
 8008fa8:	defff804 	addi	sp,sp,-32
 8008fac:	dcc00415 	stw	r19,16(sp)
 8008fb0:	dc800315 	stw	r18,12(sp)
 8008fb4:	dc000115 	stw	r16,4(sp)
 8008fb8:	dfc00715 	stw	ra,28(sp)
 8008fbc:	dd400615 	stw	r21,24(sp)
 8008fc0:	dd000515 	stw	r20,20(sp)
 8008fc4:	dc400215 	stw	r17,8(sp)
 8008fc8:	2027883a 	mov	r19,r4
 8008fcc:	2825883a 	mov	r18,r5
 8008fd0:	3021883a 	mov	r16,r6
 8008fd4:	80055c40 	call	80055c4 <__locale_mb_cur_max>
 8008fd8:	00c00044 	movi	r3,1
 8008fdc:	10c03e26 	beq	r2,r3,80090d8 <__fputwc+0x130>
 8008fe0:	81c01704 	addi	r7,r16,92
 8008fe4:	900d883a 	mov	r6,r18
 8008fe8:	d80b883a 	mov	r5,sp
 8008fec:	9809883a 	mov	r4,r19
 8008ff0:	800a0000 	call	800a000 <_wcrtomb_r>
 8008ff4:	1029883a 	mov	r20,r2
 8008ff8:	00bfffc4 	movi	r2,-1
 8008ffc:	a0802026 	beq	r20,r2,8009080 <__fputwc+0xd8>
 8009000:	d9400003 	ldbu	r5,0(sp)
 8009004:	a0001c26 	beq	r20,zero,8009078 <__fputwc+0xd0>
 8009008:	0023883a 	mov	r17,zero
 800900c:	05400284 	movi	r21,10
 8009010:	00000906 	br	8009038 <__fputwc+0x90>
 8009014:	80800017 	ldw	r2,0(r16)
 8009018:	11400005 	stb	r5,0(r2)
 800901c:	80c00017 	ldw	r3,0(r16)
 8009020:	18c00044 	addi	r3,r3,1
 8009024:	80c00015 	stw	r3,0(r16)
 8009028:	8c400044 	addi	r17,r17,1
 800902c:	dc45883a 	add	r2,sp,r17
 8009030:	8d00112e 	bgeu	r17,r20,8009078 <__fputwc+0xd0>
 8009034:	11400003 	ldbu	r5,0(r2)
 8009038:	80c00217 	ldw	r3,8(r16)
 800903c:	18ffffc4 	addi	r3,r3,-1
 8009040:	80c00215 	stw	r3,8(r16)
 8009044:	183ff30e 	bge	r3,zero,8009014 <__alt_data_end+0xfc009014>
 8009048:	80800617 	ldw	r2,24(r16)
 800904c:	18801916 	blt	r3,r2,80090b4 <__fputwc+0x10c>
 8009050:	80800017 	ldw	r2,0(r16)
 8009054:	11400005 	stb	r5,0(r2)
 8009058:	80800017 	ldw	r2,0(r16)
 800905c:	10c00003 	ldbu	r3,0(r2)
 8009060:	10800044 	addi	r2,r2,1
 8009064:	1d402326 	beq	r3,r21,80090f4 <__fputwc+0x14c>
 8009068:	80800015 	stw	r2,0(r16)
 800906c:	8c400044 	addi	r17,r17,1
 8009070:	dc45883a 	add	r2,sp,r17
 8009074:	8d3fef36 	bltu	r17,r20,8009034 <__alt_data_end+0xfc009034>
 8009078:	9005883a 	mov	r2,r18
 800907c:	00000406 	br	8009090 <__fputwc+0xe8>
 8009080:	80c0030b 	ldhu	r3,12(r16)
 8009084:	a005883a 	mov	r2,r20
 8009088:	18c01014 	ori	r3,r3,64
 800908c:	80c0030d 	sth	r3,12(r16)
 8009090:	dfc00717 	ldw	ra,28(sp)
 8009094:	dd400617 	ldw	r21,24(sp)
 8009098:	dd000517 	ldw	r20,20(sp)
 800909c:	dcc00417 	ldw	r19,16(sp)
 80090a0:	dc800317 	ldw	r18,12(sp)
 80090a4:	dc400217 	ldw	r17,8(sp)
 80090a8:	dc000117 	ldw	r16,4(sp)
 80090ac:	dec00804 	addi	sp,sp,32
 80090b0:	f800283a 	ret
 80090b4:	800d883a 	mov	r6,r16
 80090b8:	29403fcc 	andi	r5,r5,255
 80090bc:	9809883a 	mov	r4,r19
 80090c0:	8009ea80 	call	8009ea8 <__swbuf_r>
 80090c4:	10bfffe0 	cmpeqi	r2,r2,-1
 80090c8:	10803fcc 	andi	r2,r2,255
 80090cc:	103fd626 	beq	r2,zero,8009028 <__alt_data_end+0xfc009028>
 80090d0:	00bfffc4 	movi	r2,-1
 80090d4:	003fee06 	br	8009090 <__alt_data_end+0xfc009090>
 80090d8:	90ffffc4 	addi	r3,r18,-1
 80090dc:	01003f84 	movi	r4,254
 80090e0:	20ffbf36 	bltu	r4,r3,8008fe0 <__alt_data_end+0xfc008fe0>
 80090e4:	900b883a 	mov	r5,r18
 80090e8:	dc800005 	stb	r18,0(sp)
 80090ec:	1029883a 	mov	r20,r2
 80090f0:	003fc506 	br	8009008 <__alt_data_end+0xfc009008>
 80090f4:	800d883a 	mov	r6,r16
 80090f8:	a80b883a 	mov	r5,r21
 80090fc:	9809883a 	mov	r4,r19
 8009100:	8009ea80 	call	8009ea8 <__swbuf_r>
 8009104:	10bfffe0 	cmpeqi	r2,r2,-1
 8009108:	003fef06 	br	80090c8 <__alt_data_end+0xfc0090c8>

0800910c <_fputwc_r>:
 800910c:	3080030b 	ldhu	r2,12(r6)
 8009110:	10c8000c 	andi	r3,r2,8192
 8009114:	1800051e 	bne	r3,zero,800912c <_fputwc_r+0x20>
 8009118:	30c01917 	ldw	r3,100(r6)
 800911c:	10880014 	ori	r2,r2,8192
 8009120:	3080030d 	sth	r2,12(r6)
 8009124:	18880014 	ori	r2,r3,8192
 8009128:	30801915 	stw	r2,100(r6)
 800912c:	8008fa81 	jmpi	8008fa8 <__fputwc>

08009130 <fputwc>:
 8009130:	00820074 	movhi	r2,2049
 8009134:	defffc04 	addi	sp,sp,-16
 8009138:	1087fd04 	addi	r2,r2,8180
 800913c:	dc000115 	stw	r16,4(sp)
 8009140:	14000017 	ldw	r16,0(r2)
 8009144:	dc400215 	stw	r17,8(sp)
 8009148:	dfc00315 	stw	ra,12(sp)
 800914c:	2023883a 	mov	r17,r4
 8009150:	80000226 	beq	r16,zero,800915c <fputwc+0x2c>
 8009154:	80800e17 	ldw	r2,56(r16)
 8009158:	10001026 	beq	r2,zero,800919c <fputwc+0x6c>
 800915c:	2880030b 	ldhu	r2,12(r5)
 8009160:	10c8000c 	andi	r3,r2,8192
 8009164:	1800051e 	bne	r3,zero,800917c <fputwc+0x4c>
 8009168:	28c01917 	ldw	r3,100(r5)
 800916c:	10880014 	ori	r2,r2,8192
 8009170:	2880030d 	sth	r2,12(r5)
 8009174:	18880014 	ori	r2,r3,8192
 8009178:	28801915 	stw	r2,100(r5)
 800917c:	280d883a 	mov	r6,r5
 8009180:	8009883a 	mov	r4,r16
 8009184:	880b883a 	mov	r5,r17
 8009188:	dfc00317 	ldw	ra,12(sp)
 800918c:	dc400217 	ldw	r17,8(sp)
 8009190:	dc000117 	ldw	r16,4(sp)
 8009194:	dec00404 	addi	sp,sp,16
 8009198:	8008fa81 	jmpi	8008fa8 <__fputwc>
 800919c:	8009883a 	mov	r4,r16
 80091a0:	d9400015 	stw	r5,0(sp)
 80091a4:	8004f300 	call	8004f30 <__sinit>
 80091a8:	d9400017 	ldw	r5,0(sp)
 80091ac:	003feb06 	br	800915c <__alt_data_end+0xfc00915c>

080091b0 <_fstat_r>:
 80091b0:	defffd04 	addi	sp,sp,-12
 80091b4:	2805883a 	mov	r2,r5
 80091b8:	dc000015 	stw	r16,0(sp)
 80091bc:	04020074 	movhi	r16,2049
 80091c0:	dc400115 	stw	r17,4(sp)
 80091c4:	840ecf04 	addi	r16,r16,15164
 80091c8:	2023883a 	mov	r17,r4
 80091cc:	300b883a 	mov	r5,r6
 80091d0:	1009883a 	mov	r4,r2
 80091d4:	dfc00215 	stw	ra,8(sp)
 80091d8:	80000015 	stw	zero,0(r16)
 80091dc:	800d97c0 	call	800d97c <fstat>
 80091e0:	00ffffc4 	movi	r3,-1
 80091e4:	10c00526 	beq	r2,r3,80091fc <_fstat_r+0x4c>
 80091e8:	dfc00217 	ldw	ra,8(sp)
 80091ec:	dc400117 	ldw	r17,4(sp)
 80091f0:	dc000017 	ldw	r16,0(sp)
 80091f4:	dec00304 	addi	sp,sp,12
 80091f8:	f800283a 	ret
 80091fc:	80c00017 	ldw	r3,0(r16)
 8009200:	183ff926 	beq	r3,zero,80091e8 <__alt_data_end+0xfc0091e8>
 8009204:	88c00015 	stw	r3,0(r17)
 8009208:	003ff706 	br	80091e8 <__alt_data_end+0xfc0091e8>

0800920c <__sfvwrite_r>:
 800920c:	30800217 	ldw	r2,8(r6)
 8009210:	10006726 	beq	r2,zero,80093b0 <__sfvwrite_r+0x1a4>
 8009214:	28c0030b 	ldhu	r3,12(r5)
 8009218:	defff404 	addi	sp,sp,-48
 800921c:	dd400715 	stw	r21,28(sp)
 8009220:	dd000615 	stw	r20,24(sp)
 8009224:	dc000215 	stw	r16,8(sp)
 8009228:	dfc00b15 	stw	ra,44(sp)
 800922c:	df000a15 	stw	fp,40(sp)
 8009230:	ddc00915 	stw	r23,36(sp)
 8009234:	dd800815 	stw	r22,32(sp)
 8009238:	dcc00515 	stw	r19,20(sp)
 800923c:	dc800415 	stw	r18,16(sp)
 8009240:	dc400315 	stw	r17,12(sp)
 8009244:	1880020c 	andi	r2,r3,8
 8009248:	2821883a 	mov	r16,r5
 800924c:	202b883a 	mov	r21,r4
 8009250:	3029883a 	mov	r20,r6
 8009254:	10002726 	beq	r2,zero,80092f4 <__sfvwrite_r+0xe8>
 8009258:	28800417 	ldw	r2,16(r5)
 800925c:	10002526 	beq	r2,zero,80092f4 <__sfvwrite_r+0xe8>
 8009260:	1880008c 	andi	r2,r3,2
 8009264:	a4400017 	ldw	r17,0(r20)
 8009268:	10002a26 	beq	r2,zero,8009314 <__sfvwrite_r+0x108>
 800926c:	05a00034 	movhi	r22,32768
 8009270:	0027883a 	mov	r19,zero
 8009274:	0025883a 	mov	r18,zero
 8009278:	b5bf0004 	addi	r22,r22,-1024
 800927c:	980d883a 	mov	r6,r19
 8009280:	a809883a 	mov	r4,r21
 8009284:	90004626 	beq	r18,zero,80093a0 <__sfvwrite_r+0x194>
 8009288:	900f883a 	mov	r7,r18
 800928c:	b480022e 	bgeu	r22,r18,8009298 <__sfvwrite_r+0x8c>
 8009290:	01e00034 	movhi	r7,32768
 8009294:	39ff0004 	addi	r7,r7,-1024
 8009298:	80800917 	ldw	r2,36(r16)
 800929c:	81400717 	ldw	r5,28(r16)
 80092a0:	103ee83a 	callr	r2
 80092a4:	00805a0e 	bge	zero,r2,8009410 <__sfvwrite_r+0x204>
 80092a8:	a0c00217 	ldw	r3,8(r20)
 80092ac:	98a7883a 	add	r19,r19,r2
 80092b0:	90a5c83a 	sub	r18,r18,r2
 80092b4:	1885c83a 	sub	r2,r3,r2
 80092b8:	a0800215 	stw	r2,8(r20)
 80092bc:	103fef1e 	bne	r2,zero,800927c <__alt_data_end+0xfc00927c>
 80092c0:	0005883a 	mov	r2,zero
 80092c4:	dfc00b17 	ldw	ra,44(sp)
 80092c8:	df000a17 	ldw	fp,40(sp)
 80092cc:	ddc00917 	ldw	r23,36(sp)
 80092d0:	dd800817 	ldw	r22,32(sp)
 80092d4:	dd400717 	ldw	r21,28(sp)
 80092d8:	dd000617 	ldw	r20,24(sp)
 80092dc:	dcc00517 	ldw	r19,20(sp)
 80092e0:	dc800417 	ldw	r18,16(sp)
 80092e4:	dc400317 	ldw	r17,12(sp)
 80092e8:	dc000217 	ldw	r16,8(sp)
 80092ec:	dec00c04 	addi	sp,sp,48
 80092f0:	f800283a 	ret
 80092f4:	800b883a 	mov	r5,r16
 80092f8:	a809883a 	mov	r4,r21
 80092fc:	8002f240 	call	8002f24 <__swsetup_r>
 8009300:	1000ee1e 	bne	r2,zero,80096bc <__sfvwrite_r+0x4b0>
 8009304:	80c0030b 	ldhu	r3,12(r16)
 8009308:	a4400017 	ldw	r17,0(r20)
 800930c:	1880008c 	andi	r2,r3,2
 8009310:	103fd61e 	bne	r2,zero,800926c <__alt_data_end+0xfc00926c>
 8009314:	1880004c 	andi	r2,r3,1
 8009318:	1000421e 	bne	r2,zero,8009424 <__sfvwrite_r+0x218>
 800931c:	0039883a 	mov	fp,zero
 8009320:	0025883a 	mov	r18,zero
 8009324:	90001a26 	beq	r18,zero,8009390 <__sfvwrite_r+0x184>
 8009328:	1880800c 	andi	r2,r3,512
 800932c:	84c00217 	ldw	r19,8(r16)
 8009330:	10002126 	beq	r2,zero,80093b8 <__sfvwrite_r+0x1ac>
 8009334:	982f883a 	mov	r23,r19
 8009338:	94c09636 	bltu	r18,r19,8009594 <__sfvwrite_r+0x388>
 800933c:	1881200c 	andi	r2,r3,1152
 8009340:	1000a11e 	bne	r2,zero,80095c8 <__sfvwrite_r+0x3bc>
 8009344:	81000017 	ldw	r4,0(r16)
 8009348:	b80d883a 	mov	r6,r23
 800934c:	e00b883a 	mov	r5,fp
 8009350:	80097880 	call	8009788 <memmove>
 8009354:	80c00217 	ldw	r3,8(r16)
 8009358:	81000017 	ldw	r4,0(r16)
 800935c:	9005883a 	mov	r2,r18
 8009360:	1ce7c83a 	sub	r19,r3,r19
 8009364:	25cf883a 	add	r7,r4,r23
 8009368:	84c00215 	stw	r19,8(r16)
 800936c:	81c00015 	stw	r7,0(r16)
 8009370:	a0c00217 	ldw	r3,8(r20)
 8009374:	e0b9883a 	add	fp,fp,r2
 8009378:	90a5c83a 	sub	r18,r18,r2
 800937c:	18a7c83a 	sub	r19,r3,r2
 8009380:	a4c00215 	stw	r19,8(r20)
 8009384:	983fce26 	beq	r19,zero,80092c0 <__alt_data_end+0xfc0092c0>
 8009388:	80c0030b 	ldhu	r3,12(r16)
 800938c:	903fe61e 	bne	r18,zero,8009328 <__alt_data_end+0xfc009328>
 8009390:	8f000017 	ldw	fp,0(r17)
 8009394:	8c800117 	ldw	r18,4(r17)
 8009398:	8c400204 	addi	r17,r17,8
 800939c:	003fe106 	br	8009324 <__alt_data_end+0xfc009324>
 80093a0:	8cc00017 	ldw	r19,0(r17)
 80093a4:	8c800117 	ldw	r18,4(r17)
 80093a8:	8c400204 	addi	r17,r17,8
 80093ac:	003fb306 	br	800927c <__alt_data_end+0xfc00927c>
 80093b0:	0005883a 	mov	r2,zero
 80093b4:	f800283a 	ret
 80093b8:	81000017 	ldw	r4,0(r16)
 80093bc:	80800417 	ldw	r2,16(r16)
 80093c0:	11005a36 	bltu	r2,r4,800952c <__sfvwrite_r+0x320>
 80093c4:	85c00517 	ldw	r23,20(r16)
 80093c8:	95c05836 	bltu	r18,r23,800952c <__sfvwrite_r+0x320>
 80093cc:	00a00034 	movhi	r2,32768
 80093d0:	10bfffc4 	addi	r2,r2,-1
 80093d4:	9009883a 	mov	r4,r18
 80093d8:	1480012e 	bgeu	r2,r18,80093e0 <__sfvwrite_r+0x1d4>
 80093dc:	1009883a 	mov	r4,r2
 80093e0:	b80b883a 	mov	r5,r23
 80093e4:	800ada80 	call	800ada8 <__divsi3>
 80093e8:	b80b883a 	mov	r5,r23
 80093ec:	1009883a 	mov	r4,r2
 80093f0:	80009940 	call	8000994 <__mulsi3>
 80093f4:	81400717 	ldw	r5,28(r16)
 80093f8:	80c00917 	ldw	r3,36(r16)
 80093fc:	100f883a 	mov	r7,r2
 8009400:	e00d883a 	mov	r6,fp
 8009404:	a809883a 	mov	r4,r21
 8009408:	183ee83a 	callr	r3
 800940c:	00bfd816 	blt	zero,r2,8009370 <__alt_data_end+0xfc009370>
 8009410:	8080030b 	ldhu	r2,12(r16)
 8009414:	10801014 	ori	r2,r2,64
 8009418:	8080030d 	sth	r2,12(r16)
 800941c:	00bfffc4 	movi	r2,-1
 8009420:	003fa806 	br	80092c4 <__alt_data_end+0xfc0092c4>
 8009424:	0027883a 	mov	r19,zero
 8009428:	0011883a 	mov	r8,zero
 800942c:	0039883a 	mov	fp,zero
 8009430:	0025883a 	mov	r18,zero
 8009434:	90001f26 	beq	r18,zero,80094b4 <__sfvwrite_r+0x2a8>
 8009438:	40005a26 	beq	r8,zero,80095a4 <__sfvwrite_r+0x398>
 800943c:	982d883a 	mov	r22,r19
 8009440:	94c0012e 	bgeu	r18,r19,8009448 <__sfvwrite_r+0x23c>
 8009444:	902d883a 	mov	r22,r18
 8009448:	81000017 	ldw	r4,0(r16)
 800944c:	80800417 	ldw	r2,16(r16)
 8009450:	b02f883a 	mov	r23,r22
 8009454:	81c00517 	ldw	r7,20(r16)
 8009458:	1100032e 	bgeu	r2,r4,8009468 <__sfvwrite_r+0x25c>
 800945c:	80c00217 	ldw	r3,8(r16)
 8009460:	38c7883a 	add	r3,r7,r3
 8009464:	1d801816 	blt	r3,r22,80094c8 <__sfvwrite_r+0x2bc>
 8009468:	b1c03e16 	blt	r22,r7,8009564 <__sfvwrite_r+0x358>
 800946c:	80800917 	ldw	r2,36(r16)
 8009470:	81400717 	ldw	r5,28(r16)
 8009474:	e00d883a 	mov	r6,fp
 8009478:	da000115 	stw	r8,4(sp)
 800947c:	a809883a 	mov	r4,r21
 8009480:	103ee83a 	callr	r2
 8009484:	102f883a 	mov	r23,r2
 8009488:	da000117 	ldw	r8,4(sp)
 800948c:	00bfe00e 	bge	zero,r2,8009410 <__alt_data_end+0xfc009410>
 8009490:	9de7c83a 	sub	r19,r19,r23
 8009494:	98001f26 	beq	r19,zero,8009514 <__sfvwrite_r+0x308>
 8009498:	a0800217 	ldw	r2,8(r20)
 800949c:	e5f9883a 	add	fp,fp,r23
 80094a0:	95e5c83a 	sub	r18,r18,r23
 80094a4:	15efc83a 	sub	r23,r2,r23
 80094a8:	a5c00215 	stw	r23,8(r20)
 80094ac:	b83f8426 	beq	r23,zero,80092c0 <__alt_data_end+0xfc0092c0>
 80094b0:	903fe11e 	bne	r18,zero,8009438 <__alt_data_end+0xfc009438>
 80094b4:	8f000017 	ldw	fp,0(r17)
 80094b8:	8c800117 	ldw	r18,4(r17)
 80094bc:	0011883a 	mov	r8,zero
 80094c0:	8c400204 	addi	r17,r17,8
 80094c4:	003fdb06 	br	8009434 <__alt_data_end+0xfc009434>
 80094c8:	180d883a 	mov	r6,r3
 80094cc:	e00b883a 	mov	r5,fp
 80094d0:	da000115 	stw	r8,4(sp)
 80094d4:	d8c00015 	stw	r3,0(sp)
 80094d8:	80097880 	call	8009788 <memmove>
 80094dc:	d8c00017 	ldw	r3,0(sp)
 80094e0:	80800017 	ldw	r2,0(r16)
 80094e4:	800b883a 	mov	r5,r16
 80094e8:	a809883a 	mov	r4,r21
 80094ec:	10c5883a 	add	r2,r2,r3
 80094f0:	80800015 	stw	r2,0(r16)
 80094f4:	d8c00015 	stw	r3,0(sp)
 80094f8:	8004b440 	call	8004b44 <_fflush_r>
 80094fc:	d8c00017 	ldw	r3,0(sp)
 8009500:	da000117 	ldw	r8,4(sp)
 8009504:	103fc21e 	bne	r2,zero,8009410 <__alt_data_end+0xfc009410>
 8009508:	182f883a 	mov	r23,r3
 800950c:	9de7c83a 	sub	r19,r19,r23
 8009510:	983fe11e 	bne	r19,zero,8009498 <__alt_data_end+0xfc009498>
 8009514:	800b883a 	mov	r5,r16
 8009518:	a809883a 	mov	r4,r21
 800951c:	8004b440 	call	8004b44 <_fflush_r>
 8009520:	103fbb1e 	bne	r2,zero,8009410 <__alt_data_end+0xfc009410>
 8009524:	0011883a 	mov	r8,zero
 8009528:	003fdb06 	br	8009498 <__alt_data_end+0xfc009498>
 800952c:	94c0012e 	bgeu	r18,r19,8009534 <__sfvwrite_r+0x328>
 8009530:	9027883a 	mov	r19,r18
 8009534:	980d883a 	mov	r6,r19
 8009538:	e00b883a 	mov	r5,fp
 800953c:	80097880 	call	8009788 <memmove>
 8009540:	80800217 	ldw	r2,8(r16)
 8009544:	80c00017 	ldw	r3,0(r16)
 8009548:	14c5c83a 	sub	r2,r2,r19
 800954c:	1cc7883a 	add	r3,r3,r19
 8009550:	80800215 	stw	r2,8(r16)
 8009554:	80c00015 	stw	r3,0(r16)
 8009558:	10004326 	beq	r2,zero,8009668 <__sfvwrite_r+0x45c>
 800955c:	9805883a 	mov	r2,r19
 8009560:	003f8306 	br	8009370 <__alt_data_end+0xfc009370>
 8009564:	b00d883a 	mov	r6,r22
 8009568:	e00b883a 	mov	r5,fp
 800956c:	da000115 	stw	r8,4(sp)
 8009570:	80097880 	call	8009788 <memmove>
 8009574:	80800217 	ldw	r2,8(r16)
 8009578:	80c00017 	ldw	r3,0(r16)
 800957c:	da000117 	ldw	r8,4(sp)
 8009580:	1585c83a 	sub	r2,r2,r22
 8009584:	1dad883a 	add	r22,r3,r22
 8009588:	80800215 	stw	r2,8(r16)
 800958c:	85800015 	stw	r22,0(r16)
 8009590:	003fbf06 	br	8009490 <__alt_data_end+0xfc009490>
 8009594:	81000017 	ldw	r4,0(r16)
 8009598:	9027883a 	mov	r19,r18
 800959c:	902f883a 	mov	r23,r18
 80095a0:	003f6906 	br	8009348 <__alt_data_end+0xfc009348>
 80095a4:	900d883a 	mov	r6,r18
 80095a8:	01400284 	movi	r5,10
 80095ac:	e009883a 	mov	r4,fp
 80095b0:	8005fe00 	call	8005fe0 <memchr>
 80095b4:	10003e26 	beq	r2,zero,80096b0 <__sfvwrite_r+0x4a4>
 80095b8:	10800044 	addi	r2,r2,1
 80095bc:	1727c83a 	sub	r19,r2,fp
 80095c0:	02000044 	movi	r8,1
 80095c4:	003f9d06 	br	800943c <__alt_data_end+0xfc00943c>
 80095c8:	80800517 	ldw	r2,20(r16)
 80095cc:	81400417 	ldw	r5,16(r16)
 80095d0:	81c00017 	ldw	r7,0(r16)
 80095d4:	10a7883a 	add	r19,r2,r2
 80095d8:	9885883a 	add	r2,r19,r2
 80095dc:	1026d7fa 	srli	r19,r2,31
 80095e0:	396dc83a 	sub	r22,r7,r5
 80095e4:	b1000044 	addi	r4,r22,1
 80095e8:	9885883a 	add	r2,r19,r2
 80095ec:	1027d07a 	srai	r19,r2,1
 80095f0:	2485883a 	add	r2,r4,r18
 80095f4:	980d883a 	mov	r6,r19
 80095f8:	9880022e 	bgeu	r19,r2,8009604 <__sfvwrite_r+0x3f8>
 80095fc:	1027883a 	mov	r19,r2
 8009600:	100d883a 	mov	r6,r2
 8009604:	18c1000c 	andi	r3,r3,1024
 8009608:	18001c26 	beq	r3,zero,800967c <__sfvwrite_r+0x470>
 800960c:	300b883a 	mov	r5,r6
 8009610:	a809883a 	mov	r4,r21
 8009614:	80057d40 	call	80057d4 <_malloc_r>
 8009618:	102f883a 	mov	r23,r2
 800961c:	10002926 	beq	r2,zero,80096c4 <__sfvwrite_r+0x4b8>
 8009620:	81400417 	ldw	r5,16(r16)
 8009624:	b00d883a 	mov	r6,r22
 8009628:	1009883a 	mov	r4,r2
 800962c:	80009bc0 	call	80009bc <memcpy>
 8009630:	8080030b 	ldhu	r2,12(r16)
 8009634:	00fedfc4 	movi	r3,-1153
 8009638:	10c4703a 	and	r2,r2,r3
 800963c:	10802014 	ori	r2,r2,128
 8009640:	8080030d 	sth	r2,12(r16)
 8009644:	bd89883a 	add	r4,r23,r22
 8009648:	9d8fc83a 	sub	r7,r19,r22
 800964c:	85c00415 	stw	r23,16(r16)
 8009650:	84c00515 	stw	r19,20(r16)
 8009654:	81000015 	stw	r4,0(r16)
 8009658:	9027883a 	mov	r19,r18
 800965c:	81c00215 	stw	r7,8(r16)
 8009660:	902f883a 	mov	r23,r18
 8009664:	003f3806 	br	8009348 <__alt_data_end+0xfc009348>
 8009668:	800b883a 	mov	r5,r16
 800966c:	a809883a 	mov	r4,r21
 8009670:	8004b440 	call	8004b44 <_fflush_r>
 8009674:	103fb926 	beq	r2,zero,800955c <__alt_data_end+0xfc00955c>
 8009678:	003f6506 	br	8009410 <__alt_data_end+0xfc009410>
 800967c:	a809883a 	mov	r4,r21
 8009680:	80099440 	call	8009944 <_realloc_r>
 8009684:	102f883a 	mov	r23,r2
 8009688:	103fee1e 	bne	r2,zero,8009644 <__alt_data_end+0xfc009644>
 800968c:	81400417 	ldw	r5,16(r16)
 8009690:	a809883a 	mov	r4,r21
 8009694:	80050a40 	call	80050a4 <_free_r>
 8009698:	8080030b 	ldhu	r2,12(r16)
 800969c:	00ffdfc4 	movi	r3,-129
 80096a0:	1884703a 	and	r2,r3,r2
 80096a4:	00c00304 	movi	r3,12
 80096a8:	a8c00015 	stw	r3,0(r21)
 80096ac:	003f5906 	br	8009414 <__alt_data_end+0xfc009414>
 80096b0:	94c00044 	addi	r19,r18,1
 80096b4:	02000044 	movi	r8,1
 80096b8:	003f6006 	br	800943c <__alt_data_end+0xfc00943c>
 80096bc:	00bfffc4 	movi	r2,-1
 80096c0:	003f0006 	br	80092c4 <__alt_data_end+0xfc0092c4>
 80096c4:	00800304 	movi	r2,12
 80096c8:	a8800015 	stw	r2,0(r21)
 80096cc:	8080030b 	ldhu	r2,12(r16)
 80096d0:	003f5006 	br	8009414 <__alt_data_end+0xfc009414>

080096d4 <_isatty_r>:
 80096d4:	defffd04 	addi	sp,sp,-12
 80096d8:	dc000015 	stw	r16,0(sp)
 80096dc:	04020074 	movhi	r16,2049
 80096e0:	dc400115 	stw	r17,4(sp)
 80096e4:	840ecf04 	addi	r16,r16,15164
 80096e8:	2023883a 	mov	r17,r4
 80096ec:	2809883a 	mov	r4,r5
 80096f0:	dfc00215 	stw	ra,8(sp)
 80096f4:	80000015 	stw	zero,0(r16)
 80096f8:	800da700 	call	800da70 <isatty>
 80096fc:	00ffffc4 	movi	r3,-1
 8009700:	10c00526 	beq	r2,r3,8009718 <_isatty_r+0x44>
 8009704:	dfc00217 	ldw	ra,8(sp)
 8009708:	dc400117 	ldw	r17,4(sp)
 800970c:	dc000017 	ldw	r16,0(sp)
 8009710:	dec00304 	addi	sp,sp,12
 8009714:	f800283a 	ret
 8009718:	80c00017 	ldw	r3,0(r16)
 800971c:	183ff926 	beq	r3,zero,8009704 <__alt_data_end+0xfc009704>
 8009720:	88c00015 	stw	r3,0(r17)
 8009724:	003ff706 	br	8009704 <__alt_data_end+0xfc009704>

08009728 <_lseek_r>:
 8009728:	defffd04 	addi	sp,sp,-12
 800972c:	2805883a 	mov	r2,r5
 8009730:	dc000015 	stw	r16,0(sp)
 8009734:	04020074 	movhi	r16,2049
 8009738:	dc400115 	stw	r17,4(sp)
 800973c:	300b883a 	mov	r5,r6
 8009740:	840ecf04 	addi	r16,r16,15164
 8009744:	2023883a 	mov	r17,r4
 8009748:	380d883a 	mov	r6,r7
 800974c:	1009883a 	mov	r4,r2
 8009750:	dfc00215 	stw	ra,8(sp)
 8009754:	80000015 	stw	zero,0(r16)
 8009758:	800dc440 	call	800dc44 <lseek>
 800975c:	00ffffc4 	movi	r3,-1
 8009760:	10c00526 	beq	r2,r3,8009778 <_lseek_r+0x50>
 8009764:	dfc00217 	ldw	ra,8(sp)
 8009768:	dc400117 	ldw	r17,4(sp)
 800976c:	dc000017 	ldw	r16,0(sp)
 8009770:	dec00304 	addi	sp,sp,12
 8009774:	f800283a 	ret
 8009778:	80c00017 	ldw	r3,0(r16)
 800977c:	183ff926 	beq	r3,zero,8009764 <__alt_data_end+0xfc009764>
 8009780:	88c00015 	stw	r3,0(r17)
 8009784:	003ff706 	br	8009764 <__alt_data_end+0xfc009764>

08009788 <memmove>:
 8009788:	2005883a 	mov	r2,r4
 800978c:	29000b2e 	bgeu	r5,r4,80097bc <memmove+0x34>
 8009790:	298f883a 	add	r7,r5,r6
 8009794:	21c0092e 	bgeu	r4,r7,80097bc <memmove+0x34>
 8009798:	2187883a 	add	r3,r4,r6
 800979c:	198bc83a 	sub	r5,r3,r6
 80097a0:	30004826 	beq	r6,zero,80098c4 <memmove+0x13c>
 80097a4:	39ffffc4 	addi	r7,r7,-1
 80097a8:	39000003 	ldbu	r4,0(r7)
 80097ac:	18ffffc4 	addi	r3,r3,-1
 80097b0:	19000005 	stb	r4,0(r3)
 80097b4:	28fffb1e 	bne	r5,r3,80097a4 <__alt_data_end+0xfc0097a4>
 80097b8:	f800283a 	ret
 80097bc:	00c003c4 	movi	r3,15
 80097c0:	1980412e 	bgeu	r3,r6,80098c8 <memmove+0x140>
 80097c4:	2886b03a 	or	r3,r5,r2
 80097c8:	18c000cc 	andi	r3,r3,3
 80097cc:	1800401e 	bne	r3,zero,80098d0 <memmove+0x148>
 80097d0:	33fffc04 	addi	r15,r6,-16
 80097d4:	781ed13a 	srli	r15,r15,4
 80097d8:	28c00104 	addi	r3,r5,4
 80097dc:	13400104 	addi	r13,r2,4
 80097e0:	781c913a 	slli	r14,r15,4
 80097e4:	2b000204 	addi	r12,r5,8
 80097e8:	12c00204 	addi	r11,r2,8
 80097ec:	73800504 	addi	r14,r14,20
 80097f0:	2a800304 	addi	r10,r5,12
 80097f4:	12400304 	addi	r9,r2,12
 80097f8:	2b9d883a 	add	r14,r5,r14
 80097fc:	2811883a 	mov	r8,r5
 8009800:	100f883a 	mov	r7,r2
 8009804:	41000017 	ldw	r4,0(r8)
 8009808:	39c00404 	addi	r7,r7,16
 800980c:	18c00404 	addi	r3,r3,16
 8009810:	393ffc15 	stw	r4,-16(r7)
 8009814:	193ffc17 	ldw	r4,-16(r3)
 8009818:	6b400404 	addi	r13,r13,16
 800981c:	5ac00404 	addi	r11,r11,16
 8009820:	693ffc15 	stw	r4,-16(r13)
 8009824:	61000017 	ldw	r4,0(r12)
 8009828:	4a400404 	addi	r9,r9,16
 800982c:	42000404 	addi	r8,r8,16
 8009830:	593ffc15 	stw	r4,-16(r11)
 8009834:	51000017 	ldw	r4,0(r10)
 8009838:	63000404 	addi	r12,r12,16
 800983c:	52800404 	addi	r10,r10,16
 8009840:	493ffc15 	stw	r4,-16(r9)
 8009844:	1bbfef1e 	bne	r3,r14,8009804 <__alt_data_end+0xfc009804>
 8009848:	79000044 	addi	r4,r15,1
 800984c:	2008913a 	slli	r4,r4,4
 8009850:	328003cc 	andi	r10,r6,15
 8009854:	02c000c4 	movi	r11,3
 8009858:	1107883a 	add	r3,r2,r4
 800985c:	290b883a 	add	r5,r5,r4
 8009860:	5a801e2e 	bgeu	r11,r10,80098dc <memmove+0x154>
 8009864:	1813883a 	mov	r9,r3
 8009868:	2811883a 	mov	r8,r5
 800986c:	500f883a 	mov	r7,r10
 8009870:	41000017 	ldw	r4,0(r8)
 8009874:	4a400104 	addi	r9,r9,4
 8009878:	39ffff04 	addi	r7,r7,-4
 800987c:	493fff15 	stw	r4,-4(r9)
 8009880:	42000104 	addi	r8,r8,4
 8009884:	59fffa36 	bltu	r11,r7,8009870 <__alt_data_end+0xfc009870>
 8009888:	513fff04 	addi	r4,r10,-4
 800988c:	2008d0ba 	srli	r4,r4,2
 8009890:	318000cc 	andi	r6,r6,3
 8009894:	21000044 	addi	r4,r4,1
 8009898:	2109883a 	add	r4,r4,r4
 800989c:	2109883a 	add	r4,r4,r4
 80098a0:	1907883a 	add	r3,r3,r4
 80098a4:	290b883a 	add	r5,r5,r4
 80098a8:	30000b26 	beq	r6,zero,80098d8 <memmove+0x150>
 80098ac:	198d883a 	add	r6,r3,r6
 80098b0:	29c00003 	ldbu	r7,0(r5)
 80098b4:	18c00044 	addi	r3,r3,1
 80098b8:	29400044 	addi	r5,r5,1
 80098bc:	19ffffc5 	stb	r7,-1(r3)
 80098c0:	19bffb1e 	bne	r3,r6,80098b0 <__alt_data_end+0xfc0098b0>
 80098c4:	f800283a 	ret
 80098c8:	1007883a 	mov	r3,r2
 80098cc:	003ff606 	br	80098a8 <__alt_data_end+0xfc0098a8>
 80098d0:	1007883a 	mov	r3,r2
 80098d4:	003ff506 	br	80098ac <__alt_data_end+0xfc0098ac>
 80098d8:	f800283a 	ret
 80098dc:	500d883a 	mov	r6,r10
 80098e0:	003ff106 	br	80098a8 <__alt_data_end+0xfc0098a8>

080098e4 <_read_r>:
 80098e4:	defffd04 	addi	sp,sp,-12
 80098e8:	2805883a 	mov	r2,r5
 80098ec:	dc000015 	stw	r16,0(sp)
 80098f0:	04020074 	movhi	r16,2049
 80098f4:	dc400115 	stw	r17,4(sp)
 80098f8:	300b883a 	mov	r5,r6
 80098fc:	840ecf04 	addi	r16,r16,15164
 8009900:	2023883a 	mov	r17,r4
 8009904:	380d883a 	mov	r6,r7
 8009908:	1009883a 	mov	r4,r2
 800990c:	dfc00215 	stw	ra,8(sp)
 8009910:	80000015 	stw	zero,0(r16)
 8009914:	800de200 	call	800de20 <read>
 8009918:	00ffffc4 	movi	r3,-1
 800991c:	10c00526 	beq	r2,r3,8009934 <_read_r+0x50>
 8009920:	dfc00217 	ldw	ra,8(sp)
 8009924:	dc400117 	ldw	r17,4(sp)
 8009928:	dc000017 	ldw	r16,0(sp)
 800992c:	dec00304 	addi	sp,sp,12
 8009930:	f800283a 	ret
 8009934:	80c00017 	ldw	r3,0(r16)
 8009938:	183ff926 	beq	r3,zero,8009920 <__alt_data_end+0xfc009920>
 800993c:	88c00015 	stw	r3,0(r17)
 8009940:	003ff706 	br	8009920 <__alt_data_end+0xfc009920>

08009944 <_realloc_r>:
 8009944:	defff604 	addi	sp,sp,-40
 8009948:	dc800215 	stw	r18,8(sp)
 800994c:	dfc00915 	stw	ra,36(sp)
 8009950:	df000815 	stw	fp,32(sp)
 8009954:	ddc00715 	stw	r23,28(sp)
 8009958:	dd800615 	stw	r22,24(sp)
 800995c:	dd400515 	stw	r21,20(sp)
 8009960:	dd000415 	stw	r20,16(sp)
 8009964:	dcc00315 	stw	r19,12(sp)
 8009968:	dc400115 	stw	r17,4(sp)
 800996c:	dc000015 	stw	r16,0(sp)
 8009970:	3025883a 	mov	r18,r6
 8009974:	2800b726 	beq	r5,zero,8009c54 <_realloc_r+0x310>
 8009978:	282b883a 	mov	r21,r5
 800997c:	2029883a 	mov	r20,r4
 8009980:	800dd9c0 	call	800dd9c <__malloc_lock>
 8009984:	a8bfff17 	ldw	r2,-4(r21)
 8009988:	043fff04 	movi	r16,-4
 800998c:	90c002c4 	addi	r3,r18,11
 8009990:	01000584 	movi	r4,22
 8009994:	acfffe04 	addi	r19,r21,-8
 8009998:	1420703a 	and	r16,r2,r16
 800999c:	20c0332e 	bgeu	r4,r3,8009a6c <_realloc_r+0x128>
 80099a0:	047ffe04 	movi	r17,-8
 80099a4:	1c62703a 	and	r17,r3,r17
 80099a8:	8807883a 	mov	r3,r17
 80099ac:	88005816 	blt	r17,zero,8009b10 <_realloc_r+0x1cc>
 80099b0:	8c805736 	bltu	r17,r18,8009b10 <_realloc_r+0x1cc>
 80099b4:	80c0300e 	bge	r16,r3,8009a78 <_realloc_r+0x134>
 80099b8:	07020074 	movhi	fp,2049
 80099bc:	e7027604 	addi	fp,fp,2520
 80099c0:	e1c00217 	ldw	r7,8(fp)
 80099c4:	9c09883a 	add	r4,r19,r16
 80099c8:	22000117 	ldw	r8,4(r4)
 80099cc:	21c06326 	beq	r4,r7,8009b5c <_realloc_r+0x218>
 80099d0:	017fff84 	movi	r5,-2
 80099d4:	414a703a 	and	r5,r8,r5
 80099d8:	214b883a 	add	r5,r4,r5
 80099dc:	29800117 	ldw	r6,4(r5)
 80099e0:	3180004c 	andi	r6,r6,1
 80099e4:	30003f26 	beq	r6,zero,8009ae4 <_realloc_r+0x1a0>
 80099e8:	1080004c 	andi	r2,r2,1
 80099ec:	10008326 	beq	r2,zero,8009bfc <_realloc_r+0x2b8>
 80099f0:	900b883a 	mov	r5,r18
 80099f4:	a009883a 	mov	r4,r20
 80099f8:	80057d40 	call	80057d4 <_malloc_r>
 80099fc:	1025883a 	mov	r18,r2
 8009a00:	10011e26 	beq	r2,zero,8009e7c <_realloc_r+0x538>
 8009a04:	a93fff17 	ldw	r4,-4(r21)
 8009a08:	10fffe04 	addi	r3,r2,-8
 8009a0c:	00bfff84 	movi	r2,-2
 8009a10:	2084703a 	and	r2,r4,r2
 8009a14:	9885883a 	add	r2,r19,r2
 8009a18:	1880ee26 	beq	r3,r2,8009dd4 <_realloc_r+0x490>
 8009a1c:	81bfff04 	addi	r6,r16,-4
 8009a20:	00800904 	movi	r2,36
 8009a24:	1180b836 	bltu	r2,r6,8009d08 <_realloc_r+0x3c4>
 8009a28:	00c004c4 	movi	r3,19
 8009a2c:	19809636 	bltu	r3,r6,8009c88 <_realloc_r+0x344>
 8009a30:	9005883a 	mov	r2,r18
 8009a34:	a807883a 	mov	r3,r21
 8009a38:	19000017 	ldw	r4,0(r3)
 8009a3c:	11000015 	stw	r4,0(r2)
 8009a40:	19000117 	ldw	r4,4(r3)
 8009a44:	11000115 	stw	r4,4(r2)
 8009a48:	18c00217 	ldw	r3,8(r3)
 8009a4c:	10c00215 	stw	r3,8(r2)
 8009a50:	a80b883a 	mov	r5,r21
 8009a54:	a009883a 	mov	r4,r20
 8009a58:	80050a40 	call	80050a4 <_free_r>
 8009a5c:	a009883a 	mov	r4,r20
 8009a60:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8009a64:	9005883a 	mov	r2,r18
 8009a68:	00001206 	br	8009ab4 <_realloc_r+0x170>
 8009a6c:	00c00404 	movi	r3,16
 8009a70:	1823883a 	mov	r17,r3
 8009a74:	003fce06 	br	80099b0 <__alt_data_end+0xfc0099b0>
 8009a78:	a825883a 	mov	r18,r21
 8009a7c:	8445c83a 	sub	r2,r16,r17
 8009a80:	00c003c4 	movi	r3,15
 8009a84:	18802636 	bltu	r3,r2,8009b20 <_realloc_r+0x1dc>
 8009a88:	99800117 	ldw	r6,4(r19)
 8009a8c:	9c07883a 	add	r3,r19,r16
 8009a90:	3180004c 	andi	r6,r6,1
 8009a94:	3420b03a 	or	r16,r6,r16
 8009a98:	9c000115 	stw	r16,4(r19)
 8009a9c:	18800117 	ldw	r2,4(r3)
 8009aa0:	10800054 	ori	r2,r2,1
 8009aa4:	18800115 	stw	r2,4(r3)
 8009aa8:	a009883a 	mov	r4,r20
 8009aac:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8009ab0:	9005883a 	mov	r2,r18
 8009ab4:	dfc00917 	ldw	ra,36(sp)
 8009ab8:	df000817 	ldw	fp,32(sp)
 8009abc:	ddc00717 	ldw	r23,28(sp)
 8009ac0:	dd800617 	ldw	r22,24(sp)
 8009ac4:	dd400517 	ldw	r21,20(sp)
 8009ac8:	dd000417 	ldw	r20,16(sp)
 8009acc:	dcc00317 	ldw	r19,12(sp)
 8009ad0:	dc800217 	ldw	r18,8(sp)
 8009ad4:	dc400117 	ldw	r17,4(sp)
 8009ad8:	dc000017 	ldw	r16,0(sp)
 8009adc:	dec00a04 	addi	sp,sp,40
 8009ae0:	f800283a 	ret
 8009ae4:	017fff04 	movi	r5,-4
 8009ae8:	414a703a 	and	r5,r8,r5
 8009aec:	814d883a 	add	r6,r16,r5
 8009af0:	30c01f16 	blt	r6,r3,8009b70 <_realloc_r+0x22c>
 8009af4:	20800317 	ldw	r2,12(r4)
 8009af8:	20c00217 	ldw	r3,8(r4)
 8009afc:	a825883a 	mov	r18,r21
 8009b00:	3021883a 	mov	r16,r6
 8009b04:	18800315 	stw	r2,12(r3)
 8009b08:	10c00215 	stw	r3,8(r2)
 8009b0c:	003fdb06 	br	8009a7c <__alt_data_end+0xfc009a7c>
 8009b10:	00800304 	movi	r2,12
 8009b14:	a0800015 	stw	r2,0(r20)
 8009b18:	0005883a 	mov	r2,zero
 8009b1c:	003fe506 	br	8009ab4 <__alt_data_end+0xfc009ab4>
 8009b20:	98c00117 	ldw	r3,4(r19)
 8009b24:	9c4b883a 	add	r5,r19,r17
 8009b28:	11000054 	ori	r4,r2,1
 8009b2c:	18c0004c 	andi	r3,r3,1
 8009b30:	1c62b03a 	or	r17,r3,r17
 8009b34:	9c400115 	stw	r17,4(r19)
 8009b38:	29000115 	stw	r4,4(r5)
 8009b3c:	2885883a 	add	r2,r5,r2
 8009b40:	10c00117 	ldw	r3,4(r2)
 8009b44:	29400204 	addi	r5,r5,8
 8009b48:	a009883a 	mov	r4,r20
 8009b4c:	18c00054 	ori	r3,r3,1
 8009b50:	10c00115 	stw	r3,4(r2)
 8009b54:	80050a40 	call	80050a4 <_free_r>
 8009b58:	003fd306 	br	8009aa8 <__alt_data_end+0xfc009aa8>
 8009b5c:	017fff04 	movi	r5,-4
 8009b60:	414a703a 	and	r5,r8,r5
 8009b64:	89800404 	addi	r6,r17,16
 8009b68:	8151883a 	add	r8,r16,r5
 8009b6c:	4180590e 	bge	r8,r6,8009cd4 <_realloc_r+0x390>
 8009b70:	1080004c 	andi	r2,r2,1
 8009b74:	103f9e1e 	bne	r2,zero,80099f0 <__alt_data_end+0xfc0099f0>
 8009b78:	adbffe17 	ldw	r22,-8(r21)
 8009b7c:	00bfff04 	movi	r2,-4
 8009b80:	9dadc83a 	sub	r22,r19,r22
 8009b84:	b1800117 	ldw	r6,4(r22)
 8009b88:	3084703a 	and	r2,r6,r2
 8009b8c:	20002026 	beq	r4,zero,8009c10 <_realloc_r+0x2cc>
 8009b90:	80af883a 	add	r23,r16,r2
 8009b94:	b96f883a 	add	r23,r23,r5
 8009b98:	21c05f26 	beq	r4,r7,8009d18 <_realloc_r+0x3d4>
 8009b9c:	b8c01c16 	blt	r23,r3,8009c10 <_realloc_r+0x2cc>
 8009ba0:	20800317 	ldw	r2,12(r4)
 8009ba4:	20c00217 	ldw	r3,8(r4)
 8009ba8:	81bfff04 	addi	r6,r16,-4
 8009bac:	01000904 	movi	r4,36
 8009bb0:	18800315 	stw	r2,12(r3)
 8009bb4:	10c00215 	stw	r3,8(r2)
 8009bb8:	b0c00217 	ldw	r3,8(r22)
 8009bbc:	b0800317 	ldw	r2,12(r22)
 8009bc0:	b4800204 	addi	r18,r22,8
 8009bc4:	18800315 	stw	r2,12(r3)
 8009bc8:	10c00215 	stw	r3,8(r2)
 8009bcc:	21801b36 	bltu	r4,r6,8009c3c <_realloc_r+0x2f8>
 8009bd0:	008004c4 	movi	r2,19
 8009bd4:	1180352e 	bgeu	r2,r6,8009cac <_realloc_r+0x368>
 8009bd8:	a8800017 	ldw	r2,0(r21)
 8009bdc:	b0800215 	stw	r2,8(r22)
 8009be0:	a8800117 	ldw	r2,4(r21)
 8009be4:	b0800315 	stw	r2,12(r22)
 8009be8:	008006c4 	movi	r2,27
 8009bec:	11807f36 	bltu	r2,r6,8009dec <_realloc_r+0x4a8>
 8009bf0:	b0800404 	addi	r2,r22,16
 8009bf4:	ad400204 	addi	r21,r21,8
 8009bf8:	00002d06 	br	8009cb0 <_realloc_r+0x36c>
 8009bfc:	adbffe17 	ldw	r22,-8(r21)
 8009c00:	00bfff04 	movi	r2,-4
 8009c04:	9dadc83a 	sub	r22,r19,r22
 8009c08:	b1000117 	ldw	r4,4(r22)
 8009c0c:	2084703a 	and	r2,r4,r2
 8009c10:	b03f7726 	beq	r22,zero,80099f0 <__alt_data_end+0xfc0099f0>
 8009c14:	80af883a 	add	r23,r16,r2
 8009c18:	b8ff7516 	blt	r23,r3,80099f0 <__alt_data_end+0xfc0099f0>
 8009c1c:	b0800317 	ldw	r2,12(r22)
 8009c20:	b0c00217 	ldw	r3,8(r22)
 8009c24:	81bfff04 	addi	r6,r16,-4
 8009c28:	01000904 	movi	r4,36
 8009c2c:	18800315 	stw	r2,12(r3)
 8009c30:	10c00215 	stw	r3,8(r2)
 8009c34:	b4800204 	addi	r18,r22,8
 8009c38:	21bfe52e 	bgeu	r4,r6,8009bd0 <__alt_data_end+0xfc009bd0>
 8009c3c:	a80b883a 	mov	r5,r21
 8009c40:	9009883a 	mov	r4,r18
 8009c44:	80097880 	call	8009788 <memmove>
 8009c48:	b821883a 	mov	r16,r23
 8009c4c:	b027883a 	mov	r19,r22
 8009c50:	003f8a06 	br	8009a7c <__alt_data_end+0xfc009a7c>
 8009c54:	300b883a 	mov	r5,r6
 8009c58:	dfc00917 	ldw	ra,36(sp)
 8009c5c:	df000817 	ldw	fp,32(sp)
 8009c60:	ddc00717 	ldw	r23,28(sp)
 8009c64:	dd800617 	ldw	r22,24(sp)
 8009c68:	dd400517 	ldw	r21,20(sp)
 8009c6c:	dd000417 	ldw	r20,16(sp)
 8009c70:	dcc00317 	ldw	r19,12(sp)
 8009c74:	dc800217 	ldw	r18,8(sp)
 8009c78:	dc400117 	ldw	r17,4(sp)
 8009c7c:	dc000017 	ldw	r16,0(sp)
 8009c80:	dec00a04 	addi	sp,sp,40
 8009c84:	80057d41 	jmpi	80057d4 <_malloc_r>
 8009c88:	a8c00017 	ldw	r3,0(r21)
 8009c8c:	90c00015 	stw	r3,0(r18)
 8009c90:	a8c00117 	ldw	r3,4(r21)
 8009c94:	90c00115 	stw	r3,4(r18)
 8009c98:	00c006c4 	movi	r3,27
 8009c9c:	19804536 	bltu	r3,r6,8009db4 <_realloc_r+0x470>
 8009ca0:	90800204 	addi	r2,r18,8
 8009ca4:	a8c00204 	addi	r3,r21,8
 8009ca8:	003f6306 	br	8009a38 <__alt_data_end+0xfc009a38>
 8009cac:	9005883a 	mov	r2,r18
 8009cb0:	a8c00017 	ldw	r3,0(r21)
 8009cb4:	b821883a 	mov	r16,r23
 8009cb8:	b027883a 	mov	r19,r22
 8009cbc:	10c00015 	stw	r3,0(r2)
 8009cc0:	a8c00117 	ldw	r3,4(r21)
 8009cc4:	10c00115 	stw	r3,4(r2)
 8009cc8:	a8c00217 	ldw	r3,8(r21)
 8009ccc:	10c00215 	stw	r3,8(r2)
 8009cd0:	003f6a06 	br	8009a7c <__alt_data_end+0xfc009a7c>
 8009cd4:	9c67883a 	add	r19,r19,r17
 8009cd8:	4445c83a 	sub	r2,r8,r17
 8009cdc:	e4c00215 	stw	r19,8(fp)
 8009ce0:	10800054 	ori	r2,r2,1
 8009ce4:	98800115 	stw	r2,4(r19)
 8009ce8:	a8bfff17 	ldw	r2,-4(r21)
 8009cec:	a009883a 	mov	r4,r20
 8009cf0:	1080004c 	andi	r2,r2,1
 8009cf4:	1462b03a 	or	r17,r2,r17
 8009cf8:	ac7fff15 	stw	r17,-4(r21)
 8009cfc:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8009d00:	a805883a 	mov	r2,r21
 8009d04:	003f6b06 	br	8009ab4 <__alt_data_end+0xfc009ab4>
 8009d08:	a80b883a 	mov	r5,r21
 8009d0c:	9009883a 	mov	r4,r18
 8009d10:	80097880 	call	8009788 <memmove>
 8009d14:	003f4e06 	br	8009a50 <__alt_data_end+0xfc009a50>
 8009d18:	89000404 	addi	r4,r17,16
 8009d1c:	b93fbc16 	blt	r23,r4,8009c10 <__alt_data_end+0xfc009c10>
 8009d20:	b0800317 	ldw	r2,12(r22)
 8009d24:	b0c00217 	ldw	r3,8(r22)
 8009d28:	81bfff04 	addi	r6,r16,-4
 8009d2c:	01000904 	movi	r4,36
 8009d30:	18800315 	stw	r2,12(r3)
 8009d34:	10c00215 	stw	r3,8(r2)
 8009d38:	b4800204 	addi	r18,r22,8
 8009d3c:	21804336 	bltu	r4,r6,8009e4c <_realloc_r+0x508>
 8009d40:	008004c4 	movi	r2,19
 8009d44:	11803f2e 	bgeu	r2,r6,8009e44 <_realloc_r+0x500>
 8009d48:	a8800017 	ldw	r2,0(r21)
 8009d4c:	b0800215 	stw	r2,8(r22)
 8009d50:	a8800117 	ldw	r2,4(r21)
 8009d54:	b0800315 	stw	r2,12(r22)
 8009d58:	008006c4 	movi	r2,27
 8009d5c:	11803f36 	bltu	r2,r6,8009e5c <_realloc_r+0x518>
 8009d60:	b0800404 	addi	r2,r22,16
 8009d64:	ad400204 	addi	r21,r21,8
 8009d68:	a8c00017 	ldw	r3,0(r21)
 8009d6c:	10c00015 	stw	r3,0(r2)
 8009d70:	a8c00117 	ldw	r3,4(r21)
 8009d74:	10c00115 	stw	r3,4(r2)
 8009d78:	a8c00217 	ldw	r3,8(r21)
 8009d7c:	10c00215 	stw	r3,8(r2)
 8009d80:	b447883a 	add	r3,r22,r17
 8009d84:	bc45c83a 	sub	r2,r23,r17
 8009d88:	e0c00215 	stw	r3,8(fp)
 8009d8c:	10800054 	ori	r2,r2,1
 8009d90:	18800115 	stw	r2,4(r3)
 8009d94:	b0800117 	ldw	r2,4(r22)
 8009d98:	a009883a 	mov	r4,r20
 8009d9c:	1080004c 	andi	r2,r2,1
 8009da0:	1462b03a 	or	r17,r2,r17
 8009da4:	b4400115 	stw	r17,4(r22)
 8009da8:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8009dac:	9005883a 	mov	r2,r18
 8009db0:	003f4006 	br	8009ab4 <__alt_data_end+0xfc009ab4>
 8009db4:	a8c00217 	ldw	r3,8(r21)
 8009db8:	90c00215 	stw	r3,8(r18)
 8009dbc:	a8c00317 	ldw	r3,12(r21)
 8009dc0:	90c00315 	stw	r3,12(r18)
 8009dc4:	30801126 	beq	r6,r2,8009e0c <_realloc_r+0x4c8>
 8009dc8:	90800404 	addi	r2,r18,16
 8009dcc:	a8c00404 	addi	r3,r21,16
 8009dd0:	003f1906 	br	8009a38 <__alt_data_end+0xfc009a38>
 8009dd4:	90ffff17 	ldw	r3,-4(r18)
 8009dd8:	00bfff04 	movi	r2,-4
 8009ddc:	a825883a 	mov	r18,r21
 8009de0:	1884703a 	and	r2,r3,r2
 8009de4:	80a1883a 	add	r16,r16,r2
 8009de8:	003f2406 	br	8009a7c <__alt_data_end+0xfc009a7c>
 8009dec:	a8800217 	ldw	r2,8(r21)
 8009df0:	b0800415 	stw	r2,16(r22)
 8009df4:	a8800317 	ldw	r2,12(r21)
 8009df8:	b0800515 	stw	r2,20(r22)
 8009dfc:	31000a26 	beq	r6,r4,8009e28 <_realloc_r+0x4e4>
 8009e00:	b0800604 	addi	r2,r22,24
 8009e04:	ad400404 	addi	r21,r21,16
 8009e08:	003fa906 	br	8009cb0 <__alt_data_end+0xfc009cb0>
 8009e0c:	a9000417 	ldw	r4,16(r21)
 8009e10:	90800604 	addi	r2,r18,24
 8009e14:	a8c00604 	addi	r3,r21,24
 8009e18:	91000415 	stw	r4,16(r18)
 8009e1c:	a9000517 	ldw	r4,20(r21)
 8009e20:	91000515 	stw	r4,20(r18)
 8009e24:	003f0406 	br	8009a38 <__alt_data_end+0xfc009a38>
 8009e28:	a8c00417 	ldw	r3,16(r21)
 8009e2c:	ad400604 	addi	r21,r21,24
 8009e30:	b0800804 	addi	r2,r22,32
 8009e34:	b0c00615 	stw	r3,24(r22)
 8009e38:	a8ffff17 	ldw	r3,-4(r21)
 8009e3c:	b0c00715 	stw	r3,28(r22)
 8009e40:	003f9b06 	br	8009cb0 <__alt_data_end+0xfc009cb0>
 8009e44:	9005883a 	mov	r2,r18
 8009e48:	003fc706 	br	8009d68 <__alt_data_end+0xfc009d68>
 8009e4c:	a80b883a 	mov	r5,r21
 8009e50:	9009883a 	mov	r4,r18
 8009e54:	80097880 	call	8009788 <memmove>
 8009e58:	003fc906 	br	8009d80 <__alt_data_end+0xfc009d80>
 8009e5c:	a8800217 	ldw	r2,8(r21)
 8009e60:	b0800415 	stw	r2,16(r22)
 8009e64:	a8800317 	ldw	r2,12(r21)
 8009e68:	b0800515 	stw	r2,20(r22)
 8009e6c:	31000726 	beq	r6,r4,8009e8c <_realloc_r+0x548>
 8009e70:	b0800604 	addi	r2,r22,24
 8009e74:	ad400404 	addi	r21,r21,16
 8009e78:	003fbb06 	br	8009d68 <__alt_data_end+0xfc009d68>
 8009e7c:	a009883a 	mov	r4,r20
 8009e80:	800ddc00 	call	800ddc0 <__malloc_unlock>
 8009e84:	0005883a 	mov	r2,zero
 8009e88:	003f0a06 	br	8009ab4 <__alt_data_end+0xfc009ab4>
 8009e8c:	a8c00417 	ldw	r3,16(r21)
 8009e90:	ad400604 	addi	r21,r21,24
 8009e94:	b0800804 	addi	r2,r22,32
 8009e98:	b0c00615 	stw	r3,24(r22)
 8009e9c:	a8ffff17 	ldw	r3,-4(r21)
 8009ea0:	b0c00715 	stw	r3,28(r22)
 8009ea4:	003fb006 	br	8009d68 <__alt_data_end+0xfc009d68>

08009ea8 <__swbuf_r>:
 8009ea8:	defffb04 	addi	sp,sp,-20
 8009eac:	dcc00315 	stw	r19,12(sp)
 8009eb0:	dc800215 	stw	r18,8(sp)
 8009eb4:	dc000015 	stw	r16,0(sp)
 8009eb8:	dfc00415 	stw	ra,16(sp)
 8009ebc:	dc400115 	stw	r17,4(sp)
 8009ec0:	2025883a 	mov	r18,r4
 8009ec4:	2827883a 	mov	r19,r5
 8009ec8:	3021883a 	mov	r16,r6
 8009ecc:	20000226 	beq	r4,zero,8009ed8 <__swbuf_r+0x30>
 8009ed0:	20800e17 	ldw	r2,56(r4)
 8009ed4:	10004226 	beq	r2,zero,8009fe0 <__swbuf_r+0x138>
 8009ed8:	80800617 	ldw	r2,24(r16)
 8009edc:	8100030b 	ldhu	r4,12(r16)
 8009ee0:	80800215 	stw	r2,8(r16)
 8009ee4:	2080020c 	andi	r2,r4,8
 8009ee8:	10003626 	beq	r2,zero,8009fc4 <__swbuf_r+0x11c>
 8009eec:	80c00417 	ldw	r3,16(r16)
 8009ef0:	18003426 	beq	r3,zero,8009fc4 <__swbuf_r+0x11c>
 8009ef4:	2088000c 	andi	r2,r4,8192
 8009ef8:	9c403fcc 	andi	r17,r19,255
 8009efc:	10001a26 	beq	r2,zero,8009f68 <__swbuf_r+0xc0>
 8009f00:	80800017 	ldw	r2,0(r16)
 8009f04:	81000517 	ldw	r4,20(r16)
 8009f08:	10c7c83a 	sub	r3,r2,r3
 8009f0c:	1900200e 	bge	r3,r4,8009f90 <__swbuf_r+0xe8>
 8009f10:	18c00044 	addi	r3,r3,1
 8009f14:	81000217 	ldw	r4,8(r16)
 8009f18:	11400044 	addi	r5,r2,1
 8009f1c:	81400015 	stw	r5,0(r16)
 8009f20:	213fffc4 	addi	r4,r4,-1
 8009f24:	81000215 	stw	r4,8(r16)
 8009f28:	14c00005 	stb	r19,0(r2)
 8009f2c:	80800517 	ldw	r2,20(r16)
 8009f30:	10c01e26 	beq	r2,r3,8009fac <__swbuf_r+0x104>
 8009f34:	8080030b 	ldhu	r2,12(r16)
 8009f38:	1080004c 	andi	r2,r2,1
 8009f3c:	10000226 	beq	r2,zero,8009f48 <__swbuf_r+0xa0>
 8009f40:	00800284 	movi	r2,10
 8009f44:	88801926 	beq	r17,r2,8009fac <__swbuf_r+0x104>
 8009f48:	8805883a 	mov	r2,r17
 8009f4c:	dfc00417 	ldw	ra,16(sp)
 8009f50:	dcc00317 	ldw	r19,12(sp)
 8009f54:	dc800217 	ldw	r18,8(sp)
 8009f58:	dc400117 	ldw	r17,4(sp)
 8009f5c:	dc000017 	ldw	r16,0(sp)
 8009f60:	dec00504 	addi	sp,sp,20
 8009f64:	f800283a 	ret
 8009f68:	81401917 	ldw	r5,100(r16)
 8009f6c:	00b7ffc4 	movi	r2,-8193
 8009f70:	21080014 	ori	r4,r4,8192
 8009f74:	2884703a 	and	r2,r5,r2
 8009f78:	80801915 	stw	r2,100(r16)
 8009f7c:	80800017 	ldw	r2,0(r16)
 8009f80:	8100030d 	sth	r4,12(r16)
 8009f84:	81000517 	ldw	r4,20(r16)
 8009f88:	10c7c83a 	sub	r3,r2,r3
 8009f8c:	193fe016 	blt	r3,r4,8009f10 <__alt_data_end+0xfc009f10>
 8009f90:	800b883a 	mov	r5,r16
 8009f94:	9009883a 	mov	r4,r18
 8009f98:	8004b440 	call	8004b44 <_fflush_r>
 8009f9c:	1000071e 	bne	r2,zero,8009fbc <__swbuf_r+0x114>
 8009fa0:	80800017 	ldw	r2,0(r16)
 8009fa4:	00c00044 	movi	r3,1
 8009fa8:	003fda06 	br	8009f14 <__alt_data_end+0xfc009f14>
 8009fac:	800b883a 	mov	r5,r16
 8009fb0:	9009883a 	mov	r4,r18
 8009fb4:	8004b440 	call	8004b44 <_fflush_r>
 8009fb8:	103fe326 	beq	r2,zero,8009f48 <__alt_data_end+0xfc009f48>
 8009fbc:	00bfffc4 	movi	r2,-1
 8009fc0:	003fe206 	br	8009f4c <__alt_data_end+0xfc009f4c>
 8009fc4:	800b883a 	mov	r5,r16
 8009fc8:	9009883a 	mov	r4,r18
 8009fcc:	8002f240 	call	8002f24 <__swsetup_r>
 8009fd0:	103ffa1e 	bne	r2,zero,8009fbc <__alt_data_end+0xfc009fbc>
 8009fd4:	8100030b 	ldhu	r4,12(r16)
 8009fd8:	80c00417 	ldw	r3,16(r16)
 8009fdc:	003fc506 	br	8009ef4 <__alt_data_end+0xfc009ef4>
 8009fe0:	8004f300 	call	8004f30 <__sinit>
 8009fe4:	003fbc06 	br	8009ed8 <__alt_data_end+0xfc009ed8>

08009fe8 <__swbuf>:
 8009fe8:	00820074 	movhi	r2,2049
 8009fec:	1087fd04 	addi	r2,r2,8180
 8009ff0:	280d883a 	mov	r6,r5
 8009ff4:	200b883a 	mov	r5,r4
 8009ff8:	11000017 	ldw	r4,0(r2)
 8009ffc:	8009ea81 	jmpi	8009ea8 <__swbuf_r>

0800a000 <_wcrtomb_r>:
 800a000:	defff604 	addi	sp,sp,-40
 800a004:	00820074 	movhi	r2,2049
 800a008:	dc800815 	stw	r18,32(sp)
 800a00c:	dc400715 	stw	r17,28(sp)
 800a010:	dc000615 	stw	r16,24(sp)
 800a014:	10880104 	addi	r2,r2,8196
 800a018:	dfc00915 	stw	ra,36(sp)
 800a01c:	2021883a 	mov	r16,r4
 800a020:	3823883a 	mov	r17,r7
 800a024:	14800017 	ldw	r18,0(r2)
 800a028:	28001426 	beq	r5,zero,800a07c <_wcrtomb_r+0x7c>
 800a02c:	d9400415 	stw	r5,16(sp)
 800a030:	d9800515 	stw	r6,20(sp)
 800a034:	80055b80 	call	80055b8 <__locale_charset>
 800a038:	d9800517 	ldw	r6,20(sp)
 800a03c:	d9400417 	ldw	r5,16(sp)
 800a040:	100f883a 	mov	r7,r2
 800a044:	dc400015 	stw	r17,0(sp)
 800a048:	8009883a 	mov	r4,r16
 800a04c:	903ee83a 	callr	r18
 800a050:	00ffffc4 	movi	r3,-1
 800a054:	10c0031e 	bne	r2,r3,800a064 <_wcrtomb_r+0x64>
 800a058:	88000015 	stw	zero,0(r17)
 800a05c:	00c02284 	movi	r3,138
 800a060:	80c00015 	stw	r3,0(r16)
 800a064:	dfc00917 	ldw	ra,36(sp)
 800a068:	dc800817 	ldw	r18,32(sp)
 800a06c:	dc400717 	ldw	r17,28(sp)
 800a070:	dc000617 	ldw	r16,24(sp)
 800a074:	dec00a04 	addi	sp,sp,40
 800a078:	f800283a 	ret
 800a07c:	80055b80 	call	80055b8 <__locale_charset>
 800a080:	100f883a 	mov	r7,r2
 800a084:	dc400015 	stw	r17,0(sp)
 800a088:	000d883a 	mov	r6,zero
 800a08c:	d9400104 	addi	r5,sp,4
 800a090:	8009883a 	mov	r4,r16
 800a094:	903ee83a 	callr	r18
 800a098:	003fed06 	br	800a050 <__alt_data_end+0xfc00a050>

0800a09c <wcrtomb>:
 800a09c:	defff604 	addi	sp,sp,-40
 800a0a0:	00820074 	movhi	r2,2049
 800a0a4:	dc800615 	stw	r18,24(sp)
 800a0a8:	dc400515 	stw	r17,20(sp)
 800a0ac:	1087fd04 	addi	r2,r2,8180
 800a0b0:	dfc00915 	stw	ra,36(sp)
 800a0b4:	dd000815 	stw	r20,32(sp)
 800a0b8:	dcc00715 	stw	r19,28(sp)
 800a0bc:	dc000415 	stw	r16,16(sp)
 800a0c0:	3025883a 	mov	r18,r6
 800a0c4:	14400017 	ldw	r17,0(r2)
 800a0c8:	20001926 	beq	r4,zero,800a130 <wcrtomb+0x94>
 800a0cc:	00820074 	movhi	r2,2049
 800a0d0:	10880104 	addi	r2,r2,8196
 800a0d4:	15000017 	ldw	r20,0(r2)
 800a0d8:	2021883a 	mov	r16,r4
 800a0dc:	2827883a 	mov	r19,r5
 800a0e0:	80055b80 	call	80055b8 <__locale_charset>
 800a0e4:	100f883a 	mov	r7,r2
 800a0e8:	dc800015 	stw	r18,0(sp)
 800a0ec:	980d883a 	mov	r6,r19
 800a0f0:	800b883a 	mov	r5,r16
 800a0f4:	8809883a 	mov	r4,r17
 800a0f8:	a03ee83a 	callr	r20
 800a0fc:	00ffffc4 	movi	r3,-1
 800a100:	10c0031e 	bne	r2,r3,800a110 <wcrtomb+0x74>
 800a104:	90000015 	stw	zero,0(r18)
 800a108:	00c02284 	movi	r3,138
 800a10c:	88c00015 	stw	r3,0(r17)
 800a110:	dfc00917 	ldw	ra,36(sp)
 800a114:	dd000817 	ldw	r20,32(sp)
 800a118:	dcc00717 	ldw	r19,28(sp)
 800a11c:	dc800617 	ldw	r18,24(sp)
 800a120:	dc400517 	ldw	r17,20(sp)
 800a124:	dc000417 	ldw	r16,16(sp)
 800a128:	dec00a04 	addi	sp,sp,40
 800a12c:	f800283a 	ret
 800a130:	00820074 	movhi	r2,2049
 800a134:	10880104 	addi	r2,r2,8196
 800a138:	14000017 	ldw	r16,0(r2)
 800a13c:	80055b80 	call	80055b8 <__locale_charset>
 800a140:	100f883a 	mov	r7,r2
 800a144:	dc800015 	stw	r18,0(sp)
 800a148:	000d883a 	mov	r6,zero
 800a14c:	d9400104 	addi	r5,sp,4
 800a150:	8809883a 	mov	r4,r17
 800a154:	803ee83a 	callr	r16
 800a158:	003fe806 	br	800a0fc <__alt_data_end+0xfc00a0fc>

0800a15c <__ascii_wctomb>:
 800a15c:	28000526 	beq	r5,zero,800a174 <__ascii_wctomb+0x18>
 800a160:	00803fc4 	movi	r2,255
 800a164:	11800536 	bltu	r2,r6,800a17c <__ascii_wctomb+0x20>
 800a168:	29800005 	stb	r6,0(r5)
 800a16c:	00800044 	movi	r2,1
 800a170:	f800283a 	ret
 800a174:	0005883a 	mov	r2,zero
 800a178:	f800283a 	ret
 800a17c:	00802284 	movi	r2,138
 800a180:	20800015 	stw	r2,0(r4)
 800a184:	00bfffc4 	movi	r2,-1
 800a188:	f800283a 	ret

0800a18c <_wctomb_r>:
 800a18c:	00820074 	movhi	r2,2049
 800a190:	defff904 	addi	sp,sp,-28
 800a194:	10880104 	addi	r2,r2,8196
 800a198:	dfc00615 	stw	ra,24(sp)
 800a19c:	dc400515 	stw	r17,20(sp)
 800a1a0:	dc000415 	stw	r16,16(sp)
 800a1a4:	3823883a 	mov	r17,r7
 800a1a8:	14000017 	ldw	r16,0(r2)
 800a1ac:	d9000115 	stw	r4,4(sp)
 800a1b0:	d9400215 	stw	r5,8(sp)
 800a1b4:	d9800315 	stw	r6,12(sp)
 800a1b8:	80055b80 	call	80055b8 <__locale_charset>
 800a1bc:	d9800317 	ldw	r6,12(sp)
 800a1c0:	d9400217 	ldw	r5,8(sp)
 800a1c4:	d9000117 	ldw	r4,4(sp)
 800a1c8:	100f883a 	mov	r7,r2
 800a1cc:	dc400015 	stw	r17,0(sp)
 800a1d0:	803ee83a 	callr	r16
 800a1d4:	dfc00617 	ldw	ra,24(sp)
 800a1d8:	dc400517 	ldw	r17,20(sp)
 800a1dc:	dc000417 	ldw	r16,16(sp)
 800a1e0:	dec00704 	addi	sp,sp,28
 800a1e4:	f800283a 	ret

0800a1e8 <__udivdi3>:
 800a1e8:	defff404 	addi	sp,sp,-48
 800a1ec:	dcc00515 	stw	r19,20(sp)
 800a1f0:	dc000215 	stw	r16,8(sp)
 800a1f4:	dfc00b15 	stw	ra,44(sp)
 800a1f8:	df000a15 	stw	fp,40(sp)
 800a1fc:	ddc00915 	stw	r23,36(sp)
 800a200:	dd800815 	stw	r22,32(sp)
 800a204:	dd400715 	stw	r21,28(sp)
 800a208:	dd000615 	stw	r20,24(sp)
 800a20c:	dc800415 	stw	r18,16(sp)
 800a210:	dc400315 	stw	r17,12(sp)
 800a214:	2027883a 	mov	r19,r4
 800a218:	2821883a 	mov	r16,r5
 800a21c:	3800461e 	bne	r7,zero,800a338 <__udivdi3+0x150>
 800a220:	3023883a 	mov	r17,r6
 800a224:	2025883a 	mov	r18,r4
 800a228:	2980572e 	bgeu	r5,r6,800a388 <__udivdi3+0x1a0>
 800a22c:	00bfffd4 	movui	r2,65535
 800a230:	282d883a 	mov	r22,r5
 800a234:	1180b236 	bltu	r2,r6,800a500 <__udivdi3+0x318>
 800a238:	00803fc4 	movi	r2,255
 800a23c:	1185803a 	cmpltu	r2,r2,r6
 800a240:	100490fa 	slli	r2,r2,3
 800a244:	3086d83a 	srl	r3,r6,r2
 800a248:	01020074 	movhi	r4,2049
 800a24c:	21010404 	addi	r4,r4,1040
 800a250:	20c7883a 	add	r3,r4,r3
 800a254:	18c00003 	ldbu	r3,0(r3)
 800a258:	1885883a 	add	r2,r3,r2
 800a25c:	00c00804 	movi	r3,32
 800a260:	1887c83a 	sub	r3,r3,r2
 800a264:	18000526 	beq	r3,zero,800a27c <__udivdi3+0x94>
 800a268:	80e0983a 	sll	r16,r16,r3
 800a26c:	9884d83a 	srl	r2,r19,r2
 800a270:	30e2983a 	sll	r17,r6,r3
 800a274:	98e4983a 	sll	r18,r19,r3
 800a278:	142cb03a 	or	r22,r2,r16
 800a27c:	882ad43a 	srli	r21,r17,16
 800a280:	b009883a 	mov	r4,r22
 800a284:	8d3fffcc 	andi	r20,r17,65535
 800a288:	a80b883a 	mov	r5,r21
 800a28c:	800af040 	call	800af04 <__umodsi3>
 800a290:	b009883a 	mov	r4,r22
 800a294:	a80b883a 	mov	r5,r21
 800a298:	1027883a 	mov	r19,r2
 800a29c:	800aea00 	call	800aea0 <__udivsi3>
 800a2a0:	100b883a 	mov	r5,r2
 800a2a4:	a009883a 	mov	r4,r20
 800a2a8:	102d883a 	mov	r22,r2
 800a2ac:	80009940 	call	8000994 <__mulsi3>
 800a2b0:	9826943a 	slli	r19,r19,16
 800a2b4:	9006d43a 	srli	r3,r18,16
 800a2b8:	1cc6b03a 	or	r3,r3,r19
 800a2bc:	1880052e 	bgeu	r3,r2,800a2d4 <__udivdi3+0xec>
 800a2c0:	1c47883a 	add	r3,r3,r17
 800a2c4:	b13fffc4 	addi	r4,r22,-1
 800a2c8:	1c400136 	bltu	r3,r17,800a2d0 <__udivdi3+0xe8>
 800a2cc:	18814236 	bltu	r3,r2,800a7d8 <__udivdi3+0x5f0>
 800a2d0:	202d883a 	mov	r22,r4
 800a2d4:	18a1c83a 	sub	r16,r3,r2
 800a2d8:	8009883a 	mov	r4,r16
 800a2dc:	a80b883a 	mov	r5,r21
 800a2e0:	800af040 	call	800af04 <__umodsi3>
 800a2e4:	1027883a 	mov	r19,r2
 800a2e8:	8009883a 	mov	r4,r16
 800a2ec:	a80b883a 	mov	r5,r21
 800a2f0:	9826943a 	slli	r19,r19,16
 800a2f4:	800aea00 	call	800aea0 <__udivsi3>
 800a2f8:	100b883a 	mov	r5,r2
 800a2fc:	a009883a 	mov	r4,r20
 800a300:	94bfffcc 	andi	r18,r18,65535
 800a304:	1021883a 	mov	r16,r2
 800a308:	94e4b03a 	or	r18,r18,r19
 800a30c:	80009940 	call	8000994 <__mulsi3>
 800a310:	9080052e 	bgeu	r18,r2,800a328 <__udivdi3+0x140>
 800a314:	8ca5883a 	add	r18,r17,r18
 800a318:	80ffffc4 	addi	r3,r16,-1
 800a31c:	94410c36 	bltu	r18,r17,800a750 <__udivdi3+0x568>
 800a320:	90810b2e 	bgeu	r18,r2,800a750 <__udivdi3+0x568>
 800a324:	843fff84 	addi	r16,r16,-2
 800a328:	b004943a 	slli	r2,r22,16
 800a32c:	0007883a 	mov	r3,zero
 800a330:	1404b03a 	or	r2,r2,r16
 800a334:	00005e06 	br	800a4b0 <__udivdi3+0x2c8>
 800a338:	29c05b36 	bltu	r5,r7,800a4a8 <__udivdi3+0x2c0>
 800a33c:	00bfffd4 	movui	r2,65535
 800a340:	11c0672e 	bgeu	r2,r7,800a4e0 <__udivdi3+0x2f8>
 800a344:	00804034 	movhi	r2,256
 800a348:	10bfffc4 	addi	r2,r2,-1
 800a34c:	11c10a36 	bltu	r2,r7,800a778 <__udivdi3+0x590>
 800a350:	00800404 	movi	r2,16
 800a354:	3886d83a 	srl	r3,r7,r2
 800a358:	01020074 	movhi	r4,2049
 800a35c:	21010404 	addi	r4,r4,1040
 800a360:	20c7883a 	add	r3,r4,r3
 800a364:	18c00003 	ldbu	r3,0(r3)
 800a368:	05c00804 	movi	r23,32
 800a36c:	1885883a 	add	r2,r3,r2
 800a370:	b8afc83a 	sub	r23,r23,r2
 800a374:	b800671e 	bne	r23,zero,800a514 <__udivdi3+0x32c>
 800a378:	3c010536 	bltu	r7,r16,800a790 <__udivdi3+0x5a8>
 800a37c:	9985403a 	cmpgeu	r2,r19,r6
 800a380:	0007883a 	mov	r3,zero
 800a384:	00004a06 	br	800a4b0 <__udivdi3+0x2c8>
 800a388:	3000041e 	bne	r6,zero,800a39c <__udivdi3+0x1b4>
 800a38c:	000b883a 	mov	r5,zero
 800a390:	01000044 	movi	r4,1
 800a394:	800aea00 	call	800aea0 <__udivsi3>
 800a398:	1023883a 	mov	r17,r2
 800a39c:	00bfffd4 	movui	r2,65535
 800a3a0:	1440532e 	bgeu	r2,r17,800a4f0 <__udivdi3+0x308>
 800a3a4:	00804034 	movhi	r2,256
 800a3a8:	10bfffc4 	addi	r2,r2,-1
 800a3ac:	1440f436 	bltu	r2,r17,800a780 <__udivdi3+0x598>
 800a3b0:	00800404 	movi	r2,16
 800a3b4:	8886d83a 	srl	r3,r17,r2
 800a3b8:	01020074 	movhi	r4,2049
 800a3bc:	21010404 	addi	r4,r4,1040
 800a3c0:	20c7883a 	add	r3,r4,r3
 800a3c4:	18c00003 	ldbu	r3,0(r3)
 800a3c8:	1885883a 	add	r2,r3,r2
 800a3cc:	00c00804 	movi	r3,32
 800a3d0:	1887c83a 	sub	r3,r3,r2
 800a3d4:	1800a51e 	bne	r3,zero,800a66c <__udivdi3+0x484>
 800a3d8:	882ad43a 	srli	r21,r17,16
 800a3dc:	8461c83a 	sub	r16,r16,r17
 800a3e0:	8d3fffcc 	andi	r20,r17,65535
 800a3e4:	00c00044 	movi	r3,1
 800a3e8:	a80b883a 	mov	r5,r21
 800a3ec:	8009883a 	mov	r4,r16
 800a3f0:	d8c00115 	stw	r3,4(sp)
 800a3f4:	800af040 	call	800af04 <__umodsi3>
 800a3f8:	a80b883a 	mov	r5,r21
 800a3fc:	8009883a 	mov	r4,r16
 800a400:	1027883a 	mov	r19,r2
 800a404:	800aea00 	call	800aea0 <__udivsi3>
 800a408:	a00b883a 	mov	r5,r20
 800a40c:	1009883a 	mov	r4,r2
 800a410:	102d883a 	mov	r22,r2
 800a414:	80009940 	call	8000994 <__mulsi3>
 800a418:	9826943a 	slli	r19,r19,16
 800a41c:	900ed43a 	srli	r7,r18,16
 800a420:	d8c00117 	ldw	r3,4(sp)
 800a424:	3cceb03a 	or	r7,r7,r19
 800a428:	3880052e 	bgeu	r7,r2,800a440 <__udivdi3+0x258>
 800a42c:	3c4f883a 	add	r7,r7,r17
 800a430:	b13fffc4 	addi	r4,r22,-1
 800a434:	3c400136 	bltu	r7,r17,800a43c <__udivdi3+0x254>
 800a438:	3880e436 	bltu	r7,r2,800a7cc <__udivdi3+0x5e4>
 800a43c:	202d883a 	mov	r22,r4
 800a440:	38a1c83a 	sub	r16,r7,r2
 800a444:	8009883a 	mov	r4,r16
 800a448:	a80b883a 	mov	r5,r21
 800a44c:	d8c00115 	stw	r3,4(sp)
 800a450:	800af040 	call	800af04 <__umodsi3>
 800a454:	1027883a 	mov	r19,r2
 800a458:	8009883a 	mov	r4,r16
 800a45c:	a80b883a 	mov	r5,r21
 800a460:	9826943a 	slli	r19,r19,16
 800a464:	800aea00 	call	800aea0 <__udivsi3>
 800a468:	a00b883a 	mov	r5,r20
 800a46c:	1009883a 	mov	r4,r2
 800a470:	94bfffcc 	andi	r18,r18,65535
 800a474:	1021883a 	mov	r16,r2
 800a478:	94e4b03a 	or	r18,r18,r19
 800a47c:	80009940 	call	8000994 <__mulsi3>
 800a480:	d8c00117 	ldw	r3,4(sp)
 800a484:	9080052e 	bgeu	r18,r2,800a49c <__udivdi3+0x2b4>
 800a488:	8ca5883a 	add	r18,r17,r18
 800a48c:	813fffc4 	addi	r4,r16,-1
 800a490:	9440ad36 	bltu	r18,r17,800a748 <__udivdi3+0x560>
 800a494:	9080ac2e 	bgeu	r18,r2,800a748 <__udivdi3+0x560>
 800a498:	843fff84 	addi	r16,r16,-2
 800a49c:	b004943a 	slli	r2,r22,16
 800a4a0:	1404b03a 	or	r2,r2,r16
 800a4a4:	00000206 	br	800a4b0 <__udivdi3+0x2c8>
 800a4a8:	0007883a 	mov	r3,zero
 800a4ac:	0005883a 	mov	r2,zero
 800a4b0:	dfc00b17 	ldw	ra,44(sp)
 800a4b4:	df000a17 	ldw	fp,40(sp)
 800a4b8:	ddc00917 	ldw	r23,36(sp)
 800a4bc:	dd800817 	ldw	r22,32(sp)
 800a4c0:	dd400717 	ldw	r21,28(sp)
 800a4c4:	dd000617 	ldw	r20,24(sp)
 800a4c8:	dcc00517 	ldw	r19,20(sp)
 800a4cc:	dc800417 	ldw	r18,16(sp)
 800a4d0:	dc400317 	ldw	r17,12(sp)
 800a4d4:	dc000217 	ldw	r16,8(sp)
 800a4d8:	dec00c04 	addi	sp,sp,48
 800a4dc:	f800283a 	ret
 800a4e0:	00803fc4 	movi	r2,255
 800a4e4:	11c5803a 	cmpltu	r2,r2,r7
 800a4e8:	100490fa 	slli	r2,r2,3
 800a4ec:	003f9906 	br	800a354 <__alt_data_end+0xfc00a354>
 800a4f0:	00803fc4 	movi	r2,255
 800a4f4:	1445803a 	cmpltu	r2,r2,r17
 800a4f8:	100490fa 	slli	r2,r2,3
 800a4fc:	003fad06 	br	800a3b4 <__alt_data_end+0xfc00a3b4>
 800a500:	00804034 	movhi	r2,256
 800a504:	10bfffc4 	addi	r2,r2,-1
 800a508:	11809f36 	bltu	r2,r6,800a788 <__udivdi3+0x5a0>
 800a50c:	00800404 	movi	r2,16
 800a510:	003f4c06 	br	800a244 <__alt_data_end+0xfc00a244>
 800a514:	3dce983a 	sll	r7,r7,r23
 800a518:	30b8d83a 	srl	fp,r6,r2
 800a51c:	80a2d83a 	srl	r17,r16,r2
 800a520:	35cc983a 	sll	r6,r6,r23
 800a524:	3f38b03a 	or	fp,r7,fp
 800a528:	e024d43a 	srli	r18,fp,16
 800a52c:	9884d83a 	srl	r2,r19,r2
 800a530:	85e0983a 	sll	r16,r16,r23
 800a534:	8809883a 	mov	r4,r17
 800a538:	900b883a 	mov	r5,r18
 800a53c:	d9800015 	stw	r6,0(sp)
 800a540:	1420b03a 	or	r16,r2,r16
 800a544:	800af040 	call	800af04 <__umodsi3>
 800a548:	900b883a 	mov	r5,r18
 800a54c:	8809883a 	mov	r4,r17
 800a550:	1029883a 	mov	r20,r2
 800a554:	e5bfffcc 	andi	r22,fp,65535
 800a558:	800aea00 	call	800aea0 <__udivsi3>
 800a55c:	100b883a 	mov	r5,r2
 800a560:	b009883a 	mov	r4,r22
 800a564:	102b883a 	mov	r21,r2
 800a568:	80009940 	call	8000994 <__mulsi3>
 800a56c:	a028943a 	slli	r20,r20,16
 800a570:	8006d43a 	srli	r3,r16,16
 800a574:	1d06b03a 	or	r3,r3,r20
 800a578:	1880042e 	bgeu	r3,r2,800a58c <__udivdi3+0x3a4>
 800a57c:	1f07883a 	add	r3,r3,fp
 800a580:	a93fffc4 	addi	r4,r21,-1
 800a584:	1f00892e 	bgeu	r3,fp,800a7ac <__udivdi3+0x5c4>
 800a588:	202b883a 	mov	r21,r4
 800a58c:	18a3c83a 	sub	r17,r3,r2
 800a590:	8809883a 	mov	r4,r17
 800a594:	900b883a 	mov	r5,r18
 800a598:	800af040 	call	800af04 <__umodsi3>
 800a59c:	1029883a 	mov	r20,r2
 800a5a0:	8809883a 	mov	r4,r17
 800a5a4:	900b883a 	mov	r5,r18
 800a5a8:	a028943a 	slli	r20,r20,16
 800a5ac:	800aea00 	call	800aea0 <__udivsi3>
 800a5b0:	100b883a 	mov	r5,r2
 800a5b4:	b009883a 	mov	r4,r22
 800a5b8:	843fffcc 	andi	r16,r16,65535
 800a5bc:	1023883a 	mov	r17,r2
 800a5c0:	8520b03a 	or	r16,r16,r20
 800a5c4:	80009940 	call	8000994 <__mulsi3>
 800a5c8:	8080042e 	bgeu	r16,r2,800a5dc <__udivdi3+0x3f4>
 800a5cc:	8721883a 	add	r16,r16,fp
 800a5d0:	88ffffc4 	addi	r3,r17,-1
 800a5d4:	8700712e 	bgeu	r16,fp,800a79c <__udivdi3+0x5b4>
 800a5d8:	1823883a 	mov	r17,r3
 800a5dc:	a80e943a 	slli	r7,r21,16
 800a5e0:	d8c00017 	ldw	r3,0(sp)
 800a5e4:	80a1c83a 	sub	r16,r16,r2
 800a5e8:	3c64b03a 	or	r18,r7,r17
 800a5ec:	1d3fffcc 	andi	r20,r3,65535
 800a5f0:	9022d43a 	srli	r17,r18,16
 800a5f4:	95bfffcc 	andi	r22,r18,65535
 800a5f8:	a00b883a 	mov	r5,r20
 800a5fc:	b009883a 	mov	r4,r22
 800a600:	182ad43a 	srli	r21,r3,16
 800a604:	80009940 	call	8000994 <__mulsi3>
 800a608:	a00b883a 	mov	r5,r20
 800a60c:	8809883a 	mov	r4,r17
 800a610:	1039883a 	mov	fp,r2
 800a614:	80009940 	call	8000994 <__mulsi3>
 800a618:	8809883a 	mov	r4,r17
 800a61c:	a80b883a 	mov	r5,r21
 800a620:	1029883a 	mov	r20,r2
 800a624:	80009940 	call	8000994 <__mulsi3>
 800a628:	a80b883a 	mov	r5,r21
 800a62c:	b009883a 	mov	r4,r22
 800a630:	1023883a 	mov	r17,r2
 800a634:	80009940 	call	8000994 <__mulsi3>
 800a638:	e006d43a 	srli	r3,fp,16
 800a63c:	1505883a 	add	r2,r2,r20
 800a640:	1887883a 	add	r3,r3,r2
 800a644:	1d00022e 	bgeu	r3,r20,800a650 <__udivdi3+0x468>
 800a648:	00800074 	movhi	r2,1
 800a64c:	88a3883a 	add	r17,r17,r2
 800a650:	1804d43a 	srli	r2,r3,16
 800a654:	1463883a 	add	r17,r2,r17
 800a658:	84404436 	bltu	r16,r17,800a76c <__udivdi3+0x584>
 800a65c:	84403e26 	beq	r16,r17,800a758 <__udivdi3+0x570>
 800a660:	9005883a 	mov	r2,r18
 800a664:	0007883a 	mov	r3,zero
 800a668:	003f9106 	br	800a4b0 <__alt_data_end+0xfc00a4b0>
 800a66c:	88e2983a 	sll	r17,r17,r3
 800a670:	80aed83a 	srl	r23,r16,r2
 800a674:	80e0983a 	sll	r16,r16,r3
 800a678:	882ad43a 	srli	r21,r17,16
 800a67c:	9884d83a 	srl	r2,r19,r2
 800a680:	b809883a 	mov	r4,r23
 800a684:	a80b883a 	mov	r5,r21
 800a688:	98e4983a 	sll	r18,r19,r3
 800a68c:	142cb03a 	or	r22,r2,r16
 800a690:	800af040 	call	800af04 <__umodsi3>
 800a694:	b809883a 	mov	r4,r23
 800a698:	a80b883a 	mov	r5,r21
 800a69c:	1027883a 	mov	r19,r2
 800a6a0:	8d3fffcc 	andi	r20,r17,65535
 800a6a4:	800aea00 	call	800aea0 <__udivsi3>
 800a6a8:	a009883a 	mov	r4,r20
 800a6ac:	100b883a 	mov	r5,r2
 800a6b0:	102f883a 	mov	r23,r2
 800a6b4:	80009940 	call	8000994 <__mulsi3>
 800a6b8:	9826943a 	slli	r19,r19,16
 800a6bc:	b008d43a 	srli	r4,r22,16
 800a6c0:	24c8b03a 	or	r4,r4,r19
 800a6c4:	2080062e 	bgeu	r4,r2,800a6e0 <__udivdi3+0x4f8>
 800a6c8:	2449883a 	add	r4,r4,r17
 800a6cc:	b8ffffc4 	addi	r3,r23,-1
 800a6d0:	24403c36 	bltu	r4,r17,800a7c4 <__udivdi3+0x5dc>
 800a6d4:	20803b2e 	bgeu	r4,r2,800a7c4 <__udivdi3+0x5dc>
 800a6d8:	bdffff84 	addi	r23,r23,-2
 800a6dc:	2449883a 	add	r4,r4,r17
 800a6e0:	20a1c83a 	sub	r16,r4,r2
 800a6e4:	a80b883a 	mov	r5,r21
 800a6e8:	8009883a 	mov	r4,r16
 800a6ec:	800af040 	call	800af04 <__umodsi3>
 800a6f0:	a80b883a 	mov	r5,r21
 800a6f4:	8009883a 	mov	r4,r16
 800a6f8:	1027883a 	mov	r19,r2
 800a6fc:	800aea00 	call	800aea0 <__udivsi3>
 800a700:	a009883a 	mov	r4,r20
 800a704:	100b883a 	mov	r5,r2
 800a708:	9826943a 	slli	r19,r19,16
 800a70c:	1039883a 	mov	fp,r2
 800a710:	80009940 	call	8000994 <__mulsi3>
 800a714:	b13fffcc 	andi	r4,r22,65535
 800a718:	24c8b03a 	or	r4,r4,r19
 800a71c:	2080062e 	bgeu	r4,r2,800a738 <__udivdi3+0x550>
 800a720:	2449883a 	add	r4,r4,r17
 800a724:	e0ffffc4 	addi	r3,fp,-1
 800a728:	24402436 	bltu	r4,r17,800a7bc <__udivdi3+0x5d4>
 800a72c:	2080232e 	bgeu	r4,r2,800a7bc <__udivdi3+0x5d4>
 800a730:	e73fff84 	addi	fp,fp,-2
 800a734:	2449883a 	add	r4,r4,r17
 800a738:	b82e943a 	slli	r23,r23,16
 800a73c:	20a1c83a 	sub	r16,r4,r2
 800a740:	bf06b03a 	or	r3,r23,fp
 800a744:	003f2806 	br	800a3e8 <__alt_data_end+0xfc00a3e8>
 800a748:	2021883a 	mov	r16,r4
 800a74c:	003f5306 	br	800a49c <__alt_data_end+0xfc00a49c>
 800a750:	1821883a 	mov	r16,r3
 800a754:	003ef406 	br	800a328 <__alt_data_end+0xfc00a328>
 800a758:	1806943a 	slli	r3,r3,16
 800a75c:	9de6983a 	sll	r19,r19,r23
 800a760:	e73fffcc 	andi	fp,fp,65535
 800a764:	1f07883a 	add	r3,r3,fp
 800a768:	98ffbd2e 	bgeu	r19,r3,800a660 <__alt_data_end+0xfc00a660>
 800a76c:	90bfffc4 	addi	r2,r18,-1
 800a770:	0007883a 	mov	r3,zero
 800a774:	003f4e06 	br	800a4b0 <__alt_data_end+0xfc00a4b0>
 800a778:	00800604 	movi	r2,24
 800a77c:	003ef506 	br	800a354 <__alt_data_end+0xfc00a354>
 800a780:	00800604 	movi	r2,24
 800a784:	003f0b06 	br	800a3b4 <__alt_data_end+0xfc00a3b4>
 800a788:	00800604 	movi	r2,24
 800a78c:	003ead06 	br	800a244 <__alt_data_end+0xfc00a244>
 800a790:	0007883a 	mov	r3,zero
 800a794:	00800044 	movi	r2,1
 800a798:	003f4506 	br	800a4b0 <__alt_data_end+0xfc00a4b0>
 800a79c:	80bf8e2e 	bgeu	r16,r2,800a5d8 <__alt_data_end+0xfc00a5d8>
 800a7a0:	8c7fff84 	addi	r17,r17,-2
 800a7a4:	8721883a 	add	r16,r16,fp
 800a7a8:	003f8c06 	br	800a5dc <__alt_data_end+0xfc00a5dc>
 800a7ac:	18bf762e 	bgeu	r3,r2,800a588 <__alt_data_end+0xfc00a588>
 800a7b0:	ad7fff84 	addi	r21,r21,-2
 800a7b4:	1f07883a 	add	r3,r3,fp
 800a7b8:	003f7406 	br	800a58c <__alt_data_end+0xfc00a58c>
 800a7bc:	1839883a 	mov	fp,r3
 800a7c0:	003fdd06 	br	800a738 <__alt_data_end+0xfc00a738>
 800a7c4:	182f883a 	mov	r23,r3
 800a7c8:	003fc506 	br	800a6e0 <__alt_data_end+0xfc00a6e0>
 800a7cc:	b5bfff84 	addi	r22,r22,-2
 800a7d0:	3c4f883a 	add	r7,r7,r17
 800a7d4:	003f1a06 	br	800a440 <__alt_data_end+0xfc00a440>
 800a7d8:	b5bfff84 	addi	r22,r22,-2
 800a7dc:	1c47883a 	add	r3,r3,r17
 800a7e0:	003ebc06 	br	800a2d4 <__alt_data_end+0xfc00a2d4>

0800a7e4 <__umoddi3>:
 800a7e4:	defff304 	addi	sp,sp,-52
 800a7e8:	df000b15 	stw	fp,44(sp)
 800a7ec:	dc400415 	stw	r17,16(sp)
 800a7f0:	dc000315 	stw	r16,12(sp)
 800a7f4:	dfc00c15 	stw	ra,48(sp)
 800a7f8:	ddc00a15 	stw	r23,40(sp)
 800a7fc:	dd800915 	stw	r22,36(sp)
 800a800:	dd400815 	stw	r21,32(sp)
 800a804:	dd000715 	stw	r20,28(sp)
 800a808:	dcc00615 	stw	r19,24(sp)
 800a80c:	dc800515 	stw	r18,20(sp)
 800a810:	2021883a 	mov	r16,r4
 800a814:	2823883a 	mov	r17,r5
 800a818:	2839883a 	mov	fp,r5
 800a81c:	3800401e 	bne	r7,zero,800a920 <__umoddi3+0x13c>
 800a820:	3027883a 	mov	r19,r6
 800a824:	2029883a 	mov	r20,r4
 800a828:	2980552e 	bgeu	r5,r6,800a980 <__umoddi3+0x19c>
 800a82c:	00bfffd4 	movui	r2,65535
 800a830:	1180a236 	bltu	r2,r6,800aabc <__umoddi3+0x2d8>
 800a834:	01003fc4 	movi	r4,255
 800a838:	2189803a 	cmpltu	r4,r4,r6
 800a83c:	200890fa 	slli	r4,r4,3
 800a840:	3104d83a 	srl	r2,r6,r4
 800a844:	00c20074 	movhi	r3,2049
 800a848:	18c10404 	addi	r3,r3,1040
 800a84c:	1885883a 	add	r2,r3,r2
 800a850:	10c00003 	ldbu	r3,0(r2)
 800a854:	00800804 	movi	r2,32
 800a858:	1909883a 	add	r4,r3,r4
 800a85c:	1125c83a 	sub	r18,r2,r4
 800a860:	90000526 	beq	r18,zero,800a878 <__umoddi3+0x94>
 800a864:	8ca2983a 	sll	r17,r17,r18
 800a868:	8108d83a 	srl	r4,r16,r4
 800a86c:	34a6983a 	sll	r19,r6,r18
 800a870:	84a8983a 	sll	r20,r16,r18
 800a874:	2478b03a 	or	fp,r4,r17
 800a878:	982cd43a 	srli	r22,r19,16
 800a87c:	e009883a 	mov	r4,fp
 800a880:	9dffffcc 	andi	r23,r19,65535
 800a884:	b00b883a 	mov	r5,r22
 800a888:	800af040 	call	800af04 <__umodsi3>
 800a88c:	b00b883a 	mov	r5,r22
 800a890:	e009883a 	mov	r4,fp
 800a894:	102b883a 	mov	r21,r2
 800a898:	800aea00 	call	800aea0 <__udivsi3>
 800a89c:	100b883a 	mov	r5,r2
 800a8a0:	b809883a 	mov	r4,r23
 800a8a4:	80009940 	call	8000994 <__mulsi3>
 800a8a8:	a82a943a 	slli	r21,r21,16
 800a8ac:	a006d43a 	srli	r3,r20,16
 800a8b0:	1d46b03a 	or	r3,r3,r21
 800a8b4:	1880032e 	bgeu	r3,r2,800a8c4 <__umoddi3+0xe0>
 800a8b8:	1cc7883a 	add	r3,r3,r19
 800a8bc:	1cc00136 	bltu	r3,r19,800a8c4 <__umoddi3+0xe0>
 800a8c0:	18813136 	bltu	r3,r2,800ad88 <__umoddi3+0x5a4>
 800a8c4:	18a1c83a 	sub	r16,r3,r2
 800a8c8:	b00b883a 	mov	r5,r22
 800a8cc:	8009883a 	mov	r4,r16
 800a8d0:	800af040 	call	800af04 <__umodsi3>
 800a8d4:	b00b883a 	mov	r5,r22
 800a8d8:	8009883a 	mov	r4,r16
 800a8dc:	1023883a 	mov	r17,r2
 800a8e0:	800aea00 	call	800aea0 <__udivsi3>
 800a8e4:	100b883a 	mov	r5,r2
 800a8e8:	b809883a 	mov	r4,r23
 800a8ec:	8822943a 	slli	r17,r17,16
 800a8f0:	80009940 	call	8000994 <__mulsi3>
 800a8f4:	a0ffffcc 	andi	r3,r20,65535
 800a8f8:	1c46b03a 	or	r3,r3,r17
 800a8fc:	1880042e 	bgeu	r3,r2,800a910 <__umoddi3+0x12c>
 800a900:	1cc7883a 	add	r3,r3,r19
 800a904:	1cc00236 	bltu	r3,r19,800a910 <__umoddi3+0x12c>
 800a908:	1880012e 	bgeu	r3,r2,800a910 <__umoddi3+0x12c>
 800a90c:	1cc7883a 	add	r3,r3,r19
 800a910:	1885c83a 	sub	r2,r3,r2
 800a914:	1484d83a 	srl	r2,r2,r18
 800a918:	0007883a 	mov	r3,zero
 800a91c:	00005306 	br	800aa6c <__umoddi3+0x288>
 800a920:	29c05036 	bltu	r5,r7,800aa64 <__umoddi3+0x280>
 800a924:	00bfffd4 	movui	r2,65535
 800a928:	11c05c2e 	bgeu	r2,r7,800aa9c <__umoddi3+0x2b8>
 800a92c:	00804034 	movhi	r2,256
 800a930:	10bfffc4 	addi	r2,r2,-1
 800a934:	11c10636 	bltu	r2,r7,800ad50 <__umoddi3+0x56c>
 800a938:	01000404 	movi	r4,16
 800a93c:	3904d83a 	srl	r2,r7,r4
 800a940:	00c20074 	movhi	r3,2049
 800a944:	18c10404 	addi	r3,r3,1040
 800a948:	1885883a 	add	r2,r3,r2
 800a94c:	14c00003 	ldbu	r19,0(r2)
 800a950:	00c00804 	movi	r3,32
 800a954:	9927883a 	add	r19,r19,r4
 800a958:	1ce9c83a 	sub	r20,r3,r19
 800a95c:	a0005c1e 	bne	r20,zero,800aad0 <__umoddi3+0x2ec>
 800a960:	3c400136 	bltu	r7,r17,800a968 <__umoddi3+0x184>
 800a964:	81810a36 	bltu	r16,r6,800ad90 <__umoddi3+0x5ac>
 800a968:	8185c83a 	sub	r2,r16,r6
 800a96c:	89e3c83a 	sub	r17,r17,r7
 800a970:	8089803a 	cmpltu	r4,r16,r2
 800a974:	8939c83a 	sub	fp,r17,r4
 800a978:	e007883a 	mov	r3,fp
 800a97c:	00003b06 	br	800aa6c <__umoddi3+0x288>
 800a980:	3000041e 	bne	r6,zero,800a994 <__umoddi3+0x1b0>
 800a984:	000b883a 	mov	r5,zero
 800a988:	01000044 	movi	r4,1
 800a98c:	800aea00 	call	800aea0 <__udivsi3>
 800a990:	1027883a 	mov	r19,r2
 800a994:	00bfffd4 	movui	r2,65535
 800a998:	14c0442e 	bgeu	r2,r19,800aaac <__umoddi3+0x2c8>
 800a99c:	00804034 	movhi	r2,256
 800a9a0:	10bfffc4 	addi	r2,r2,-1
 800a9a4:	14c0ec36 	bltu	r2,r19,800ad58 <__umoddi3+0x574>
 800a9a8:	00800404 	movi	r2,16
 800a9ac:	9886d83a 	srl	r3,r19,r2
 800a9b0:	01020074 	movhi	r4,2049
 800a9b4:	21010404 	addi	r4,r4,1040
 800a9b8:	20c7883a 	add	r3,r4,r3
 800a9bc:	18c00003 	ldbu	r3,0(r3)
 800a9c0:	1887883a 	add	r3,r3,r2
 800a9c4:	00800804 	movi	r2,32
 800a9c8:	10e5c83a 	sub	r18,r2,r3
 800a9cc:	9000ab1e 	bne	r18,zero,800ac7c <__umoddi3+0x498>
 800a9d0:	982cd43a 	srli	r22,r19,16
 800a9d4:	8ce3c83a 	sub	r17,r17,r19
 800a9d8:	9dffffcc 	andi	r23,r19,65535
 800a9dc:	b00b883a 	mov	r5,r22
 800a9e0:	8809883a 	mov	r4,r17
 800a9e4:	800af040 	call	800af04 <__umodsi3>
 800a9e8:	b00b883a 	mov	r5,r22
 800a9ec:	8809883a 	mov	r4,r17
 800a9f0:	102b883a 	mov	r21,r2
 800a9f4:	800aea00 	call	800aea0 <__udivsi3>
 800a9f8:	b80b883a 	mov	r5,r23
 800a9fc:	1009883a 	mov	r4,r2
 800aa00:	80009940 	call	8000994 <__mulsi3>
 800aa04:	a82a943a 	slli	r21,r21,16
 800aa08:	a006d43a 	srli	r3,r20,16
 800aa0c:	1d46b03a 	or	r3,r3,r21
 800aa10:	1880042e 	bgeu	r3,r2,800aa24 <__umoddi3+0x240>
 800aa14:	1cc7883a 	add	r3,r3,r19
 800aa18:	1cc00236 	bltu	r3,r19,800aa24 <__umoddi3+0x240>
 800aa1c:	1880012e 	bgeu	r3,r2,800aa24 <__umoddi3+0x240>
 800aa20:	1cc7883a 	add	r3,r3,r19
 800aa24:	18a1c83a 	sub	r16,r3,r2
 800aa28:	b00b883a 	mov	r5,r22
 800aa2c:	8009883a 	mov	r4,r16
 800aa30:	800af040 	call	800af04 <__umodsi3>
 800aa34:	1023883a 	mov	r17,r2
 800aa38:	b00b883a 	mov	r5,r22
 800aa3c:	8009883a 	mov	r4,r16
 800aa40:	800aea00 	call	800aea0 <__udivsi3>
 800aa44:	8822943a 	slli	r17,r17,16
 800aa48:	b80b883a 	mov	r5,r23
 800aa4c:	1009883a 	mov	r4,r2
 800aa50:	80009940 	call	8000994 <__mulsi3>
 800aa54:	a53fffcc 	andi	r20,r20,65535
 800aa58:	a446b03a 	or	r3,r20,r17
 800aa5c:	18bfac2e 	bgeu	r3,r2,800a910 <__alt_data_end+0xfc00a910>
 800aa60:	003fa706 	br	800a900 <__alt_data_end+0xfc00a900>
 800aa64:	2005883a 	mov	r2,r4
 800aa68:	2807883a 	mov	r3,r5
 800aa6c:	dfc00c17 	ldw	ra,48(sp)
 800aa70:	df000b17 	ldw	fp,44(sp)
 800aa74:	ddc00a17 	ldw	r23,40(sp)
 800aa78:	dd800917 	ldw	r22,36(sp)
 800aa7c:	dd400817 	ldw	r21,32(sp)
 800aa80:	dd000717 	ldw	r20,28(sp)
 800aa84:	dcc00617 	ldw	r19,24(sp)
 800aa88:	dc800517 	ldw	r18,20(sp)
 800aa8c:	dc400417 	ldw	r17,16(sp)
 800aa90:	dc000317 	ldw	r16,12(sp)
 800aa94:	dec00d04 	addi	sp,sp,52
 800aa98:	f800283a 	ret
 800aa9c:	04c03fc4 	movi	r19,255
 800aaa0:	99c9803a 	cmpltu	r4,r19,r7
 800aaa4:	200890fa 	slli	r4,r4,3
 800aaa8:	003fa406 	br	800a93c <__alt_data_end+0xfc00a93c>
 800aaac:	00803fc4 	movi	r2,255
 800aab0:	14c5803a 	cmpltu	r2,r2,r19
 800aab4:	100490fa 	slli	r2,r2,3
 800aab8:	003fbc06 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800aabc:	00804034 	movhi	r2,256
 800aac0:	10bfffc4 	addi	r2,r2,-1
 800aac4:	1180a636 	bltu	r2,r6,800ad60 <__umoddi3+0x57c>
 800aac8:	01000404 	movi	r4,16
 800aacc:	003f5c06 	br	800a840 <__alt_data_end+0xfc00a840>
 800aad0:	3d0e983a 	sll	r7,r7,r20
 800aad4:	34ead83a 	srl	r21,r6,r19
 800aad8:	8cc6d83a 	srl	r3,r17,r19
 800aadc:	8d10983a 	sll	r8,r17,r20
 800aae0:	3d6ab03a 	or	r21,r7,r21
 800aae4:	a82cd43a 	srli	r22,r21,16
 800aae8:	84e2d83a 	srl	r17,r16,r19
 800aaec:	1809883a 	mov	r4,r3
 800aaf0:	b00b883a 	mov	r5,r22
 800aaf4:	8a22b03a 	or	r17,r17,r8
 800aaf8:	3524983a 	sll	r18,r6,r20
 800aafc:	dc400015 	stw	r17,0(sp)
 800ab00:	d8c00115 	stw	r3,4(sp)
 800ab04:	800af040 	call	800af04 <__umodsi3>
 800ab08:	d8c00117 	ldw	r3,4(sp)
 800ab0c:	b00b883a 	mov	r5,r22
 800ab10:	1039883a 	mov	fp,r2
 800ab14:	1809883a 	mov	r4,r3
 800ab18:	800aea00 	call	800aea0 <__udivsi3>
 800ab1c:	adffffcc 	andi	r23,r21,65535
 800ab20:	100b883a 	mov	r5,r2
 800ab24:	b809883a 	mov	r4,r23
 800ab28:	1023883a 	mov	r17,r2
 800ab2c:	80009940 	call	8000994 <__mulsi3>
 800ab30:	d9400017 	ldw	r5,0(sp)
 800ab34:	e008943a 	slli	r4,fp,16
 800ab38:	8520983a 	sll	r16,r16,r20
 800ab3c:	2806d43a 	srli	r3,r5,16
 800ab40:	1906b03a 	or	r3,r3,r4
 800ab44:	1880042e 	bgeu	r3,r2,800ab58 <__umoddi3+0x374>
 800ab48:	1d47883a 	add	r3,r3,r21
 800ab4c:	893fffc4 	addi	r4,r17,-1
 800ab50:	1d40892e 	bgeu	r3,r21,800ad78 <__umoddi3+0x594>
 800ab54:	2023883a 	mov	r17,r4
 800ab58:	18b9c83a 	sub	fp,r3,r2
 800ab5c:	b00b883a 	mov	r5,r22
 800ab60:	e009883a 	mov	r4,fp
 800ab64:	800af040 	call	800af04 <__umodsi3>
 800ab68:	b00b883a 	mov	r5,r22
 800ab6c:	e009883a 	mov	r4,fp
 800ab70:	d8800215 	stw	r2,8(sp)
 800ab74:	800aea00 	call	800aea0 <__udivsi3>
 800ab78:	100b883a 	mov	r5,r2
 800ab7c:	b809883a 	mov	r4,r23
 800ab80:	102d883a 	mov	r22,r2
 800ab84:	80009940 	call	8000994 <__mulsi3>
 800ab88:	d9800217 	ldw	r6,8(sp)
 800ab8c:	d8c00017 	ldw	r3,0(sp)
 800ab90:	300c943a 	slli	r6,r6,16
 800ab94:	1a3fffcc 	andi	r8,r3,65535
 800ab98:	4190b03a 	or	r8,r8,r6
 800ab9c:	4080042e 	bgeu	r8,r2,800abb0 <__umoddi3+0x3cc>
 800aba0:	4551883a 	add	r8,r8,r21
 800aba4:	b0ffffc4 	addi	r3,r22,-1
 800aba8:	45406f2e 	bgeu	r8,r21,800ad68 <__umoddi3+0x584>
 800abac:	182d883a 	mov	r22,r3
 800abb0:	880e943a 	slli	r7,r17,16
 800abb4:	9006d43a 	srli	r3,r18,16
 800abb8:	91bfffcc 	andi	r6,r18,65535
 800abbc:	3dacb03a 	or	r22,r7,r22
 800abc0:	b02ed43a 	srli	r23,r22,16
 800abc4:	b5bfffcc 	andi	r22,r22,65535
 800abc8:	300b883a 	mov	r5,r6
 800abcc:	b009883a 	mov	r4,r22
 800abd0:	40a3c83a 	sub	r17,r8,r2
 800abd4:	d8c00115 	stw	r3,4(sp)
 800abd8:	d9800215 	stw	r6,8(sp)
 800abdc:	80009940 	call	8000994 <__mulsi3>
 800abe0:	d9800217 	ldw	r6,8(sp)
 800abe4:	b809883a 	mov	r4,r23
 800abe8:	1039883a 	mov	fp,r2
 800abec:	300b883a 	mov	r5,r6
 800abf0:	80009940 	call	8000994 <__mulsi3>
 800abf4:	d8c00117 	ldw	r3,4(sp)
 800abf8:	b809883a 	mov	r4,r23
 800abfc:	d8800215 	stw	r2,8(sp)
 800ac00:	180b883a 	mov	r5,r3
 800ac04:	80009940 	call	8000994 <__mulsi3>
 800ac08:	d8c00117 	ldw	r3,4(sp)
 800ac0c:	b009883a 	mov	r4,r22
 800ac10:	102f883a 	mov	r23,r2
 800ac14:	180b883a 	mov	r5,r3
 800ac18:	80009940 	call	8000994 <__mulsi3>
 800ac1c:	d9800217 	ldw	r6,8(sp)
 800ac20:	e006d43a 	srli	r3,fp,16
 800ac24:	1185883a 	add	r2,r2,r6
 800ac28:	1885883a 	add	r2,r3,r2
 800ac2c:	1180022e 	bgeu	r2,r6,800ac38 <__umoddi3+0x454>
 800ac30:	00c00074 	movhi	r3,1
 800ac34:	b8ef883a 	add	r23,r23,r3
 800ac38:	1006d43a 	srli	r3,r2,16
 800ac3c:	1004943a 	slli	r2,r2,16
 800ac40:	e73fffcc 	andi	fp,fp,65535
 800ac44:	1dc7883a 	add	r3,r3,r23
 800ac48:	1739883a 	add	fp,r2,fp
 800ac4c:	88c03a36 	bltu	r17,r3,800ad38 <__umoddi3+0x554>
 800ac50:	88c05126 	beq	r17,r3,800ad98 <__umoddi3+0x5b4>
 800ac54:	88c9c83a 	sub	r4,r17,r3
 800ac58:	e00f883a 	mov	r7,fp
 800ac5c:	81cfc83a 	sub	r7,r16,r7
 800ac60:	81c7803a 	cmpltu	r3,r16,r7
 800ac64:	20c7c83a 	sub	r3,r4,r3
 800ac68:	1cc4983a 	sll	r2,r3,r19
 800ac6c:	3d0ed83a 	srl	r7,r7,r20
 800ac70:	1d06d83a 	srl	r3,r3,r20
 800ac74:	11c4b03a 	or	r2,r2,r7
 800ac78:	003f7c06 	br	800aa6c <__alt_data_end+0xfc00aa6c>
 800ac7c:	9ca6983a 	sll	r19,r19,r18
 800ac80:	88f8d83a 	srl	fp,r17,r3
 800ac84:	80c4d83a 	srl	r2,r16,r3
 800ac88:	982cd43a 	srli	r22,r19,16
 800ac8c:	8ca2983a 	sll	r17,r17,r18
 800ac90:	e009883a 	mov	r4,fp
 800ac94:	b00b883a 	mov	r5,r22
 800ac98:	146ab03a 	or	r21,r2,r17
 800ac9c:	800af040 	call	800af04 <__umodsi3>
 800aca0:	b00b883a 	mov	r5,r22
 800aca4:	e009883a 	mov	r4,fp
 800aca8:	1029883a 	mov	r20,r2
 800acac:	9dffffcc 	andi	r23,r19,65535
 800acb0:	800aea00 	call	800aea0 <__udivsi3>
 800acb4:	b809883a 	mov	r4,r23
 800acb8:	100b883a 	mov	r5,r2
 800acbc:	80009940 	call	8000994 <__mulsi3>
 800acc0:	a008943a 	slli	r4,r20,16
 800acc4:	a806d43a 	srli	r3,r21,16
 800acc8:	84a8983a 	sll	r20,r16,r18
 800accc:	1906b03a 	or	r3,r3,r4
 800acd0:	1880042e 	bgeu	r3,r2,800ace4 <__umoddi3+0x500>
 800acd4:	1cc7883a 	add	r3,r3,r19
 800acd8:	1cc00236 	bltu	r3,r19,800ace4 <__umoddi3+0x500>
 800acdc:	1880012e 	bgeu	r3,r2,800ace4 <__umoddi3+0x500>
 800ace0:	1cc7883a 	add	r3,r3,r19
 800ace4:	18a3c83a 	sub	r17,r3,r2
 800ace8:	b00b883a 	mov	r5,r22
 800acec:	8809883a 	mov	r4,r17
 800acf0:	800af040 	call	800af04 <__umodsi3>
 800acf4:	b00b883a 	mov	r5,r22
 800acf8:	8809883a 	mov	r4,r17
 800acfc:	1021883a 	mov	r16,r2
 800ad00:	800aea00 	call	800aea0 <__udivsi3>
 800ad04:	100b883a 	mov	r5,r2
 800ad08:	b809883a 	mov	r4,r23
 800ad0c:	8020943a 	slli	r16,r16,16
 800ad10:	80009940 	call	8000994 <__mulsi3>
 800ad14:	a8ffffcc 	andi	r3,r21,65535
 800ad18:	1c06b03a 	or	r3,r3,r16
 800ad1c:	1880042e 	bgeu	r3,r2,800ad30 <__umoddi3+0x54c>
 800ad20:	1cc7883a 	add	r3,r3,r19
 800ad24:	1cc00236 	bltu	r3,r19,800ad30 <__umoddi3+0x54c>
 800ad28:	1880012e 	bgeu	r3,r2,800ad30 <__umoddi3+0x54c>
 800ad2c:	1cc7883a 	add	r3,r3,r19
 800ad30:	18a3c83a 	sub	r17,r3,r2
 800ad34:	003f2906 	br	800a9dc <__alt_data_end+0xfc00a9dc>
 800ad38:	e48fc83a 	sub	r7,fp,r18
 800ad3c:	1d49c83a 	sub	r4,r3,r21
 800ad40:	e1f9803a 	cmpltu	fp,fp,r7
 800ad44:	2739c83a 	sub	fp,r4,fp
 800ad48:	8f09c83a 	sub	r4,r17,fp
 800ad4c:	003fc306 	br	800ac5c <__alt_data_end+0xfc00ac5c>
 800ad50:	01000604 	movi	r4,24
 800ad54:	003ef906 	br	800a93c <__alt_data_end+0xfc00a93c>
 800ad58:	00800604 	movi	r2,24
 800ad5c:	003f1306 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800ad60:	01000604 	movi	r4,24
 800ad64:	003eb606 	br	800a840 <__alt_data_end+0xfc00a840>
 800ad68:	40bf902e 	bgeu	r8,r2,800abac <__alt_data_end+0xfc00abac>
 800ad6c:	b5bfff84 	addi	r22,r22,-2
 800ad70:	4551883a 	add	r8,r8,r21
 800ad74:	003f8e06 	br	800abb0 <__alt_data_end+0xfc00abb0>
 800ad78:	18bf762e 	bgeu	r3,r2,800ab54 <__alt_data_end+0xfc00ab54>
 800ad7c:	8c7fff84 	addi	r17,r17,-2
 800ad80:	1d47883a 	add	r3,r3,r21
 800ad84:	003f7406 	br	800ab58 <__alt_data_end+0xfc00ab58>
 800ad88:	1cc7883a 	add	r3,r3,r19
 800ad8c:	003ecd06 	br	800a8c4 <__alt_data_end+0xfc00a8c4>
 800ad90:	8005883a 	mov	r2,r16
 800ad94:	003ef806 	br	800a978 <__alt_data_end+0xfc00a978>
 800ad98:	873fe736 	bltu	r16,fp,800ad38 <__alt_data_end+0xfc00ad38>
 800ad9c:	e00f883a 	mov	r7,fp
 800ada0:	0009883a 	mov	r4,zero
 800ada4:	003fad06 	br	800ac5c <__alt_data_end+0xfc00ac5c>

0800ada8 <__divsi3>:
 800ada8:	20001b16 	blt	r4,zero,800ae18 <__divsi3+0x70>
 800adac:	000f883a 	mov	r7,zero
 800adb0:	28001616 	blt	r5,zero,800ae0c <__divsi3+0x64>
 800adb4:	200d883a 	mov	r6,r4
 800adb8:	29001a2e 	bgeu	r5,r4,800ae24 <__divsi3+0x7c>
 800adbc:	00800804 	movi	r2,32
 800adc0:	00c00044 	movi	r3,1
 800adc4:	00000106 	br	800adcc <__divsi3+0x24>
 800adc8:	10000d26 	beq	r2,zero,800ae00 <__divsi3+0x58>
 800adcc:	294b883a 	add	r5,r5,r5
 800add0:	10bfffc4 	addi	r2,r2,-1
 800add4:	18c7883a 	add	r3,r3,r3
 800add8:	293ffb36 	bltu	r5,r4,800adc8 <__alt_data_end+0xfc00adc8>
 800addc:	0005883a 	mov	r2,zero
 800ade0:	18000726 	beq	r3,zero,800ae00 <__divsi3+0x58>
 800ade4:	0005883a 	mov	r2,zero
 800ade8:	31400236 	bltu	r6,r5,800adf4 <__divsi3+0x4c>
 800adec:	314dc83a 	sub	r6,r6,r5
 800adf0:	10c4b03a 	or	r2,r2,r3
 800adf4:	1806d07a 	srli	r3,r3,1
 800adf8:	280ad07a 	srli	r5,r5,1
 800adfc:	183ffa1e 	bne	r3,zero,800ade8 <__alt_data_end+0xfc00ade8>
 800ae00:	38000126 	beq	r7,zero,800ae08 <__divsi3+0x60>
 800ae04:	0085c83a 	sub	r2,zero,r2
 800ae08:	f800283a 	ret
 800ae0c:	014bc83a 	sub	r5,zero,r5
 800ae10:	39c0005c 	xori	r7,r7,1
 800ae14:	003fe706 	br	800adb4 <__alt_data_end+0xfc00adb4>
 800ae18:	0109c83a 	sub	r4,zero,r4
 800ae1c:	01c00044 	movi	r7,1
 800ae20:	003fe306 	br	800adb0 <__alt_data_end+0xfc00adb0>
 800ae24:	00c00044 	movi	r3,1
 800ae28:	003fee06 	br	800ade4 <__alt_data_end+0xfc00ade4>

0800ae2c <__modsi3>:
 800ae2c:	20001716 	blt	r4,zero,800ae8c <__modsi3+0x60>
 800ae30:	000f883a 	mov	r7,zero
 800ae34:	2005883a 	mov	r2,r4
 800ae38:	28001216 	blt	r5,zero,800ae84 <__modsi3+0x58>
 800ae3c:	2900162e 	bgeu	r5,r4,800ae98 <__modsi3+0x6c>
 800ae40:	01800804 	movi	r6,32
 800ae44:	00c00044 	movi	r3,1
 800ae48:	00000106 	br	800ae50 <__modsi3+0x24>
 800ae4c:	30000a26 	beq	r6,zero,800ae78 <__modsi3+0x4c>
 800ae50:	294b883a 	add	r5,r5,r5
 800ae54:	31bfffc4 	addi	r6,r6,-1
 800ae58:	18c7883a 	add	r3,r3,r3
 800ae5c:	293ffb36 	bltu	r5,r4,800ae4c <__alt_data_end+0xfc00ae4c>
 800ae60:	18000526 	beq	r3,zero,800ae78 <__modsi3+0x4c>
 800ae64:	1806d07a 	srli	r3,r3,1
 800ae68:	11400136 	bltu	r2,r5,800ae70 <__modsi3+0x44>
 800ae6c:	1145c83a 	sub	r2,r2,r5
 800ae70:	280ad07a 	srli	r5,r5,1
 800ae74:	183ffb1e 	bne	r3,zero,800ae64 <__alt_data_end+0xfc00ae64>
 800ae78:	38000126 	beq	r7,zero,800ae80 <__modsi3+0x54>
 800ae7c:	0085c83a 	sub	r2,zero,r2
 800ae80:	f800283a 	ret
 800ae84:	014bc83a 	sub	r5,zero,r5
 800ae88:	003fec06 	br	800ae3c <__alt_data_end+0xfc00ae3c>
 800ae8c:	0109c83a 	sub	r4,zero,r4
 800ae90:	01c00044 	movi	r7,1
 800ae94:	003fe706 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800ae98:	00c00044 	movi	r3,1
 800ae9c:	003ff106 	br	800ae64 <__alt_data_end+0xfc00ae64>

0800aea0 <__udivsi3>:
 800aea0:	200d883a 	mov	r6,r4
 800aea4:	2900152e 	bgeu	r5,r4,800aefc <__udivsi3+0x5c>
 800aea8:	28001416 	blt	r5,zero,800aefc <__udivsi3+0x5c>
 800aeac:	00800804 	movi	r2,32
 800aeb0:	00c00044 	movi	r3,1
 800aeb4:	00000206 	br	800aec0 <__udivsi3+0x20>
 800aeb8:	10000e26 	beq	r2,zero,800aef4 <__udivsi3+0x54>
 800aebc:	28000516 	blt	r5,zero,800aed4 <__udivsi3+0x34>
 800aec0:	294b883a 	add	r5,r5,r5
 800aec4:	10bfffc4 	addi	r2,r2,-1
 800aec8:	18c7883a 	add	r3,r3,r3
 800aecc:	293ffa36 	bltu	r5,r4,800aeb8 <__alt_data_end+0xfc00aeb8>
 800aed0:	18000826 	beq	r3,zero,800aef4 <__udivsi3+0x54>
 800aed4:	0005883a 	mov	r2,zero
 800aed8:	31400236 	bltu	r6,r5,800aee4 <__udivsi3+0x44>
 800aedc:	314dc83a 	sub	r6,r6,r5
 800aee0:	10c4b03a 	or	r2,r2,r3
 800aee4:	1806d07a 	srli	r3,r3,1
 800aee8:	280ad07a 	srli	r5,r5,1
 800aeec:	183ffa1e 	bne	r3,zero,800aed8 <__alt_data_end+0xfc00aed8>
 800aef0:	f800283a 	ret
 800aef4:	0005883a 	mov	r2,zero
 800aef8:	f800283a 	ret
 800aefc:	00c00044 	movi	r3,1
 800af00:	003ff406 	br	800aed4 <__alt_data_end+0xfc00aed4>

0800af04 <__umodsi3>:
 800af04:	2005883a 	mov	r2,r4
 800af08:	2900122e 	bgeu	r5,r4,800af54 <__umodsi3+0x50>
 800af0c:	28001116 	blt	r5,zero,800af54 <__umodsi3+0x50>
 800af10:	01800804 	movi	r6,32
 800af14:	00c00044 	movi	r3,1
 800af18:	00000206 	br	800af24 <__umodsi3+0x20>
 800af1c:	30000c26 	beq	r6,zero,800af50 <__umodsi3+0x4c>
 800af20:	28000516 	blt	r5,zero,800af38 <__umodsi3+0x34>
 800af24:	294b883a 	add	r5,r5,r5
 800af28:	31bfffc4 	addi	r6,r6,-1
 800af2c:	18c7883a 	add	r3,r3,r3
 800af30:	293ffa36 	bltu	r5,r4,800af1c <__alt_data_end+0xfc00af1c>
 800af34:	18000626 	beq	r3,zero,800af50 <__umodsi3+0x4c>
 800af38:	1806d07a 	srli	r3,r3,1
 800af3c:	11400136 	bltu	r2,r5,800af44 <__umodsi3+0x40>
 800af40:	1145c83a 	sub	r2,r2,r5
 800af44:	280ad07a 	srli	r5,r5,1
 800af48:	183ffb1e 	bne	r3,zero,800af38 <__alt_data_end+0xfc00af38>
 800af4c:	f800283a 	ret
 800af50:	f800283a 	ret
 800af54:	00c00044 	movi	r3,1
 800af58:	003ff706 	br	800af38 <__alt_data_end+0xfc00af38>

0800af5c <__adddf3>:
 800af5c:	02c00434 	movhi	r11,16
 800af60:	5affffc4 	addi	r11,r11,-1
 800af64:	2806d7fa 	srli	r3,r5,31
 800af68:	2ad4703a 	and	r10,r5,r11
 800af6c:	3ad2703a 	and	r9,r7,r11
 800af70:	3804d53a 	srli	r2,r7,20
 800af74:	3018d77a 	srli	r12,r6,29
 800af78:	280ad53a 	srli	r5,r5,20
 800af7c:	501490fa 	slli	r10,r10,3
 800af80:	2010d77a 	srli	r8,r4,29
 800af84:	481290fa 	slli	r9,r9,3
 800af88:	380ed7fa 	srli	r7,r7,31
 800af8c:	defffb04 	addi	sp,sp,-20
 800af90:	dc800215 	stw	r18,8(sp)
 800af94:	dc400115 	stw	r17,4(sp)
 800af98:	dc000015 	stw	r16,0(sp)
 800af9c:	dfc00415 	stw	ra,16(sp)
 800afa0:	dcc00315 	stw	r19,12(sp)
 800afa4:	1c803fcc 	andi	r18,r3,255
 800afa8:	2c01ffcc 	andi	r16,r5,2047
 800afac:	5210b03a 	or	r8,r10,r8
 800afb0:	202290fa 	slli	r17,r4,3
 800afb4:	1081ffcc 	andi	r2,r2,2047
 800afb8:	4b12b03a 	or	r9,r9,r12
 800afbc:	300c90fa 	slli	r6,r6,3
 800afc0:	91c07526 	beq	r18,r7,800b198 <__adddf3+0x23c>
 800afc4:	8087c83a 	sub	r3,r16,r2
 800afc8:	00c0ab0e 	bge	zero,r3,800b278 <__adddf3+0x31c>
 800afcc:	10002a1e 	bne	r2,zero,800b078 <__adddf3+0x11c>
 800afd0:	4984b03a 	or	r2,r9,r6
 800afd4:	1000961e 	bne	r2,zero,800b230 <__adddf3+0x2d4>
 800afd8:	888001cc 	andi	r2,r17,7
 800afdc:	10000726 	beq	r2,zero,800affc <__adddf3+0xa0>
 800afe0:	888003cc 	andi	r2,r17,15
 800afe4:	00c00104 	movi	r3,4
 800afe8:	10c00426 	beq	r2,r3,800affc <__adddf3+0xa0>
 800afec:	88c7883a 	add	r3,r17,r3
 800aff0:	1c63803a 	cmpltu	r17,r3,r17
 800aff4:	4451883a 	add	r8,r8,r17
 800aff8:	1823883a 	mov	r17,r3
 800affc:	4080202c 	andhi	r2,r8,128
 800b000:	10005926 	beq	r2,zero,800b168 <__adddf3+0x20c>
 800b004:	84000044 	addi	r16,r16,1
 800b008:	0081ffc4 	movi	r2,2047
 800b00c:	8080ba26 	beq	r16,r2,800b2f8 <__adddf3+0x39c>
 800b010:	00bfe034 	movhi	r2,65408
 800b014:	10bfffc4 	addi	r2,r2,-1
 800b018:	4090703a 	and	r8,r8,r2
 800b01c:	4004977a 	slli	r2,r8,29
 800b020:	4010927a 	slli	r8,r8,9
 800b024:	8822d0fa 	srli	r17,r17,3
 800b028:	8401ffcc 	andi	r16,r16,2047
 800b02c:	4010d33a 	srli	r8,r8,12
 800b030:	9007883a 	mov	r3,r18
 800b034:	1444b03a 	or	r2,r2,r17
 800b038:	8401ffcc 	andi	r16,r16,2047
 800b03c:	8020953a 	slli	r16,r16,20
 800b040:	18c03fcc 	andi	r3,r3,255
 800b044:	01000434 	movhi	r4,16
 800b048:	213fffc4 	addi	r4,r4,-1
 800b04c:	180697fa 	slli	r3,r3,31
 800b050:	4110703a 	and	r8,r8,r4
 800b054:	4410b03a 	or	r8,r8,r16
 800b058:	40c6b03a 	or	r3,r8,r3
 800b05c:	dfc00417 	ldw	ra,16(sp)
 800b060:	dcc00317 	ldw	r19,12(sp)
 800b064:	dc800217 	ldw	r18,8(sp)
 800b068:	dc400117 	ldw	r17,4(sp)
 800b06c:	dc000017 	ldw	r16,0(sp)
 800b070:	dec00504 	addi	sp,sp,20
 800b074:	f800283a 	ret
 800b078:	0081ffc4 	movi	r2,2047
 800b07c:	80bfd626 	beq	r16,r2,800afd8 <__alt_data_end+0xfc00afd8>
 800b080:	4a402034 	orhi	r9,r9,128
 800b084:	00800e04 	movi	r2,56
 800b088:	10c09f16 	blt	r2,r3,800b308 <__adddf3+0x3ac>
 800b08c:	008007c4 	movi	r2,31
 800b090:	10c0c216 	blt	r2,r3,800b39c <__adddf3+0x440>
 800b094:	00800804 	movi	r2,32
 800b098:	10c5c83a 	sub	r2,r2,r3
 800b09c:	488a983a 	sll	r5,r9,r2
 800b0a0:	30c8d83a 	srl	r4,r6,r3
 800b0a4:	3084983a 	sll	r2,r6,r2
 800b0a8:	48c6d83a 	srl	r3,r9,r3
 800b0ac:	290cb03a 	or	r6,r5,r4
 800b0b0:	1004c03a 	cmpne	r2,r2,zero
 800b0b4:	308cb03a 	or	r6,r6,r2
 800b0b8:	898dc83a 	sub	r6,r17,r6
 800b0bc:	89a3803a 	cmpltu	r17,r17,r6
 800b0c0:	40d1c83a 	sub	r8,r8,r3
 800b0c4:	4451c83a 	sub	r8,r8,r17
 800b0c8:	3023883a 	mov	r17,r6
 800b0cc:	4080202c 	andhi	r2,r8,128
 800b0d0:	10002326 	beq	r2,zero,800b160 <__adddf3+0x204>
 800b0d4:	04c02034 	movhi	r19,128
 800b0d8:	9cffffc4 	addi	r19,r19,-1
 800b0dc:	44e6703a 	and	r19,r8,r19
 800b0e0:	98007626 	beq	r19,zero,800b2bc <__adddf3+0x360>
 800b0e4:	9809883a 	mov	r4,r19
 800b0e8:	800d79c0 	call	800d79c <__clzsi2>
 800b0ec:	10fffe04 	addi	r3,r2,-8
 800b0f0:	010007c4 	movi	r4,31
 800b0f4:	20c07716 	blt	r4,r3,800b2d4 <__adddf3+0x378>
 800b0f8:	00800804 	movi	r2,32
 800b0fc:	10c5c83a 	sub	r2,r2,r3
 800b100:	8884d83a 	srl	r2,r17,r2
 800b104:	98d0983a 	sll	r8,r19,r3
 800b108:	88e2983a 	sll	r17,r17,r3
 800b10c:	1204b03a 	or	r2,r2,r8
 800b110:	1c007416 	blt	r3,r16,800b2e4 <__adddf3+0x388>
 800b114:	1c21c83a 	sub	r16,r3,r16
 800b118:	82000044 	addi	r8,r16,1
 800b11c:	00c007c4 	movi	r3,31
 800b120:	1a009116 	blt	r3,r8,800b368 <__adddf3+0x40c>
 800b124:	00c00804 	movi	r3,32
 800b128:	1a07c83a 	sub	r3,r3,r8
 800b12c:	8a08d83a 	srl	r4,r17,r8
 800b130:	88e2983a 	sll	r17,r17,r3
 800b134:	10c6983a 	sll	r3,r2,r3
 800b138:	1210d83a 	srl	r8,r2,r8
 800b13c:	8804c03a 	cmpne	r2,r17,zero
 800b140:	1906b03a 	or	r3,r3,r4
 800b144:	18a2b03a 	or	r17,r3,r2
 800b148:	0021883a 	mov	r16,zero
 800b14c:	003fa206 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b150:	1890b03a 	or	r8,r3,r2
 800b154:	40017d26 	beq	r8,zero,800b74c <__adddf3+0x7f0>
 800b158:	1011883a 	mov	r8,r2
 800b15c:	1823883a 	mov	r17,r3
 800b160:	888001cc 	andi	r2,r17,7
 800b164:	103f9e1e 	bne	r2,zero,800afe0 <__alt_data_end+0xfc00afe0>
 800b168:	4004977a 	slli	r2,r8,29
 800b16c:	8822d0fa 	srli	r17,r17,3
 800b170:	4010d0fa 	srli	r8,r8,3
 800b174:	9007883a 	mov	r3,r18
 800b178:	1444b03a 	or	r2,r2,r17
 800b17c:	0101ffc4 	movi	r4,2047
 800b180:	81002426 	beq	r16,r4,800b214 <__adddf3+0x2b8>
 800b184:	8120703a 	and	r16,r16,r4
 800b188:	01000434 	movhi	r4,16
 800b18c:	213fffc4 	addi	r4,r4,-1
 800b190:	4110703a 	and	r8,r8,r4
 800b194:	003fa806 	br	800b038 <__alt_data_end+0xfc00b038>
 800b198:	8089c83a 	sub	r4,r16,r2
 800b19c:	01005e0e 	bge	zero,r4,800b318 <__adddf3+0x3bc>
 800b1a0:	10002b26 	beq	r2,zero,800b250 <__adddf3+0x2f4>
 800b1a4:	0081ffc4 	movi	r2,2047
 800b1a8:	80bf8b26 	beq	r16,r2,800afd8 <__alt_data_end+0xfc00afd8>
 800b1ac:	4a402034 	orhi	r9,r9,128
 800b1b0:	00800e04 	movi	r2,56
 800b1b4:	1100a40e 	bge	r2,r4,800b448 <__adddf3+0x4ec>
 800b1b8:	498cb03a 	or	r6,r9,r6
 800b1bc:	300ac03a 	cmpne	r5,r6,zero
 800b1c0:	0013883a 	mov	r9,zero
 800b1c4:	2c4b883a 	add	r5,r5,r17
 800b1c8:	2c63803a 	cmpltu	r17,r5,r17
 800b1cc:	4a11883a 	add	r8,r9,r8
 800b1d0:	8a11883a 	add	r8,r17,r8
 800b1d4:	2823883a 	mov	r17,r5
 800b1d8:	4080202c 	andhi	r2,r8,128
 800b1dc:	103fe026 	beq	r2,zero,800b160 <__alt_data_end+0xfc00b160>
 800b1e0:	84000044 	addi	r16,r16,1
 800b1e4:	0081ffc4 	movi	r2,2047
 800b1e8:	8080d226 	beq	r16,r2,800b534 <__adddf3+0x5d8>
 800b1ec:	00bfe034 	movhi	r2,65408
 800b1f0:	10bfffc4 	addi	r2,r2,-1
 800b1f4:	4090703a 	and	r8,r8,r2
 800b1f8:	880ad07a 	srli	r5,r17,1
 800b1fc:	400897fa 	slli	r4,r8,31
 800b200:	88c0004c 	andi	r3,r17,1
 800b204:	28e2b03a 	or	r17,r5,r3
 800b208:	4010d07a 	srli	r8,r8,1
 800b20c:	2462b03a 	or	r17,r4,r17
 800b210:	003f7106 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b214:	4088b03a 	or	r4,r8,r2
 800b218:	20014526 	beq	r4,zero,800b730 <__adddf3+0x7d4>
 800b21c:	01000434 	movhi	r4,16
 800b220:	42000234 	orhi	r8,r8,8
 800b224:	213fffc4 	addi	r4,r4,-1
 800b228:	4110703a 	and	r8,r8,r4
 800b22c:	003f8206 	br	800b038 <__alt_data_end+0xfc00b038>
 800b230:	18ffffc4 	addi	r3,r3,-1
 800b234:	1800491e 	bne	r3,zero,800b35c <__adddf3+0x400>
 800b238:	898bc83a 	sub	r5,r17,r6
 800b23c:	8963803a 	cmpltu	r17,r17,r5
 800b240:	4251c83a 	sub	r8,r8,r9
 800b244:	4451c83a 	sub	r8,r8,r17
 800b248:	2823883a 	mov	r17,r5
 800b24c:	003f9f06 	br	800b0cc <__alt_data_end+0xfc00b0cc>
 800b250:	4984b03a 	or	r2,r9,r6
 800b254:	103f6026 	beq	r2,zero,800afd8 <__alt_data_end+0xfc00afd8>
 800b258:	213fffc4 	addi	r4,r4,-1
 800b25c:	2000931e 	bne	r4,zero,800b4ac <__adddf3+0x550>
 800b260:	898d883a 	add	r6,r17,r6
 800b264:	3463803a 	cmpltu	r17,r6,r17
 800b268:	4251883a 	add	r8,r8,r9
 800b26c:	8a11883a 	add	r8,r17,r8
 800b270:	3023883a 	mov	r17,r6
 800b274:	003fd806 	br	800b1d8 <__alt_data_end+0xfc00b1d8>
 800b278:	1800541e 	bne	r3,zero,800b3cc <__adddf3+0x470>
 800b27c:	80800044 	addi	r2,r16,1
 800b280:	1081ffcc 	andi	r2,r2,2047
 800b284:	00c00044 	movi	r3,1
 800b288:	1880a00e 	bge	r3,r2,800b50c <__adddf3+0x5b0>
 800b28c:	8989c83a 	sub	r4,r17,r6
 800b290:	8905803a 	cmpltu	r2,r17,r4
 800b294:	4267c83a 	sub	r19,r8,r9
 800b298:	98a7c83a 	sub	r19,r19,r2
 800b29c:	9880202c 	andhi	r2,r19,128
 800b2a0:	10006326 	beq	r2,zero,800b430 <__adddf3+0x4d4>
 800b2a4:	3463c83a 	sub	r17,r6,r17
 800b2a8:	4a07c83a 	sub	r3,r9,r8
 800b2ac:	344d803a 	cmpltu	r6,r6,r17
 800b2b0:	19a7c83a 	sub	r19,r3,r6
 800b2b4:	3825883a 	mov	r18,r7
 800b2b8:	983f8a1e 	bne	r19,zero,800b0e4 <__alt_data_end+0xfc00b0e4>
 800b2bc:	8809883a 	mov	r4,r17
 800b2c0:	800d79c0 	call	800d79c <__clzsi2>
 800b2c4:	10800804 	addi	r2,r2,32
 800b2c8:	10fffe04 	addi	r3,r2,-8
 800b2cc:	010007c4 	movi	r4,31
 800b2d0:	20ff890e 	bge	r4,r3,800b0f8 <__alt_data_end+0xfc00b0f8>
 800b2d4:	10bff604 	addi	r2,r2,-40
 800b2d8:	8884983a 	sll	r2,r17,r2
 800b2dc:	0023883a 	mov	r17,zero
 800b2e0:	1c3f8c0e 	bge	r3,r16,800b114 <__alt_data_end+0xfc00b114>
 800b2e4:	023fe034 	movhi	r8,65408
 800b2e8:	423fffc4 	addi	r8,r8,-1
 800b2ec:	80e1c83a 	sub	r16,r16,r3
 800b2f0:	1210703a 	and	r8,r2,r8
 800b2f4:	003f3806 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b2f8:	9007883a 	mov	r3,r18
 800b2fc:	0011883a 	mov	r8,zero
 800b300:	0005883a 	mov	r2,zero
 800b304:	003f4c06 	br	800b038 <__alt_data_end+0xfc00b038>
 800b308:	498cb03a 	or	r6,r9,r6
 800b30c:	300cc03a 	cmpne	r6,r6,zero
 800b310:	0007883a 	mov	r3,zero
 800b314:	003f6806 	br	800b0b8 <__alt_data_end+0xfc00b0b8>
 800b318:	20009c1e 	bne	r4,zero,800b58c <__adddf3+0x630>
 800b31c:	80800044 	addi	r2,r16,1
 800b320:	1141ffcc 	andi	r5,r2,2047
 800b324:	01000044 	movi	r4,1
 800b328:	2140670e 	bge	r4,r5,800b4c8 <__adddf3+0x56c>
 800b32c:	0101ffc4 	movi	r4,2047
 800b330:	11007f26 	beq	r2,r4,800b530 <__adddf3+0x5d4>
 800b334:	898d883a 	add	r6,r17,r6
 800b338:	4247883a 	add	r3,r8,r9
 800b33c:	3451803a 	cmpltu	r8,r6,r17
 800b340:	40d1883a 	add	r8,r8,r3
 800b344:	402297fa 	slli	r17,r8,31
 800b348:	300cd07a 	srli	r6,r6,1
 800b34c:	4010d07a 	srli	r8,r8,1
 800b350:	1021883a 	mov	r16,r2
 800b354:	89a2b03a 	or	r17,r17,r6
 800b358:	003f1f06 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b35c:	0081ffc4 	movi	r2,2047
 800b360:	80bf481e 	bne	r16,r2,800b084 <__alt_data_end+0xfc00b084>
 800b364:	003f1c06 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b368:	843ff844 	addi	r16,r16,-31
 800b36c:	01000804 	movi	r4,32
 800b370:	1406d83a 	srl	r3,r2,r16
 800b374:	41005026 	beq	r8,r4,800b4b8 <__adddf3+0x55c>
 800b378:	01001004 	movi	r4,64
 800b37c:	2211c83a 	sub	r8,r4,r8
 800b380:	1204983a 	sll	r2,r2,r8
 800b384:	88a2b03a 	or	r17,r17,r2
 800b388:	8822c03a 	cmpne	r17,r17,zero
 800b38c:	1c62b03a 	or	r17,r3,r17
 800b390:	0011883a 	mov	r8,zero
 800b394:	0021883a 	mov	r16,zero
 800b398:	003f7106 	br	800b160 <__alt_data_end+0xfc00b160>
 800b39c:	193ff804 	addi	r4,r3,-32
 800b3a0:	00800804 	movi	r2,32
 800b3a4:	4908d83a 	srl	r4,r9,r4
 800b3a8:	18804526 	beq	r3,r2,800b4c0 <__adddf3+0x564>
 800b3ac:	00801004 	movi	r2,64
 800b3b0:	10c5c83a 	sub	r2,r2,r3
 800b3b4:	4886983a 	sll	r3,r9,r2
 800b3b8:	198cb03a 	or	r6,r3,r6
 800b3bc:	300cc03a 	cmpne	r6,r6,zero
 800b3c0:	218cb03a 	or	r6,r4,r6
 800b3c4:	0007883a 	mov	r3,zero
 800b3c8:	003f3b06 	br	800b0b8 <__alt_data_end+0xfc00b0b8>
 800b3cc:	80002a26 	beq	r16,zero,800b478 <__adddf3+0x51c>
 800b3d0:	0101ffc4 	movi	r4,2047
 800b3d4:	11006826 	beq	r2,r4,800b578 <__adddf3+0x61c>
 800b3d8:	00c7c83a 	sub	r3,zero,r3
 800b3dc:	42002034 	orhi	r8,r8,128
 800b3e0:	01000e04 	movi	r4,56
 800b3e4:	20c07c16 	blt	r4,r3,800b5d8 <__adddf3+0x67c>
 800b3e8:	010007c4 	movi	r4,31
 800b3ec:	20c0da16 	blt	r4,r3,800b758 <__adddf3+0x7fc>
 800b3f0:	01000804 	movi	r4,32
 800b3f4:	20c9c83a 	sub	r4,r4,r3
 800b3f8:	4114983a 	sll	r10,r8,r4
 800b3fc:	88cad83a 	srl	r5,r17,r3
 800b400:	8908983a 	sll	r4,r17,r4
 800b404:	40c6d83a 	srl	r3,r8,r3
 800b408:	5162b03a 	or	r17,r10,r5
 800b40c:	2008c03a 	cmpne	r4,r4,zero
 800b410:	8922b03a 	or	r17,r17,r4
 800b414:	3463c83a 	sub	r17,r6,r17
 800b418:	48c7c83a 	sub	r3,r9,r3
 800b41c:	344d803a 	cmpltu	r6,r6,r17
 800b420:	1991c83a 	sub	r8,r3,r6
 800b424:	1021883a 	mov	r16,r2
 800b428:	3825883a 	mov	r18,r7
 800b42c:	003f2706 	br	800b0cc <__alt_data_end+0xfc00b0cc>
 800b430:	24d0b03a 	or	r8,r4,r19
 800b434:	40001b1e 	bne	r8,zero,800b4a4 <__adddf3+0x548>
 800b438:	0005883a 	mov	r2,zero
 800b43c:	0007883a 	mov	r3,zero
 800b440:	0021883a 	mov	r16,zero
 800b444:	003f4d06 	br	800b17c <__alt_data_end+0xfc00b17c>
 800b448:	008007c4 	movi	r2,31
 800b44c:	11003c16 	blt	r2,r4,800b540 <__adddf3+0x5e4>
 800b450:	00800804 	movi	r2,32
 800b454:	1105c83a 	sub	r2,r2,r4
 800b458:	488e983a 	sll	r7,r9,r2
 800b45c:	310ad83a 	srl	r5,r6,r4
 800b460:	3084983a 	sll	r2,r6,r2
 800b464:	4912d83a 	srl	r9,r9,r4
 800b468:	394ab03a 	or	r5,r7,r5
 800b46c:	1004c03a 	cmpne	r2,r2,zero
 800b470:	288ab03a 	or	r5,r5,r2
 800b474:	003f5306 	br	800b1c4 <__alt_data_end+0xfc00b1c4>
 800b478:	4448b03a 	or	r4,r8,r17
 800b47c:	20003e26 	beq	r4,zero,800b578 <__adddf3+0x61c>
 800b480:	00c6303a 	nor	r3,zero,r3
 800b484:	18003a1e 	bne	r3,zero,800b570 <__adddf3+0x614>
 800b488:	3463c83a 	sub	r17,r6,r17
 800b48c:	4a07c83a 	sub	r3,r9,r8
 800b490:	344d803a 	cmpltu	r6,r6,r17
 800b494:	1991c83a 	sub	r8,r3,r6
 800b498:	1021883a 	mov	r16,r2
 800b49c:	3825883a 	mov	r18,r7
 800b4a0:	003f0a06 	br	800b0cc <__alt_data_end+0xfc00b0cc>
 800b4a4:	2023883a 	mov	r17,r4
 800b4a8:	003f0d06 	br	800b0e0 <__alt_data_end+0xfc00b0e0>
 800b4ac:	0081ffc4 	movi	r2,2047
 800b4b0:	80bf3f1e 	bne	r16,r2,800b1b0 <__alt_data_end+0xfc00b1b0>
 800b4b4:	003ec806 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b4b8:	0005883a 	mov	r2,zero
 800b4bc:	003fb106 	br	800b384 <__alt_data_end+0xfc00b384>
 800b4c0:	0007883a 	mov	r3,zero
 800b4c4:	003fbc06 	br	800b3b8 <__alt_data_end+0xfc00b3b8>
 800b4c8:	4444b03a 	or	r2,r8,r17
 800b4cc:	8000871e 	bne	r16,zero,800b6ec <__adddf3+0x790>
 800b4d0:	1000ba26 	beq	r2,zero,800b7bc <__adddf3+0x860>
 800b4d4:	4984b03a 	or	r2,r9,r6
 800b4d8:	103ebf26 	beq	r2,zero,800afd8 <__alt_data_end+0xfc00afd8>
 800b4dc:	8985883a 	add	r2,r17,r6
 800b4e0:	4247883a 	add	r3,r8,r9
 800b4e4:	1451803a 	cmpltu	r8,r2,r17
 800b4e8:	40d1883a 	add	r8,r8,r3
 800b4ec:	40c0202c 	andhi	r3,r8,128
 800b4f0:	1023883a 	mov	r17,r2
 800b4f4:	183f1a26 	beq	r3,zero,800b160 <__alt_data_end+0xfc00b160>
 800b4f8:	00bfe034 	movhi	r2,65408
 800b4fc:	10bfffc4 	addi	r2,r2,-1
 800b500:	2021883a 	mov	r16,r4
 800b504:	4090703a 	and	r8,r8,r2
 800b508:	003eb306 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b50c:	4444b03a 	or	r2,r8,r17
 800b510:	8000291e 	bne	r16,zero,800b5b8 <__adddf3+0x65c>
 800b514:	10004b1e 	bne	r2,zero,800b644 <__adddf3+0x6e8>
 800b518:	4990b03a 	or	r8,r9,r6
 800b51c:	40008b26 	beq	r8,zero,800b74c <__adddf3+0x7f0>
 800b520:	4811883a 	mov	r8,r9
 800b524:	3023883a 	mov	r17,r6
 800b528:	3825883a 	mov	r18,r7
 800b52c:	003eaa06 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b530:	1021883a 	mov	r16,r2
 800b534:	0011883a 	mov	r8,zero
 800b538:	0005883a 	mov	r2,zero
 800b53c:	003f0f06 	br	800b17c <__alt_data_end+0xfc00b17c>
 800b540:	217ff804 	addi	r5,r4,-32
 800b544:	00800804 	movi	r2,32
 800b548:	494ad83a 	srl	r5,r9,r5
 800b54c:	20807d26 	beq	r4,r2,800b744 <__adddf3+0x7e8>
 800b550:	00801004 	movi	r2,64
 800b554:	1109c83a 	sub	r4,r2,r4
 800b558:	4912983a 	sll	r9,r9,r4
 800b55c:	498cb03a 	or	r6,r9,r6
 800b560:	300cc03a 	cmpne	r6,r6,zero
 800b564:	298ab03a 	or	r5,r5,r6
 800b568:	0013883a 	mov	r9,zero
 800b56c:	003f1506 	br	800b1c4 <__alt_data_end+0xfc00b1c4>
 800b570:	0101ffc4 	movi	r4,2047
 800b574:	113f9a1e 	bne	r2,r4,800b3e0 <__alt_data_end+0xfc00b3e0>
 800b578:	4811883a 	mov	r8,r9
 800b57c:	3023883a 	mov	r17,r6
 800b580:	1021883a 	mov	r16,r2
 800b584:	3825883a 	mov	r18,r7
 800b588:	003e9306 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b58c:	8000161e 	bne	r16,zero,800b5e8 <__adddf3+0x68c>
 800b590:	444ab03a 	or	r5,r8,r17
 800b594:	28005126 	beq	r5,zero,800b6dc <__adddf3+0x780>
 800b598:	0108303a 	nor	r4,zero,r4
 800b59c:	20004d1e 	bne	r4,zero,800b6d4 <__adddf3+0x778>
 800b5a0:	89a3883a 	add	r17,r17,r6
 800b5a4:	4253883a 	add	r9,r8,r9
 800b5a8:	898d803a 	cmpltu	r6,r17,r6
 800b5ac:	3251883a 	add	r8,r6,r9
 800b5b0:	1021883a 	mov	r16,r2
 800b5b4:	003f0806 	br	800b1d8 <__alt_data_end+0xfc00b1d8>
 800b5b8:	1000301e 	bne	r2,zero,800b67c <__adddf3+0x720>
 800b5bc:	4984b03a 	or	r2,r9,r6
 800b5c0:	10007126 	beq	r2,zero,800b788 <__adddf3+0x82c>
 800b5c4:	4811883a 	mov	r8,r9
 800b5c8:	3023883a 	mov	r17,r6
 800b5cc:	3825883a 	mov	r18,r7
 800b5d0:	0401ffc4 	movi	r16,2047
 800b5d4:	003e8006 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b5d8:	4462b03a 	or	r17,r8,r17
 800b5dc:	8822c03a 	cmpne	r17,r17,zero
 800b5e0:	0007883a 	mov	r3,zero
 800b5e4:	003f8b06 	br	800b414 <__alt_data_end+0xfc00b414>
 800b5e8:	0141ffc4 	movi	r5,2047
 800b5ec:	11403b26 	beq	r2,r5,800b6dc <__adddf3+0x780>
 800b5f0:	0109c83a 	sub	r4,zero,r4
 800b5f4:	42002034 	orhi	r8,r8,128
 800b5f8:	01400e04 	movi	r5,56
 800b5fc:	29006716 	blt	r5,r4,800b79c <__adddf3+0x840>
 800b600:	014007c4 	movi	r5,31
 800b604:	29007016 	blt	r5,r4,800b7c8 <__adddf3+0x86c>
 800b608:	01400804 	movi	r5,32
 800b60c:	290bc83a 	sub	r5,r5,r4
 800b610:	4154983a 	sll	r10,r8,r5
 800b614:	890ed83a 	srl	r7,r17,r4
 800b618:	894a983a 	sll	r5,r17,r5
 800b61c:	4108d83a 	srl	r4,r8,r4
 800b620:	51e2b03a 	or	r17,r10,r7
 800b624:	280ac03a 	cmpne	r5,r5,zero
 800b628:	8962b03a 	or	r17,r17,r5
 800b62c:	89a3883a 	add	r17,r17,r6
 800b630:	2253883a 	add	r9,r4,r9
 800b634:	898d803a 	cmpltu	r6,r17,r6
 800b638:	3251883a 	add	r8,r6,r9
 800b63c:	1021883a 	mov	r16,r2
 800b640:	003ee506 	br	800b1d8 <__alt_data_end+0xfc00b1d8>
 800b644:	4984b03a 	or	r2,r9,r6
 800b648:	103e6326 	beq	r2,zero,800afd8 <__alt_data_end+0xfc00afd8>
 800b64c:	8987c83a 	sub	r3,r17,r6
 800b650:	88c9803a 	cmpltu	r4,r17,r3
 800b654:	4245c83a 	sub	r2,r8,r9
 800b658:	1105c83a 	sub	r2,r2,r4
 800b65c:	1100202c 	andhi	r4,r2,128
 800b660:	203ebb26 	beq	r4,zero,800b150 <__alt_data_end+0xfc00b150>
 800b664:	3463c83a 	sub	r17,r6,r17
 800b668:	4a07c83a 	sub	r3,r9,r8
 800b66c:	344d803a 	cmpltu	r6,r6,r17
 800b670:	1991c83a 	sub	r8,r3,r6
 800b674:	3825883a 	mov	r18,r7
 800b678:	003e5706 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b67c:	4984b03a 	or	r2,r9,r6
 800b680:	10002e26 	beq	r2,zero,800b73c <__adddf3+0x7e0>
 800b684:	4004d0fa 	srli	r2,r8,3
 800b688:	8822d0fa 	srli	r17,r17,3
 800b68c:	4010977a 	slli	r8,r8,29
 800b690:	10c0022c 	andhi	r3,r2,8
 800b694:	4462b03a 	or	r17,r8,r17
 800b698:	18000826 	beq	r3,zero,800b6bc <__adddf3+0x760>
 800b69c:	4808d0fa 	srli	r4,r9,3
 800b6a0:	20c0022c 	andhi	r3,r4,8
 800b6a4:	1800051e 	bne	r3,zero,800b6bc <__adddf3+0x760>
 800b6a8:	300cd0fa 	srli	r6,r6,3
 800b6ac:	4806977a 	slli	r3,r9,29
 800b6b0:	2005883a 	mov	r2,r4
 800b6b4:	3825883a 	mov	r18,r7
 800b6b8:	19a2b03a 	or	r17,r3,r6
 800b6bc:	8810d77a 	srli	r8,r17,29
 800b6c0:	100490fa 	slli	r2,r2,3
 800b6c4:	882290fa 	slli	r17,r17,3
 800b6c8:	0401ffc4 	movi	r16,2047
 800b6cc:	4090b03a 	or	r8,r8,r2
 800b6d0:	003e4106 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b6d4:	0141ffc4 	movi	r5,2047
 800b6d8:	117fc71e 	bne	r2,r5,800b5f8 <__alt_data_end+0xfc00b5f8>
 800b6dc:	4811883a 	mov	r8,r9
 800b6e0:	3023883a 	mov	r17,r6
 800b6e4:	1021883a 	mov	r16,r2
 800b6e8:	003e3b06 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b6ec:	10002f26 	beq	r2,zero,800b7ac <__adddf3+0x850>
 800b6f0:	4984b03a 	or	r2,r9,r6
 800b6f4:	10001126 	beq	r2,zero,800b73c <__adddf3+0x7e0>
 800b6f8:	4004d0fa 	srli	r2,r8,3
 800b6fc:	8822d0fa 	srli	r17,r17,3
 800b700:	4010977a 	slli	r8,r8,29
 800b704:	10c0022c 	andhi	r3,r2,8
 800b708:	4462b03a 	or	r17,r8,r17
 800b70c:	183feb26 	beq	r3,zero,800b6bc <__alt_data_end+0xfc00b6bc>
 800b710:	4808d0fa 	srli	r4,r9,3
 800b714:	20c0022c 	andhi	r3,r4,8
 800b718:	183fe81e 	bne	r3,zero,800b6bc <__alt_data_end+0xfc00b6bc>
 800b71c:	300cd0fa 	srli	r6,r6,3
 800b720:	4806977a 	slli	r3,r9,29
 800b724:	2005883a 	mov	r2,r4
 800b728:	19a2b03a 	or	r17,r3,r6
 800b72c:	003fe306 	br	800b6bc <__alt_data_end+0xfc00b6bc>
 800b730:	0011883a 	mov	r8,zero
 800b734:	0005883a 	mov	r2,zero
 800b738:	003e3f06 	br	800b038 <__alt_data_end+0xfc00b038>
 800b73c:	0401ffc4 	movi	r16,2047
 800b740:	003e2506 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b744:	0013883a 	mov	r9,zero
 800b748:	003f8406 	br	800b55c <__alt_data_end+0xfc00b55c>
 800b74c:	0005883a 	mov	r2,zero
 800b750:	0007883a 	mov	r3,zero
 800b754:	003e8906 	br	800b17c <__alt_data_end+0xfc00b17c>
 800b758:	197ff804 	addi	r5,r3,-32
 800b75c:	01000804 	movi	r4,32
 800b760:	414ad83a 	srl	r5,r8,r5
 800b764:	19002426 	beq	r3,r4,800b7f8 <__adddf3+0x89c>
 800b768:	01001004 	movi	r4,64
 800b76c:	20c7c83a 	sub	r3,r4,r3
 800b770:	40c6983a 	sll	r3,r8,r3
 800b774:	1c46b03a 	or	r3,r3,r17
 800b778:	1806c03a 	cmpne	r3,r3,zero
 800b77c:	28e2b03a 	or	r17,r5,r3
 800b780:	0007883a 	mov	r3,zero
 800b784:	003f2306 	br	800b414 <__alt_data_end+0xfc00b414>
 800b788:	0007883a 	mov	r3,zero
 800b78c:	5811883a 	mov	r8,r11
 800b790:	00bfffc4 	movi	r2,-1
 800b794:	0401ffc4 	movi	r16,2047
 800b798:	003e7806 	br	800b17c <__alt_data_end+0xfc00b17c>
 800b79c:	4462b03a 	or	r17,r8,r17
 800b7a0:	8822c03a 	cmpne	r17,r17,zero
 800b7a4:	0009883a 	mov	r4,zero
 800b7a8:	003fa006 	br	800b62c <__alt_data_end+0xfc00b62c>
 800b7ac:	4811883a 	mov	r8,r9
 800b7b0:	3023883a 	mov	r17,r6
 800b7b4:	0401ffc4 	movi	r16,2047
 800b7b8:	003e0706 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b7bc:	4811883a 	mov	r8,r9
 800b7c0:	3023883a 	mov	r17,r6
 800b7c4:	003e0406 	br	800afd8 <__alt_data_end+0xfc00afd8>
 800b7c8:	21fff804 	addi	r7,r4,-32
 800b7cc:	01400804 	movi	r5,32
 800b7d0:	41ced83a 	srl	r7,r8,r7
 800b7d4:	21400a26 	beq	r4,r5,800b800 <__adddf3+0x8a4>
 800b7d8:	01401004 	movi	r5,64
 800b7dc:	2909c83a 	sub	r4,r5,r4
 800b7e0:	4108983a 	sll	r4,r8,r4
 800b7e4:	2448b03a 	or	r4,r4,r17
 800b7e8:	2008c03a 	cmpne	r4,r4,zero
 800b7ec:	3922b03a 	or	r17,r7,r4
 800b7f0:	0009883a 	mov	r4,zero
 800b7f4:	003f8d06 	br	800b62c <__alt_data_end+0xfc00b62c>
 800b7f8:	0007883a 	mov	r3,zero
 800b7fc:	003fdd06 	br	800b774 <__alt_data_end+0xfc00b774>
 800b800:	0009883a 	mov	r4,zero
 800b804:	003ff706 	br	800b7e4 <__alt_data_end+0xfc00b7e4>

0800b808 <__divdf3>:
 800b808:	defff004 	addi	sp,sp,-64
 800b80c:	dc800815 	stw	r18,32(sp)
 800b810:	2824d53a 	srli	r18,r5,20
 800b814:	dd800c15 	stw	r22,48(sp)
 800b818:	282cd7fa 	srli	r22,r5,31
 800b81c:	dc000615 	stw	r16,24(sp)
 800b820:	04000434 	movhi	r16,16
 800b824:	843fffc4 	addi	r16,r16,-1
 800b828:	dfc00f15 	stw	ra,60(sp)
 800b82c:	df000e15 	stw	fp,56(sp)
 800b830:	ddc00d15 	stw	r23,52(sp)
 800b834:	dd400b15 	stw	r21,44(sp)
 800b838:	dd000a15 	stw	r20,40(sp)
 800b83c:	dcc00915 	stw	r19,36(sp)
 800b840:	dc400715 	stw	r17,28(sp)
 800b844:	9481ffcc 	andi	r18,r18,2047
 800b848:	2c20703a 	and	r16,r5,r16
 800b84c:	b2003fcc 	andi	r8,r22,255
 800b850:	90006126 	beq	r18,zero,800b9d8 <__divdf3+0x1d0>
 800b854:	0081ffc4 	movi	r2,2047
 800b858:	202b883a 	mov	r21,r4
 800b85c:	90803726 	beq	r18,r2,800b93c <__divdf3+0x134>
 800b860:	80800434 	orhi	r2,r16,16
 800b864:	100490fa 	slli	r2,r2,3
 800b868:	2020d77a 	srli	r16,r4,29
 800b86c:	202a90fa 	slli	r21,r4,3
 800b870:	94bf0044 	addi	r18,r18,-1023
 800b874:	80a0b03a 	or	r16,r16,r2
 800b878:	0013883a 	mov	r9,zero
 800b87c:	000b883a 	mov	r5,zero
 800b880:	3806d53a 	srli	r3,r7,20
 800b884:	382ed7fa 	srli	r23,r7,31
 800b888:	04400434 	movhi	r17,16
 800b88c:	8c7fffc4 	addi	r17,r17,-1
 800b890:	18c1ffcc 	andi	r3,r3,2047
 800b894:	3029883a 	mov	r20,r6
 800b898:	3c62703a 	and	r17,r7,r17
 800b89c:	bf003fcc 	andi	fp,r23,255
 800b8a0:	18006e26 	beq	r3,zero,800ba5c <__divdf3+0x254>
 800b8a4:	0081ffc4 	movi	r2,2047
 800b8a8:	18806626 	beq	r3,r2,800ba44 <__divdf3+0x23c>
 800b8ac:	88800434 	orhi	r2,r17,16
 800b8b0:	100490fa 	slli	r2,r2,3
 800b8b4:	3022d77a 	srli	r17,r6,29
 800b8b8:	302890fa 	slli	r20,r6,3
 800b8bc:	18ff0044 	addi	r3,r3,-1023
 800b8c0:	88a2b03a 	or	r17,r17,r2
 800b8c4:	000f883a 	mov	r7,zero
 800b8c8:	b5e6f03a 	xor	r19,r22,r23
 800b8cc:	3a4cb03a 	or	r6,r7,r9
 800b8d0:	008003c4 	movi	r2,15
 800b8d4:	9809883a 	mov	r4,r19
 800b8d8:	90c7c83a 	sub	r3,r18,r3
 800b8dc:	9cc03fcc 	andi	r19,r19,255
 800b8e0:	11809636 	bltu	r2,r6,800bb3c <__divdf3+0x334>
 800b8e4:	300c90ba 	slli	r6,r6,2
 800b8e8:	00820074 	movhi	r2,2049
 800b8ec:	10ae3f04 	addi	r2,r2,-18180
 800b8f0:	308d883a 	add	r6,r6,r2
 800b8f4:	30800017 	ldw	r2,0(r6)
 800b8f8:	1000683a 	jmp	r2
 800b8fc:	0800bb3c 	xorhi	zero,at,748
 800b900:	0800b974 	orhi	zero,at,741
 800b904:	0800bb2c 	andhi	zero,at,748
 800b908:	0800b968 	cmpgeui	zero,at,741
 800b90c:	0800bb2c 	andhi	zero,at,748
 800b910:	0800bb00 	call	800bb0 <__alt_mem_onchip_memory2_0+0x800bb0>
 800b914:	0800bb2c 	andhi	zero,at,748
 800b918:	0800b968 	cmpgeui	zero,at,741
 800b91c:	0800b974 	orhi	zero,at,741
 800b920:	0800b974 	orhi	zero,at,741
 800b924:	0800bb00 	call	800bb0 <__alt_mem_onchip_memory2_0+0x800bb0>
 800b928:	0800b968 	cmpgeui	zero,at,741
 800b92c:	0800b958 	cmpnei	zero,at,741
 800b930:	0800b958 	cmpnei	zero,at,741
 800b934:	0800b958 	cmpnei	zero,at,741
 800b938:	0800bec4 	addi	zero,at,763
 800b93c:	2404b03a 	or	r2,r4,r16
 800b940:	10006c1e 	bne	r2,zero,800baf4 <__divdf3+0x2ec>
 800b944:	02400204 	movi	r9,8
 800b948:	0021883a 	mov	r16,zero
 800b94c:	002b883a 	mov	r21,zero
 800b950:	01400084 	movi	r5,2
 800b954:	003fca06 	br	800b880 <__alt_data_end+0xfc00b880>
 800b958:	8023883a 	mov	r17,r16
 800b95c:	a829883a 	mov	r20,r21
 800b960:	4039883a 	mov	fp,r8
 800b964:	280f883a 	mov	r7,r5
 800b968:	00800084 	movi	r2,2
 800b96c:	3881601e 	bne	r7,r2,800bef0 <__divdf3+0x6e8>
 800b970:	e027883a 	mov	r19,fp
 800b974:	9900004c 	andi	r4,r19,1
 800b978:	0081ffc4 	movi	r2,2047
 800b97c:	0021883a 	mov	r16,zero
 800b980:	002b883a 	mov	r21,zero
 800b984:	1004953a 	slli	r2,r2,20
 800b988:	20c03fcc 	andi	r3,r4,255
 800b98c:	01400434 	movhi	r5,16
 800b990:	297fffc4 	addi	r5,r5,-1
 800b994:	180697fa 	slli	r3,r3,31
 800b998:	8160703a 	and	r16,r16,r5
 800b99c:	80a0b03a 	or	r16,r16,r2
 800b9a0:	80c6b03a 	or	r3,r16,r3
 800b9a4:	a805883a 	mov	r2,r21
 800b9a8:	dfc00f17 	ldw	ra,60(sp)
 800b9ac:	df000e17 	ldw	fp,56(sp)
 800b9b0:	ddc00d17 	ldw	r23,52(sp)
 800b9b4:	dd800c17 	ldw	r22,48(sp)
 800b9b8:	dd400b17 	ldw	r21,44(sp)
 800b9bc:	dd000a17 	ldw	r20,40(sp)
 800b9c0:	dcc00917 	ldw	r19,36(sp)
 800b9c4:	dc800817 	ldw	r18,32(sp)
 800b9c8:	dc400717 	ldw	r17,28(sp)
 800b9cc:	dc000617 	ldw	r16,24(sp)
 800b9d0:	dec01004 	addi	sp,sp,64
 800b9d4:	f800283a 	ret
 800b9d8:	2404b03a 	or	r2,r4,r16
 800b9dc:	2023883a 	mov	r17,r4
 800b9e0:	10003f26 	beq	r2,zero,800bae0 <__divdf3+0x2d8>
 800b9e4:	80015e26 	beq	r16,zero,800bf60 <__divdf3+0x758>
 800b9e8:	8009883a 	mov	r4,r16
 800b9ec:	d9800215 	stw	r6,8(sp)
 800b9f0:	d9c00515 	stw	r7,20(sp)
 800b9f4:	da000415 	stw	r8,16(sp)
 800b9f8:	800d79c0 	call	800d79c <__clzsi2>
 800b9fc:	d9800217 	ldw	r6,8(sp)
 800ba00:	d9c00517 	ldw	r7,20(sp)
 800ba04:	da000417 	ldw	r8,16(sp)
 800ba08:	113ffd44 	addi	r4,r2,-11
 800ba0c:	00c00704 	movi	r3,28
 800ba10:	19014f16 	blt	r3,r4,800bf50 <__divdf3+0x748>
 800ba14:	00c00744 	movi	r3,29
 800ba18:	157ffe04 	addi	r21,r2,-8
 800ba1c:	1907c83a 	sub	r3,r3,r4
 800ba20:	8560983a 	sll	r16,r16,r21
 800ba24:	88c6d83a 	srl	r3,r17,r3
 800ba28:	8d6a983a 	sll	r21,r17,r21
 800ba2c:	1c20b03a 	or	r16,r3,r16
 800ba30:	1080fcc4 	addi	r2,r2,1011
 800ba34:	00a5c83a 	sub	r18,zero,r2
 800ba38:	0013883a 	mov	r9,zero
 800ba3c:	000b883a 	mov	r5,zero
 800ba40:	003f8f06 	br	800b880 <__alt_data_end+0xfc00b880>
 800ba44:	3444b03a 	or	r2,r6,r17
 800ba48:	1000231e 	bne	r2,zero,800bad8 <__divdf3+0x2d0>
 800ba4c:	0023883a 	mov	r17,zero
 800ba50:	0029883a 	mov	r20,zero
 800ba54:	01c00084 	movi	r7,2
 800ba58:	003f9b06 	br	800b8c8 <__alt_data_end+0xfc00b8c8>
 800ba5c:	3444b03a 	or	r2,r6,r17
 800ba60:	10001926 	beq	r2,zero,800bac8 <__divdf3+0x2c0>
 800ba64:	88014b26 	beq	r17,zero,800bf94 <__divdf3+0x78c>
 800ba68:	8809883a 	mov	r4,r17
 800ba6c:	d9400115 	stw	r5,4(sp)
 800ba70:	d9800215 	stw	r6,8(sp)
 800ba74:	da000415 	stw	r8,16(sp)
 800ba78:	da400315 	stw	r9,12(sp)
 800ba7c:	800d79c0 	call	800d79c <__clzsi2>
 800ba80:	d9400117 	ldw	r5,4(sp)
 800ba84:	d9800217 	ldw	r6,8(sp)
 800ba88:	da000417 	ldw	r8,16(sp)
 800ba8c:	da400317 	ldw	r9,12(sp)
 800ba90:	113ffd44 	addi	r4,r2,-11
 800ba94:	00c00704 	movi	r3,28
 800ba98:	19013a16 	blt	r3,r4,800bf84 <__divdf3+0x77c>
 800ba9c:	00c00744 	movi	r3,29
 800baa0:	153ffe04 	addi	r20,r2,-8
 800baa4:	1907c83a 	sub	r3,r3,r4
 800baa8:	8d22983a 	sll	r17,r17,r20
 800baac:	30c6d83a 	srl	r3,r6,r3
 800bab0:	3528983a 	sll	r20,r6,r20
 800bab4:	1c62b03a 	or	r17,r3,r17
 800bab8:	1080fcc4 	addi	r2,r2,1011
 800babc:	0087c83a 	sub	r3,zero,r2
 800bac0:	000f883a 	mov	r7,zero
 800bac4:	003f8006 	br	800b8c8 <__alt_data_end+0xfc00b8c8>
 800bac8:	0023883a 	mov	r17,zero
 800bacc:	0029883a 	mov	r20,zero
 800bad0:	01c00044 	movi	r7,1
 800bad4:	003f7c06 	br	800b8c8 <__alt_data_end+0xfc00b8c8>
 800bad8:	01c000c4 	movi	r7,3
 800badc:	003f7a06 	br	800b8c8 <__alt_data_end+0xfc00b8c8>
 800bae0:	02400104 	movi	r9,4
 800bae4:	0021883a 	mov	r16,zero
 800bae8:	002b883a 	mov	r21,zero
 800baec:	01400044 	movi	r5,1
 800baf0:	003f6306 	br	800b880 <__alt_data_end+0xfc00b880>
 800baf4:	02400304 	movi	r9,12
 800baf8:	014000c4 	movi	r5,3
 800bafc:	003f6006 	br	800b880 <__alt_data_end+0xfc00b880>
 800bb00:	04000434 	movhi	r16,16
 800bb04:	0009883a 	mov	r4,zero
 800bb08:	843fffc4 	addi	r16,r16,-1
 800bb0c:	057fffc4 	movi	r21,-1
 800bb10:	0081ffc4 	movi	r2,2047
 800bb14:	003f9b06 	br	800b984 <__alt_data_end+0xfc00b984>
 800bb18:	00c00044 	movi	r3,1
 800bb1c:	1887c83a 	sub	r3,r3,r2
 800bb20:	01000e04 	movi	r4,56
 800bb24:	20c1530e 	bge	r4,r3,800c074 <__divdf3+0x86c>
 800bb28:	9900004c 	andi	r4,r19,1
 800bb2c:	0005883a 	mov	r2,zero
 800bb30:	0021883a 	mov	r16,zero
 800bb34:	002b883a 	mov	r21,zero
 800bb38:	003f9206 	br	800b984 <__alt_data_end+0xfc00b984>
 800bb3c:	8c012e36 	bltu	r17,r16,800bff8 <__divdf3+0x7f0>
 800bb40:	84412c26 	beq	r16,r17,800bff4 <__divdf3+0x7ec>
 800bb44:	a82f883a 	mov	r23,r21
 800bb48:	18ffffc4 	addi	r3,r3,-1
 800bb4c:	002b883a 	mov	r21,zero
 800bb50:	a004d63a 	srli	r2,r20,24
 800bb54:	8822923a 	slli	r17,r17,8
 800bb58:	a028923a 	slli	r20,r20,8
 800bb5c:	8009883a 	mov	r4,r16
 800bb60:	88acb03a 	or	r22,r17,r2
 800bb64:	dd000015 	stw	r20,0(sp)
 800bb68:	b028d43a 	srli	r20,r22,16
 800bb6c:	d8c00215 	stw	r3,8(sp)
 800bb70:	b4bfffcc 	andi	r18,r22,65535
 800bb74:	a00b883a 	mov	r5,r20
 800bb78:	800aea00 	call	800aea0 <__udivsi3>
 800bb7c:	100b883a 	mov	r5,r2
 800bb80:	9009883a 	mov	r4,r18
 800bb84:	1023883a 	mov	r17,r2
 800bb88:	80009940 	call	8000994 <__mulsi3>
 800bb8c:	8009883a 	mov	r4,r16
 800bb90:	a00b883a 	mov	r5,r20
 800bb94:	1039883a 	mov	fp,r2
 800bb98:	800af040 	call	800af04 <__umodsi3>
 800bb9c:	1004943a 	slli	r2,r2,16
 800bba0:	b808d43a 	srli	r4,r23,16
 800bba4:	d8c00217 	ldw	r3,8(sp)
 800bba8:	2084b03a 	or	r2,r4,r2
 800bbac:	1700062e 	bgeu	r2,fp,800bbc8 <__divdf3+0x3c0>
 800bbb0:	1585883a 	add	r2,r2,r22
 800bbb4:	893fffc4 	addi	r4,r17,-1
 800bbb8:	15811d36 	bltu	r2,r22,800c030 <__divdf3+0x828>
 800bbbc:	17011c2e 	bgeu	r2,fp,800c030 <__divdf3+0x828>
 800bbc0:	8c7fff84 	addi	r17,r17,-2
 800bbc4:	1585883a 	add	r2,r2,r22
 800bbc8:	1739c83a 	sub	fp,r2,fp
 800bbcc:	a00b883a 	mov	r5,r20
 800bbd0:	e009883a 	mov	r4,fp
 800bbd4:	d8c00215 	stw	r3,8(sp)
 800bbd8:	800aea00 	call	800aea0 <__udivsi3>
 800bbdc:	100b883a 	mov	r5,r2
 800bbe0:	9009883a 	mov	r4,r18
 800bbe4:	1021883a 	mov	r16,r2
 800bbe8:	80009940 	call	8000994 <__mulsi3>
 800bbec:	a00b883a 	mov	r5,r20
 800bbf0:	e009883a 	mov	r4,fp
 800bbf4:	d8800415 	stw	r2,16(sp)
 800bbf8:	800af040 	call	800af04 <__umodsi3>
 800bbfc:	1004943a 	slli	r2,r2,16
 800bc00:	da000417 	ldw	r8,16(sp)
 800bc04:	bdffffcc 	andi	r23,r23,65535
 800bc08:	b884b03a 	or	r2,r23,r2
 800bc0c:	d8c00217 	ldw	r3,8(sp)
 800bc10:	1200062e 	bgeu	r2,r8,800bc2c <__divdf3+0x424>
 800bc14:	1585883a 	add	r2,r2,r22
 800bc18:	813fffc4 	addi	r4,r16,-1
 800bc1c:	15810236 	bltu	r2,r22,800c028 <__divdf3+0x820>
 800bc20:	1201012e 	bgeu	r2,r8,800c028 <__divdf3+0x820>
 800bc24:	843fff84 	addi	r16,r16,-2
 800bc28:	1585883a 	add	r2,r2,r22
 800bc2c:	8822943a 	slli	r17,r17,16
 800bc30:	d9800017 	ldw	r6,0(sp)
 800bc34:	1211c83a 	sub	r8,r2,r8
 800bc38:	8c22b03a 	or	r17,r17,r16
 800bc3c:	373fffcc 	andi	fp,r6,65535
 800bc40:	8abfffcc 	andi	r10,r17,65535
 800bc44:	8820d43a 	srli	r16,r17,16
 800bc48:	5009883a 	mov	r4,r10
 800bc4c:	e00b883a 	mov	r5,fp
 800bc50:	302ed43a 	srli	r23,r6,16
 800bc54:	d8c00215 	stw	r3,8(sp)
 800bc58:	da000415 	stw	r8,16(sp)
 800bc5c:	da800115 	stw	r10,4(sp)
 800bc60:	80009940 	call	8000994 <__mulsi3>
 800bc64:	800b883a 	mov	r5,r16
 800bc68:	e009883a 	mov	r4,fp
 800bc6c:	d8800515 	stw	r2,20(sp)
 800bc70:	80009940 	call	8000994 <__mulsi3>
 800bc74:	8009883a 	mov	r4,r16
 800bc78:	b80b883a 	mov	r5,r23
 800bc7c:	d8800315 	stw	r2,12(sp)
 800bc80:	80009940 	call	8000994 <__mulsi3>
 800bc84:	da800117 	ldw	r10,4(sp)
 800bc88:	b80b883a 	mov	r5,r23
 800bc8c:	1021883a 	mov	r16,r2
 800bc90:	5009883a 	mov	r4,r10
 800bc94:	80009940 	call	8000994 <__mulsi3>
 800bc98:	d9c00517 	ldw	r7,20(sp)
 800bc9c:	da400317 	ldw	r9,12(sp)
 800bca0:	d8c00217 	ldw	r3,8(sp)
 800bca4:	3808d43a 	srli	r4,r7,16
 800bca8:	1245883a 	add	r2,r2,r9
 800bcac:	da000417 	ldw	r8,16(sp)
 800bcb0:	2085883a 	add	r2,r4,r2
 800bcb4:	1240022e 	bgeu	r2,r9,800bcc0 <__divdf3+0x4b8>
 800bcb8:	01000074 	movhi	r4,1
 800bcbc:	8121883a 	add	r16,r16,r4
 800bcc0:	1008d43a 	srli	r4,r2,16
 800bcc4:	1004943a 	slli	r2,r2,16
 800bcc8:	39ffffcc 	andi	r7,r7,65535
 800bccc:	2409883a 	add	r4,r4,r16
 800bcd0:	11c5883a 	add	r2,r2,r7
 800bcd4:	4100bb36 	bltu	r8,r4,800bfc4 <__divdf3+0x7bc>
 800bcd8:	4100d726 	beq	r8,r4,800c038 <__divdf3+0x830>
 800bcdc:	4109c83a 	sub	r4,r8,r4
 800bce0:	a8a1c83a 	sub	r16,r21,r2
 800bce4:	ac2b803a 	cmpltu	r21,r21,r16
 800bce8:	256bc83a 	sub	r21,r4,r21
 800bcec:	b540d926 	beq	r22,r21,800c054 <__divdf3+0x84c>
 800bcf0:	a00b883a 	mov	r5,r20
 800bcf4:	a809883a 	mov	r4,r21
 800bcf8:	d8c00215 	stw	r3,8(sp)
 800bcfc:	800aea00 	call	800aea0 <__udivsi3>
 800bd00:	100b883a 	mov	r5,r2
 800bd04:	9009883a 	mov	r4,r18
 800bd08:	d8800515 	stw	r2,20(sp)
 800bd0c:	80009940 	call	8000994 <__mulsi3>
 800bd10:	a809883a 	mov	r4,r21
 800bd14:	a00b883a 	mov	r5,r20
 800bd18:	d8800415 	stw	r2,16(sp)
 800bd1c:	800af040 	call	800af04 <__umodsi3>
 800bd20:	1004943a 	slli	r2,r2,16
 800bd24:	8008d43a 	srli	r4,r16,16
 800bd28:	da000417 	ldw	r8,16(sp)
 800bd2c:	d8c00217 	ldw	r3,8(sp)
 800bd30:	2084b03a 	or	r2,r4,r2
 800bd34:	d9c00517 	ldw	r7,20(sp)
 800bd38:	1200062e 	bgeu	r2,r8,800bd54 <__divdf3+0x54c>
 800bd3c:	1585883a 	add	r2,r2,r22
 800bd40:	393fffc4 	addi	r4,r7,-1
 800bd44:	1580c536 	bltu	r2,r22,800c05c <__divdf3+0x854>
 800bd48:	1200c42e 	bgeu	r2,r8,800c05c <__divdf3+0x854>
 800bd4c:	39ffff84 	addi	r7,r7,-2
 800bd50:	1585883a 	add	r2,r2,r22
 800bd54:	122bc83a 	sub	r21,r2,r8
 800bd58:	a00b883a 	mov	r5,r20
 800bd5c:	a809883a 	mov	r4,r21
 800bd60:	d8c00215 	stw	r3,8(sp)
 800bd64:	d9c00515 	stw	r7,20(sp)
 800bd68:	800aea00 	call	800aea0 <__udivsi3>
 800bd6c:	9009883a 	mov	r4,r18
 800bd70:	100b883a 	mov	r5,r2
 800bd74:	d8800415 	stw	r2,16(sp)
 800bd78:	80009940 	call	8000994 <__mulsi3>
 800bd7c:	a809883a 	mov	r4,r21
 800bd80:	a00b883a 	mov	r5,r20
 800bd84:	1025883a 	mov	r18,r2
 800bd88:	800af040 	call	800af04 <__umodsi3>
 800bd8c:	1004943a 	slli	r2,r2,16
 800bd90:	813fffcc 	andi	r4,r16,65535
 800bd94:	d8c00217 	ldw	r3,8(sp)
 800bd98:	20a0b03a 	or	r16,r4,r2
 800bd9c:	d9c00517 	ldw	r7,20(sp)
 800bda0:	da000417 	ldw	r8,16(sp)
 800bda4:	8480062e 	bgeu	r16,r18,800bdc0 <__divdf3+0x5b8>
 800bda8:	85a1883a 	add	r16,r16,r22
 800bdac:	40bfffc4 	addi	r2,r8,-1
 800bdb0:	8580ac36 	bltu	r16,r22,800c064 <__divdf3+0x85c>
 800bdb4:	8480ab2e 	bgeu	r16,r18,800c064 <__divdf3+0x85c>
 800bdb8:	423fff84 	addi	r8,r8,-2
 800bdbc:	85a1883a 	add	r16,r16,r22
 800bdc0:	3804943a 	slli	r2,r7,16
 800bdc4:	84a1c83a 	sub	r16,r16,r18
 800bdc8:	e009883a 	mov	r4,fp
 800bdcc:	1228b03a 	or	r20,r2,r8
 800bdd0:	a1ffffcc 	andi	r7,r20,65535
 800bdd4:	a024d43a 	srli	r18,r20,16
 800bdd8:	380b883a 	mov	r5,r7
 800bddc:	d8c00215 	stw	r3,8(sp)
 800bde0:	d9c00515 	stw	r7,20(sp)
 800bde4:	80009940 	call	8000994 <__mulsi3>
 800bde8:	900b883a 	mov	r5,r18
 800bdec:	e009883a 	mov	r4,fp
 800bdf0:	102b883a 	mov	r21,r2
 800bdf4:	80009940 	call	8000994 <__mulsi3>
 800bdf8:	900b883a 	mov	r5,r18
 800bdfc:	b809883a 	mov	r4,r23
 800be00:	1039883a 	mov	fp,r2
 800be04:	80009940 	call	8000994 <__mulsi3>
 800be08:	d9c00517 	ldw	r7,20(sp)
 800be0c:	b80b883a 	mov	r5,r23
 800be10:	1025883a 	mov	r18,r2
 800be14:	3809883a 	mov	r4,r7
 800be18:	80009940 	call	8000994 <__mulsi3>
 800be1c:	a808d43a 	srli	r4,r21,16
 800be20:	1705883a 	add	r2,r2,fp
 800be24:	d8c00217 	ldw	r3,8(sp)
 800be28:	2085883a 	add	r2,r4,r2
 800be2c:	1700022e 	bgeu	r2,fp,800be38 <__divdf3+0x630>
 800be30:	01000074 	movhi	r4,1
 800be34:	9125883a 	add	r18,r18,r4
 800be38:	1008d43a 	srli	r4,r2,16
 800be3c:	1004943a 	slli	r2,r2,16
 800be40:	ad7fffcc 	andi	r21,r21,65535
 800be44:	2489883a 	add	r4,r4,r18
 800be48:	1545883a 	add	r2,r2,r21
 800be4c:	81003836 	bltu	r16,r4,800bf30 <__divdf3+0x728>
 800be50:	81003626 	beq	r16,r4,800bf2c <__divdf3+0x724>
 800be54:	a5000054 	ori	r20,r20,1
 800be58:	1880ffc4 	addi	r2,r3,1023
 800be5c:	00bf2e0e 	bge	zero,r2,800bb18 <__alt_data_end+0xfc00bb18>
 800be60:	a10001cc 	andi	r4,r20,7
 800be64:	20000726 	beq	r4,zero,800be84 <__divdf3+0x67c>
 800be68:	a10003cc 	andi	r4,r20,15
 800be6c:	01400104 	movi	r5,4
 800be70:	21400426 	beq	r4,r5,800be84 <__divdf3+0x67c>
 800be74:	a149883a 	add	r4,r20,r5
 800be78:	2529803a 	cmpltu	r20,r4,r20
 800be7c:	8d23883a 	add	r17,r17,r20
 800be80:	2029883a 	mov	r20,r4
 800be84:	8900402c 	andhi	r4,r17,256
 800be88:	20000426 	beq	r4,zero,800be9c <__divdf3+0x694>
 800be8c:	18810004 	addi	r2,r3,1024
 800be90:	00ffc034 	movhi	r3,65280
 800be94:	18ffffc4 	addi	r3,r3,-1
 800be98:	88e2703a 	and	r17,r17,r3
 800be9c:	00c1ff84 	movi	r3,2046
 800bea0:	18beb416 	blt	r3,r2,800b974 <__alt_data_end+0xfc00b974>
 800bea4:	a028d0fa 	srli	r20,r20,3
 800bea8:	882a977a 	slli	r21,r17,29
 800beac:	8820927a 	slli	r16,r17,9
 800beb0:	1081ffcc 	andi	r2,r2,2047
 800beb4:	ad2ab03a 	or	r21,r21,r20
 800beb8:	8020d33a 	srli	r16,r16,12
 800bebc:	9900004c 	andi	r4,r19,1
 800bec0:	003eb006 	br	800b984 <__alt_data_end+0xfc00b984>
 800bec4:	8080022c 	andhi	r2,r16,8
 800bec8:	10001226 	beq	r2,zero,800bf14 <__divdf3+0x70c>
 800becc:	8880022c 	andhi	r2,r17,8
 800bed0:	1000101e 	bne	r2,zero,800bf14 <__divdf3+0x70c>
 800bed4:	00800434 	movhi	r2,16
 800bed8:	8c000234 	orhi	r16,r17,8
 800bedc:	10bfffc4 	addi	r2,r2,-1
 800bee0:	b809883a 	mov	r4,r23
 800bee4:	80a0703a 	and	r16,r16,r2
 800bee8:	a02b883a 	mov	r21,r20
 800beec:	003f0806 	br	800bb10 <__alt_data_end+0xfc00bb10>
 800bef0:	008000c4 	movi	r2,3
 800bef4:	3880b126 	beq	r7,r2,800c1bc <__divdf3+0x9b4>
 800bef8:	00800044 	movi	r2,1
 800befc:	38805b1e 	bne	r7,r2,800c06c <__divdf3+0x864>
 800bf00:	e009883a 	mov	r4,fp
 800bf04:	0005883a 	mov	r2,zero
 800bf08:	0021883a 	mov	r16,zero
 800bf0c:	002b883a 	mov	r21,zero
 800bf10:	003e9c06 	br	800b984 <__alt_data_end+0xfc00b984>
 800bf14:	00800434 	movhi	r2,16
 800bf18:	84000234 	orhi	r16,r16,8
 800bf1c:	10bfffc4 	addi	r2,r2,-1
 800bf20:	b009883a 	mov	r4,r22
 800bf24:	80a0703a 	and	r16,r16,r2
 800bf28:	003ef906 	br	800bb10 <__alt_data_end+0xfc00bb10>
 800bf2c:	103fca26 	beq	r2,zero,800be58 <__alt_data_end+0xfc00be58>
 800bf30:	b421883a 	add	r16,r22,r16
 800bf34:	a17fffc4 	addi	r5,r20,-1
 800bf38:	8580422e 	bgeu	r16,r22,800c044 <__divdf3+0x83c>
 800bf3c:	2829883a 	mov	r20,r5
 800bf40:	813fc41e 	bne	r16,r4,800be54 <__alt_data_end+0xfc00be54>
 800bf44:	d9800017 	ldw	r6,0(sp)
 800bf48:	30bfc21e 	bne	r6,r2,800be54 <__alt_data_end+0xfc00be54>
 800bf4c:	003fc206 	br	800be58 <__alt_data_end+0xfc00be58>
 800bf50:	143ff604 	addi	r16,r2,-40
 800bf54:	8c20983a 	sll	r16,r17,r16
 800bf58:	002b883a 	mov	r21,zero
 800bf5c:	003eb406 	br	800ba30 <__alt_data_end+0xfc00ba30>
 800bf60:	d9800215 	stw	r6,8(sp)
 800bf64:	d9c00515 	stw	r7,20(sp)
 800bf68:	da000415 	stw	r8,16(sp)
 800bf6c:	800d79c0 	call	800d79c <__clzsi2>
 800bf70:	10800804 	addi	r2,r2,32
 800bf74:	da000417 	ldw	r8,16(sp)
 800bf78:	d9c00517 	ldw	r7,20(sp)
 800bf7c:	d9800217 	ldw	r6,8(sp)
 800bf80:	003ea106 	br	800ba08 <__alt_data_end+0xfc00ba08>
 800bf84:	147ff604 	addi	r17,r2,-40
 800bf88:	3462983a 	sll	r17,r6,r17
 800bf8c:	0029883a 	mov	r20,zero
 800bf90:	003ec906 	br	800bab8 <__alt_data_end+0xfc00bab8>
 800bf94:	3009883a 	mov	r4,r6
 800bf98:	d9400115 	stw	r5,4(sp)
 800bf9c:	d9800215 	stw	r6,8(sp)
 800bfa0:	da000415 	stw	r8,16(sp)
 800bfa4:	da400315 	stw	r9,12(sp)
 800bfa8:	800d79c0 	call	800d79c <__clzsi2>
 800bfac:	10800804 	addi	r2,r2,32
 800bfb0:	da400317 	ldw	r9,12(sp)
 800bfb4:	da000417 	ldw	r8,16(sp)
 800bfb8:	d9800217 	ldw	r6,8(sp)
 800bfbc:	d9400117 	ldw	r5,4(sp)
 800bfc0:	003eb306 	br	800ba90 <__alt_data_end+0xfc00ba90>
 800bfc4:	d9800017 	ldw	r6,0(sp)
 800bfc8:	a9ab883a 	add	r21,r21,r6
 800bfcc:	a98b803a 	cmpltu	r5,r21,r6
 800bfd0:	2d8b883a 	add	r5,r5,r22
 800bfd4:	2a11883a 	add	r8,r5,r8
 800bfd8:	897fffc4 	addi	r5,r17,-1
 800bfdc:	b2000c2e 	bgeu	r22,r8,800c010 <__divdf3+0x808>
 800bfe0:	41003f36 	bltu	r8,r4,800c0e0 <__divdf3+0x8d8>
 800bfe4:	22006c26 	beq	r4,r8,800c198 <__divdf3+0x990>
 800bfe8:	4109c83a 	sub	r4,r8,r4
 800bfec:	2823883a 	mov	r17,r5
 800bff0:	003f3b06 	br	800bce0 <__alt_data_end+0xfc00bce0>
 800bff4:	ad3ed336 	bltu	r21,r20,800bb44 <__alt_data_end+0xfc00bb44>
 800bff8:	a804d07a 	srli	r2,r21,1
 800bffc:	802e97fa 	slli	r23,r16,31
 800c000:	a82a97fa 	slli	r21,r21,31
 800c004:	8020d07a 	srli	r16,r16,1
 800c008:	b8aeb03a 	or	r23,r23,r2
 800c00c:	003ed006 	br	800bb50 <__alt_data_end+0xfc00bb50>
 800c010:	b23ff51e 	bne	r22,r8,800bfe8 <__alt_data_end+0xfc00bfe8>
 800c014:	d9800017 	ldw	r6,0(sp)
 800c018:	a9bff12e 	bgeu	r21,r6,800bfe0 <__alt_data_end+0xfc00bfe0>
 800c01c:	b109c83a 	sub	r4,r22,r4
 800c020:	2823883a 	mov	r17,r5
 800c024:	003f2e06 	br	800bce0 <__alt_data_end+0xfc00bce0>
 800c028:	2021883a 	mov	r16,r4
 800c02c:	003eff06 	br	800bc2c <__alt_data_end+0xfc00bc2c>
 800c030:	2023883a 	mov	r17,r4
 800c034:	003ee406 	br	800bbc8 <__alt_data_end+0xfc00bbc8>
 800c038:	a8bfe236 	bltu	r21,r2,800bfc4 <__alt_data_end+0xfc00bfc4>
 800c03c:	0009883a 	mov	r4,zero
 800c040:	003f2706 	br	800bce0 <__alt_data_end+0xfc00bce0>
 800c044:	81002d36 	bltu	r16,r4,800c0fc <__divdf3+0x8f4>
 800c048:	24005626 	beq	r4,r16,800c1a4 <__divdf3+0x99c>
 800c04c:	2829883a 	mov	r20,r5
 800c050:	003f8006 	br	800be54 <__alt_data_end+0xfc00be54>
 800c054:	053fffc4 	movi	r20,-1
 800c058:	003f7f06 	br	800be58 <__alt_data_end+0xfc00be58>
 800c05c:	200f883a 	mov	r7,r4
 800c060:	003f3c06 	br	800bd54 <__alt_data_end+0xfc00bd54>
 800c064:	1011883a 	mov	r8,r2
 800c068:	003f5506 	br	800bdc0 <__alt_data_end+0xfc00bdc0>
 800c06c:	e027883a 	mov	r19,fp
 800c070:	003f7906 	br	800be58 <__alt_data_end+0xfc00be58>
 800c074:	010007c4 	movi	r4,31
 800c078:	20c02816 	blt	r4,r3,800c11c <__divdf3+0x914>
 800c07c:	00800804 	movi	r2,32
 800c080:	10c5c83a 	sub	r2,r2,r3
 800c084:	888a983a 	sll	r5,r17,r2
 800c088:	a0c8d83a 	srl	r4,r20,r3
 800c08c:	a084983a 	sll	r2,r20,r2
 800c090:	88e2d83a 	srl	r17,r17,r3
 800c094:	2906b03a 	or	r3,r5,r4
 800c098:	1004c03a 	cmpne	r2,r2,zero
 800c09c:	1886b03a 	or	r3,r3,r2
 800c0a0:	188001cc 	andi	r2,r3,7
 800c0a4:	10000726 	beq	r2,zero,800c0c4 <__divdf3+0x8bc>
 800c0a8:	188003cc 	andi	r2,r3,15
 800c0ac:	01000104 	movi	r4,4
 800c0b0:	11000426 	beq	r2,r4,800c0c4 <__divdf3+0x8bc>
 800c0b4:	1805883a 	mov	r2,r3
 800c0b8:	10c00104 	addi	r3,r2,4
 800c0bc:	1885803a 	cmpltu	r2,r3,r2
 800c0c0:	88a3883a 	add	r17,r17,r2
 800c0c4:	8880202c 	andhi	r2,r17,128
 800c0c8:	10002926 	beq	r2,zero,800c170 <__divdf3+0x968>
 800c0cc:	9900004c 	andi	r4,r19,1
 800c0d0:	00800044 	movi	r2,1
 800c0d4:	0021883a 	mov	r16,zero
 800c0d8:	002b883a 	mov	r21,zero
 800c0dc:	003e2906 	br	800b984 <__alt_data_end+0xfc00b984>
 800c0e0:	d9800017 	ldw	r6,0(sp)
 800c0e4:	8c7fff84 	addi	r17,r17,-2
 800c0e8:	a9ab883a 	add	r21,r21,r6
 800c0ec:	a98b803a 	cmpltu	r5,r21,r6
 800c0f0:	2d8b883a 	add	r5,r5,r22
 800c0f4:	2a11883a 	add	r8,r5,r8
 800c0f8:	003ef806 	br	800bcdc <__alt_data_end+0xfc00bcdc>
 800c0fc:	d9800017 	ldw	r6,0(sp)
 800c100:	318f883a 	add	r7,r6,r6
 800c104:	398b803a 	cmpltu	r5,r7,r6
 800c108:	2d8d883a 	add	r6,r5,r22
 800c10c:	81a1883a 	add	r16,r16,r6
 800c110:	a17fff84 	addi	r5,r20,-2
 800c114:	d9c00015 	stw	r7,0(sp)
 800c118:	003f8806 	br	800bf3c <__alt_data_end+0xfc00bf3c>
 800c11c:	013ff844 	movi	r4,-31
 800c120:	2085c83a 	sub	r2,r4,r2
 800c124:	8888d83a 	srl	r4,r17,r2
 800c128:	00800804 	movi	r2,32
 800c12c:	18802126 	beq	r3,r2,800c1b4 <__divdf3+0x9ac>
 800c130:	04001004 	movi	r16,64
 800c134:	80c7c83a 	sub	r3,r16,r3
 800c138:	88e0983a 	sll	r16,r17,r3
 800c13c:	8504b03a 	or	r2,r16,r20
 800c140:	1004c03a 	cmpne	r2,r2,zero
 800c144:	2084b03a 	or	r2,r4,r2
 800c148:	144001cc 	andi	r17,r2,7
 800c14c:	88000d1e 	bne	r17,zero,800c184 <__divdf3+0x97c>
 800c150:	0021883a 	mov	r16,zero
 800c154:	102ad0fa 	srli	r21,r2,3
 800c158:	9900004c 	andi	r4,r19,1
 800c15c:	0005883a 	mov	r2,zero
 800c160:	ac6ab03a 	or	r21,r21,r17
 800c164:	003e0706 	br	800b984 <__alt_data_end+0xfc00b984>
 800c168:	1007883a 	mov	r3,r2
 800c16c:	0023883a 	mov	r17,zero
 800c170:	8820927a 	slli	r16,r17,9
 800c174:	1805883a 	mov	r2,r3
 800c178:	8822977a 	slli	r17,r17,29
 800c17c:	8020d33a 	srli	r16,r16,12
 800c180:	003ff406 	br	800c154 <__alt_data_end+0xfc00c154>
 800c184:	10c003cc 	andi	r3,r2,15
 800c188:	01000104 	movi	r4,4
 800c18c:	193ff626 	beq	r3,r4,800c168 <__alt_data_end+0xfc00c168>
 800c190:	0023883a 	mov	r17,zero
 800c194:	003fc806 	br	800c0b8 <__alt_data_end+0xfc00c0b8>
 800c198:	a8bfd136 	bltu	r21,r2,800c0e0 <__alt_data_end+0xfc00c0e0>
 800c19c:	2823883a 	mov	r17,r5
 800c1a0:	003fa606 	br	800c03c <__alt_data_end+0xfc00c03c>
 800c1a4:	d9800017 	ldw	r6,0(sp)
 800c1a8:	30bfd436 	bltu	r6,r2,800c0fc <__alt_data_end+0xfc00c0fc>
 800c1ac:	2829883a 	mov	r20,r5
 800c1b0:	003f6406 	br	800bf44 <__alt_data_end+0xfc00bf44>
 800c1b4:	0021883a 	mov	r16,zero
 800c1b8:	003fe006 	br	800c13c <__alt_data_end+0xfc00c13c>
 800c1bc:	00800434 	movhi	r2,16
 800c1c0:	8c000234 	orhi	r16,r17,8
 800c1c4:	10bfffc4 	addi	r2,r2,-1
 800c1c8:	e009883a 	mov	r4,fp
 800c1cc:	80a0703a 	and	r16,r16,r2
 800c1d0:	a02b883a 	mov	r21,r20
 800c1d4:	003e4e06 	br	800bb10 <__alt_data_end+0xfc00bb10>

0800c1d8 <__eqdf2>:
 800c1d8:	2804d53a 	srli	r2,r5,20
 800c1dc:	3806d53a 	srli	r3,r7,20
 800c1e0:	02000434 	movhi	r8,16
 800c1e4:	423fffc4 	addi	r8,r8,-1
 800c1e8:	1081ffcc 	andi	r2,r2,2047
 800c1ec:	0281ffc4 	movi	r10,2047
 800c1f0:	2a12703a 	and	r9,r5,r8
 800c1f4:	18c1ffcc 	andi	r3,r3,2047
 800c1f8:	3a10703a 	and	r8,r7,r8
 800c1fc:	280ad7fa 	srli	r5,r5,31
 800c200:	380ed7fa 	srli	r7,r7,31
 800c204:	12801026 	beq	r2,r10,800c248 <__eqdf2+0x70>
 800c208:	0281ffc4 	movi	r10,2047
 800c20c:	1a800a26 	beq	r3,r10,800c238 <__eqdf2+0x60>
 800c210:	10c00226 	beq	r2,r3,800c21c <__eqdf2+0x44>
 800c214:	00800044 	movi	r2,1
 800c218:	f800283a 	ret
 800c21c:	4a3ffd1e 	bne	r9,r8,800c214 <__alt_data_end+0xfc00c214>
 800c220:	21bffc1e 	bne	r4,r6,800c214 <__alt_data_end+0xfc00c214>
 800c224:	29c00c26 	beq	r5,r7,800c258 <__eqdf2+0x80>
 800c228:	103ffa1e 	bne	r2,zero,800c214 <__alt_data_end+0xfc00c214>
 800c22c:	2244b03a 	or	r2,r4,r9
 800c230:	1004c03a 	cmpne	r2,r2,zero
 800c234:	f800283a 	ret
 800c238:	3214b03a 	or	r10,r6,r8
 800c23c:	503ff426 	beq	r10,zero,800c210 <__alt_data_end+0xfc00c210>
 800c240:	00800044 	movi	r2,1
 800c244:	f800283a 	ret
 800c248:	2254b03a 	or	r10,r4,r9
 800c24c:	503fee26 	beq	r10,zero,800c208 <__alt_data_end+0xfc00c208>
 800c250:	00800044 	movi	r2,1
 800c254:	f800283a 	ret
 800c258:	0005883a 	mov	r2,zero
 800c25c:	f800283a 	ret

0800c260 <__gedf2>:
 800c260:	2804d53a 	srli	r2,r5,20
 800c264:	3806d53a 	srli	r3,r7,20
 800c268:	02000434 	movhi	r8,16
 800c26c:	423fffc4 	addi	r8,r8,-1
 800c270:	1081ffcc 	andi	r2,r2,2047
 800c274:	0241ffc4 	movi	r9,2047
 800c278:	2a14703a 	and	r10,r5,r8
 800c27c:	18c1ffcc 	andi	r3,r3,2047
 800c280:	3a10703a 	and	r8,r7,r8
 800c284:	280ad7fa 	srli	r5,r5,31
 800c288:	380ed7fa 	srli	r7,r7,31
 800c28c:	12401d26 	beq	r2,r9,800c304 <__gedf2+0xa4>
 800c290:	0241ffc4 	movi	r9,2047
 800c294:	1a401226 	beq	r3,r9,800c2e0 <__gedf2+0x80>
 800c298:	1000081e 	bne	r2,zero,800c2bc <__gedf2+0x5c>
 800c29c:	2296b03a 	or	r11,r4,r10
 800c2a0:	5813003a 	cmpeq	r9,r11,zero
 800c2a4:	1800091e 	bne	r3,zero,800c2cc <__gedf2+0x6c>
 800c2a8:	3218b03a 	or	r12,r6,r8
 800c2ac:	6000071e 	bne	r12,zero,800c2cc <__gedf2+0x6c>
 800c2b0:	0005883a 	mov	r2,zero
 800c2b4:	5800101e 	bne	r11,zero,800c2f8 <__gedf2+0x98>
 800c2b8:	f800283a 	ret
 800c2bc:	18000c1e 	bne	r3,zero,800c2f0 <__gedf2+0x90>
 800c2c0:	3212b03a 	or	r9,r6,r8
 800c2c4:	48000c26 	beq	r9,zero,800c2f8 <__gedf2+0x98>
 800c2c8:	0013883a 	mov	r9,zero
 800c2cc:	39c03fcc 	andi	r7,r7,255
 800c2d0:	48000826 	beq	r9,zero,800c2f4 <__gedf2+0x94>
 800c2d4:	38000926 	beq	r7,zero,800c2fc <__gedf2+0x9c>
 800c2d8:	00800044 	movi	r2,1
 800c2dc:	f800283a 	ret
 800c2e0:	3212b03a 	or	r9,r6,r8
 800c2e4:	483fec26 	beq	r9,zero,800c298 <__alt_data_end+0xfc00c298>
 800c2e8:	00bfff84 	movi	r2,-2
 800c2ec:	f800283a 	ret
 800c2f0:	39c03fcc 	andi	r7,r7,255
 800c2f4:	29c00626 	beq	r5,r7,800c310 <__gedf2+0xb0>
 800c2f8:	283ff726 	beq	r5,zero,800c2d8 <__alt_data_end+0xfc00c2d8>
 800c2fc:	00bfffc4 	movi	r2,-1
 800c300:	f800283a 	ret
 800c304:	2292b03a 	or	r9,r4,r10
 800c308:	483fe126 	beq	r9,zero,800c290 <__alt_data_end+0xfc00c290>
 800c30c:	003ff606 	br	800c2e8 <__alt_data_end+0xfc00c2e8>
 800c310:	18bff916 	blt	r3,r2,800c2f8 <__alt_data_end+0xfc00c2f8>
 800c314:	10c00316 	blt	r2,r3,800c324 <__gedf2+0xc4>
 800c318:	42bff736 	bltu	r8,r10,800c2f8 <__alt_data_end+0xfc00c2f8>
 800c31c:	52000326 	beq	r10,r8,800c32c <__gedf2+0xcc>
 800c320:	5200042e 	bgeu	r10,r8,800c334 <__gedf2+0xd4>
 800c324:	283fec1e 	bne	r5,zero,800c2d8 <__alt_data_end+0xfc00c2d8>
 800c328:	003ff406 	br	800c2fc <__alt_data_end+0xfc00c2fc>
 800c32c:	313ff236 	bltu	r6,r4,800c2f8 <__alt_data_end+0xfc00c2f8>
 800c330:	21bffc36 	bltu	r4,r6,800c324 <__alt_data_end+0xfc00c324>
 800c334:	0005883a 	mov	r2,zero
 800c338:	f800283a 	ret

0800c33c <__ledf2>:
 800c33c:	2804d53a 	srli	r2,r5,20
 800c340:	3810d53a 	srli	r8,r7,20
 800c344:	00c00434 	movhi	r3,16
 800c348:	18ffffc4 	addi	r3,r3,-1
 800c34c:	1081ffcc 	andi	r2,r2,2047
 800c350:	0241ffc4 	movi	r9,2047
 800c354:	28d4703a 	and	r10,r5,r3
 800c358:	4201ffcc 	andi	r8,r8,2047
 800c35c:	38c6703a 	and	r3,r7,r3
 800c360:	280ad7fa 	srli	r5,r5,31
 800c364:	380ed7fa 	srli	r7,r7,31
 800c368:	12401f26 	beq	r2,r9,800c3e8 <__ledf2+0xac>
 800c36c:	0241ffc4 	movi	r9,2047
 800c370:	42401426 	beq	r8,r9,800c3c4 <__ledf2+0x88>
 800c374:	1000091e 	bne	r2,zero,800c39c <__ledf2+0x60>
 800c378:	2296b03a 	or	r11,r4,r10
 800c37c:	5813003a 	cmpeq	r9,r11,zero
 800c380:	29403fcc 	andi	r5,r5,255
 800c384:	40000a1e 	bne	r8,zero,800c3b0 <__ledf2+0x74>
 800c388:	30d8b03a 	or	r12,r6,r3
 800c38c:	6000081e 	bne	r12,zero,800c3b0 <__ledf2+0x74>
 800c390:	0005883a 	mov	r2,zero
 800c394:	5800111e 	bne	r11,zero,800c3dc <__ledf2+0xa0>
 800c398:	f800283a 	ret
 800c39c:	29403fcc 	andi	r5,r5,255
 800c3a0:	40000c1e 	bne	r8,zero,800c3d4 <__ledf2+0x98>
 800c3a4:	30d2b03a 	or	r9,r6,r3
 800c3a8:	48000c26 	beq	r9,zero,800c3dc <__ledf2+0xa0>
 800c3ac:	0013883a 	mov	r9,zero
 800c3b0:	39c03fcc 	andi	r7,r7,255
 800c3b4:	48000826 	beq	r9,zero,800c3d8 <__ledf2+0x9c>
 800c3b8:	38001126 	beq	r7,zero,800c400 <__ledf2+0xc4>
 800c3bc:	00800044 	movi	r2,1
 800c3c0:	f800283a 	ret
 800c3c4:	30d2b03a 	or	r9,r6,r3
 800c3c8:	483fea26 	beq	r9,zero,800c374 <__alt_data_end+0xfc00c374>
 800c3cc:	00800084 	movi	r2,2
 800c3d0:	f800283a 	ret
 800c3d4:	39c03fcc 	andi	r7,r7,255
 800c3d8:	39400726 	beq	r7,r5,800c3f8 <__ledf2+0xbc>
 800c3dc:	2800081e 	bne	r5,zero,800c400 <__ledf2+0xc4>
 800c3e0:	00800044 	movi	r2,1
 800c3e4:	f800283a 	ret
 800c3e8:	2292b03a 	or	r9,r4,r10
 800c3ec:	483fdf26 	beq	r9,zero,800c36c <__alt_data_end+0xfc00c36c>
 800c3f0:	00800084 	movi	r2,2
 800c3f4:	f800283a 	ret
 800c3f8:	4080030e 	bge	r8,r2,800c408 <__ledf2+0xcc>
 800c3fc:	383fef26 	beq	r7,zero,800c3bc <__alt_data_end+0xfc00c3bc>
 800c400:	00bfffc4 	movi	r2,-1
 800c404:	f800283a 	ret
 800c408:	123feb16 	blt	r2,r8,800c3b8 <__alt_data_end+0xfc00c3b8>
 800c40c:	1abff336 	bltu	r3,r10,800c3dc <__alt_data_end+0xfc00c3dc>
 800c410:	50c00326 	beq	r10,r3,800c420 <__ledf2+0xe4>
 800c414:	50c0042e 	bgeu	r10,r3,800c428 <__ledf2+0xec>
 800c418:	283fe81e 	bne	r5,zero,800c3bc <__alt_data_end+0xfc00c3bc>
 800c41c:	003ff806 	br	800c400 <__alt_data_end+0xfc00c400>
 800c420:	313fee36 	bltu	r6,r4,800c3dc <__alt_data_end+0xfc00c3dc>
 800c424:	21bffc36 	bltu	r4,r6,800c418 <__alt_data_end+0xfc00c418>
 800c428:	0005883a 	mov	r2,zero
 800c42c:	f800283a 	ret

0800c430 <__muldf3>:
 800c430:	deffee04 	addi	sp,sp,-72
 800c434:	dd000c15 	stw	r20,48(sp)
 800c438:	2828d53a 	srli	r20,r5,20
 800c43c:	ddc00f15 	stw	r23,60(sp)
 800c440:	282ed7fa 	srli	r23,r5,31
 800c444:	dc000815 	stw	r16,32(sp)
 800c448:	04000434 	movhi	r16,16
 800c44c:	dcc00b15 	stw	r19,44(sp)
 800c450:	843fffc4 	addi	r16,r16,-1
 800c454:	dfc01115 	stw	ra,68(sp)
 800c458:	df001015 	stw	fp,64(sp)
 800c45c:	dd800e15 	stw	r22,56(sp)
 800c460:	dd400d15 	stw	r21,52(sp)
 800c464:	dc800a15 	stw	r18,40(sp)
 800c468:	dc400915 	stw	r17,36(sp)
 800c46c:	a501ffcc 	andi	r20,r20,2047
 800c470:	2c20703a 	and	r16,r5,r16
 800c474:	b827883a 	mov	r19,r23
 800c478:	ba403fcc 	andi	r9,r23,255
 800c47c:	a0006026 	beq	r20,zero,800c600 <__muldf3+0x1d0>
 800c480:	0081ffc4 	movi	r2,2047
 800c484:	202d883a 	mov	r22,r4
 800c488:	a0803626 	beq	r20,r2,800c564 <__muldf3+0x134>
 800c48c:	84000434 	orhi	r16,r16,16
 800c490:	200ad77a 	srli	r5,r4,29
 800c494:	800490fa 	slli	r2,r16,3
 800c498:	202c90fa 	slli	r22,r4,3
 800c49c:	a53f0044 	addi	r20,r20,-1023
 800c4a0:	28a0b03a 	or	r16,r5,r2
 800c4a4:	002b883a 	mov	r21,zero
 800c4a8:	000b883a 	mov	r5,zero
 800c4ac:	3804d53a 	srli	r2,r7,20
 800c4b0:	3838d7fa 	srli	fp,r7,31
 800c4b4:	04400434 	movhi	r17,16
 800c4b8:	8c7fffc4 	addi	r17,r17,-1
 800c4bc:	1081ffcc 	andi	r2,r2,2047
 800c4c0:	3025883a 	mov	r18,r6
 800c4c4:	3c62703a 	and	r17,r7,r17
 800c4c8:	e2803fcc 	andi	r10,fp,255
 800c4cc:	10006d26 	beq	r2,zero,800c684 <__muldf3+0x254>
 800c4d0:	00c1ffc4 	movi	r3,2047
 800c4d4:	10c06526 	beq	r2,r3,800c66c <__muldf3+0x23c>
 800c4d8:	8c400434 	orhi	r17,r17,16
 800c4dc:	300ed77a 	srli	r7,r6,29
 800c4e0:	880690fa 	slli	r3,r17,3
 800c4e4:	302490fa 	slli	r18,r6,3
 800c4e8:	10bf0044 	addi	r2,r2,-1023
 800c4ec:	38e2b03a 	or	r17,r7,r3
 800c4f0:	000f883a 	mov	r7,zero
 800c4f4:	a087883a 	add	r3,r20,r2
 800c4f8:	010003c4 	movi	r4,15
 800c4fc:	3d44b03a 	or	r2,r7,r21
 800c500:	e5ccf03a 	xor	r6,fp,r23
 800c504:	1a000044 	addi	r8,r3,1
 800c508:	20809b36 	bltu	r4,r2,800c778 <__muldf3+0x348>
 800c50c:	100490ba 	slli	r2,r2,2
 800c510:	01020074 	movhi	r4,2049
 800c514:	21314904 	addi	r4,r4,-15068
 800c518:	1105883a 	add	r2,r2,r4
 800c51c:	10800017 	ldw	r2,0(r2)
 800c520:	1000683a 	jmp	r2
 800c524:	0800c778 	rdprs	zero,at,797
 800c528:	0800c584 	addi	zero,at,790
 800c52c:	0800c584 	addi	zero,at,790
 800c530:	0800c580 	call	800c58 <__alt_mem_onchip_memory2_0+0x800c58>
 800c534:	0800c754 	ori	zero,at,797
 800c538:	0800c754 	ori	zero,at,797
 800c53c:	0800c73c 	xorhi	zero,at,796
 800c540:	0800c580 	call	800c58 <__alt_mem_onchip_memory2_0+0x800c58>
 800c544:	0800c754 	ori	zero,at,797
 800c548:	0800c73c 	xorhi	zero,at,796
 800c54c:	0800c754 	ori	zero,at,797
 800c550:	0800c580 	call	800c58 <__alt_mem_onchip_memory2_0+0x800c58>
 800c554:	0800c764 	muli	zero,at,797
 800c558:	0800c764 	muli	zero,at,797
 800c55c:	0800c764 	muli	zero,at,797
 800c560:	0800cac4 	addi	zero,at,811
 800c564:	2404b03a 	or	r2,r4,r16
 800c568:	1000711e 	bne	r2,zero,800c730 <__muldf3+0x300>
 800c56c:	05400204 	movi	r21,8
 800c570:	0021883a 	mov	r16,zero
 800c574:	002d883a 	mov	r22,zero
 800c578:	01400084 	movi	r5,2
 800c57c:	003fcb06 	br	800c4ac <__alt_data_end+0xfc00c4ac>
 800c580:	500d883a 	mov	r6,r10
 800c584:	00800084 	movi	r2,2
 800c588:	38805926 	beq	r7,r2,800c6f0 <__muldf3+0x2c0>
 800c58c:	008000c4 	movi	r2,3
 800c590:	3881bb26 	beq	r7,r2,800cc80 <__muldf3+0x850>
 800c594:	00800044 	movi	r2,1
 800c598:	3881961e 	bne	r7,r2,800cbf4 <__muldf3+0x7c4>
 800c59c:	3027883a 	mov	r19,r6
 800c5a0:	0005883a 	mov	r2,zero
 800c5a4:	0021883a 	mov	r16,zero
 800c5a8:	002d883a 	mov	r22,zero
 800c5ac:	1004953a 	slli	r2,r2,20
 800c5b0:	98c03fcc 	andi	r3,r19,255
 800c5b4:	04400434 	movhi	r17,16
 800c5b8:	8c7fffc4 	addi	r17,r17,-1
 800c5bc:	180697fa 	slli	r3,r3,31
 800c5c0:	8460703a 	and	r16,r16,r17
 800c5c4:	80a0b03a 	or	r16,r16,r2
 800c5c8:	80c6b03a 	or	r3,r16,r3
 800c5cc:	b005883a 	mov	r2,r22
 800c5d0:	dfc01117 	ldw	ra,68(sp)
 800c5d4:	df001017 	ldw	fp,64(sp)
 800c5d8:	ddc00f17 	ldw	r23,60(sp)
 800c5dc:	dd800e17 	ldw	r22,56(sp)
 800c5e0:	dd400d17 	ldw	r21,52(sp)
 800c5e4:	dd000c17 	ldw	r20,48(sp)
 800c5e8:	dcc00b17 	ldw	r19,44(sp)
 800c5ec:	dc800a17 	ldw	r18,40(sp)
 800c5f0:	dc400917 	ldw	r17,36(sp)
 800c5f4:	dc000817 	ldw	r16,32(sp)
 800c5f8:	dec01204 	addi	sp,sp,72
 800c5fc:	f800283a 	ret
 800c600:	2404b03a 	or	r2,r4,r16
 800c604:	202b883a 	mov	r21,r4
 800c608:	10004426 	beq	r2,zero,800c71c <__muldf3+0x2ec>
 800c60c:	80015126 	beq	r16,zero,800cb54 <__muldf3+0x724>
 800c610:	8009883a 	mov	r4,r16
 800c614:	d9800715 	stw	r6,28(sp)
 800c618:	d9c00215 	stw	r7,8(sp)
 800c61c:	da400415 	stw	r9,16(sp)
 800c620:	800d79c0 	call	800d79c <__clzsi2>
 800c624:	d9800717 	ldw	r6,28(sp)
 800c628:	d9c00217 	ldw	r7,8(sp)
 800c62c:	da400417 	ldw	r9,16(sp)
 800c630:	113ffd44 	addi	r4,r2,-11
 800c634:	00c00704 	movi	r3,28
 800c638:	19014216 	blt	r3,r4,800cb44 <__muldf3+0x714>
 800c63c:	00c00744 	movi	r3,29
 800c640:	15bffe04 	addi	r22,r2,-8
 800c644:	1907c83a 	sub	r3,r3,r4
 800c648:	85a0983a 	sll	r16,r16,r22
 800c64c:	a8c6d83a 	srl	r3,r21,r3
 800c650:	adac983a 	sll	r22,r21,r22
 800c654:	1c20b03a 	or	r16,r3,r16
 800c658:	1080fcc4 	addi	r2,r2,1011
 800c65c:	00a9c83a 	sub	r20,zero,r2
 800c660:	002b883a 	mov	r21,zero
 800c664:	000b883a 	mov	r5,zero
 800c668:	003f9006 	br	800c4ac <__alt_data_end+0xfc00c4ac>
 800c66c:	3446b03a 	or	r3,r6,r17
 800c670:	1800281e 	bne	r3,zero,800c714 <__muldf3+0x2e4>
 800c674:	0023883a 	mov	r17,zero
 800c678:	0025883a 	mov	r18,zero
 800c67c:	01c00084 	movi	r7,2
 800c680:	003f9c06 	br	800c4f4 <__alt_data_end+0xfc00c4f4>
 800c684:	3446b03a 	or	r3,r6,r17
 800c688:	18001e26 	beq	r3,zero,800c704 <__muldf3+0x2d4>
 800c68c:	88012126 	beq	r17,zero,800cb14 <__muldf3+0x6e4>
 800c690:	8809883a 	mov	r4,r17
 800c694:	d9400215 	stw	r5,8(sp)
 800c698:	d9800715 	stw	r6,28(sp)
 800c69c:	da400415 	stw	r9,16(sp)
 800c6a0:	da800315 	stw	r10,12(sp)
 800c6a4:	800d79c0 	call	800d79c <__clzsi2>
 800c6a8:	d9400217 	ldw	r5,8(sp)
 800c6ac:	d9800717 	ldw	r6,28(sp)
 800c6b0:	da400417 	ldw	r9,16(sp)
 800c6b4:	da800317 	ldw	r10,12(sp)
 800c6b8:	113ffd44 	addi	r4,r2,-11
 800c6bc:	00c00704 	movi	r3,28
 800c6c0:	19011016 	blt	r3,r4,800cb04 <__muldf3+0x6d4>
 800c6c4:	00c00744 	movi	r3,29
 800c6c8:	14bffe04 	addi	r18,r2,-8
 800c6cc:	1907c83a 	sub	r3,r3,r4
 800c6d0:	8ca2983a 	sll	r17,r17,r18
 800c6d4:	30c6d83a 	srl	r3,r6,r3
 800c6d8:	34a4983a 	sll	r18,r6,r18
 800c6dc:	1c62b03a 	or	r17,r3,r17
 800c6e0:	1080fcc4 	addi	r2,r2,1011
 800c6e4:	0085c83a 	sub	r2,zero,r2
 800c6e8:	000f883a 	mov	r7,zero
 800c6ec:	003f8106 	br	800c4f4 <__alt_data_end+0xfc00c4f4>
 800c6f0:	3027883a 	mov	r19,r6
 800c6f4:	0081ffc4 	movi	r2,2047
 800c6f8:	0021883a 	mov	r16,zero
 800c6fc:	002d883a 	mov	r22,zero
 800c700:	003faa06 	br	800c5ac <__alt_data_end+0xfc00c5ac>
 800c704:	0023883a 	mov	r17,zero
 800c708:	0025883a 	mov	r18,zero
 800c70c:	01c00044 	movi	r7,1
 800c710:	003f7806 	br	800c4f4 <__alt_data_end+0xfc00c4f4>
 800c714:	01c000c4 	movi	r7,3
 800c718:	003f7606 	br	800c4f4 <__alt_data_end+0xfc00c4f4>
 800c71c:	05400104 	movi	r21,4
 800c720:	0021883a 	mov	r16,zero
 800c724:	002d883a 	mov	r22,zero
 800c728:	01400044 	movi	r5,1
 800c72c:	003f5f06 	br	800c4ac <__alt_data_end+0xfc00c4ac>
 800c730:	05400304 	movi	r21,12
 800c734:	014000c4 	movi	r5,3
 800c738:	003f5c06 	br	800c4ac <__alt_data_end+0xfc00c4ac>
 800c73c:	04000434 	movhi	r16,16
 800c740:	0027883a 	mov	r19,zero
 800c744:	843fffc4 	addi	r16,r16,-1
 800c748:	05bfffc4 	movi	r22,-1
 800c74c:	0081ffc4 	movi	r2,2047
 800c750:	003f9606 	br	800c5ac <__alt_data_end+0xfc00c5ac>
 800c754:	8023883a 	mov	r17,r16
 800c758:	b025883a 	mov	r18,r22
 800c75c:	280f883a 	mov	r7,r5
 800c760:	003f8806 	br	800c584 <__alt_data_end+0xfc00c584>
 800c764:	8023883a 	mov	r17,r16
 800c768:	b025883a 	mov	r18,r22
 800c76c:	480d883a 	mov	r6,r9
 800c770:	280f883a 	mov	r7,r5
 800c774:	003f8306 	br	800c584 <__alt_data_end+0xfc00c584>
 800c778:	b026d43a 	srli	r19,r22,16
 800c77c:	902ed43a 	srli	r23,r18,16
 800c780:	b5bfffcc 	andi	r22,r22,65535
 800c784:	94bfffcc 	andi	r18,r18,65535
 800c788:	b00b883a 	mov	r5,r22
 800c78c:	9009883a 	mov	r4,r18
 800c790:	d8c00515 	stw	r3,20(sp)
 800c794:	d9800715 	stw	r6,28(sp)
 800c798:	da000615 	stw	r8,24(sp)
 800c79c:	80009940 	call	8000994 <__mulsi3>
 800c7a0:	980b883a 	mov	r5,r19
 800c7a4:	9009883a 	mov	r4,r18
 800c7a8:	1029883a 	mov	r20,r2
 800c7ac:	80009940 	call	8000994 <__mulsi3>
 800c7b0:	b80b883a 	mov	r5,r23
 800c7b4:	9809883a 	mov	r4,r19
 800c7b8:	102b883a 	mov	r21,r2
 800c7bc:	80009940 	call	8000994 <__mulsi3>
 800c7c0:	b809883a 	mov	r4,r23
 800c7c4:	b00b883a 	mov	r5,r22
 800c7c8:	1039883a 	mov	fp,r2
 800c7cc:	80009940 	call	8000994 <__mulsi3>
 800c7d0:	a008d43a 	srli	r4,r20,16
 800c7d4:	1545883a 	add	r2,r2,r21
 800c7d8:	d8c00517 	ldw	r3,20(sp)
 800c7dc:	2085883a 	add	r2,r4,r2
 800c7e0:	d9800717 	ldw	r6,28(sp)
 800c7e4:	da000617 	ldw	r8,24(sp)
 800c7e8:	1540022e 	bgeu	r2,r21,800c7f4 <__muldf3+0x3c4>
 800c7ec:	01000074 	movhi	r4,1
 800c7f0:	e139883a 	add	fp,fp,r4
 800c7f4:	100e943a 	slli	r7,r2,16
 800c7f8:	1004d43a 	srli	r2,r2,16
 800c7fc:	882ad43a 	srli	r21,r17,16
 800c800:	a53fffcc 	andi	r20,r20,65535
 800c804:	8c7fffcc 	andi	r17,r17,65535
 800c808:	3d29883a 	add	r20,r7,r20
 800c80c:	b00b883a 	mov	r5,r22
 800c810:	8809883a 	mov	r4,r17
 800c814:	d8c00515 	stw	r3,20(sp)
 800c818:	d9800715 	stw	r6,28(sp)
 800c81c:	da000615 	stw	r8,24(sp)
 800c820:	dd000115 	stw	r20,4(sp)
 800c824:	d8800015 	stw	r2,0(sp)
 800c828:	80009940 	call	8000994 <__mulsi3>
 800c82c:	980b883a 	mov	r5,r19
 800c830:	8809883a 	mov	r4,r17
 800c834:	d8800215 	stw	r2,8(sp)
 800c838:	80009940 	call	8000994 <__mulsi3>
 800c83c:	9809883a 	mov	r4,r19
 800c840:	a80b883a 	mov	r5,r21
 800c844:	1029883a 	mov	r20,r2
 800c848:	80009940 	call	8000994 <__mulsi3>
 800c84c:	b00b883a 	mov	r5,r22
 800c850:	a809883a 	mov	r4,r21
 800c854:	d8800415 	stw	r2,16(sp)
 800c858:	80009940 	call	8000994 <__mulsi3>
 800c85c:	d9c00217 	ldw	r7,8(sp)
 800c860:	1505883a 	add	r2,r2,r20
 800c864:	d8c00517 	ldw	r3,20(sp)
 800c868:	3826d43a 	srli	r19,r7,16
 800c86c:	d9800717 	ldw	r6,28(sp)
 800c870:	da000617 	ldw	r8,24(sp)
 800c874:	9885883a 	add	r2,r19,r2
 800c878:	da400417 	ldw	r9,16(sp)
 800c87c:	1500022e 	bgeu	r2,r20,800c888 <__muldf3+0x458>
 800c880:	01000074 	movhi	r4,1
 800c884:	4913883a 	add	r9,r9,r4
 800c888:	1028d43a 	srli	r20,r2,16
 800c88c:	1004943a 	slli	r2,r2,16
 800c890:	802cd43a 	srli	r22,r16,16
 800c894:	843fffcc 	andi	r16,r16,65535
 800c898:	3cffffcc 	andi	r19,r7,65535
 800c89c:	9009883a 	mov	r4,r18
 800c8a0:	800b883a 	mov	r5,r16
 800c8a4:	a269883a 	add	r20,r20,r9
 800c8a8:	d8c00515 	stw	r3,20(sp)
 800c8ac:	d9800715 	stw	r6,28(sp)
 800c8b0:	da000615 	stw	r8,24(sp)
 800c8b4:	14e7883a 	add	r19,r2,r19
 800c8b8:	80009940 	call	8000994 <__mulsi3>
 800c8bc:	9009883a 	mov	r4,r18
 800c8c0:	b00b883a 	mov	r5,r22
 800c8c4:	d8800315 	stw	r2,12(sp)
 800c8c8:	80009940 	call	8000994 <__mulsi3>
 800c8cc:	b809883a 	mov	r4,r23
 800c8d0:	b00b883a 	mov	r5,r22
 800c8d4:	d8800215 	stw	r2,8(sp)
 800c8d8:	80009940 	call	8000994 <__mulsi3>
 800c8dc:	b80b883a 	mov	r5,r23
 800c8e0:	8009883a 	mov	r4,r16
 800c8e4:	d8800415 	stw	r2,16(sp)
 800c8e8:	80009940 	call	8000994 <__mulsi3>
 800c8ec:	da800317 	ldw	r10,12(sp)
 800c8f0:	d9c00217 	ldw	r7,8(sp)
 800c8f4:	d9000017 	ldw	r4,0(sp)
 800c8f8:	502ed43a 	srli	r23,r10,16
 800c8fc:	11c5883a 	add	r2,r2,r7
 800c900:	24e5883a 	add	r18,r4,r19
 800c904:	b885883a 	add	r2,r23,r2
 800c908:	d8c00517 	ldw	r3,20(sp)
 800c90c:	d9800717 	ldw	r6,28(sp)
 800c910:	da000617 	ldw	r8,24(sp)
 800c914:	da400417 	ldw	r9,16(sp)
 800c918:	11c0022e 	bgeu	r2,r7,800c924 <__muldf3+0x4f4>
 800c91c:	01000074 	movhi	r4,1
 800c920:	4913883a 	add	r9,r9,r4
 800c924:	100ed43a 	srli	r7,r2,16
 800c928:	1004943a 	slli	r2,r2,16
 800c92c:	55ffffcc 	andi	r23,r10,65535
 800c930:	3a53883a 	add	r9,r7,r9
 800c934:	8809883a 	mov	r4,r17
 800c938:	800b883a 	mov	r5,r16
 800c93c:	d8c00515 	stw	r3,20(sp)
 800c940:	d9800715 	stw	r6,28(sp)
 800c944:	da000615 	stw	r8,24(sp)
 800c948:	da400415 	stw	r9,16(sp)
 800c94c:	15ef883a 	add	r23,r2,r23
 800c950:	80009940 	call	8000994 <__mulsi3>
 800c954:	8809883a 	mov	r4,r17
 800c958:	b00b883a 	mov	r5,r22
 800c95c:	d8800215 	stw	r2,8(sp)
 800c960:	80009940 	call	8000994 <__mulsi3>
 800c964:	b00b883a 	mov	r5,r22
 800c968:	a809883a 	mov	r4,r21
 800c96c:	d8800315 	stw	r2,12(sp)
 800c970:	80009940 	call	8000994 <__mulsi3>
 800c974:	8009883a 	mov	r4,r16
 800c978:	a80b883a 	mov	r5,r21
 800c97c:	1023883a 	mov	r17,r2
 800c980:	80009940 	call	8000994 <__mulsi3>
 800c984:	d9c00217 	ldw	r7,8(sp)
 800c988:	da800317 	ldw	r10,12(sp)
 800c98c:	d8c00517 	ldw	r3,20(sp)
 800c990:	3808d43a 	srli	r4,r7,16
 800c994:	1285883a 	add	r2,r2,r10
 800c998:	d9800717 	ldw	r6,28(sp)
 800c99c:	2085883a 	add	r2,r4,r2
 800c9a0:	da000617 	ldw	r8,24(sp)
 800c9a4:	da400417 	ldw	r9,16(sp)
 800c9a8:	1280022e 	bgeu	r2,r10,800c9b4 <__muldf3+0x584>
 800c9ac:	01000074 	movhi	r4,1
 800c9b0:	8923883a 	add	r17,r17,r4
 800c9b4:	1008943a 	slli	r4,r2,16
 800c9b8:	39ffffcc 	andi	r7,r7,65535
 800c9bc:	e4b9883a 	add	fp,fp,r18
 800c9c0:	21cf883a 	add	r7,r4,r7
 800c9c4:	e4e7803a 	cmpltu	r19,fp,r19
 800c9c8:	3d0f883a 	add	r7,r7,r20
 800c9cc:	bf39883a 	add	fp,r23,fp
 800c9d0:	99c9883a 	add	r4,r19,r7
 800c9d4:	e5ef803a 	cmpltu	r23,fp,r23
 800c9d8:	490b883a 	add	r5,r9,r4
 800c9dc:	1004d43a 	srli	r2,r2,16
 800c9e0:	b965883a 	add	r18,r23,r5
 800c9e4:	24c9803a 	cmpltu	r4,r4,r19
 800c9e8:	3d29803a 	cmpltu	r20,r7,r20
 800c9ec:	a128b03a 	or	r20,r20,r4
 800c9f0:	95ef803a 	cmpltu	r23,r18,r23
 800c9f4:	2a53803a 	cmpltu	r9,r5,r9
 800c9f8:	a0a9883a 	add	r20,r20,r2
 800c9fc:	4deeb03a 	or	r23,r9,r23
 800ca00:	a5ef883a 	add	r23,r20,r23
 800ca04:	bc63883a 	add	r17,r23,r17
 800ca08:	e004927a 	slli	r2,fp,9
 800ca0c:	d9000117 	ldw	r4,4(sp)
 800ca10:	882e927a 	slli	r23,r17,9
 800ca14:	9022d5fa 	srli	r17,r18,23
 800ca18:	e038d5fa 	srli	fp,fp,23
 800ca1c:	1104b03a 	or	r2,r2,r4
 800ca20:	9024927a 	slli	r18,r18,9
 800ca24:	1004c03a 	cmpne	r2,r2,zero
 800ca28:	bc62b03a 	or	r17,r23,r17
 800ca2c:	1738b03a 	or	fp,r2,fp
 800ca30:	8880402c 	andhi	r2,r17,256
 800ca34:	e4a4b03a 	or	r18,fp,r18
 800ca38:	10000726 	beq	r2,zero,800ca58 <__muldf3+0x628>
 800ca3c:	9006d07a 	srli	r3,r18,1
 800ca40:	880497fa 	slli	r2,r17,31
 800ca44:	9480004c 	andi	r18,r18,1
 800ca48:	8822d07a 	srli	r17,r17,1
 800ca4c:	1ca4b03a 	or	r18,r3,r18
 800ca50:	14a4b03a 	or	r18,r2,r18
 800ca54:	4007883a 	mov	r3,r8
 800ca58:	1880ffc4 	addi	r2,r3,1023
 800ca5c:	0080460e 	bge	zero,r2,800cb78 <__muldf3+0x748>
 800ca60:	910001cc 	andi	r4,r18,7
 800ca64:	20000726 	beq	r4,zero,800ca84 <__muldf3+0x654>
 800ca68:	910003cc 	andi	r4,r18,15
 800ca6c:	01400104 	movi	r5,4
 800ca70:	21400426 	beq	r4,r5,800ca84 <__muldf3+0x654>
 800ca74:	9149883a 	add	r4,r18,r5
 800ca78:	24a5803a 	cmpltu	r18,r4,r18
 800ca7c:	8ca3883a 	add	r17,r17,r18
 800ca80:	2025883a 	mov	r18,r4
 800ca84:	8900402c 	andhi	r4,r17,256
 800ca88:	20000426 	beq	r4,zero,800ca9c <__muldf3+0x66c>
 800ca8c:	18810004 	addi	r2,r3,1024
 800ca90:	00ffc034 	movhi	r3,65280
 800ca94:	18ffffc4 	addi	r3,r3,-1
 800ca98:	88e2703a 	and	r17,r17,r3
 800ca9c:	00c1ff84 	movi	r3,2046
 800caa0:	18bf1316 	blt	r3,r2,800c6f0 <__alt_data_end+0xfc00c6f0>
 800caa4:	882c977a 	slli	r22,r17,29
 800caa8:	9024d0fa 	srli	r18,r18,3
 800caac:	8822927a 	slli	r17,r17,9
 800cab0:	1081ffcc 	andi	r2,r2,2047
 800cab4:	b4acb03a 	or	r22,r22,r18
 800cab8:	8820d33a 	srli	r16,r17,12
 800cabc:	3027883a 	mov	r19,r6
 800cac0:	003eba06 	br	800c5ac <__alt_data_end+0xfc00c5ac>
 800cac4:	8080022c 	andhi	r2,r16,8
 800cac8:	10000926 	beq	r2,zero,800caf0 <__muldf3+0x6c0>
 800cacc:	8880022c 	andhi	r2,r17,8
 800cad0:	1000071e 	bne	r2,zero,800caf0 <__muldf3+0x6c0>
 800cad4:	00800434 	movhi	r2,16
 800cad8:	8c000234 	orhi	r16,r17,8
 800cadc:	10bfffc4 	addi	r2,r2,-1
 800cae0:	e027883a 	mov	r19,fp
 800cae4:	80a0703a 	and	r16,r16,r2
 800cae8:	902d883a 	mov	r22,r18
 800caec:	003f1706 	br	800c74c <__alt_data_end+0xfc00c74c>
 800caf0:	00800434 	movhi	r2,16
 800caf4:	84000234 	orhi	r16,r16,8
 800caf8:	10bfffc4 	addi	r2,r2,-1
 800cafc:	80a0703a 	and	r16,r16,r2
 800cb00:	003f1206 	br	800c74c <__alt_data_end+0xfc00c74c>
 800cb04:	147ff604 	addi	r17,r2,-40
 800cb08:	3462983a 	sll	r17,r6,r17
 800cb0c:	0025883a 	mov	r18,zero
 800cb10:	003ef306 	br	800c6e0 <__alt_data_end+0xfc00c6e0>
 800cb14:	3009883a 	mov	r4,r6
 800cb18:	d9400215 	stw	r5,8(sp)
 800cb1c:	d9800715 	stw	r6,28(sp)
 800cb20:	da400415 	stw	r9,16(sp)
 800cb24:	da800315 	stw	r10,12(sp)
 800cb28:	800d79c0 	call	800d79c <__clzsi2>
 800cb2c:	10800804 	addi	r2,r2,32
 800cb30:	da800317 	ldw	r10,12(sp)
 800cb34:	da400417 	ldw	r9,16(sp)
 800cb38:	d9800717 	ldw	r6,28(sp)
 800cb3c:	d9400217 	ldw	r5,8(sp)
 800cb40:	003edd06 	br	800c6b8 <__alt_data_end+0xfc00c6b8>
 800cb44:	143ff604 	addi	r16,r2,-40
 800cb48:	ac20983a 	sll	r16,r21,r16
 800cb4c:	002d883a 	mov	r22,zero
 800cb50:	003ec106 	br	800c658 <__alt_data_end+0xfc00c658>
 800cb54:	d9800715 	stw	r6,28(sp)
 800cb58:	d9c00215 	stw	r7,8(sp)
 800cb5c:	da400415 	stw	r9,16(sp)
 800cb60:	800d79c0 	call	800d79c <__clzsi2>
 800cb64:	10800804 	addi	r2,r2,32
 800cb68:	da400417 	ldw	r9,16(sp)
 800cb6c:	d9c00217 	ldw	r7,8(sp)
 800cb70:	d9800717 	ldw	r6,28(sp)
 800cb74:	003eae06 	br	800c630 <__alt_data_end+0xfc00c630>
 800cb78:	00c00044 	movi	r3,1
 800cb7c:	1887c83a 	sub	r3,r3,r2
 800cb80:	01000e04 	movi	r4,56
 800cb84:	20fe8516 	blt	r4,r3,800c59c <__alt_data_end+0xfc00c59c>
 800cb88:	010007c4 	movi	r4,31
 800cb8c:	20c01b16 	blt	r4,r3,800cbfc <__muldf3+0x7cc>
 800cb90:	00800804 	movi	r2,32
 800cb94:	10c5c83a 	sub	r2,r2,r3
 800cb98:	888a983a 	sll	r5,r17,r2
 800cb9c:	90c8d83a 	srl	r4,r18,r3
 800cba0:	9084983a 	sll	r2,r18,r2
 800cba4:	88e2d83a 	srl	r17,r17,r3
 800cba8:	2906b03a 	or	r3,r5,r4
 800cbac:	1004c03a 	cmpne	r2,r2,zero
 800cbb0:	1886b03a 	or	r3,r3,r2
 800cbb4:	188001cc 	andi	r2,r3,7
 800cbb8:	10000726 	beq	r2,zero,800cbd8 <__muldf3+0x7a8>
 800cbbc:	188003cc 	andi	r2,r3,15
 800cbc0:	01000104 	movi	r4,4
 800cbc4:	11000426 	beq	r2,r4,800cbd8 <__muldf3+0x7a8>
 800cbc8:	1805883a 	mov	r2,r3
 800cbcc:	10c00104 	addi	r3,r2,4
 800cbd0:	1885803a 	cmpltu	r2,r3,r2
 800cbd4:	88a3883a 	add	r17,r17,r2
 800cbd8:	8880202c 	andhi	r2,r17,128
 800cbdc:	10001c26 	beq	r2,zero,800cc50 <__muldf3+0x820>
 800cbe0:	3027883a 	mov	r19,r6
 800cbe4:	00800044 	movi	r2,1
 800cbe8:	0021883a 	mov	r16,zero
 800cbec:	002d883a 	mov	r22,zero
 800cbf0:	003e6e06 	br	800c5ac <__alt_data_end+0xfc00c5ac>
 800cbf4:	4007883a 	mov	r3,r8
 800cbf8:	003f9706 	br	800ca58 <__alt_data_end+0xfc00ca58>
 800cbfc:	017ff844 	movi	r5,-31
 800cc00:	2885c83a 	sub	r2,r5,r2
 800cc04:	888ad83a 	srl	r5,r17,r2
 800cc08:	00800804 	movi	r2,32
 800cc0c:	18801a26 	beq	r3,r2,800cc78 <__muldf3+0x848>
 800cc10:	01001004 	movi	r4,64
 800cc14:	20c7c83a 	sub	r3,r4,r3
 800cc18:	88e2983a 	sll	r17,r17,r3
 800cc1c:	8ca4b03a 	or	r18,r17,r18
 800cc20:	9004c03a 	cmpne	r2,r18,zero
 800cc24:	2884b03a 	or	r2,r5,r2
 800cc28:	144001cc 	andi	r17,r2,7
 800cc2c:	88000d1e 	bne	r17,zero,800cc64 <__muldf3+0x834>
 800cc30:	0021883a 	mov	r16,zero
 800cc34:	102cd0fa 	srli	r22,r2,3
 800cc38:	3027883a 	mov	r19,r6
 800cc3c:	0005883a 	mov	r2,zero
 800cc40:	b46cb03a 	or	r22,r22,r17
 800cc44:	003e5906 	br	800c5ac <__alt_data_end+0xfc00c5ac>
 800cc48:	1007883a 	mov	r3,r2
 800cc4c:	0023883a 	mov	r17,zero
 800cc50:	8820927a 	slli	r16,r17,9
 800cc54:	1805883a 	mov	r2,r3
 800cc58:	8822977a 	slli	r17,r17,29
 800cc5c:	8020d33a 	srli	r16,r16,12
 800cc60:	003ff406 	br	800cc34 <__alt_data_end+0xfc00cc34>
 800cc64:	10c003cc 	andi	r3,r2,15
 800cc68:	01000104 	movi	r4,4
 800cc6c:	193ff626 	beq	r3,r4,800cc48 <__alt_data_end+0xfc00cc48>
 800cc70:	0023883a 	mov	r17,zero
 800cc74:	003fd506 	br	800cbcc <__alt_data_end+0xfc00cbcc>
 800cc78:	0023883a 	mov	r17,zero
 800cc7c:	003fe706 	br	800cc1c <__alt_data_end+0xfc00cc1c>
 800cc80:	00800434 	movhi	r2,16
 800cc84:	8c000234 	orhi	r16,r17,8
 800cc88:	10bfffc4 	addi	r2,r2,-1
 800cc8c:	3027883a 	mov	r19,r6
 800cc90:	80a0703a 	and	r16,r16,r2
 800cc94:	902d883a 	mov	r22,r18
 800cc98:	003eac06 	br	800c74c <__alt_data_end+0xfc00c74c>

0800cc9c <__subdf3>:
 800cc9c:	02000434 	movhi	r8,16
 800cca0:	423fffc4 	addi	r8,r8,-1
 800cca4:	defffb04 	addi	sp,sp,-20
 800cca8:	2a14703a 	and	r10,r5,r8
 800ccac:	3812d53a 	srli	r9,r7,20
 800ccb0:	3a10703a 	and	r8,r7,r8
 800ccb4:	2006d77a 	srli	r3,r4,29
 800ccb8:	3004d77a 	srli	r2,r6,29
 800ccbc:	dc000015 	stw	r16,0(sp)
 800ccc0:	501490fa 	slli	r10,r10,3
 800ccc4:	2820d53a 	srli	r16,r5,20
 800ccc8:	401090fa 	slli	r8,r8,3
 800cccc:	dc800215 	stw	r18,8(sp)
 800ccd0:	dc400115 	stw	r17,4(sp)
 800ccd4:	dfc00415 	stw	ra,16(sp)
 800ccd8:	202290fa 	slli	r17,r4,3
 800ccdc:	dcc00315 	stw	r19,12(sp)
 800cce0:	4a41ffcc 	andi	r9,r9,2047
 800cce4:	0101ffc4 	movi	r4,2047
 800cce8:	2824d7fa 	srli	r18,r5,31
 800ccec:	8401ffcc 	andi	r16,r16,2047
 800ccf0:	50c6b03a 	or	r3,r10,r3
 800ccf4:	380ed7fa 	srli	r7,r7,31
 800ccf8:	408ab03a 	or	r5,r8,r2
 800ccfc:	300c90fa 	slli	r6,r6,3
 800cd00:	49009626 	beq	r9,r4,800cf5c <__subdf3+0x2c0>
 800cd04:	39c0005c 	xori	r7,r7,1
 800cd08:	8245c83a 	sub	r2,r16,r9
 800cd0c:	3c807426 	beq	r7,r18,800cee0 <__subdf3+0x244>
 800cd10:	0080af0e 	bge	zero,r2,800cfd0 <__subdf3+0x334>
 800cd14:	48002a1e 	bne	r9,zero,800cdc0 <__subdf3+0x124>
 800cd18:	2988b03a 	or	r4,r5,r6
 800cd1c:	20009a1e 	bne	r4,zero,800cf88 <__subdf3+0x2ec>
 800cd20:	888001cc 	andi	r2,r17,7
 800cd24:	10000726 	beq	r2,zero,800cd44 <__subdf3+0xa8>
 800cd28:	888003cc 	andi	r2,r17,15
 800cd2c:	01000104 	movi	r4,4
 800cd30:	11000426 	beq	r2,r4,800cd44 <__subdf3+0xa8>
 800cd34:	890b883a 	add	r5,r17,r4
 800cd38:	2c63803a 	cmpltu	r17,r5,r17
 800cd3c:	1c47883a 	add	r3,r3,r17
 800cd40:	2823883a 	mov	r17,r5
 800cd44:	1880202c 	andhi	r2,r3,128
 800cd48:	10005926 	beq	r2,zero,800ceb0 <__subdf3+0x214>
 800cd4c:	84000044 	addi	r16,r16,1
 800cd50:	0081ffc4 	movi	r2,2047
 800cd54:	8080be26 	beq	r16,r2,800d050 <__subdf3+0x3b4>
 800cd58:	017fe034 	movhi	r5,65408
 800cd5c:	297fffc4 	addi	r5,r5,-1
 800cd60:	1946703a 	and	r3,r3,r5
 800cd64:	1804977a 	slli	r2,r3,29
 800cd68:	1806927a 	slli	r3,r3,9
 800cd6c:	8822d0fa 	srli	r17,r17,3
 800cd70:	8401ffcc 	andi	r16,r16,2047
 800cd74:	180ad33a 	srli	r5,r3,12
 800cd78:	9100004c 	andi	r4,r18,1
 800cd7c:	1444b03a 	or	r2,r2,r17
 800cd80:	80c1ffcc 	andi	r3,r16,2047
 800cd84:	1820953a 	slli	r16,r3,20
 800cd88:	20c03fcc 	andi	r3,r4,255
 800cd8c:	180897fa 	slli	r4,r3,31
 800cd90:	00c00434 	movhi	r3,16
 800cd94:	18ffffc4 	addi	r3,r3,-1
 800cd98:	28c6703a 	and	r3,r5,r3
 800cd9c:	1c06b03a 	or	r3,r3,r16
 800cda0:	1906b03a 	or	r3,r3,r4
 800cda4:	dfc00417 	ldw	ra,16(sp)
 800cda8:	dcc00317 	ldw	r19,12(sp)
 800cdac:	dc800217 	ldw	r18,8(sp)
 800cdb0:	dc400117 	ldw	r17,4(sp)
 800cdb4:	dc000017 	ldw	r16,0(sp)
 800cdb8:	dec00504 	addi	sp,sp,20
 800cdbc:	f800283a 	ret
 800cdc0:	0101ffc4 	movi	r4,2047
 800cdc4:	813fd626 	beq	r16,r4,800cd20 <__alt_data_end+0xfc00cd20>
 800cdc8:	29402034 	orhi	r5,r5,128
 800cdcc:	01000e04 	movi	r4,56
 800cdd0:	2080a316 	blt	r4,r2,800d060 <__subdf3+0x3c4>
 800cdd4:	010007c4 	movi	r4,31
 800cdd8:	2080c616 	blt	r4,r2,800d0f4 <__subdf3+0x458>
 800cddc:	01000804 	movi	r4,32
 800cde0:	2089c83a 	sub	r4,r4,r2
 800cde4:	2910983a 	sll	r8,r5,r4
 800cde8:	308ed83a 	srl	r7,r6,r2
 800cdec:	3108983a 	sll	r4,r6,r4
 800cdf0:	2884d83a 	srl	r2,r5,r2
 800cdf4:	41ccb03a 	or	r6,r8,r7
 800cdf8:	2008c03a 	cmpne	r4,r4,zero
 800cdfc:	310cb03a 	or	r6,r6,r4
 800ce00:	898dc83a 	sub	r6,r17,r6
 800ce04:	89a3803a 	cmpltu	r17,r17,r6
 800ce08:	1887c83a 	sub	r3,r3,r2
 800ce0c:	1c47c83a 	sub	r3,r3,r17
 800ce10:	3023883a 	mov	r17,r6
 800ce14:	1880202c 	andhi	r2,r3,128
 800ce18:	10002326 	beq	r2,zero,800cea8 <__subdf3+0x20c>
 800ce1c:	04c02034 	movhi	r19,128
 800ce20:	9cffffc4 	addi	r19,r19,-1
 800ce24:	1ce6703a 	and	r19,r3,r19
 800ce28:	98007a26 	beq	r19,zero,800d014 <__subdf3+0x378>
 800ce2c:	9809883a 	mov	r4,r19
 800ce30:	800d79c0 	call	800d79c <__clzsi2>
 800ce34:	113ffe04 	addi	r4,r2,-8
 800ce38:	00c007c4 	movi	r3,31
 800ce3c:	19007b16 	blt	r3,r4,800d02c <__subdf3+0x390>
 800ce40:	00800804 	movi	r2,32
 800ce44:	1105c83a 	sub	r2,r2,r4
 800ce48:	8884d83a 	srl	r2,r17,r2
 800ce4c:	9906983a 	sll	r3,r19,r4
 800ce50:	8922983a 	sll	r17,r17,r4
 800ce54:	10c4b03a 	or	r2,r2,r3
 800ce58:	24007816 	blt	r4,r16,800d03c <__subdf3+0x3a0>
 800ce5c:	2421c83a 	sub	r16,r4,r16
 800ce60:	80c00044 	addi	r3,r16,1
 800ce64:	010007c4 	movi	r4,31
 800ce68:	20c09516 	blt	r4,r3,800d0c0 <__subdf3+0x424>
 800ce6c:	01400804 	movi	r5,32
 800ce70:	28cbc83a 	sub	r5,r5,r3
 800ce74:	88c8d83a 	srl	r4,r17,r3
 800ce78:	8962983a 	sll	r17,r17,r5
 800ce7c:	114a983a 	sll	r5,r2,r5
 800ce80:	10c6d83a 	srl	r3,r2,r3
 800ce84:	8804c03a 	cmpne	r2,r17,zero
 800ce88:	290ab03a 	or	r5,r5,r4
 800ce8c:	28a2b03a 	or	r17,r5,r2
 800ce90:	0021883a 	mov	r16,zero
 800ce94:	003fa206 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800ce98:	2090b03a 	or	r8,r4,r2
 800ce9c:	40018e26 	beq	r8,zero,800d4d8 <__subdf3+0x83c>
 800cea0:	1007883a 	mov	r3,r2
 800cea4:	2023883a 	mov	r17,r4
 800cea8:	888001cc 	andi	r2,r17,7
 800ceac:	103f9e1e 	bne	r2,zero,800cd28 <__alt_data_end+0xfc00cd28>
 800ceb0:	1804977a 	slli	r2,r3,29
 800ceb4:	8822d0fa 	srli	r17,r17,3
 800ceb8:	1810d0fa 	srli	r8,r3,3
 800cebc:	9100004c 	andi	r4,r18,1
 800cec0:	1444b03a 	or	r2,r2,r17
 800cec4:	00c1ffc4 	movi	r3,2047
 800cec8:	80c02826 	beq	r16,r3,800cf6c <__subdf3+0x2d0>
 800cecc:	01400434 	movhi	r5,16
 800ced0:	297fffc4 	addi	r5,r5,-1
 800ced4:	80e0703a 	and	r16,r16,r3
 800ced8:	414a703a 	and	r5,r8,r5
 800cedc:	003fa806 	br	800cd80 <__alt_data_end+0xfc00cd80>
 800cee0:	0080630e 	bge	zero,r2,800d070 <__subdf3+0x3d4>
 800cee4:	48003026 	beq	r9,zero,800cfa8 <__subdf3+0x30c>
 800cee8:	0101ffc4 	movi	r4,2047
 800ceec:	813f8c26 	beq	r16,r4,800cd20 <__alt_data_end+0xfc00cd20>
 800cef0:	29402034 	orhi	r5,r5,128
 800cef4:	01000e04 	movi	r4,56
 800cef8:	2080a90e 	bge	r4,r2,800d1a0 <__subdf3+0x504>
 800cefc:	298cb03a 	or	r6,r5,r6
 800cf00:	3012c03a 	cmpne	r9,r6,zero
 800cf04:	0005883a 	mov	r2,zero
 800cf08:	4c53883a 	add	r9,r9,r17
 800cf0c:	4c63803a 	cmpltu	r17,r9,r17
 800cf10:	10c7883a 	add	r3,r2,r3
 800cf14:	88c7883a 	add	r3,r17,r3
 800cf18:	4823883a 	mov	r17,r9
 800cf1c:	1880202c 	andhi	r2,r3,128
 800cf20:	1000d026 	beq	r2,zero,800d264 <__subdf3+0x5c8>
 800cf24:	84000044 	addi	r16,r16,1
 800cf28:	0081ffc4 	movi	r2,2047
 800cf2c:	8080fe26 	beq	r16,r2,800d328 <__subdf3+0x68c>
 800cf30:	00bfe034 	movhi	r2,65408
 800cf34:	10bfffc4 	addi	r2,r2,-1
 800cf38:	1886703a 	and	r3,r3,r2
 800cf3c:	880ad07a 	srli	r5,r17,1
 800cf40:	180497fa 	slli	r2,r3,31
 800cf44:	8900004c 	andi	r4,r17,1
 800cf48:	2922b03a 	or	r17,r5,r4
 800cf4c:	1806d07a 	srli	r3,r3,1
 800cf50:	1462b03a 	or	r17,r2,r17
 800cf54:	3825883a 	mov	r18,r7
 800cf58:	003f7106 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800cf5c:	2984b03a 	or	r2,r5,r6
 800cf60:	103f6826 	beq	r2,zero,800cd04 <__alt_data_end+0xfc00cd04>
 800cf64:	39c03fcc 	andi	r7,r7,255
 800cf68:	003f6706 	br	800cd08 <__alt_data_end+0xfc00cd08>
 800cf6c:	4086b03a 	or	r3,r8,r2
 800cf70:	18015226 	beq	r3,zero,800d4bc <__subdf3+0x820>
 800cf74:	00c00434 	movhi	r3,16
 800cf78:	41400234 	orhi	r5,r8,8
 800cf7c:	18ffffc4 	addi	r3,r3,-1
 800cf80:	28ca703a 	and	r5,r5,r3
 800cf84:	003f7e06 	br	800cd80 <__alt_data_end+0xfc00cd80>
 800cf88:	10bfffc4 	addi	r2,r2,-1
 800cf8c:	1000491e 	bne	r2,zero,800d0b4 <__subdf3+0x418>
 800cf90:	898fc83a 	sub	r7,r17,r6
 800cf94:	89e3803a 	cmpltu	r17,r17,r7
 800cf98:	1947c83a 	sub	r3,r3,r5
 800cf9c:	1c47c83a 	sub	r3,r3,r17
 800cfa0:	3823883a 	mov	r17,r7
 800cfa4:	003f9b06 	br	800ce14 <__alt_data_end+0xfc00ce14>
 800cfa8:	2988b03a 	or	r4,r5,r6
 800cfac:	203f5c26 	beq	r4,zero,800cd20 <__alt_data_end+0xfc00cd20>
 800cfb0:	10bfffc4 	addi	r2,r2,-1
 800cfb4:	1000931e 	bne	r2,zero,800d204 <__subdf3+0x568>
 800cfb8:	898d883a 	add	r6,r17,r6
 800cfbc:	3463803a 	cmpltu	r17,r6,r17
 800cfc0:	1947883a 	add	r3,r3,r5
 800cfc4:	88c7883a 	add	r3,r17,r3
 800cfc8:	3023883a 	mov	r17,r6
 800cfcc:	003fd306 	br	800cf1c <__alt_data_end+0xfc00cf1c>
 800cfd0:	1000541e 	bne	r2,zero,800d124 <__subdf3+0x488>
 800cfd4:	80800044 	addi	r2,r16,1
 800cfd8:	1081ffcc 	andi	r2,r2,2047
 800cfdc:	01000044 	movi	r4,1
 800cfe0:	2080a20e 	bge	r4,r2,800d26c <__subdf3+0x5d0>
 800cfe4:	8989c83a 	sub	r4,r17,r6
 800cfe8:	8905803a 	cmpltu	r2,r17,r4
 800cfec:	1967c83a 	sub	r19,r3,r5
 800cff0:	98a7c83a 	sub	r19,r19,r2
 800cff4:	9880202c 	andhi	r2,r19,128
 800cff8:	10006326 	beq	r2,zero,800d188 <__subdf3+0x4ec>
 800cffc:	3463c83a 	sub	r17,r6,r17
 800d000:	28c7c83a 	sub	r3,r5,r3
 800d004:	344d803a 	cmpltu	r6,r6,r17
 800d008:	19a7c83a 	sub	r19,r3,r6
 800d00c:	3825883a 	mov	r18,r7
 800d010:	983f861e 	bne	r19,zero,800ce2c <__alt_data_end+0xfc00ce2c>
 800d014:	8809883a 	mov	r4,r17
 800d018:	800d79c0 	call	800d79c <__clzsi2>
 800d01c:	10800804 	addi	r2,r2,32
 800d020:	113ffe04 	addi	r4,r2,-8
 800d024:	00c007c4 	movi	r3,31
 800d028:	193f850e 	bge	r3,r4,800ce40 <__alt_data_end+0xfc00ce40>
 800d02c:	10bff604 	addi	r2,r2,-40
 800d030:	8884983a 	sll	r2,r17,r2
 800d034:	0023883a 	mov	r17,zero
 800d038:	243f880e 	bge	r4,r16,800ce5c <__alt_data_end+0xfc00ce5c>
 800d03c:	00ffe034 	movhi	r3,65408
 800d040:	18ffffc4 	addi	r3,r3,-1
 800d044:	8121c83a 	sub	r16,r16,r4
 800d048:	10c6703a 	and	r3,r2,r3
 800d04c:	003f3406 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d050:	9100004c 	andi	r4,r18,1
 800d054:	000b883a 	mov	r5,zero
 800d058:	0005883a 	mov	r2,zero
 800d05c:	003f4806 	br	800cd80 <__alt_data_end+0xfc00cd80>
 800d060:	298cb03a 	or	r6,r5,r6
 800d064:	300cc03a 	cmpne	r6,r6,zero
 800d068:	0005883a 	mov	r2,zero
 800d06c:	003f6406 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d070:	10009a1e 	bne	r2,zero,800d2dc <__subdf3+0x640>
 800d074:	82400044 	addi	r9,r16,1
 800d078:	4881ffcc 	andi	r2,r9,2047
 800d07c:	02800044 	movi	r10,1
 800d080:	5080670e 	bge	r10,r2,800d220 <__subdf3+0x584>
 800d084:	0081ffc4 	movi	r2,2047
 800d088:	4880af26 	beq	r9,r2,800d348 <__subdf3+0x6ac>
 800d08c:	898d883a 	add	r6,r17,r6
 800d090:	1945883a 	add	r2,r3,r5
 800d094:	3447803a 	cmpltu	r3,r6,r17
 800d098:	1887883a 	add	r3,r3,r2
 800d09c:	182297fa 	slli	r17,r3,31
 800d0a0:	300cd07a 	srli	r6,r6,1
 800d0a4:	1806d07a 	srli	r3,r3,1
 800d0a8:	4821883a 	mov	r16,r9
 800d0ac:	89a2b03a 	or	r17,r17,r6
 800d0b0:	003f1b06 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d0b4:	0101ffc4 	movi	r4,2047
 800d0b8:	813f441e 	bne	r16,r4,800cdcc <__alt_data_end+0xfc00cdcc>
 800d0bc:	003f1806 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d0c0:	843ff844 	addi	r16,r16,-31
 800d0c4:	01400804 	movi	r5,32
 800d0c8:	1408d83a 	srl	r4,r2,r16
 800d0cc:	19405026 	beq	r3,r5,800d210 <__subdf3+0x574>
 800d0d0:	01401004 	movi	r5,64
 800d0d4:	28c7c83a 	sub	r3,r5,r3
 800d0d8:	10c4983a 	sll	r2,r2,r3
 800d0dc:	88a2b03a 	or	r17,r17,r2
 800d0e0:	8822c03a 	cmpne	r17,r17,zero
 800d0e4:	2462b03a 	or	r17,r4,r17
 800d0e8:	0007883a 	mov	r3,zero
 800d0ec:	0021883a 	mov	r16,zero
 800d0f0:	003f6d06 	br	800cea8 <__alt_data_end+0xfc00cea8>
 800d0f4:	11fff804 	addi	r7,r2,-32
 800d0f8:	01000804 	movi	r4,32
 800d0fc:	29ced83a 	srl	r7,r5,r7
 800d100:	11004526 	beq	r2,r4,800d218 <__subdf3+0x57c>
 800d104:	01001004 	movi	r4,64
 800d108:	2089c83a 	sub	r4,r4,r2
 800d10c:	2904983a 	sll	r2,r5,r4
 800d110:	118cb03a 	or	r6,r2,r6
 800d114:	300cc03a 	cmpne	r6,r6,zero
 800d118:	398cb03a 	or	r6,r7,r6
 800d11c:	0005883a 	mov	r2,zero
 800d120:	003f3706 	br	800ce00 <__alt_data_end+0xfc00ce00>
 800d124:	80002a26 	beq	r16,zero,800d1d0 <__subdf3+0x534>
 800d128:	0101ffc4 	movi	r4,2047
 800d12c:	49006626 	beq	r9,r4,800d2c8 <__subdf3+0x62c>
 800d130:	0085c83a 	sub	r2,zero,r2
 800d134:	18c02034 	orhi	r3,r3,128
 800d138:	01000e04 	movi	r4,56
 800d13c:	20807e16 	blt	r4,r2,800d338 <__subdf3+0x69c>
 800d140:	010007c4 	movi	r4,31
 800d144:	2080e716 	blt	r4,r2,800d4e4 <__subdf3+0x848>
 800d148:	01000804 	movi	r4,32
 800d14c:	2089c83a 	sub	r4,r4,r2
 800d150:	1914983a 	sll	r10,r3,r4
 800d154:	8890d83a 	srl	r8,r17,r2
 800d158:	8908983a 	sll	r4,r17,r4
 800d15c:	1884d83a 	srl	r2,r3,r2
 800d160:	5222b03a 	or	r17,r10,r8
 800d164:	2006c03a 	cmpne	r3,r4,zero
 800d168:	88e2b03a 	or	r17,r17,r3
 800d16c:	3463c83a 	sub	r17,r6,r17
 800d170:	2885c83a 	sub	r2,r5,r2
 800d174:	344d803a 	cmpltu	r6,r6,r17
 800d178:	1187c83a 	sub	r3,r2,r6
 800d17c:	4821883a 	mov	r16,r9
 800d180:	3825883a 	mov	r18,r7
 800d184:	003f2306 	br	800ce14 <__alt_data_end+0xfc00ce14>
 800d188:	24d0b03a 	or	r8,r4,r19
 800d18c:	40001b1e 	bne	r8,zero,800d1fc <__subdf3+0x560>
 800d190:	0005883a 	mov	r2,zero
 800d194:	0009883a 	mov	r4,zero
 800d198:	0021883a 	mov	r16,zero
 800d19c:	003f4906 	br	800cec4 <__alt_data_end+0xfc00cec4>
 800d1a0:	010007c4 	movi	r4,31
 800d1a4:	20803a16 	blt	r4,r2,800d290 <__subdf3+0x5f4>
 800d1a8:	01000804 	movi	r4,32
 800d1ac:	2089c83a 	sub	r4,r4,r2
 800d1b0:	2912983a 	sll	r9,r5,r4
 800d1b4:	3090d83a 	srl	r8,r6,r2
 800d1b8:	3108983a 	sll	r4,r6,r4
 800d1bc:	2884d83a 	srl	r2,r5,r2
 800d1c0:	4a12b03a 	or	r9,r9,r8
 800d1c4:	2008c03a 	cmpne	r4,r4,zero
 800d1c8:	4912b03a 	or	r9,r9,r4
 800d1cc:	003f4e06 	br	800cf08 <__alt_data_end+0xfc00cf08>
 800d1d0:	1c48b03a 	or	r4,r3,r17
 800d1d4:	20003c26 	beq	r4,zero,800d2c8 <__subdf3+0x62c>
 800d1d8:	0084303a 	nor	r2,zero,r2
 800d1dc:	1000381e 	bne	r2,zero,800d2c0 <__subdf3+0x624>
 800d1e0:	3463c83a 	sub	r17,r6,r17
 800d1e4:	28c5c83a 	sub	r2,r5,r3
 800d1e8:	344d803a 	cmpltu	r6,r6,r17
 800d1ec:	1187c83a 	sub	r3,r2,r6
 800d1f0:	4821883a 	mov	r16,r9
 800d1f4:	3825883a 	mov	r18,r7
 800d1f8:	003f0606 	br	800ce14 <__alt_data_end+0xfc00ce14>
 800d1fc:	2023883a 	mov	r17,r4
 800d200:	003f0906 	br	800ce28 <__alt_data_end+0xfc00ce28>
 800d204:	0101ffc4 	movi	r4,2047
 800d208:	813f3a1e 	bne	r16,r4,800cef4 <__alt_data_end+0xfc00cef4>
 800d20c:	003ec406 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d210:	0005883a 	mov	r2,zero
 800d214:	003fb106 	br	800d0dc <__alt_data_end+0xfc00d0dc>
 800d218:	0005883a 	mov	r2,zero
 800d21c:	003fbc06 	br	800d110 <__alt_data_end+0xfc00d110>
 800d220:	1c44b03a 	or	r2,r3,r17
 800d224:	80008e1e 	bne	r16,zero,800d460 <__subdf3+0x7c4>
 800d228:	1000c826 	beq	r2,zero,800d54c <__subdf3+0x8b0>
 800d22c:	2984b03a 	or	r2,r5,r6
 800d230:	103ebb26 	beq	r2,zero,800cd20 <__alt_data_end+0xfc00cd20>
 800d234:	8989883a 	add	r4,r17,r6
 800d238:	1945883a 	add	r2,r3,r5
 800d23c:	2447803a 	cmpltu	r3,r4,r17
 800d240:	1887883a 	add	r3,r3,r2
 800d244:	1880202c 	andhi	r2,r3,128
 800d248:	2023883a 	mov	r17,r4
 800d24c:	103f1626 	beq	r2,zero,800cea8 <__alt_data_end+0xfc00cea8>
 800d250:	00bfe034 	movhi	r2,65408
 800d254:	10bfffc4 	addi	r2,r2,-1
 800d258:	5021883a 	mov	r16,r10
 800d25c:	1886703a 	and	r3,r3,r2
 800d260:	003eaf06 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d264:	3825883a 	mov	r18,r7
 800d268:	003f0f06 	br	800cea8 <__alt_data_end+0xfc00cea8>
 800d26c:	1c44b03a 	or	r2,r3,r17
 800d270:	8000251e 	bne	r16,zero,800d308 <__subdf3+0x66c>
 800d274:	1000661e 	bne	r2,zero,800d410 <__subdf3+0x774>
 800d278:	2990b03a 	or	r8,r5,r6
 800d27c:	40009626 	beq	r8,zero,800d4d8 <__subdf3+0x83c>
 800d280:	2807883a 	mov	r3,r5
 800d284:	3023883a 	mov	r17,r6
 800d288:	3825883a 	mov	r18,r7
 800d28c:	003ea406 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d290:	127ff804 	addi	r9,r2,-32
 800d294:	01000804 	movi	r4,32
 800d298:	2a52d83a 	srl	r9,r5,r9
 800d29c:	11008c26 	beq	r2,r4,800d4d0 <__subdf3+0x834>
 800d2a0:	01001004 	movi	r4,64
 800d2a4:	2085c83a 	sub	r2,r4,r2
 800d2a8:	2884983a 	sll	r2,r5,r2
 800d2ac:	118cb03a 	or	r6,r2,r6
 800d2b0:	300cc03a 	cmpne	r6,r6,zero
 800d2b4:	4992b03a 	or	r9,r9,r6
 800d2b8:	0005883a 	mov	r2,zero
 800d2bc:	003f1206 	br	800cf08 <__alt_data_end+0xfc00cf08>
 800d2c0:	0101ffc4 	movi	r4,2047
 800d2c4:	493f9c1e 	bne	r9,r4,800d138 <__alt_data_end+0xfc00d138>
 800d2c8:	2807883a 	mov	r3,r5
 800d2cc:	3023883a 	mov	r17,r6
 800d2d0:	4821883a 	mov	r16,r9
 800d2d4:	3825883a 	mov	r18,r7
 800d2d8:	003e9106 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d2dc:	80001f1e 	bne	r16,zero,800d35c <__subdf3+0x6c0>
 800d2e0:	1c48b03a 	or	r4,r3,r17
 800d2e4:	20005a26 	beq	r4,zero,800d450 <__subdf3+0x7b4>
 800d2e8:	0084303a 	nor	r2,zero,r2
 800d2ec:	1000561e 	bne	r2,zero,800d448 <__subdf3+0x7ac>
 800d2f0:	89a3883a 	add	r17,r17,r6
 800d2f4:	1945883a 	add	r2,r3,r5
 800d2f8:	898d803a 	cmpltu	r6,r17,r6
 800d2fc:	3087883a 	add	r3,r6,r2
 800d300:	4821883a 	mov	r16,r9
 800d304:	003f0506 	br	800cf1c <__alt_data_end+0xfc00cf1c>
 800d308:	10002b1e 	bne	r2,zero,800d3b8 <__subdf3+0x71c>
 800d30c:	2984b03a 	or	r2,r5,r6
 800d310:	10008026 	beq	r2,zero,800d514 <__subdf3+0x878>
 800d314:	2807883a 	mov	r3,r5
 800d318:	3023883a 	mov	r17,r6
 800d31c:	3825883a 	mov	r18,r7
 800d320:	0401ffc4 	movi	r16,2047
 800d324:	003e7e06 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d328:	3809883a 	mov	r4,r7
 800d32c:	0011883a 	mov	r8,zero
 800d330:	0005883a 	mov	r2,zero
 800d334:	003ee306 	br	800cec4 <__alt_data_end+0xfc00cec4>
 800d338:	1c62b03a 	or	r17,r3,r17
 800d33c:	8822c03a 	cmpne	r17,r17,zero
 800d340:	0005883a 	mov	r2,zero
 800d344:	003f8906 	br	800d16c <__alt_data_end+0xfc00d16c>
 800d348:	3809883a 	mov	r4,r7
 800d34c:	4821883a 	mov	r16,r9
 800d350:	0011883a 	mov	r8,zero
 800d354:	0005883a 	mov	r2,zero
 800d358:	003eda06 	br	800cec4 <__alt_data_end+0xfc00cec4>
 800d35c:	0101ffc4 	movi	r4,2047
 800d360:	49003b26 	beq	r9,r4,800d450 <__subdf3+0x7b4>
 800d364:	0085c83a 	sub	r2,zero,r2
 800d368:	18c02034 	orhi	r3,r3,128
 800d36c:	01000e04 	movi	r4,56
 800d370:	20806e16 	blt	r4,r2,800d52c <__subdf3+0x890>
 800d374:	010007c4 	movi	r4,31
 800d378:	20807716 	blt	r4,r2,800d558 <__subdf3+0x8bc>
 800d37c:	01000804 	movi	r4,32
 800d380:	2089c83a 	sub	r4,r4,r2
 800d384:	1914983a 	sll	r10,r3,r4
 800d388:	8890d83a 	srl	r8,r17,r2
 800d38c:	8908983a 	sll	r4,r17,r4
 800d390:	1884d83a 	srl	r2,r3,r2
 800d394:	5222b03a 	or	r17,r10,r8
 800d398:	2006c03a 	cmpne	r3,r4,zero
 800d39c:	88e2b03a 	or	r17,r17,r3
 800d3a0:	89a3883a 	add	r17,r17,r6
 800d3a4:	1145883a 	add	r2,r2,r5
 800d3a8:	898d803a 	cmpltu	r6,r17,r6
 800d3ac:	3087883a 	add	r3,r6,r2
 800d3b0:	4821883a 	mov	r16,r9
 800d3b4:	003ed906 	br	800cf1c <__alt_data_end+0xfc00cf1c>
 800d3b8:	2984b03a 	or	r2,r5,r6
 800d3bc:	10004226 	beq	r2,zero,800d4c8 <__subdf3+0x82c>
 800d3c0:	1808d0fa 	srli	r4,r3,3
 800d3c4:	8822d0fa 	srli	r17,r17,3
 800d3c8:	1806977a 	slli	r3,r3,29
 800d3cc:	2080022c 	andhi	r2,r4,8
 800d3d0:	1c62b03a 	or	r17,r3,r17
 800d3d4:	10000826 	beq	r2,zero,800d3f8 <__subdf3+0x75c>
 800d3d8:	2812d0fa 	srli	r9,r5,3
 800d3dc:	4880022c 	andhi	r2,r9,8
 800d3e0:	1000051e 	bne	r2,zero,800d3f8 <__subdf3+0x75c>
 800d3e4:	300cd0fa 	srli	r6,r6,3
 800d3e8:	2804977a 	slli	r2,r5,29
 800d3ec:	4809883a 	mov	r4,r9
 800d3f0:	3825883a 	mov	r18,r7
 800d3f4:	11a2b03a 	or	r17,r2,r6
 800d3f8:	8806d77a 	srli	r3,r17,29
 800d3fc:	200890fa 	slli	r4,r4,3
 800d400:	882290fa 	slli	r17,r17,3
 800d404:	0401ffc4 	movi	r16,2047
 800d408:	1906b03a 	or	r3,r3,r4
 800d40c:	003e4406 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d410:	2984b03a 	or	r2,r5,r6
 800d414:	103e4226 	beq	r2,zero,800cd20 <__alt_data_end+0xfc00cd20>
 800d418:	8989c83a 	sub	r4,r17,r6
 800d41c:	8911803a 	cmpltu	r8,r17,r4
 800d420:	1945c83a 	sub	r2,r3,r5
 800d424:	1205c83a 	sub	r2,r2,r8
 800d428:	1200202c 	andhi	r8,r2,128
 800d42c:	403e9a26 	beq	r8,zero,800ce98 <__alt_data_end+0xfc00ce98>
 800d430:	3463c83a 	sub	r17,r6,r17
 800d434:	28c5c83a 	sub	r2,r5,r3
 800d438:	344d803a 	cmpltu	r6,r6,r17
 800d43c:	1187c83a 	sub	r3,r2,r6
 800d440:	3825883a 	mov	r18,r7
 800d444:	003e3606 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d448:	0101ffc4 	movi	r4,2047
 800d44c:	493fc71e 	bne	r9,r4,800d36c <__alt_data_end+0xfc00d36c>
 800d450:	2807883a 	mov	r3,r5
 800d454:	3023883a 	mov	r17,r6
 800d458:	4821883a 	mov	r16,r9
 800d45c:	003e3006 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d460:	10003626 	beq	r2,zero,800d53c <__subdf3+0x8a0>
 800d464:	2984b03a 	or	r2,r5,r6
 800d468:	10001726 	beq	r2,zero,800d4c8 <__subdf3+0x82c>
 800d46c:	1808d0fa 	srli	r4,r3,3
 800d470:	8822d0fa 	srli	r17,r17,3
 800d474:	1806977a 	slli	r3,r3,29
 800d478:	2080022c 	andhi	r2,r4,8
 800d47c:	1c62b03a 	or	r17,r3,r17
 800d480:	10000726 	beq	r2,zero,800d4a0 <__subdf3+0x804>
 800d484:	2812d0fa 	srli	r9,r5,3
 800d488:	4880022c 	andhi	r2,r9,8
 800d48c:	1000041e 	bne	r2,zero,800d4a0 <__subdf3+0x804>
 800d490:	300cd0fa 	srli	r6,r6,3
 800d494:	2804977a 	slli	r2,r5,29
 800d498:	4809883a 	mov	r4,r9
 800d49c:	11a2b03a 	or	r17,r2,r6
 800d4a0:	8806d77a 	srli	r3,r17,29
 800d4a4:	200890fa 	slli	r4,r4,3
 800d4a8:	882290fa 	slli	r17,r17,3
 800d4ac:	3825883a 	mov	r18,r7
 800d4b0:	1906b03a 	or	r3,r3,r4
 800d4b4:	0401ffc4 	movi	r16,2047
 800d4b8:	003e1906 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d4bc:	000b883a 	mov	r5,zero
 800d4c0:	0005883a 	mov	r2,zero
 800d4c4:	003e2e06 	br	800cd80 <__alt_data_end+0xfc00cd80>
 800d4c8:	0401ffc4 	movi	r16,2047
 800d4cc:	003e1406 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d4d0:	0005883a 	mov	r2,zero
 800d4d4:	003f7506 	br	800d2ac <__alt_data_end+0xfc00d2ac>
 800d4d8:	0005883a 	mov	r2,zero
 800d4dc:	0009883a 	mov	r4,zero
 800d4e0:	003e7806 	br	800cec4 <__alt_data_end+0xfc00cec4>
 800d4e4:	123ff804 	addi	r8,r2,-32
 800d4e8:	01000804 	movi	r4,32
 800d4ec:	1a10d83a 	srl	r8,r3,r8
 800d4f0:	11002526 	beq	r2,r4,800d588 <__subdf3+0x8ec>
 800d4f4:	01001004 	movi	r4,64
 800d4f8:	2085c83a 	sub	r2,r4,r2
 800d4fc:	1884983a 	sll	r2,r3,r2
 800d500:	1444b03a 	or	r2,r2,r17
 800d504:	1004c03a 	cmpne	r2,r2,zero
 800d508:	40a2b03a 	or	r17,r8,r2
 800d50c:	0005883a 	mov	r2,zero
 800d510:	003f1606 	br	800d16c <__alt_data_end+0xfc00d16c>
 800d514:	02000434 	movhi	r8,16
 800d518:	0009883a 	mov	r4,zero
 800d51c:	423fffc4 	addi	r8,r8,-1
 800d520:	00bfffc4 	movi	r2,-1
 800d524:	0401ffc4 	movi	r16,2047
 800d528:	003e6606 	br	800cec4 <__alt_data_end+0xfc00cec4>
 800d52c:	1c62b03a 	or	r17,r3,r17
 800d530:	8822c03a 	cmpne	r17,r17,zero
 800d534:	0005883a 	mov	r2,zero
 800d538:	003f9906 	br	800d3a0 <__alt_data_end+0xfc00d3a0>
 800d53c:	2807883a 	mov	r3,r5
 800d540:	3023883a 	mov	r17,r6
 800d544:	0401ffc4 	movi	r16,2047
 800d548:	003df506 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d54c:	2807883a 	mov	r3,r5
 800d550:	3023883a 	mov	r17,r6
 800d554:	003df206 	br	800cd20 <__alt_data_end+0xfc00cd20>
 800d558:	123ff804 	addi	r8,r2,-32
 800d55c:	01000804 	movi	r4,32
 800d560:	1a10d83a 	srl	r8,r3,r8
 800d564:	11000a26 	beq	r2,r4,800d590 <__subdf3+0x8f4>
 800d568:	01001004 	movi	r4,64
 800d56c:	2085c83a 	sub	r2,r4,r2
 800d570:	1884983a 	sll	r2,r3,r2
 800d574:	1444b03a 	or	r2,r2,r17
 800d578:	1004c03a 	cmpne	r2,r2,zero
 800d57c:	40a2b03a 	or	r17,r8,r2
 800d580:	0005883a 	mov	r2,zero
 800d584:	003f8606 	br	800d3a0 <__alt_data_end+0xfc00d3a0>
 800d588:	0005883a 	mov	r2,zero
 800d58c:	003fdc06 	br	800d500 <__alt_data_end+0xfc00d500>
 800d590:	0005883a 	mov	r2,zero
 800d594:	003ff706 	br	800d574 <__alt_data_end+0xfc00d574>

0800d598 <__fixdfsi>:
 800d598:	280cd53a 	srli	r6,r5,20
 800d59c:	00c00434 	movhi	r3,16
 800d5a0:	18ffffc4 	addi	r3,r3,-1
 800d5a4:	3181ffcc 	andi	r6,r6,2047
 800d5a8:	01c0ff84 	movi	r7,1022
 800d5ac:	28c6703a 	and	r3,r5,r3
 800d5b0:	280ad7fa 	srli	r5,r5,31
 800d5b4:	3980120e 	bge	r7,r6,800d600 <__fixdfsi+0x68>
 800d5b8:	00810744 	movi	r2,1053
 800d5bc:	11800c16 	blt	r2,r6,800d5f0 <__fixdfsi+0x58>
 800d5c0:	00810cc4 	movi	r2,1075
 800d5c4:	1185c83a 	sub	r2,r2,r6
 800d5c8:	01c007c4 	movi	r7,31
 800d5cc:	18c00434 	orhi	r3,r3,16
 800d5d0:	38800d16 	blt	r7,r2,800d608 <__fixdfsi+0x70>
 800d5d4:	31befb44 	addi	r6,r6,-1043
 800d5d8:	2084d83a 	srl	r2,r4,r2
 800d5dc:	1986983a 	sll	r3,r3,r6
 800d5e0:	1884b03a 	or	r2,r3,r2
 800d5e4:	28000726 	beq	r5,zero,800d604 <__fixdfsi+0x6c>
 800d5e8:	0085c83a 	sub	r2,zero,r2
 800d5ec:	f800283a 	ret
 800d5f0:	00a00034 	movhi	r2,32768
 800d5f4:	10bfffc4 	addi	r2,r2,-1
 800d5f8:	2885883a 	add	r2,r5,r2
 800d5fc:	f800283a 	ret
 800d600:	0005883a 	mov	r2,zero
 800d604:	f800283a 	ret
 800d608:	008104c4 	movi	r2,1043
 800d60c:	1185c83a 	sub	r2,r2,r6
 800d610:	1884d83a 	srl	r2,r3,r2
 800d614:	003ff306 	br	800d5e4 <__alt_data_end+0xfc00d5e4>

0800d618 <__floatsidf>:
 800d618:	defffd04 	addi	sp,sp,-12
 800d61c:	dfc00215 	stw	ra,8(sp)
 800d620:	dc400115 	stw	r17,4(sp)
 800d624:	dc000015 	stw	r16,0(sp)
 800d628:	20002b26 	beq	r4,zero,800d6d8 <__floatsidf+0xc0>
 800d62c:	2023883a 	mov	r17,r4
 800d630:	2020d7fa 	srli	r16,r4,31
 800d634:	20002d16 	blt	r4,zero,800d6ec <__floatsidf+0xd4>
 800d638:	8809883a 	mov	r4,r17
 800d63c:	800d79c0 	call	800d79c <__clzsi2>
 800d640:	01410784 	movi	r5,1054
 800d644:	288bc83a 	sub	r5,r5,r2
 800d648:	01010cc4 	movi	r4,1075
 800d64c:	2149c83a 	sub	r4,r4,r5
 800d650:	00c007c4 	movi	r3,31
 800d654:	1900160e 	bge	r3,r4,800d6b0 <__floatsidf+0x98>
 800d658:	00c104c4 	movi	r3,1043
 800d65c:	1947c83a 	sub	r3,r3,r5
 800d660:	88c6983a 	sll	r3,r17,r3
 800d664:	00800434 	movhi	r2,16
 800d668:	10bfffc4 	addi	r2,r2,-1
 800d66c:	1886703a 	and	r3,r3,r2
 800d670:	2941ffcc 	andi	r5,r5,2047
 800d674:	800d883a 	mov	r6,r16
 800d678:	0005883a 	mov	r2,zero
 800d67c:	280a953a 	slli	r5,r5,20
 800d680:	31803fcc 	andi	r6,r6,255
 800d684:	01000434 	movhi	r4,16
 800d688:	300c97fa 	slli	r6,r6,31
 800d68c:	213fffc4 	addi	r4,r4,-1
 800d690:	1906703a 	and	r3,r3,r4
 800d694:	1946b03a 	or	r3,r3,r5
 800d698:	1986b03a 	or	r3,r3,r6
 800d69c:	dfc00217 	ldw	ra,8(sp)
 800d6a0:	dc400117 	ldw	r17,4(sp)
 800d6a4:	dc000017 	ldw	r16,0(sp)
 800d6a8:	dec00304 	addi	sp,sp,12
 800d6ac:	f800283a 	ret
 800d6b0:	00c002c4 	movi	r3,11
 800d6b4:	1887c83a 	sub	r3,r3,r2
 800d6b8:	88c6d83a 	srl	r3,r17,r3
 800d6bc:	8904983a 	sll	r2,r17,r4
 800d6c0:	01000434 	movhi	r4,16
 800d6c4:	213fffc4 	addi	r4,r4,-1
 800d6c8:	2941ffcc 	andi	r5,r5,2047
 800d6cc:	1906703a 	and	r3,r3,r4
 800d6d0:	800d883a 	mov	r6,r16
 800d6d4:	003fe906 	br	800d67c <__alt_data_end+0xfc00d67c>
 800d6d8:	000d883a 	mov	r6,zero
 800d6dc:	000b883a 	mov	r5,zero
 800d6e0:	0007883a 	mov	r3,zero
 800d6e4:	0005883a 	mov	r2,zero
 800d6e8:	003fe406 	br	800d67c <__alt_data_end+0xfc00d67c>
 800d6ec:	0123c83a 	sub	r17,zero,r4
 800d6f0:	003fd106 	br	800d638 <__alt_data_end+0xfc00d638>

0800d6f4 <__floatunsidf>:
 800d6f4:	defffe04 	addi	sp,sp,-8
 800d6f8:	dc000015 	stw	r16,0(sp)
 800d6fc:	dfc00115 	stw	ra,4(sp)
 800d700:	2021883a 	mov	r16,r4
 800d704:	20002226 	beq	r4,zero,800d790 <__floatunsidf+0x9c>
 800d708:	800d79c0 	call	800d79c <__clzsi2>
 800d70c:	01010784 	movi	r4,1054
 800d710:	2089c83a 	sub	r4,r4,r2
 800d714:	01810cc4 	movi	r6,1075
 800d718:	310dc83a 	sub	r6,r6,r4
 800d71c:	00c007c4 	movi	r3,31
 800d720:	1980120e 	bge	r3,r6,800d76c <__floatunsidf+0x78>
 800d724:	00c104c4 	movi	r3,1043
 800d728:	1907c83a 	sub	r3,r3,r4
 800d72c:	80ca983a 	sll	r5,r16,r3
 800d730:	00800434 	movhi	r2,16
 800d734:	10bfffc4 	addi	r2,r2,-1
 800d738:	2101ffcc 	andi	r4,r4,2047
 800d73c:	0021883a 	mov	r16,zero
 800d740:	288a703a 	and	r5,r5,r2
 800d744:	2008953a 	slli	r4,r4,20
 800d748:	00c00434 	movhi	r3,16
 800d74c:	18ffffc4 	addi	r3,r3,-1
 800d750:	28c6703a 	and	r3,r5,r3
 800d754:	8005883a 	mov	r2,r16
 800d758:	1906b03a 	or	r3,r3,r4
 800d75c:	dfc00117 	ldw	ra,4(sp)
 800d760:	dc000017 	ldw	r16,0(sp)
 800d764:	dec00204 	addi	sp,sp,8
 800d768:	f800283a 	ret
 800d76c:	00c002c4 	movi	r3,11
 800d770:	188bc83a 	sub	r5,r3,r2
 800d774:	814ad83a 	srl	r5,r16,r5
 800d778:	00c00434 	movhi	r3,16
 800d77c:	18ffffc4 	addi	r3,r3,-1
 800d780:	81a0983a 	sll	r16,r16,r6
 800d784:	2101ffcc 	andi	r4,r4,2047
 800d788:	28ca703a 	and	r5,r5,r3
 800d78c:	003fed06 	br	800d744 <__alt_data_end+0xfc00d744>
 800d790:	0009883a 	mov	r4,zero
 800d794:	000b883a 	mov	r5,zero
 800d798:	003fea06 	br	800d744 <__alt_data_end+0xfc00d744>

0800d79c <__clzsi2>:
 800d79c:	00bfffd4 	movui	r2,65535
 800d7a0:	11000536 	bltu	r2,r4,800d7b8 <__clzsi2+0x1c>
 800d7a4:	00803fc4 	movi	r2,255
 800d7a8:	11000f36 	bltu	r2,r4,800d7e8 <__clzsi2+0x4c>
 800d7ac:	00800804 	movi	r2,32
 800d7b0:	0007883a 	mov	r3,zero
 800d7b4:	00000506 	br	800d7cc <__clzsi2+0x30>
 800d7b8:	00804034 	movhi	r2,256
 800d7bc:	10bfffc4 	addi	r2,r2,-1
 800d7c0:	11000c2e 	bgeu	r2,r4,800d7f4 <__clzsi2+0x58>
 800d7c4:	00800204 	movi	r2,8
 800d7c8:	00c00604 	movi	r3,24
 800d7cc:	20c8d83a 	srl	r4,r4,r3
 800d7d0:	00c20074 	movhi	r3,2049
 800d7d4:	18c10404 	addi	r3,r3,1040
 800d7d8:	1909883a 	add	r4,r3,r4
 800d7dc:	20c00003 	ldbu	r3,0(r4)
 800d7e0:	10c5c83a 	sub	r2,r2,r3
 800d7e4:	f800283a 	ret
 800d7e8:	00800604 	movi	r2,24
 800d7ec:	00c00204 	movi	r3,8
 800d7f0:	003ff606 	br	800d7cc <__alt_data_end+0xfc00d7cc>
 800d7f4:	00800404 	movi	r2,16
 800d7f8:	1007883a 	mov	r3,r2
 800d7fc:	003ff306 	br	800d7cc <__alt_data_end+0xfc00d7cc>

0800d800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d800:	defffe04 	addi	sp,sp,-8
 800d804:	dfc00115 	stw	ra,4(sp)
 800d808:	df000015 	stw	fp,0(sp)
 800d80c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d810:	d0a00d17 	ldw	r2,-32716(gp)
 800d814:	10000326 	beq	r2,zero,800d824 <alt_get_errno+0x24>
 800d818:	d0a00d17 	ldw	r2,-32716(gp)
 800d81c:	103ee83a 	callr	r2
 800d820:	00000106 	br	800d828 <alt_get_errno+0x28>
 800d824:	d0a6d504 	addi	r2,gp,-25772
}
 800d828:	e037883a 	mov	sp,fp
 800d82c:	dfc00117 	ldw	ra,4(sp)
 800d830:	df000017 	ldw	fp,0(sp)
 800d834:	dec00204 	addi	sp,sp,8
 800d838:	f800283a 	ret

0800d83c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d83c:	defffb04 	addi	sp,sp,-20
 800d840:	dfc00415 	stw	ra,16(sp)
 800d844:	df000315 	stw	fp,12(sp)
 800d848:	df000304 	addi	fp,sp,12
 800d84c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d850:	e0bfff17 	ldw	r2,-4(fp)
 800d854:	10000816 	blt	r2,zero,800d878 <close+0x3c>
 800d858:	01400304 	movi	r5,12
 800d85c:	e13fff17 	ldw	r4,-4(fp)
 800d860:	80009940 	call	8000994 <__mulsi3>
 800d864:	1007883a 	mov	r3,r2
 800d868:	00820074 	movhi	r2,2049
 800d86c:	10838204 	addi	r2,r2,3592
 800d870:	1885883a 	add	r2,r3,r2
 800d874:	00000106 	br	800d87c <close+0x40>
 800d878:	0005883a 	mov	r2,zero
 800d87c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d880:	e0bffd17 	ldw	r2,-12(fp)
 800d884:	10001926 	beq	r2,zero,800d8ec <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d888:	e0bffd17 	ldw	r2,-12(fp)
 800d88c:	10800017 	ldw	r2,0(r2)
 800d890:	10800417 	ldw	r2,16(r2)
 800d894:	10000626 	beq	r2,zero,800d8b0 <close+0x74>
 800d898:	e0bffd17 	ldw	r2,-12(fp)
 800d89c:	10800017 	ldw	r2,0(r2)
 800d8a0:	10800417 	ldw	r2,16(r2)
 800d8a4:	e13ffd17 	ldw	r4,-12(fp)
 800d8a8:	103ee83a 	callr	r2
 800d8ac:	00000106 	br	800d8b4 <close+0x78>
 800d8b0:	0005883a 	mov	r2,zero
 800d8b4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d8b8:	e13fff17 	ldw	r4,-4(fp)
 800d8bc:	800df240 	call	800df24 <alt_release_fd>
    if (rval < 0)
 800d8c0:	e0bffe17 	ldw	r2,-8(fp)
 800d8c4:	1000070e 	bge	r2,zero,800d8e4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d8c8:	800d8000 	call	800d800 <alt_get_errno>
 800d8cc:	1007883a 	mov	r3,r2
 800d8d0:	e0bffe17 	ldw	r2,-8(fp)
 800d8d4:	0085c83a 	sub	r2,zero,r2
 800d8d8:	18800015 	stw	r2,0(r3)
      return -1;
 800d8dc:	00bfffc4 	movi	r2,-1
 800d8e0:	00000706 	br	800d900 <close+0xc4>
    }
    return 0;
 800d8e4:	0005883a 	mov	r2,zero
 800d8e8:	00000506 	br	800d900 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d8ec:	800d8000 	call	800d800 <alt_get_errno>
 800d8f0:	1007883a 	mov	r3,r2
 800d8f4:	00801444 	movi	r2,81
 800d8f8:	18800015 	stw	r2,0(r3)
    return -1;
 800d8fc:	00bfffc4 	movi	r2,-1
  }
}
 800d900:	e037883a 	mov	sp,fp
 800d904:	dfc00117 	ldw	ra,4(sp)
 800d908:	df000017 	ldw	fp,0(sp)
 800d90c:	dec00204 	addi	sp,sp,8
 800d910:	f800283a 	ret

0800d914 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d914:	defffc04 	addi	sp,sp,-16
 800d918:	df000315 	stw	fp,12(sp)
 800d91c:	df000304 	addi	fp,sp,12
 800d920:	e13ffd15 	stw	r4,-12(fp)
 800d924:	e17ffe15 	stw	r5,-8(fp)
 800d928:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d92c:	e0bfff17 	ldw	r2,-4(fp)
}
 800d930:	e037883a 	mov	sp,fp
 800d934:	df000017 	ldw	fp,0(sp)
 800d938:	dec00104 	addi	sp,sp,4
 800d93c:	f800283a 	ret

0800d940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d940:	defffe04 	addi	sp,sp,-8
 800d944:	dfc00115 	stw	ra,4(sp)
 800d948:	df000015 	stw	fp,0(sp)
 800d94c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d950:	d0a00d17 	ldw	r2,-32716(gp)
 800d954:	10000326 	beq	r2,zero,800d964 <alt_get_errno+0x24>
 800d958:	d0a00d17 	ldw	r2,-32716(gp)
 800d95c:	103ee83a 	callr	r2
 800d960:	00000106 	br	800d968 <alt_get_errno+0x28>
 800d964:	d0a6d504 	addi	r2,gp,-25772
}
 800d968:	e037883a 	mov	sp,fp
 800d96c:	dfc00117 	ldw	ra,4(sp)
 800d970:	df000017 	ldw	fp,0(sp)
 800d974:	dec00204 	addi	sp,sp,8
 800d978:	f800283a 	ret

0800d97c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d97c:	defffb04 	addi	sp,sp,-20
 800d980:	dfc00415 	stw	ra,16(sp)
 800d984:	df000315 	stw	fp,12(sp)
 800d988:	df000304 	addi	fp,sp,12
 800d98c:	e13ffe15 	stw	r4,-8(fp)
 800d990:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d994:	e0bffe17 	ldw	r2,-8(fp)
 800d998:	10000816 	blt	r2,zero,800d9bc <fstat+0x40>
 800d99c:	01400304 	movi	r5,12
 800d9a0:	e13ffe17 	ldw	r4,-8(fp)
 800d9a4:	80009940 	call	8000994 <__mulsi3>
 800d9a8:	1007883a 	mov	r3,r2
 800d9ac:	00820074 	movhi	r2,2049
 800d9b0:	10838204 	addi	r2,r2,3592
 800d9b4:	1885883a 	add	r2,r3,r2
 800d9b8:	00000106 	br	800d9c0 <fstat+0x44>
 800d9bc:	0005883a 	mov	r2,zero
 800d9c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d9c4:	e0bffd17 	ldw	r2,-12(fp)
 800d9c8:	10001026 	beq	r2,zero,800da0c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d9cc:	e0bffd17 	ldw	r2,-12(fp)
 800d9d0:	10800017 	ldw	r2,0(r2)
 800d9d4:	10800817 	ldw	r2,32(r2)
 800d9d8:	10000726 	beq	r2,zero,800d9f8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800d9dc:	e0bffd17 	ldw	r2,-12(fp)
 800d9e0:	10800017 	ldw	r2,0(r2)
 800d9e4:	10800817 	ldw	r2,32(r2)
 800d9e8:	e17fff17 	ldw	r5,-4(fp)
 800d9ec:	e13ffd17 	ldw	r4,-12(fp)
 800d9f0:	103ee83a 	callr	r2
 800d9f4:	00000a06 	br	800da20 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d9f8:	e0bfff17 	ldw	r2,-4(fp)
 800d9fc:	00c80004 	movi	r3,8192
 800da00:	10c00115 	stw	r3,4(r2)
      return 0;
 800da04:	0005883a 	mov	r2,zero
 800da08:	00000506 	br	800da20 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800da0c:	800d9400 	call	800d940 <alt_get_errno>
 800da10:	1007883a 	mov	r3,r2
 800da14:	00801444 	movi	r2,81
 800da18:	18800015 	stw	r2,0(r3)
    return -1;
 800da1c:	00bfffc4 	movi	r2,-1
  }
}
 800da20:	e037883a 	mov	sp,fp
 800da24:	dfc00117 	ldw	ra,4(sp)
 800da28:	df000017 	ldw	fp,0(sp)
 800da2c:	dec00204 	addi	sp,sp,8
 800da30:	f800283a 	ret

0800da34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800da34:	defffe04 	addi	sp,sp,-8
 800da38:	dfc00115 	stw	ra,4(sp)
 800da3c:	df000015 	stw	fp,0(sp)
 800da40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800da44:	d0a00d17 	ldw	r2,-32716(gp)
 800da48:	10000326 	beq	r2,zero,800da58 <alt_get_errno+0x24>
 800da4c:	d0a00d17 	ldw	r2,-32716(gp)
 800da50:	103ee83a 	callr	r2
 800da54:	00000106 	br	800da5c <alt_get_errno+0x28>
 800da58:	d0a6d504 	addi	r2,gp,-25772
}
 800da5c:	e037883a 	mov	sp,fp
 800da60:	dfc00117 	ldw	ra,4(sp)
 800da64:	df000017 	ldw	fp,0(sp)
 800da68:	dec00204 	addi	sp,sp,8
 800da6c:	f800283a 	ret

0800da70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800da70:	deffed04 	addi	sp,sp,-76
 800da74:	dfc01215 	stw	ra,72(sp)
 800da78:	df001115 	stw	fp,68(sp)
 800da7c:	df001104 	addi	fp,sp,68
 800da80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800da84:	e0bfff17 	ldw	r2,-4(fp)
 800da88:	10000816 	blt	r2,zero,800daac <isatty+0x3c>
 800da8c:	01400304 	movi	r5,12
 800da90:	e13fff17 	ldw	r4,-4(fp)
 800da94:	80009940 	call	8000994 <__mulsi3>
 800da98:	1007883a 	mov	r3,r2
 800da9c:	00820074 	movhi	r2,2049
 800daa0:	10838204 	addi	r2,r2,3592
 800daa4:	1885883a 	add	r2,r3,r2
 800daa8:	00000106 	br	800dab0 <isatty+0x40>
 800daac:	0005883a 	mov	r2,zero
 800dab0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800dab4:	e0bfef17 	ldw	r2,-68(fp)
 800dab8:	10000e26 	beq	r2,zero,800daf4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800dabc:	e0bfef17 	ldw	r2,-68(fp)
 800dac0:	10800017 	ldw	r2,0(r2)
 800dac4:	10800817 	ldw	r2,32(r2)
 800dac8:	1000021e 	bne	r2,zero,800dad4 <isatty+0x64>
    {
      return 1;
 800dacc:	00800044 	movi	r2,1
 800dad0:	00000d06 	br	800db08 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800dad4:	e0bff004 	addi	r2,fp,-64
 800dad8:	100b883a 	mov	r5,r2
 800dadc:	e13fff17 	ldw	r4,-4(fp)
 800dae0:	800d97c0 	call	800d97c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800dae4:	e0bff117 	ldw	r2,-60(fp)
 800dae8:	10880020 	cmpeqi	r2,r2,8192
 800daec:	10803fcc 	andi	r2,r2,255
 800daf0:	00000506 	br	800db08 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800daf4:	800da340 	call	800da34 <alt_get_errno>
 800daf8:	1007883a 	mov	r3,r2
 800dafc:	00801444 	movi	r2,81
 800db00:	18800015 	stw	r2,0(r3)
    return 0;
 800db04:	0005883a 	mov	r2,zero
  }
}
 800db08:	e037883a 	mov	sp,fp
 800db0c:	dfc00117 	ldw	ra,4(sp)
 800db10:	df000017 	ldw	fp,0(sp)
 800db14:	dec00204 	addi	sp,sp,8
 800db18:	f800283a 	ret

0800db1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800db1c:	defffc04 	addi	sp,sp,-16
 800db20:	df000315 	stw	fp,12(sp)
 800db24:	df000304 	addi	fp,sp,12
 800db28:	e13ffd15 	stw	r4,-12(fp)
 800db2c:	e17ffe15 	stw	r5,-8(fp)
 800db30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800db34:	e0fffe17 	ldw	r3,-8(fp)
 800db38:	e0bffd17 	ldw	r2,-12(fp)
 800db3c:	18800c26 	beq	r3,r2,800db70 <alt_load_section+0x54>
  {
    while( to != end )
 800db40:	00000806 	br	800db64 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800db44:	e0bffe17 	ldw	r2,-8(fp)
 800db48:	10c00104 	addi	r3,r2,4
 800db4c:	e0fffe15 	stw	r3,-8(fp)
 800db50:	e0fffd17 	ldw	r3,-12(fp)
 800db54:	19000104 	addi	r4,r3,4
 800db58:	e13ffd15 	stw	r4,-12(fp)
 800db5c:	18c00017 	ldw	r3,0(r3)
 800db60:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800db64:	e0fffe17 	ldw	r3,-8(fp)
 800db68:	e0bfff17 	ldw	r2,-4(fp)
 800db6c:	18bff51e 	bne	r3,r2,800db44 <__alt_data_end+0xfc00db44>
    {
      *to++ = *from++;
    }
  }
}
 800db70:	0001883a 	nop
 800db74:	e037883a 	mov	sp,fp
 800db78:	df000017 	ldw	fp,0(sp)
 800db7c:	dec00104 	addi	sp,sp,4
 800db80:	f800283a 	ret

0800db84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800db84:	defffe04 	addi	sp,sp,-8
 800db88:	dfc00115 	stw	ra,4(sp)
 800db8c:	df000015 	stw	fp,0(sp)
 800db90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800db94:	01820074 	movhi	r6,2049
 800db98:	31880c04 	addi	r6,r6,8240
 800db9c:	01420074 	movhi	r5,2049
 800dba0:	29414f04 	addi	r5,r5,1340
 800dba4:	01020074 	movhi	r4,2049
 800dba8:	21080c04 	addi	r4,r4,8240
 800dbac:	800db1c0 	call	800db1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800dbb0:	01820034 	movhi	r6,2048
 800dbb4:	31808c04 	addi	r6,r6,560
 800dbb8:	01420034 	movhi	r5,2048
 800dbbc:	29400804 	addi	r5,r5,32
 800dbc0:	01020034 	movhi	r4,2048
 800dbc4:	21000804 	addi	r4,r4,32
 800dbc8:	800db1c0 	call	800db1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800dbcc:	01820074 	movhi	r6,2049
 800dbd0:	31814f04 	addi	r6,r6,1340
 800dbd4:	01420074 	movhi	r5,2049
 800dbd8:	29404b04 	addi	r5,r5,300
 800dbdc:	01020074 	movhi	r4,2049
 800dbe0:	21004b04 	addi	r4,r4,300
 800dbe4:	800db1c0 	call	800db1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800dbe8:	800f0740 	call	800f074 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800dbec:	800f2340 	call	800f234 <alt_icache_flush_all>
}
 800dbf0:	0001883a 	nop
 800dbf4:	e037883a 	mov	sp,fp
 800dbf8:	dfc00117 	ldw	ra,4(sp)
 800dbfc:	df000017 	ldw	fp,0(sp)
 800dc00:	dec00204 	addi	sp,sp,8
 800dc04:	f800283a 	ret

0800dc08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dc08:	defffe04 	addi	sp,sp,-8
 800dc0c:	dfc00115 	stw	ra,4(sp)
 800dc10:	df000015 	stw	fp,0(sp)
 800dc14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dc18:	d0a00d17 	ldw	r2,-32716(gp)
 800dc1c:	10000326 	beq	r2,zero,800dc2c <alt_get_errno+0x24>
 800dc20:	d0a00d17 	ldw	r2,-32716(gp)
 800dc24:	103ee83a 	callr	r2
 800dc28:	00000106 	br	800dc30 <alt_get_errno+0x28>
 800dc2c:	d0a6d504 	addi	r2,gp,-25772
}
 800dc30:	e037883a 	mov	sp,fp
 800dc34:	dfc00117 	ldw	ra,4(sp)
 800dc38:	df000017 	ldw	fp,0(sp)
 800dc3c:	dec00204 	addi	sp,sp,8
 800dc40:	f800283a 	ret

0800dc44 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800dc44:	defff904 	addi	sp,sp,-28
 800dc48:	dfc00615 	stw	ra,24(sp)
 800dc4c:	df000515 	stw	fp,20(sp)
 800dc50:	df000504 	addi	fp,sp,20
 800dc54:	e13ffd15 	stw	r4,-12(fp)
 800dc58:	e17ffe15 	stw	r5,-8(fp)
 800dc5c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800dc60:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800dc64:	e0bffd17 	ldw	r2,-12(fp)
 800dc68:	10000816 	blt	r2,zero,800dc8c <lseek+0x48>
 800dc6c:	01400304 	movi	r5,12
 800dc70:	e13ffd17 	ldw	r4,-12(fp)
 800dc74:	80009940 	call	8000994 <__mulsi3>
 800dc78:	1007883a 	mov	r3,r2
 800dc7c:	00820074 	movhi	r2,2049
 800dc80:	10838204 	addi	r2,r2,3592
 800dc84:	1885883a 	add	r2,r3,r2
 800dc88:	00000106 	br	800dc90 <lseek+0x4c>
 800dc8c:	0005883a 	mov	r2,zero
 800dc90:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800dc94:	e0bffc17 	ldw	r2,-16(fp)
 800dc98:	10001026 	beq	r2,zero,800dcdc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800dc9c:	e0bffc17 	ldw	r2,-16(fp)
 800dca0:	10800017 	ldw	r2,0(r2)
 800dca4:	10800717 	ldw	r2,28(r2)
 800dca8:	10000926 	beq	r2,zero,800dcd0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800dcac:	e0bffc17 	ldw	r2,-16(fp)
 800dcb0:	10800017 	ldw	r2,0(r2)
 800dcb4:	10800717 	ldw	r2,28(r2)
 800dcb8:	e1bfff17 	ldw	r6,-4(fp)
 800dcbc:	e17ffe17 	ldw	r5,-8(fp)
 800dcc0:	e13ffc17 	ldw	r4,-16(fp)
 800dcc4:	103ee83a 	callr	r2
 800dcc8:	e0bffb15 	stw	r2,-20(fp)
 800dccc:	00000506 	br	800dce4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800dcd0:	00bfde84 	movi	r2,-134
 800dcd4:	e0bffb15 	stw	r2,-20(fp)
 800dcd8:	00000206 	br	800dce4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800dcdc:	00bfebc4 	movi	r2,-81
 800dce0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800dce4:	e0bffb17 	ldw	r2,-20(fp)
 800dce8:	1000070e 	bge	r2,zero,800dd08 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800dcec:	800dc080 	call	800dc08 <alt_get_errno>
 800dcf0:	1007883a 	mov	r3,r2
 800dcf4:	e0bffb17 	ldw	r2,-20(fp)
 800dcf8:	0085c83a 	sub	r2,zero,r2
 800dcfc:	18800015 	stw	r2,0(r3)
    rc = -1;
 800dd00:	00bfffc4 	movi	r2,-1
 800dd04:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800dd08:	e0bffb17 	ldw	r2,-20(fp)
}
 800dd0c:	e037883a 	mov	sp,fp
 800dd10:	dfc00117 	ldw	ra,4(sp)
 800dd14:	df000017 	ldw	fp,0(sp)
 800dd18:	dec00204 	addi	sp,sp,8
 800dd1c:	f800283a 	ret

0800dd20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800dd20:	defffd04 	addi	sp,sp,-12
 800dd24:	dfc00215 	stw	ra,8(sp)
 800dd28:	df000115 	stw	fp,4(sp)
 800dd2c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800dd30:	0009883a 	mov	r4,zero
 800dd34:	800e1f80 	call	800e1f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800dd38:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800dd3c:	800e2300 	call	800e230 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800dd40:	01820074 	movhi	r6,2049
 800dd44:	31814704 	addi	r6,r6,1308
 800dd48:	01420074 	movhi	r5,2049
 800dd4c:	29414704 	addi	r5,r5,1308
 800dd50:	01020074 	movhi	r4,2049
 800dd54:	21014704 	addi	r4,r4,1308
 800dd58:	800f5d80 	call	800f5d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800dd5c:	800f1740 	call	800f174 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800dd60:	01020074 	movhi	r4,2049
 800dd64:	213c7504 	addi	r4,r4,-3628
 800dd68:	800fd980 	call	800fd98 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800dd6c:	d0a6d617 	ldw	r2,-25768(gp)
 800dd70:	d0e6d717 	ldw	r3,-25764(gp)
 800dd74:	d126d817 	ldw	r4,-25760(gp)
 800dd78:	200d883a 	mov	r6,r4
 800dd7c:	180b883a 	mov	r5,r3
 800dd80:	1009883a 	mov	r4,r2
 800dd84:	800026c0 	call	800026c <main>
 800dd88:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800dd8c:	01000044 	movi	r4,1
 800dd90:	800d83c0 	call	800d83c <close>
  exit (result);
 800dd94:	e13fff17 	ldw	r4,-4(fp)
 800dd98:	800fdac0 	call	800fdac <exit>

0800dd9c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800dd9c:	defffe04 	addi	sp,sp,-8
 800dda0:	df000115 	stw	fp,4(sp)
 800dda4:	df000104 	addi	fp,sp,4
 800dda8:	e13fff15 	stw	r4,-4(fp)
}
 800ddac:	0001883a 	nop
 800ddb0:	e037883a 	mov	sp,fp
 800ddb4:	df000017 	ldw	fp,0(sp)
 800ddb8:	dec00104 	addi	sp,sp,4
 800ddbc:	f800283a 	ret

0800ddc0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800ddc0:	defffe04 	addi	sp,sp,-8
 800ddc4:	df000115 	stw	fp,4(sp)
 800ddc8:	df000104 	addi	fp,sp,4
 800ddcc:	e13fff15 	stw	r4,-4(fp)
}
 800ddd0:	0001883a 	nop
 800ddd4:	e037883a 	mov	sp,fp
 800ddd8:	df000017 	ldw	fp,0(sp)
 800dddc:	dec00104 	addi	sp,sp,4
 800dde0:	f800283a 	ret

0800dde4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dde4:	defffe04 	addi	sp,sp,-8
 800dde8:	dfc00115 	stw	ra,4(sp)
 800ddec:	df000015 	stw	fp,0(sp)
 800ddf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ddf4:	d0a00d17 	ldw	r2,-32716(gp)
 800ddf8:	10000326 	beq	r2,zero,800de08 <alt_get_errno+0x24>
 800ddfc:	d0a00d17 	ldw	r2,-32716(gp)
 800de00:	103ee83a 	callr	r2
 800de04:	00000106 	br	800de0c <alt_get_errno+0x28>
 800de08:	d0a6d504 	addi	r2,gp,-25772
}
 800de0c:	e037883a 	mov	sp,fp
 800de10:	dfc00117 	ldw	ra,4(sp)
 800de14:	df000017 	ldw	fp,0(sp)
 800de18:	dec00204 	addi	sp,sp,8
 800de1c:	f800283a 	ret

0800de20 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800de20:	defff904 	addi	sp,sp,-28
 800de24:	dfc00615 	stw	ra,24(sp)
 800de28:	df000515 	stw	fp,20(sp)
 800de2c:	df000504 	addi	fp,sp,20
 800de30:	e13ffd15 	stw	r4,-12(fp)
 800de34:	e17ffe15 	stw	r5,-8(fp)
 800de38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800de3c:	e0bffd17 	ldw	r2,-12(fp)
 800de40:	10000816 	blt	r2,zero,800de64 <read+0x44>
 800de44:	01400304 	movi	r5,12
 800de48:	e13ffd17 	ldw	r4,-12(fp)
 800de4c:	80009940 	call	8000994 <__mulsi3>
 800de50:	1007883a 	mov	r3,r2
 800de54:	00820074 	movhi	r2,2049
 800de58:	10838204 	addi	r2,r2,3592
 800de5c:	1885883a 	add	r2,r3,r2
 800de60:	00000106 	br	800de68 <read+0x48>
 800de64:	0005883a 	mov	r2,zero
 800de68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800de6c:	e0bffb17 	ldw	r2,-20(fp)
 800de70:	10002226 	beq	r2,zero,800defc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800de74:	e0bffb17 	ldw	r2,-20(fp)
 800de78:	10800217 	ldw	r2,8(r2)
 800de7c:	108000cc 	andi	r2,r2,3
 800de80:	10800060 	cmpeqi	r2,r2,1
 800de84:	1000181e 	bne	r2,zero,800dee8 <read+0xc8>
        (fd->dev->read))
 800de88:	e0bffb17 	ldw	r2,-20(fp)
 800de8c:	10800017 	ldw	r2,0(r2)
 800de90:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800de94:	10001426 	beq	r2,zero,800dee8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800de98:	e0bffb17 	ldw	r2,-20(fp)
 800de9c:	10800017 	ldw	r2,0(r2)
 800dea0:	10800517 	ldw	r2,20(r2)
 800dea4:	e0ffff17 	ldw	r3,-4(fp)
 800dea8:	180d883a 	mov	r6,r3
 800deac:	e17ffe17 	ldw	r5,-8(fp)
 800deb0:	e13ffb17 	ldw	r4,-20(fp)
 800deb4:	103ee83a 	callr	r2
 800deb8:	e0bffc15 	stw	r2,-16(fp)
 800debc:	e0bffc17 	ldw	r2,-16(fp)
 800dec0:	1000070e 	bge	r2,zero,800dee0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800dec4:	800dde40 	call	800dde4 <alt_get_errno>
 800dec8:	1007883a 	mov	r3,r2
 800decc:	e0bffc17 	ldw	r2,-16(fp)
 800ded0:	0085c83a 	sub	r2,zero,r2
 800ded4:	18800015 	stw	r2,0(r3)
          return -1;
 800ded8:	00bfffc4 	movi	r2,-1
 800dedc:	00000c06 	br	800df10 <read+0xf0>
        }
        return rval;
 800dee0:	e0bffc17 	ldw	r2,-16(fp)
 800dee4:	00000a06 	br	800df10 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800dee8:	800dde40 	call	800dde4 <alt_get_errno>
 800deec:	1007883a 	mov	r3,r2
 800def0:	00800344 	movi	r2,13
 800def4:	18800015 	stw	r2,0(r3)
 800def8:	00000406 	br	800df0c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800defc:	800dde40 	call	800dde4 <alt_get_errno>
 800df00:	1007883a 	mov	r3,r2
 800df04:	00801444 	movi	r2,81
 800df08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800df0c:	00bfffc4 	movi	r2,-1
}
 800df10:	e037883a 	mov	sp,fp
 800df14:	dfc00117 	ldw	ra,4(sp)
 800df18:	df000017 	ldw	fp,0(sp)
 800df1c:	dec00204 	addi	sp,sp,8
 800df20:	f800283a 	ret

0800df24 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800df24:	defffc04 	addi	sp,sp,-16
 800df28:	dfc00315 	stw	ra,12(sp)
 800df2c:	df000215 	stw	fp,8(sp)
 800df30:	dc000115 	stw	r16,4(sp)
 800df34:	df000204 	addi	fp,sp,8
 800df38:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800df3c:	e0bffe17 	ldw	r2,-8(fp)
 800df40:	108000d0 	cmplti	r2,r2,3
 800df44:	1000111e 	bne	r2,zero,800df8c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800df48:	04020074 	movhi	r16,2049
 800df4c:	84038204 	addi	r16,r16,3592
 800df50:	e0bffe17 	ldw	r2,-8(fp)
 800df54:	01400304 	movi	r5,12
 800df58:	1009883a 	mov	r4,r2
 800df5c:	80009940 	call	8000994 <__mulsi3>
 800df60:	8085883a 	add	r2,r16,r2
 800df64:	10800204 	addi	r2,r2,8
 800df68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800df6c:	04020074 	movhi	r16,2049
 800df70:	84038204 	addi	r16,r16,3592
 800df74:	e0bffe17 	ldw	r2,-8(fp)
 800df78:	01400304 	movi	r5,12
 800df7c:	1009883a 	mov	r4,r2
 800df80:	80009940 	call	8000994 <__mulsi3>
 800df84:	8085883a 	add	r2,r16,r2
 800df88:	10000015 	stw	zero,0(r2)
  }
}
 800df8c:	0001883a 	nop
 800df90:	e6ffff04 	addi	sp,fp,-4
 800df94:	dfc00217 	ldw	ra,8(sp)
 800df98:	df000117 	ldw	fp,4(sp)
 800df9c:	dc000017 	ldw	r16,0(sp)
 800dfa0:	dec00304 	addi	sp,sp,12
 800dfa4:	f800283a 	ret

0800dfa8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800dfa8:	defff904 	addi	sp,sp,-28
 800dfac:	df000615 	stw	fp,24(sp)
 800dfb0:	df000604 	addi	fp,sp,24
 800dfb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dfb8:	0005303a 	rdctl	r2,status
 800dfbc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dfc0:	e0fffe17 	ldw	r3,-8(fp)
 800dfc4:	00bfff84 	movi	r2,-2
 800dfc8:	1884703a 	and	r2,r3,r2
 800dfcc:	1001703a 	wrctl	status,r2
  
  return context;
 800dfd0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800dfd4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800dfd8:	d0a00e17 	ldw	r2,-32712(gp)
 800dfdc:	10c000c4 	addi	r3,r2,3
 800dfe0:	00bfff04 	movi	r2,-4
 800dfe4:	1884703a 	and	r2,r3,r2
 800dfe8:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800dfec:	d0e00e17 	ldw	r3,-32712(gp)
 800dff0:	e0bfff17 	ldw	r2,-4(fp)
 800dff4:	1887883a 	add	r3,r3,r2
 800dff8:	00830034 	movhi	r2,3072
 800dffc:	10800004 	addi	r2,r2,0
 800e000:	10c0062e 	bgeu	r2,r3,800e01c <sbrk+0x74>
 800e004:	e0bffb17 	ldw	r2,-20(fp)
 800e008:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e00c:	e0bffa17 	ldw	r2,-24(fp)
 800e010:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800e014:	00bfffc4 	movi	r2,-1
 800e018:	00000b06 	br	800e048 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800e01c:	d0a00e17 	ldw	r2,-32712(gp)
 800e020:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800e024:	d0e00e17 	ldw	r3,-32712(gp)
 800e028:	e0bfff17 	ldw	r2,-4(fp)
 800e02c:	1885883a 	add	r2,r3,r2
 800e030:	d0a00e15 	stw	r2,-32712(gp)
 800e034:	e0bffb17 	ldw	r2,-20(fp)
 800e038:	e0bffc15 	stw	r2,-16(fp)
 800e03c:	e0bffc17 	ldw	r2,-16(fp)
 800e040:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800e044:	e0bffd17 	ldw	r2,-12(fp)
} 
 800e048:	e037883a 	mov	sp,fp
 800e04c:	df000017 	ldw	fp,0(sp)
 800e050:	dec00104 	addi	sp,sp,4
 800e054:	f800283a 	ret

0800e058 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800e058:	defffd04 	addi	sp,sp,-12
 800e05c:	dfc00215 	stw	ra,8(sp)
 800e060:	df000115 	stw	fp,4(sp)
 800e064:	df000104 	addi	fp,sp,4
 800e068:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800e06c:	e13fff17 	ldw	r4,-4(fp)
 800e070:	800ef1c0 	call	800ef1c <alt_busy_sleep>
}
 800e074:	e037883a 	mov	sp,fp
 800e078:	dfc00117 	ldw	ra,4(sp)
 800e07c:	df000017 	ldw	fp,0(sp)
 800e080:	dec00204 	addi	sp,sp,8
 800e084:	f800283a 	ret

0800e088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e088:	defffe04 	addi	sp,sp,-8
 800e08c:	dfc00115 	stw	ra,4(sp)
 800e090:	df000015 	stw	fp,0(sp)
 800e094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e098:	d0a00d17 	ldw	r2,-32716(gp)
 800e09c:	10000326 	beq	r2,zero,800e0ac <alt_get_errno+0x24>
 800e0a0:	d0a00d17 	ldw	r2,-32716(gp)
 800e0a4:	103ee83a 	callr	r2
 800e0a8:	00000106 	br	800e0b0 <alt_get_errno+0x28>
 800e0ac:	d0a6d504 	addi	r2,gp,-25772
}
 800e0b0:	e037883a 	mov	sp,fp
 800e0b4:	dfc00117 	ldw	ra,4(sp)
 800e0b8:	df000017 	ldw	fp,0(sp)
 800e0bc:	dec00204 	addi	sp,sp,8
 800e0c0:	f800283a 	ret

0800e0c4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800e0c4:	defff904 	addi	sp,sp,-28
 800e0c8:	dfc00615 	stw	ra,24(sp)
 800e0cc:	df000515 	stw	fp,20(sp)
 800e0d0:	df000504 	addi	fp,sp,20
 800e0d4:	e13ffd15 	stw	r4,-12(fp)
 800e0d8:	e17ffe15 	stw	r5,-8(fp)
 800e0dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800e0e0:	e0bffd17 	ldw	r2,-12(fp)
 800e0e4:	10000816 	blt	r2,zero,800e108 <write+0x44>
 800e0e8:	01400304 	movi	r5,12
 800e0ec:	e13ffd17 	ldw	r4,-12(fp)
 800e0f0:	80009940 	call	8000994 <__mulsi3>
 800e0f4:	1007883a 	mov	r3,r2
 800e0f8:	00820074 	movhi	r2,2049
 800e0fc:	10838204 	addi	r2,r2,3592
 800e100:	1885883a 	add	r2,r3,r2
 800e104:	00000106 	br	800e10c <write+0x48>
 800e108:	0005883a 	mov	r2,zero
 800e10c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800e110:	e0bffb17 	ldw	r2,-20(fp)
 800e114:	10002126 	beq	r2,zero,800e19c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800e118:	e0bffb17 	ldw	r2,-20(fp)
 800e11c:	10800217 	ldw	r2,8(r2)
 800e120:	108000cc 	andi	r2,r2,3
 800e124:	10001826 	beq	r2,zero,800e188 <write+0xc4>
 800e128:	e0bffb17 	ldw	r2,-20(fp)
 800e12c:	10800017 	ldw	r2,0(r2)
 800e130:	10800617 	ldw	r2,24(r2)
 800e134:	10001426 	beq	r2,zero,800e188 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800e138:	e0bffb17 	ldw	r2,-20(fp)
 800e13c:	10800017 	ldw	r2,0(r2)
 800e140:	10800617 	ldw	r2,24(r2)
 800e144:	e0ffff17 	ldw	r3,-4(fp)
 800e148:	180d883a 	mov	r6,r3
 800e14c:	e17ffe17 	ldw	r5,-8(fp)
 800e150:	e13ffb17 	ldw	r4,-20(fp)
 800e154:	103ee83a 	callr	r2
 800e158:	e0bffc15 	stw	r2,-16(fp)
 800e15c:	e0bffc17 	ldw	r2,-16(fp)
 800e160:	1000070e 	bge	r2,zero,800e180 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800e164:	800e0880 	call	800e088 <alt_get_errno>
 800e168:	1007883a 	mov	r3,r2
 800e16c:	e0bffc17 	ldw	r2,-16(fp)
 800e170:	0085c83a 	sub	r2,zero,r2
 800e174:	18800015 	stw	r2,0(r3)
        return -1;
 800e178:	00bfffc4 	movi	r2,-1
 800e17c:	00000c06 	br	800e1b0 <write+0xec>
      }
      return rval;
 800e180:	e0bffc17 	ldw	r2,-16(fp)
 800e184:	00000a06 	br	800e1b0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800e188:	800e0880 	call	800e088 <alt_get_errno>
 800e18c:	1007883a 	mov	r3,r2
 800e190:	00800344 	movi	r2,13
 800e194:	18800015 	stw	r2,0(r3)
 800e198:	00000406 	br	800e1ac <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800e19c:	800e0880 	call	800e088 <alt_get_errno>
 800e1a0:	1007883a 	mov	r3,r2
 800e1a4:	00801444 	movi	r2,81
 800e1a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800e1ac:	00bfffc4 	movi	r2,-1
}
 800e1b0:	e037883a 	mov	sp,fp
 800e1b4:	dfc00117 	ldw	ra,4(sp)
 800e1b8:	df000017 	ldw	fp,0(sp)
 800e1bc:	dec00204 	addi	sp,sp,8
 800e1c0:	f800283a 	ret

0800e1c4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800e1c4:	defffd04 	addi	sp,sp,-12
 800e1c8:	dfc00215 	stw	ra,8(sp)
 800e1cc:	df000115 	stw	fp,4(sp)
 800e1d0:	df000104 	addi	fp,sp,4
 800e1d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800e1d8:	d1600a04 	addi	r5,gp,-32728
 800e1dc:	e13fff17 	ldw	r4,-4(fp)
 800e1e0:	800f0d00 	call	800f0d0 <alt_dev_llist_insert>
}
 800e1e4:	e037883a 	mov	sp,fp
 800e1e8:	dfc00117 	ldw	ra,4(sp)
 800e1ec:	df000017 	ldw	fp,0(sp)
 800e1f0:	dec00204 	addi	sp,sp,8
 800e1f4:	f800283a 	ret

0800e1f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800e1f8:	defffd04 	addi	sp,sp,-12
 800e1fc:	dfc00215 	stw	ra,8(sp)
 800e200:	df000115 	stw	fp,4(sp)
 800e204:	df000104 	addi	fp,sp,4
 800e208:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800e20c:	800fa7c0 	call	800fa7c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800e210:	00800044 	movi	r2,1
 800e214:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800e218:	0001883a 	nop
 800e21c:	e037883a 	mov	sp,fp
 800e220:	dfc00117 	ldw	ra,4(sp)
 800e224:	df000017 	ldw	fp,0(sp)
 800e228:	dec00204 	addi	sp,sp,8
 800e22c:	f800283a 	ret

0800e230 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800e230:	defffe04 	addi	sp,sp,-8
 800e234:	dfc00115 	stw	ra,4(sp)
 800e238:	df000015 	stw	fp,0(sp)
 800e23c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800e240:	01c0fa04 	movi	r7,1000
 800e244:	01800084 	movi	r6,2
 800e248:	000b883a 	mov	r5,zero
 800e24c:	01002004 	movi	r4,128
 800e250:	800ed740 	call	800ed74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800e254:	01800044 	movi	r6,1
 800e258:	000b883a 	mov	r5,zero
 800e25c:	01020074 	movhi	r4,2049
 800e260:	2103ec04 	addi	r4,r4,4016
 800e264:	800e3f80 	call	800e3f8 <altera_avalon_jtag_uart_init>
 800e268:	01020074 	movhi	r4,2049
 800e26c:	2103e204 	addi	r4,r4,3976
 800e270:	800e1c40 	call	800e1c4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800e274:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800e278:	0001883a 	nop
}
 800e27c:	0001883a 	nop
 800e280:	e037883a 	mov	sp,fp
 800e284:	dfc00117 	ldw	ra,4(sp)
 800e288:	df000017 	ldw	fp,0(sp)
 800e28c:	dec00204 	addi	sp,sp,8
 800e290:	f800283a 	ret

0800e294 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800e294:	defffa04 	addi	sp,sp,-24
 800e298:	dfc00515 	stw	ra,20(sp)
 800e29c:	df000415 	stw	fp,16(sp)
 800e2a0:	df000404 	addi	fp,sp,16
 800e2a4:	e13ffd15 	stw	r4,-12(fp)
 800e2a8:	e17ffe15 	stw	r5,-8(fp)
 800e2ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e2b0:	e0bffd17 	ldw	r2,-12(fp)
 800e2b4:	10800017 	ldw	r2,0(r2)
 800e2b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800e2bc:	e0bffc17 	ldw	r2,-16(fp)
 800e2c0:	10c00a04 	addi	r3,r2,40
 800e2c4:	e0bffd17 	ldw	r2,-12(fp)
 800e2c8:	10800217 	ldw	r2,8(r2)
 800e2cc:	100f883a 	mov	r7,r2
 800e2d0:	e1bfff17 	ldw	r6,-4(fp)
 800e2d4:	e17ffe17 	ldw	r5,-8(fp)
 800e2d8:	1809883a 	mov	r4,r3
 800e2dc:	800e8bc0 	call	800e8bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800e2e0:	e037883a 	mov	sp,fp
 800e2e4:	dfc00117 	ldw	ra,4(sp)
 800e2e8:	df000017 	ldw	fp,0(sp)
 800e2ec:	dec00204 	addi	sp,sp,8
 800e2f0:	f800283a 	ret

0800e2f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800e2f4:	defffa04 	addi	sp,sp,-24
 800e2f8:	dfc00515 	stw	ra,20(sp)
 800e2fc:	df000415 	stw	fp,16(sp)
 800e300:	df000404 	addi	fp,sp,16
 800e304:	e13ffd15 	stw	r4,-12(fp)
 800e308:	e17ffe15 	stw	r5,-8(fp)
 800e30c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e310:	e0bffd17 	ldw	r2,-12(fp)
 800e314:	10800017 	ldw	r2,0(r2)
 800e318:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800e31c:	e0bffc17 	ldw	r2,-16(fp)
 800e320:	10c00a04 	addi	r3,r2,40
 800e324:	e0bffd17 	ldw	r2,-12(fp)
 800e328:	10800217 	ldw	r2,8(r2)
 800e32c:	100f883a 	mov	r7,r2
 800e330:	e1bfff17 	ldw	r6,-4(fp)
 800e334:	e17ffe17 	ldw	r5,-8(fp)
 800e338:	1809883a 	mov	r4,r3
 800e33c:	800ead80 	call	800ead8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800e340:	e037883a 	mov	sp,fp
 800e344:	dfc00117 	ldw	ra,4(sp)
 800e348:	df000017 	ldw	fp,0(sp)
 800e34c:	dec00204 	addi	sp,sp,8
 800e350:	f800283a 	ret

0800e354 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800e354:	defffc04 	addi	sp,sp,-16
 800e358:	dfc00315 	stw	ra,12(sp)
 800e35c:	df000215 	stw	fp,8(sp)
 800e360:	df000204 	addi	fp,sp,8
 800e364:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e368:	e0bfff17 	ldw	r2,-4(fp)
 800e36c:	10800017 	ldw	r2,0(r2)
 800e370:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800e374:	e0bffe17 	ldw	r2,-8(fp)
 800e378:	10c00a04 	addi	r3,r2,40
 800e37c:	e0bfff17 	ldw	r2,-4(fp)
 800e380:	10800217 	ldw	r2,8(r2)
 800e384:	100b883a 	mov	r5,r2
 800e388:	1809883a 	mov	r4,r3
 800e38c:	800e7640 	call	800e764 <altera_avalon_jtag_uart_close>
}
 800e390:	e037883a 	mov	sp,fp
 800e394:	dfc00117 	ldw	ra,4(sp)
 800e398:	df000017 	ldw	fp,0(sp)
 800e39c:	dec00204 	addi	sp,sp,8
 800e3a0:	f800283a 	ret

0800e3a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800e3a4:	defffa04 	addi	sp,sp,-24
 800e3a8:	dfc00515 	stw	ra,20(sp)
 800e3ac:	df000415 	stw	fp,16(sp)
 800e3b0:	df000404 	addi	fp,sp,16
 800e3b4:	e13ffd15 	stw	r4,-12(fp)
 800e3b8:	e17ffe15 	stw	r5,-8(fp)
 800e3bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800e3c0:	e0bffd17 	ldw	r2,-12(fp)
 800e3c4:	10800017 	ldw	r2,0(r2)
 800e3c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800e3cc:	e0bffc17 	ldw	r2,-16(fp)
 800e3d0:	10800a04 	addi	r2,r2,40
 800e3d4:	e1bfff17 	ldw	r6,-4(fp)
 800e3d8:	e17ffe17 	ldw	r5,-8(fp)
 800e3dc:	1009883a 	mov	r4,r2
 800e3e0:	800e7cc0 	call	800e7cc <altera_avalon_jtag_uart_ioctl>
}
 800e3e4:	e037883a 	mov	sp,fp
 800e3e8:	dfc00117 	ldw	ra,4(sp)
 800e3ec:	df000017 	ldw	fp,0(sp)
 800e3f0:	dec00204 	addi	sp,sp,8
 800e3f4:	f800283a 	ret

0800e3f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800e3f8:	defffa04 	addi	sp,sp,-24
 800e3fc:	dfc00515 	stw	ra,20(sp)
 800e400:	df000415 	stw	fp,16(sp)
 800e404:	df000404 	addi	fp,sp,16
 800e408:	e13ffd15 	stw	r4,-12(fp)
 800e40c:	e17ffe15 	stw	r5,-8(fp)
 800e410:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e414:	e0bffd17 	ldw	r2,-12(fp)
 800e418:	00c00044 	movi	r3,1
 800e41c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800e420:	e0bffd17 	ldw	r2,-12(fp)
 800e424:	10800017 	ldw	r2,0(r2)
 800e428:	10800104 	addi	r2,r2,4
 800e42c:	1007883a 	mov	r3,r2
 800e430:	e0bffd17 	ldw	r2,-12(fp)
 800e434:	10800817 	ldw	r2,32(r2)
 800e438:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800e43c:	e0bffe17 	ldw	r2,-8(fp)
 800e440:	e0ffff17 	ldw	r3,-4(fp)
 800e444:	d8000015 	stw	zero,0(sp)
 800e448:	e1fffd17 	ldw	r7,-12(fp)
 800e44c:	01820074 	movhi	r6,2049
 800e450:	31b92e04 	addi	r6,r6,-6984
 800e454:	180b883a 	mov	r5,r3
 800e458:	1009883a 	mov	r4,r2
 800e45c:	800f2540 	call	800f254 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800e460:	e0bffd17 	ldw	r2,-12(fp)
 800e464:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800e468:	e0bffd17 	ldw	r2,-12(fp)
 800e46c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e470:	d0e6da17 	ldw	r3,-25752(gp)
 800e474:	e1fffd17 	ldw	r7,-12(fp)
 800e478:	01820074 	movhi	r6,2049
 800e47c:	31b9b104 	addi	r6,r6,-6460
 800e480:	180b883a 	mov	r5,r3
 800e484:	1009883a 	mov	r4,r2
 800e488:	800edf00 	call	800edf0 <alt_alarm_start>
 800e48c:	1000040e 	bge	r2,zero,800e4a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800e490:	e0fffd17 	ldw	r3,-12(fp)
 800e494:	00a00034 	movhi	r2,32768
 800e498:	10bfffc4 	addi	r2,r2,-1
 800e49c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800e4a0:	0001883a 	nop
 800e4a4:	e037883a 	mov	sp,fp
 800e4a8:	dfc00117 	ldw	ra,4(sp)
 800e4ac:	df000017 	ldw	fp,0(sp)
 800e4b0:	dec00204 	addi	sp,sp,8
 800e4b4:	f800283a 	ret

0800e4b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800e4b8:	defff804 	addi	sp,sp,-32
 800e4bc:	df000715 	stw	fp,28(sp)
 800e4c0:	df000704 	addi	fp,sp,28
 800e4c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800e4c8:	e0bfff17 	ldw	r2,-4(fp)
 800e4cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800e4d0:	e0bffb17 	ldw	r2,-20(fp)
 800e4d4:	10800017 	ldw	r2,0(r2)
 800e4d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e4dc:	e0bffc17 	ldw	r2,-16(fp)
 800e4e0:	10800104 	addi	r2,r2,4
 800e4e4:	10800037 	ldwio	r2,0(r2)
 800e4e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800e4ec:	e0bffd17 	ldw	r2,-12(fp)
 800e4f0:	1080c00c 	andi	r2,r2,768
 800e4f4:	10006d26 	beq	r2,zero,800e6ac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800e4f8:	e0bffd17 	ldw	r2,-12(fp)
 800e4fc:	1080400c 	andi	r2,r2,256
 800e500:	10003526 	beq	r2,zero,800e5d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800e504:	00800074 	movhi	r2,1
 800e508:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e50c:	e0bffb17 	ldw	r2,-20(fp)
 800e510:	10800a17 	ldw	r2,40(r2)
 800e514:	10800044 	addi	r2,r2,1
 800e518:	1081ffcc 	andi	r2,r2,2047
 800e51c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800e520:	e0bffb17 	ldw	r2,-20(fp)
 800e524:	10c00b17 	ldw	r3,44(r2)
 800e528:	e0bffe17 	ldw	r2,-8(fp)
 800e52c:	18801526 	beq	r3,r2,800e584 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800e530:	e0bffc17 	ldw	r2,-16(fp)
 800e534:	10800037 	ldwio	r2,0(r2)
 800e538:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800e53c:	e0bff917 	ldw	r2,-28(fp)
 800e540:	10a0000c 	andi	r2,r2,32768
 800e544:	10001126 	beq	r2,zero,800e58c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800e548:	e0bffb17 	ldw	r2,-20(fp)
 800e54c:	10800a17 	ldw	r2,40(r2)
 800e550:	e0fff917 	ldw	r3,-28(fp)
 800e554:	1809883a 	mov	r4,r3
 800e558:	e0fffb17 	ldw	r3,-20(fp)
 800e55c:	1885883a 	add	r2,r3,r2
 800e560:	10800e04 	addi	r2,r2,56
 800e564:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e568:	e0bffb17 	ldw	r2,-20(fp)
 800e56c:	10800a17 	ldw	r2,40(r2)
 800e570:	10800044 	addi	r2,r2,1
 800e574:	10c1ffcc 	andi	r3,r2,2047
 800e578:	e0bffb17 	ldw	r2,-20(fp)
 800e57c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800e580:	003fe206 	br	800e50c <__alt_data_end+0xfc00e50c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800e584:	0001883a 	nop
 800e588:	00000106 	br	800e590 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800e58c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800e590:	e0bff917 	ldw	r2,-28(fp)
 800e594:	10bfffec 	andhi	r2,r2,65535
 800e598:	10000f26 	beq	r2,zero,800e5d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e59c:	e0bffb17 	ldw	r2,-20(fp)
 800e5a0:	10c00817 	ldw	r3,32(r2)
 800e5a4:	00bfff84 	movi	r2,-2
 800e5a8:	1886703a 	and	r3,r3,r2
 800e5ac:	e0bffb17 	ldw	r2,-20(fp)
 800e5b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800e5b4:	e0bffc17 	ldw	r2,-16(fp)
 800e5b8:	10800104 	addi	r2,r2,4
 800e5bc:	1007883a 	mov	r3,r2
 800e5c0:	e0bffb17 	ldw	r2,-20(fp)
 800e5c4:	10800817 	ldw	r2,32(r2)
 800e5c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e5cc:	e0bffc17 	ldw	r2,-16(fp)
 800e5d0:	10800104 	addi	r2,r2,4
 800e5d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800e5d8:	e0bffd17 	ldw	r2,-12(fp)
 800e5dc:	1080800c 	andi	r2,r2,512
 800e5e0:	103fbe26 	beq	r2,zero,800e4dc <__alt_data_end+0xfc00e4dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800e5e4:	e0bffd17 	ldw	r2,-12(fp)
 800e5e8:	1004d43a 	srli	r2,r2,16
 800e5ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e5f0:	00001406 	br	800e644 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800e5f4:	e0bffc17 	ldw	r2,-16(fp)
 800e5f8:	e0fffb17 	ldw	r3,-20(fp)
 800e5fc:	18c00d17 	ldw	r3,52(r3)
 800e600:	e13ffb17 	ldw	r4,-20(fp)
 800e604:	20c7883a 	add	r3,r4,r3
 800e608:	18c20e04 	addi	r3,r3,2104
 800e60c:	18c00003 	ldbu	r3,0(r3)
 800e610:	18c03fcc 	andi	r3,r3,255
 800e614:	18c0201c 	xori	r3,r3,128
 800e618:	18ffe004 	addi	r3,r3,-128
 800e61c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e620:	e0bffb17 	ldw	r2,-20(fp)
 800e624:	10800d17 	ldw	r2,52(r2)
 800e628:	10800044 	addi	r2,r2,1
 800e62c:	10c1ffcc 	andi	r3,r2,2047
 800e630:	e0bffb17 	ldw	r2,-20(fp)
 800e634:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800e638:	e0bffa17 	ldw	r2,-24(fp)
 800e63c:	10bfffc4 	addi	r2,r2,-1
 800e640:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e644:	e0bffa17 	ldw	r2,-24(fp)
 800e648:	10000526 	beq	r2,zero,800e660 <altera_avalon_jtag_uart_irq+0x1a8>
 800e64c:	e0bffb17 	ldw	r2,-20(fp)
 800e650:	10c00d17 	ldw	r3,52(r2)
 800e654:	e0bffb17 	ldw	r2,-20(fp)
 800e658:	10800c17 	ldw	r2,48(r2)
 800e65c:	18bfe51e 	bne	r3,r2,800e5f4 <__alt_data_end+0xfc00e5f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800e660:	e0bffa17 	ldw	r2,-24(fp)
 800e664:	103f9d26 	beq	r2,zero,800e4dc <__alt_data_end+0xfc00e4dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e668:	e0bffb17 	ldw	r2,-20(fp)
 800e66c:	10c00817 	ldw	r3,32(r2)
 800e670:	00bfff44 	movi	r2,-3
 800e674:	1886703a 	and	r3,r3,r2
 800e678:	e0bffb17 	ldw	r2,-20(fp)
 800e67c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e680:	e0bffb17 	ldw	r2,-20(fp)
 800e684:	10800017 	ldw	r2,0(r2)
 800e688:	10800104 	addi	r2,r2,4
 800e68c:	1007883a 	mov	r3,r2
 800e690:	e0bffb17 	ldw	r2,-20(fp)
 800e694:	10800817 	ldw	r2,32(r2)
 800e698:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e69c:	e0bffc17 	ldw	r2,-16(fp)
 800e6a0:	10800104 	addi	r2,r2,4
 800e6a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800e6a8:	003f8c06 	br	800e4dc <__alt_data_end+0xfc00e4dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800e6ac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800e6b0:	0001883a 	nop
 800e6b4:	e037883a 	mov	sp,fp
 800e6b8:	df000017 	ldw	fp,0(sp)
 800e6bc:	dec00104 	addi	sp,sp,4
 800e6c0:	f800283a 	ret

0800e6c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800e6c4:	defff804 	addi	sp,sp,-32
 800e6c8:	df000715 	stw	fp,28(sp)
 800e6cc:	df000704 	addi	fp,sp,28
 800e6d0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800e6d4:	e0bffb17 	ldw	r2,-20(fp)
 800e6d8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800e6dc:	e0bff917 	ldw	r2,-28(fp)
 800e6e0:	10800017 	ldw	r2,0(r2)
 800e6e4:	10800104 	addi	r2,r2,4
 800e6e8:	10800037 	ldwio	r2,0(r2)
 800e6ec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800e6f0:	e0bffa17 	ldw	r2,-24(fp)
 800e6f4:	1081000c 	andi	r2,r2,1024
 800e6f8:	10000b26 	beq	r2,zero,800e728 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800e6fc:	e0bff917 	ldw	r2,-28(fp)
 800e700:	10800017 	ldw	r2,0(r2)
 800e704:	10800104 	addi	r2,r2,4
 800e708:	1007883a 	mov	r3,r2
 800e70c:	e0bff917 	ldw	r2,-28(fp)
 800e710:	10800817 	ldw	r2,32(r2)
 800e714:	10810014 	ori	r2,r2,1024
 800e718:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800e71c:	e0bff917 	ldw	r2,-28(fp)
 800e720:	10000915 	stw	zero,36(r2)
 800e724:	00000a06 	br	800e750 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800e728:	e0bff917 	ldw	r2,-28(fp)
 800e72c:	10c00917 	ldw	r3,36(r2)
 800e730:	00a00034 	movhi	r2,32768
 800e734:	10bfff04 	addi	r2,r2,-4
 800e738:	10c00536 	bltu	r2,r3,800e750 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800e73c:	e0bff917 	ldw	r2,-28(fp)
 800e740:	10800917 	ldw	r2,36(r2)
 800e744:	10c00044 	addi	r3,r2,1
 800e748:	e0bff917 	ldw	r2,-28(fp)
 800e74c:	10c00915 	stw	r3,36(r2)
 800e750:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800e754:	e037883a 	mov	sp,fp
 800e758:	df000017 	ldw	fp,0(sp)
 800e75c:	dec00104 	addi	sp,sp,4
 800e760:	f800283a 	ret

0800e764 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800e764:	defffd04 	addi	sp,sp,-12
 800e768:	df000215 	stw	fp,8(sp)
 800e76c:	df000204 	addi	fp,sp,8
 800e770:	e13ffe15 	stw	r4,-8(fp)
 800e774:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e778:	00000506 	br	800e790 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800e77c:	e0bfff17 	ldw	r2,-4(fp)
 800e780:	1090000c 	andi	r2,r2,16384
 800e784:	10000226 	beq	r2,zero,800e790 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800e788:	00bffd44 	movi	r2,-11
 800e78c:	00000b06 	br	800e7bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e790:	e0bffe17 	ldw	r2,-8(fp)
 800e794:	10c00d17 	ldw	r3,52(r2)
 800e798:	e0bffe17 	ldw	r2,-8(fp)
 800e79c:	10800c17 	ldw	r2,48(r2)
 800e7a0:	18800526 	beq	r3,r2,800e7b8 <altera_avalon_jtag_uart_close+0x54>
 800e7a4:	e0bffe17 	ldw	r2,-8(fp)
 800e7a8:	10c00917 	ldw	r3,36(r2)
 800e7ac:	e0bffe17 	ldw	r2,-8(fp)
 800e7b0:	10800117 	ldw	r2,4(r2)
 800e7b4:	18bff136 	bltu	r3,r2,800e77c <__alt_data_end+0xfc00e77c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800e7b8:	0005883a 	mov	r2,zero
}
 800e7bc:	e037883a 	mov	sp,fp
 800e7c0:	df000017 	ldw	fp,0(sp)
 800e7c4:	dec00104 	addi	sp,sp,4
 800e7c8:	f800283a 	ret

0800e7cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800e7cc:	defffa04 	addi	sp,sp,-24
 800e7d0:	df000515 	stw	fp,20(sp)
 800e7d4:	df000504 	addi	fp,sp,20
 800e7d8:	e13ffd15 	stw	r4,-12(fp)
 800e7dc:	e17ffe15 	stw	r5,-8(fp)
 800e7e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800e7e4:	00bff9c4 	movi	r2,-25
 800e7e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800e7ec:	e0bffe17 	ldw	r2,-8(fp)
 800e7f0:	10da8060 	cmpeqi	r3,r2,27137
 800e7f4:	1800031e 	bne	r3,zero,800e804 <altera_avalon_jtag_uart_ioctl+0x38>
 800e7f8:	109a80a0 	cmpeqi	r2,r2,27138
 800e7fc:	1000181e 	bne	r2,zero,800e860 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800e800:	00002906 	br	800e8a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800e804:	e0bffd17 	ldw	r2,-12(fp)
 800e808:	10c00117 	ldw	r3,4(r2)
 800e80c:	00a00034 	movhi	r2,32768
 800e810:	10bfffc4 	addi	r2,r2,-1
 800e814:	18802126 	beq	r3,r2,800e89c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800e818:	e0bfff17 	ldw	r2,-4(fp)
 800e81c:	10800017 	ldw	r2,0(r2)
 800e820:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800e824:	e0bffc17 	ldw	r2,-16(fp)
 800e828:	10800090 	cmplti	r2,r2,2
 800e82c:	1000061e 	bne	r2,zero,800e848 <altera_avalon_jtag_uart_ioctl+0x7c>
 800e830:	e0fffc17 	ldw	r3,-16(fp)
 800e834:	00a00034 	movhi	r2,32768
 800e838:	10bfffc4 	addi	r2,r2,-1
 800e83c:	18800226 	beq	r3,r2,800e848 <altera_avalon_jtag_uart_ioctl+0x7c>
 800e840:	e0bffc17 	ldw	r2,-16(fp)
 800e844:	00000206 	br	800e850 <altera_avalon_jtag_uart_ioctl+0x84>
 800e848:	00a00034 	movhi	r2,32768
 800e84c:	10bfff84 	addi	r2,r2,-2
 800e850:	e0fffd17 	ldw	r3,-12(fp)
 800e854:	18800115 	stw	r2,4(r3)
      rc = 0;
 800e858:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e85c:	00000f06 	br	800e89c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800e860:	e0bffd17 	ldw	r2,-12(fp)
 800e864:	10c00117 	ldw	r3,4(r2)
 800e868:	00a00034 	movhi	r2,32768
 800e86c:	10bfffc4 	addi	r2,r2,-1
 800e870:	18800c26 	beq	r3,r2,800e8a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800e874:	e0bffd17 	ldw	r2,-12(fp)
 800e878:	10c00917 	ldw	r3,36(r2)
 800e87c:	e0bffd17 	ldw	r2,-12(fp)
 800e880:	10800117 	ldw	r2,4(r2)
 800e884:	1885803a 	cmpltu	r2,r3,r2
 800e888:	10c03fcc 	andi	r3,r2,255
 800e88c:	e0bfff17 	ldw	r2,-4(fp)
 800e890:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800e894:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e898:	00000206 	br	800e8a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800e89c:	0001883a 	nop
 800e8a0:	00000106 	br	800e8a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800e8a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800e8a8:	e0bffb17 	ldw	r2,-20(fp)
}
 800e8ac:	e037883a 	mov	sp,fp
 800e8b0:	df000017 	ldw	fp,0(sp)
 800e8b4:	dec00104 	addi	sp,sp,4
 800e8b8:	f800283a 	ret

0800e8bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800e8bc:	defff304 	addi	sp,sp,-52
 800e8c0:	dfc00c15 	stw	ra,48(sp)
 800e8c4:	df000b15 	stw	fp,44(sp)
 800e8c8:	df000b04 	addi	fp,sp,44
 800e8cc:	e13ffc15 	stw	r4,-16(fp)
 800e8d0:	e17ffd15 	stw	r5,-12(fp)
 800e8d4:	e1bffe15 	stw	r6,-8(fp)
 800e8d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800e8dc:	e0bffd17 	ldw	r2,-12(fp)
 800e8e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e8e4:	00004706 	br	800ea04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800e8e8:	e0bffc17 	ldw	r2,-16(fp)
 800e8ec:	10800a17 	ldw	r2,40(r2)
 800e8f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800e8f4:	e0bffc17 	ldw	r2,-16(fp)
 800e8f8:	10800b17 	ldw	r2,44(r2)
 800e8fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800e900:	e0fff717 	ldw	r3,-36(fp)
 800e904:	e0bff817 	ldw	r2,-32(fp)
 800e908:	18800536 	bltu	r3,r2,800e920 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800e90c:	e0fff717 	ldw	r3,-36(fp)
 800e910:	e0bff817 	ldw	r2,-32(fp)
 800e914:	1885c83a 	sub	r2,r3,r2
 800e918:	e0bff615 	stw	r2,-40(fp)
 800e91c:	00000406 	br	800e930 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800e920:	00c20004 	movi	r3,2048
 800e924:	e0bff817 	ldw	r2,-32(fp)
 800e928:	1885c83a 	sub	r2,r3,r2
 800e92c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e930:	e0bff617 	ldw	r2,-40(fp)
 800e934:	10001e26 	beq	r2,zero,800e9b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800e938:	e0fffe17 	ldw	r3,-8(fp)
 800e93c:	e0bff617 	ldw	r2,-40(fp)
 800e940:	1880022e 	bgeu	r3,r2,800e94c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800e944:	e0bffe17 	ldw	r2,-8(fp)
 800e948:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800e94c:	e0bffc17 	ldw	r2,-16(fp)
 800e950:	10c00e04 	addi	r3,r2,56
 800e954:	e0bff817 	ldw	r2,-32(fp)
 800e958:	1885883a 	add	r2,r3,r2
 800e95c:	e1bff617 	ldw	r6,-40(fp)
 800e960:	100b883a 	mov	r5,r2
 800e964:	e13ff517 	ldw	r4,-44(fp)
 800e968:	80009bc0 	call	80009bc <memcpy>
      ptr   += n;
 800e96c:	e0fff517 	ldw	r3,-44(fp)
 800e970:	e0bff617 	ldw	r2,-40(fp)
 800e974:	1885883a 	add	r2,r3,r2
 800e978:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800e97c:	e0fffe17 	ldw	r3,-8(fp)
 800e980:	e0bff617 	ldw	r2,-40(fp)
 800e984:	1885c83a 	sub	r2,r3,r2
 800e988:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e98c:	e0fff817 	ldw	r3,-32(fp)
 800e990:	e0bff617 	ldw	r2,-40(fp)
 800e994:	1885883a 	add	r2,r3,r2
 800e998:	10c1ffcc 	andi	r3,r2,2047
 800e99c:	e0bffc17 	ldw	r2,-16(fp)
 800e9a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e9a4:	e0bffe17 	ldw	r2,-8(fp)
 800e9a8:	00bfcf16 	blt	zero,r2,800e8e8 <__alt_data_end+0xfc00e8e8>
 800e9ac:	00000106 	br	800e9b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800e9b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800e9b4:	e0fff517 	ldw	r3,-44(fp)
 800e9b8:	e0bffd17 	ldw	r2,-12(fp)
 800e9bc:	1880141e 	bne	r3,r2,800ea10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e9c0:	e0bfff17 	ldw	r2,-4(fp)
 800e9c4:	1090000c 	andi	r2,r2,16384
 800e9c8:	1000131e 	bne	r2,zero,800ea18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e9cc:	0001883a 	nop
 800e9d0:	e0bffc17 	ldw	r2,-16(fp)
 800e9d4:	10c00a17 	ldw	r3,40(r2)
 800e9d8:	e0bff717 	ldw	r2,-36(fp)
 800e9dc:	1880051e 	bne	r3,r2,800e9f4 <altera_avalon_jtag_uart_read+0x138>
 800e9e0:	e0bffc17 	ldw	r2,-16(fp)
 800e9e4:	10c00917 	ldw	r3,36(r2)
 800e9e8:	e0bffc17 	ldw	r2,-16(fp)
 800e9ec:	10800117 	ldw	r2,4(r2)
 800e9f0:	18bff736 	bltu	r3,r2,800e9d0 <__alt_data_end+0xfc00e9d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e9f4:	e0bffc17 	ldw	r2,-16(fp)
 800e9f8:	10c00a17 	ldw	r3,40(r2)
 800e9fc:	e0bff717 	ldw	r2,-36(fp)
 800ea00:	18800726 	beq	r3,r2,800ea20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800ea04:	e0bffe17 	ldw	r2,-8(fp)
 800ea08:	00bfb716 	blt	zero,r2,800e8e8 <__alt_data_end+0xfc00e8e8>
 800ea0c:	00000506 	br	800ea24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800ea10:	0001883a 	nop
 800ea14:	00000306 	br	800ea24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800ea18:	0001883a 	nop
 800ea1c:	00000106 	br	800ea24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800ea20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800ea24:	e0fff517 	ldw	r3,-44(fp)
 800ea28:	e0bffd17 	ldw	r2,-12(fp)
 800ea2c:	18801826 	beq	r3,r2,800ea90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ea30:	0005303a 	rdctl	r2,status
 800ea34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ea38:	e0fffb17 	ldw	r3,-20(fp)
 800ea3c:	00bfff84 	movi	r2,-2
 800ea40:	1884703a 	and	r2,r3,r2
 800ea44:	1001703a 	wrctl	status,r2
  
  return context;
 800ea48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800ea4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ea50:	e0bffc17 	ldw	r2,-16(fp)
 800ea54:	10800817 	ldw	r2,32(r2)
 800ea58:	10c00054 	ori	r3,r2,1
 800ea5c:	e0bffc17 	ldw	r2,-16(fp)
 800ea60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ea64:	e0bffc17 	ldw	r2,-16(fp)
 800ea68:	10800017 	ldw	r2,0(r2)
 800ea6c:	10800104 	addi	r2,r2,4
 800ea70:	1007883a 	mov	r3,r2
 800ea74:	e0bffc17 	ldw	r2,-16(fp)
 800ea78:	10800817 	ldw	r2,32(r2)
 800ea7c:	18800035 	stwio	r2,0(r3)
 800ea80:	e0bffa17 	ldw	r2,-24(fp)
 800ea84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ea88:	e0bff917 	ldw	r2,-28(fp)
 800ea8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800ea90:	e0fff517 	ldw	r3,-44(fp)
 800ea94:	e0bffd17 	ldw	r2,-12(fp)
 800ea98:	18800426 	beq	r3,r2,800eaac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800ea9c:	e0fff517 	ldw	r3,-44(fp)
 800eaa0:	e0bffd17 	ldw	r2,-12(fp)
 800eaa4:	1885c83a 	sub	r2,r3,r2
 800eaa8:	00000606 	br	800eac4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800eaac:	e0bfff17 	ldw	r2,-4(fp)
 800eab0:	1090000c 	andi	r2,r2,16384
 800eab4:	10000226 	beq	r2,zero,800eac0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800eab8:	00bffd44 	movi	r2,-11
 800eabc:	00000106 	br	800eac4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800eac0:	00bffec4 	movi	r2,-5
}
 800eac4:	e037883a 	mov	sp,fp
 800eac8:	dfc00117 	ldw	ra,4(sp)
 800eacc:	df000017 	ldw	fp,0(sp)
 800ead0:	dec00204 	addi	sp,sp,8
 800ead4:	f800283a 	ret

0800ead8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800ead8:	defff304 	addi	sp,sp,-52
 800eadc:	dfc00c15 	stw	ra,48(sp)
 800eae0:	df000b15 	stw	fp,44(sp)
 800eae4:	df000b04 	addi	fp,sp,44
 800eae8:	e13ffc15 	stw	r4,-16(fp)
 800eaec:	e17ffd15 	stw	r5,-12(fp)
 800eaf0:	e1bffe15 	stw	r6,-8(fp)
 800eaf4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800eaf8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800eafc:	e0bffd17 	ldw	r2,-12(fp)
 800eb00:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800eb04:	00003706 	br	800ebe4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800eb08:	e0bffc17 	ldw	r2,-16(fp)
 800eb0c:	10800c17 	ldw	r2,48(r2)
 800eb10:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800eb14:	e0bffc17 	ldw	r2,-16(fp)
 800eb18:	10800d17 	ldw	r2,52(r2)
 800eb1c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800eb20:	e0fff917 	ldw	r3,-28(fp)
 800eb24:	e0bff517 	ldw	r2,-44(fp)
 800eb28:	1880062e 	bgeu	r3,r2,800eb44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800eb2c:	e0fff517 	ldw	r3,-44(fp)
 800eb30:	e0bff917 	ldw	r2,-28(fp)
 800eb34:	1885c83a 	sub	r2,r3,r2
 800eb38:	10bfffc4 	addi	r2,r2,-1
 800eb3c:	e0bff615 	stw	r2,-40(fp)
 800eb40:	00000b06 	br	800eb70 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800eb44:	e0bff517 	ldw	r2,-44(fp)
 800eb48:	10000526 	beq	r2,zero,800eb60 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800eb4c:	00c20004 	movi	r3,2048
 800eb50:	e0bff917 	ldw	r2,-28(fp)
 800eb54:	1885c83a 	sub	r2,r3,r2
 800eb58:	e0bff615 	stw	r2,-40(fp)
 800eb5c:	00000406 	br	800eb70 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800eb60:	00c1ffc4 	movi	r3,2047
 800eb64:	e0bff917 	ldw	r2,-28(fp)
 800eb68:	1885c83a 	sub	r2,r3,r2
 800eb6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800eb70:	e0bff617 	ldw	r2,-40(fp)
 800eb74:	10001e26 	beq	r2,zero,800ebf0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800eb78:	e0fffe17 	ldw	r3,-8(fp)
 800eb7c:	e0bff617 	ldw	r2,-40(fp)
 800eb80:	1880022e 	bgeu	r3,r2,800eb8c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800eb84:	e0bffe17 	ldw	r2,-8(fp)
 800eb88:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800eb8c:	e0bffc17 	ldw	r2,-16(fp)
 800eb90:	10c20e04 	addi	r3,r2,2104
 800eb94:	e0bff917 	ldw	r2,-28(fp)
 800eb98:	1885883a 	add	r2,r3,r2
 800eb9c:	e1bff617 	ldw	r6,-40(fp)
 800eba0:	e17ffd17 	ldw	r5,-12(fp)
 800eba4:	1009883a 	mov	r4,r2
 800eba8:	80009bc0 	call	80009bc <memcpy>
      ptr   += n;
 800ebac:	e0fffd17 	ldw	r3,-12(fp)
 800ebb0:	e0bff617 	ldw	r2,-40(fp)
 800ebb4:	1885883a 	add	r2,r3,r2
 800ebb8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800ebbc:	e0fffe17 	ldw	r3,-8(fp)
 800ebc0:	e0bff617 	ldw	r2,-40(fp)
 800ebc4:	1885c83a 	sub	r2,r3,r2
 800ebc8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ebcc:	e0fff917 	ldw	r3,-28(fp)
 800ebd0:	e0bff617 	ldw	r2,-40(fp)
 800ebd4:	1885883a 	add	r2,r3,r2
 800ebd8:	10c1ffcc 	andi	r3,r2,2047
 800ebdc:	e0bffc17 	ldw	r2,-16(fp)
 800ebe0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ebe4:	e0bffe17 	ldw	r2,-8(fp)
 800ebe8:	00bfc716 	blt	zero,r2,800eb08 <__alt_data_end+0xfc00eb08>
 800ebec:	00000106 	br	800ebf4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800ebf0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ebf4:	0005303a 	rdctl	r2,status
 800ebf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ebfc:	e0fffb17 	ldw	r3,-20(fp)
 800ec00:	00bfff84 	movi	r2,-2
 800ec04:	1884703a 	and	r2,r3,r2
 800ec08:	1001703a 	wrctl	status,r2
  
  return context;
 800ec0c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800ec10:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800ec14:	e0bffc17 	ldw	r2,-16(fp)
 800ec18:	10800817 	ldw	r2,32(r2)
 800ec1c:	10c00094 	ori	r3,r2,2
 800ec20:	e0bffc17 	ldw	r2,-16(fp)
 800ec24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ec28:	e0bffc17 	ldw	r2,-16(fp)
 800ec2c:	10800017 	ldw	r2,0(r2)
 800ec30:	10800104 	addi	r2,r2,4
 800ec34:	1007883a 	mov	r3,r2
 800ec38:	e0bffc17 	ldw	r2,-16(fp)
 800ec3c:	10800817 	ldw	r2,32(r2)
 800ec40:	18800035 	stwio	r2,0(r3)
 800ec44:	e0bffa17 	ldw	r2,-24(fp)
 800ec48:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ec4c:	e0bff817 	ldw	r2,-32(fp)
 800ec50:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ec54:	e0bffe17 	ldw	r2,-8(fp)
 800ec58:	0080100e 	bge	zero,r2,800ec9c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800ec5c:	e0bfff17 	ldw	r2,-4(fp)
 800ec60:	1090000c 	andi	r2,r2,16384
 800ec64:	1000101e 	bne	r2,zero,800eca8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ec68:	0001883a 	nop
 800ec6c:	e0bffc17 	ldw	r2,-16(fp)
 800ec70:	10c00d17 	ldw	r3,52(r2)
 800ec74:	e0bff517 	ldw	r2,-44(fp)
 800ec78:	1880051e 	bne	r3,r2,800ec90 <altera_avalon_jtag_uart_write+0x1b8>
 800ec7c:	e0bffc17 	ldw	r2,-16(fp)
 800ec80:	10c00917 	ldw	r3,36(r2)
 800ec84:	e0bffc17 	ldw	r2,-16(fp)
 800ec88:	10800117 	ldw	r2,4(r2)
 800ec8c:	18bff736 	bltu	r3,r2,800ec6c <__alt_data_end+0xfc00ec6c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800ec90:	e0bffc17 	ldw	r2,-16(fp)
 800ec94:	10800917 	ldw	r2,36(r2)
 800ec98:	1000051e 	bne	r2,zero,800ecb0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800ec9c:	e0bffe17 	ldw	r2,-8(fp)
 800eca0:	00bfd016 	blt	zero,r2,800ebe4 <__alt_data_end+0xfc00ebe4>
 800eca4:	00000306 	br	800ecb4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800eca8:	0001883a 	nop
 800ecac:	00000106 	br	800ecb4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800ecb0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ecb4:	e0fffd17 	ldw	r3,-12(fp)
 800ecb8:	e0bff717 	ldw	r2,-36(fp)
 800ecbc:	18800426 	beq	r3,r2,800ecd0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800ecc0:	e0fffd17 	ldw	r3,-12(fp)
 800ecc4:	e0bff717 	ldw	r2,-36(fp)
 800ecc8:	1885c83a 	sub	r2,r3,r2
 800eccc:	00000606 	br	800ece8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800ecd0:	e0bfff17 	ldw	r2,-4(fp)
 800ecd4:	1090000c 	andi	r2,r2,16384
 800ecd8:	10000226 	beq	r2,zero,800ece4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800ecdc:	00bffd44 	movi	r2,-11
 800ece0:	00000106 	br	800ece8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800ece4:	00bffec4 	movi	r2,-5
}
 800ece8:	e037883a 	mov	sp,fp
 800ecec:	dfc00117 	ldw	ra,4(sp)
 800ecf0:	df000017 	ldw	fp,0(sp)
 800ecf4:	dec00204 	addi	sp,sp,8
 800ecf8:	f800283a 	ret

0800ecfc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800ecfc:	defffa04 	addi	sp,sp,-24
 800ed00:	dfc00515 	stw	ra,20(sp)
 800ed04:	df000415 	stw	fp,16(sp)
 800ed08:	df000404 	addi	fp,sp,16
 800ed0c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800ed10:	0007883a 	mov	r3,zero
 800ed14:	e0bfff17 	ldw	r2,-4(fp)
 800ed18:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800ed1c:	e0bfff17 	ldw	r2,-4(fp)
 800ed20:	10800104 	addi	r2,r2,4
 800ed24:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ed28:	0005303a 	rdctl	r2,status
 800ed2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ed30:	e0fffd17 	ldw	r3,-12(fp)
 800ed34:	00bfff84 	movi	r2,-2
 800ed38:	1884703a 	and	r2,r3,r2
 800ed3c:	1001703a 	wrctl	status,r2
  
  return context;
 800ed40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800ed44:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800ed48:	800f9740 	call	800f974 <alt_tick>
 800ed4c:	e0bffc17 	ldw	r2,-16(fp)
 800ed50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ed54:	e0bffe17 	ldw	r2,-8(fp)
 800ed58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800ed5c:	0001883a 	nop
 800ed60:	e037883a 	mov	sp,fp
 800ed64:	dfc00117 	ldw	ra,4(sp)
 800ed68:	df000017 	ldw	fp,0(sp)
 800ed6c:	dec00204 	addi	sp,sp,8
 800ed70:	f800283a 	ret

0800ed74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800ed74:	defff804 	addi	sp,sp,-32
 800ed78:	dfc00715 	stw	ra,28(sp)
 800ed7c:	df000615 	stw	fp,24(sp)
 800ed80:	df000604 	addi	fp,sp,24
 800ed84:	e13ffc15 	stw	r4,-16(fp)
 800ed88:	e17ffd15 	stw	r5,-12(fp)
 800ed8c:	e1bffe15 	stw	r6,-8(fp)
 800ed90:	e1ffff15 	stw	r7,-4(fp)
 800ed94:	e0bfff17 	ldw	r2,-4(fp)
 800ed98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800ed9c:	d0a6da17 	ldw	r2,-25752(gp)
 800eda0:	1000021e 	bne	r2,zero,800edac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800eda4:	e0bffb17 	ldw	r2,-20(fp)
 800eda8:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800edac:	e0bffc17 	ldw	r2,-16(fp)
 800edb0:	10800104 	addi	r2,r2,4
 800edb4:	00c001c4 	movi	r3,7
 800edb8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800edbc:	d8000015 	stw	zero,0(sp)
 800edc0:	e1fffc17 	ldw	r7,-16(fp)
 800edc4:	01820074 	movhi	r6,2049
 800edc8:	31bb3f04 	addi	r6,r6,-4868
 800edcc:	e17ffe17 	ldw	r5,-8(fp)
 800edd0:	e13ffd17 	ldw	r4,-12(fp)
 800edd4:	800f2540 	call	800f254 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800edd8:	0001883a 	nop
 800eddc:	e037883a 	mov	sp,fp
 800ede0:	dfc00117 	ldw	ra,4(sp)
 800ede4:	df000017 	ldw	fp,0(sp)
 800ede8:	dec00204 	addi	sp,sp,8
 800edec:	f800283a 	ret

0800edf0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800edf0:	defff504 	addi	sp,sp,-44
 800edf4:	df000a15 	stw	fp,40(sp)
 800edf8:	df000a04 	addi	fp,sp,40
 800edfc:	e13ffc15 	stw	r4,-16(fp)
 800ee00:	e17ffd15 	stw	r5,-12(fp)
 800ee04:	e1bffe15 	stw	r6,-8(fp)
 800ee08:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800ee0c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ee10:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
 800ee14:	10003c26 	beq	r2,zero,800ef08 <alt_alarm_start+0x118>
  {
    if (alarm)
 800ee18:	e0bffc17 	ldw	r2,-16(fp)
 800ee1c:	10003826 	beq	r2,zero,800ef00 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800ee20:	e0bffc17 	ldw	r2,-16(fp)
 800ee24:	e0fffe17 	ldw	r3,-8(fp)
 800ee28:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800ee2c:	e0bffc17 	ldw	r2,-16(fp)
 800ee30:	e0ffff17 	ldw	r3,-4(fp)
 800ee34:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ee38:	0005303a 	rdctl	r2,status
 800ee3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ee40:	e0fff917 	ldw	r3,-28(fp)
 800ee44:	00bfff84 	movi	r2,-2
 800ee48:	1884703a 	and	r2,r3,r2
 800ee4c:	1001703a 	wrctl	status,r2
  
  return context;
 800ee50:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800ee54:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800ee58:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
 800ee5c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800ee60:	e0fffd17 	ldw	r3,-12(fp)
 800ee64:	e0bff617 	ldw	r2,-40(fp)
 800ee68:	1885883a 	add	r2,r3,r2
 800ee6c:	10c00044 	addi	r3,r2,1
 800ee70:	e0bffc17 	ldw	r2,-16(fp)
 800ee74:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800ee78:	e0bffc17 	ldw	r2,-16(fp)
 800ee7c:	10c00217 	ldw	r3,8(r2)
 800ee80:	e0bff617 	ldw	r2,-40(fp)
 800ee84:	1880042e 	bgeu	r3,r2,800ee98 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800ee88:	e0bffc17 	ldw	r2,-16(fp)
 800ee8c:	00c00044 	movi	r3,1
 800ee90:	10c00405 	stb	r3,16(r2)
 800ee94:	00000206 	br	800eea0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800ee98:	e0bffc17 	ldw	r2,-16(fp)
 800ee9c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800eea0:	e0bffc17 	ldw	r2,-16(fp)
 800eea4:	d0e01004 	addi	r3,gp,-32704
 800eea8:	e0fffa15 	stw	r3,-24(fp)
 800eeac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800eeb0:	e0bffb17 	ldw	r2,-20(fp)
 800eeb4:	e0fffa17 	ldw	r3,-24(fp)
 800eeb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800eebc:	e0bffa17 	ldw	r2,-24(fp)
 800eec0:	10c00017 	ldw	r3,0(r2)
 800eec4:	e0bffb17 	ldw	r2,-20(fp)
 800eec8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800eecc:	e0bffa17 	ldw	r2,-24(fp)
 800eed0:	10800017 	ldw	r2,0(r2)
 800eed4:	e0fffb17 	ldw	r3,-20(fp)
 800eed8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800eedc:	e0bffa17 	ldw	r2,-24(fp)
 800eee0:	e0fffb17 	ldw	r3,-20(fp)
 800eee4:	10c00015 	stw	r3,0(r2)
 800eee8:	e0bff817 	ldw	r2,-32(fp)
 800eeec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eef0:	e0bff717 	ldw	r2,-36(fp)
 800eef4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800eef8:	0005883a 	mov	r2,zero
 800eefc:	00000306 	br	800ef0c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800ef00:	00bffa84 	movi	r2,-22
 800ef04:	00000106 	br	800ef0c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800ef08:	00bfde84 	movi	r2,-134
  }
}
 800ef0c:	e037883a 	mov	sp,fp
 800ef10:	df000017 	ldw	fp,0(sp)
 800ef14:	dec00104 	addi	sp,sp,4
 800ef18:	f800283a 	ret

0800ef1c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800ef1c:	defffa04 	addi	sp,sp,-24
 800ef20:	dfc00515 	stw	ra,20(sp)
 800ef24:	df000415 	stw	fp,16(sp)
 800ef28:	df000404 	addi	fp,sp,16
 800ef2c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800ef30:	00800244 	movi	r2,9
 800ef34:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800ef38:	014003f4 	movhi	r5,15
 800ef3c:	29509004 	addi	r5,r5,16960
 800ef40:	e13ffd17 	ldw	r4,-12(fp)
 800ef44:	80009940 	call	8000994 <__mulsi3>
 800ef48:	100b883a 	mov	r5,r2
 800ef4c:	0100bef4 	movhi	r4,763
 800ef50:	213c2004 	addi	r4,r4,-3968
 800ef54:	800aea00 	call	800aea0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800ef58:	100b883a 	mov	r5,r2
 800ef5c:	01200034 	movhi	r4,32768
 800ef60:	213fffc4 	addi	r4,r4,-1
 800ef64:	800aea00 	call	800aea0 <__udivsi3>
 800ef68:	100b883a 	mov	r5,r2
 800ef6c:	e13fff17 	ldw	r4,-4(fp)
 800ef70:	800aea00 	call	800aea0 <__udivsi3>
 800ef74:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800ef78:	e0bffe17 	ldw	r2,-8(fp)
 800ef7c:	10002a26 	beq	r2,zero,800f028 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800ef80:	e03ffc15 	stw	zero,-16(fp)
 800ef84:	00001706 	br	800efe4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800ef88:	00a00034 	movhi	r2,32768
 800ef8c:	10bfffc4 	addi	r2,r2,-1
 800ef90:	10bfffc4 	addi	r2,r2,-1
 800ef94:	103ffe1e 	bne	r2,zero,800ef90 <__alt_data_end+0xfc00ef90>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800ef98:	014003f4 	movhi	r5,15
 800ef9c:	29509004 	addi	r5,r5,16960
 800efa0:	e13ffd17 	ldw	r4,-12(fp)
 800efa4:	80009940 	call	8000994 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800efa8:	100b883a 	mov	r5,r2
 800efac:	0100bef4 	movhi	r4,763
 800efb0:	213c2004 	addi	r4,r4,-3968
 800efb4:	800aea00 	call	800aea0 <__udivsi3>
 800efb8:	100b883a 	mov	r5,r2
 800efbc:	01200034 	movhi	r4,32768
 800efc0:	213fffc4 	addi	r4,r4,-1
 800efc4:	800aea00 	call	800aea0 <__udivsi3>
 800efc8:	1007883a 	mov	r3,r2
 800efcc:	e0bfff17 	ldw	r2,-4(fp)
 800efd0:	10c5c83a 	sub	r2,r2,r3
 800efd4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800efd8:	e0bffc17 	ldw	r2,-16(fp)
 800efdc:	10800044 	addi	r2,r2,1
 800efe0:	e0bffc15 	stw	r2,-16(fp)
 800efe4:	e0fffc17 	ldw	r3,-16(fp)
 800efe8:	e0bffe17 	ldw	r2,-8(fp)
 800efec:	18bfe616 	blt	r3,r2,800ef88 <__alt_data_end+0xfc00ef88>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800eff0:	014003f4 	movhi	r5,15
 800eff4:	29509004 	addi	r5,r5,16960
 800eff8:	e13ffd17 	ldw	r4,-12(fp)
 800effc:	80009940 	call	8000994 <__mulsi3>
 800f000:	100b883a 	mov	r5,r2
 800f004:	0100bef4 	movhi	r4,763
 800f008:	213c2004 	addi	r4,r4,-3968
 800f00c:	800aea00 	call	800aea0 <__udivsi3>
 800f010:	e17fff17 	ldw	r5,-4(fp)
 800f014:	1009883a 	mov	r4,r2
 800f018:	80009940 	call	8000994 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800f01c:	10bfffc4 	addi	r2,r2,-1
 800f020:	103ffe1e 	bne	r2,zero,800f01c <__alt_data_end+0xfc00f01c>
 800f024:	00000d06 	br	800f05c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800f028:	014003f4 	movhi	r5,15
 800f02c:	29509004 	addi	r5,r5,16960
 800f030:	e13ffd17 	ldw	r4,-12(fp)
 800f034:	80009940 	call	8000994 <__mulsi3>
 800f038:	100b883a 	mov	r5,r2
 800f03c:	0100bef4 	movhi	r4,763
 800f040:	213c2004 	addi	r4,r4,-3968
 800f044:	800aea00 	call	800aea0 <__udivsi3>
 800f048:	e17fff17 	ldw	r5,-4(fp)
 800f04c:	1009883a 	mov	r4,r2
 800f050:	80009940 	call	8000994 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800f054:	10bfffc4 	addi	r2,r2,-1
 800f058:	00bffe16 	blt	zero,r2,800f054 <__alt_data_end+0xfc00f054>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800f05c:	0005883a 	mov	r2,zero
}
 800f060:	e037883a 	mov	sp,fp
 800f064:	dfc00117 	ldw	ra,4(sp)
 800f068:	df000017 	ldw	fp,0(sp)
 800f06c:	dec00204 	addi	sp,sp,8
 800f070:	f800283a 	ret

0800f074 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800f074:	deffff04 	addi	sp,sp,-4
 800f078:	df000015 	stw	fp,0(sp)
 800f07c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800f080:	0001883a 	nop
 800f084:	e037883a 	mov	sp,fp
 800f088:	df000017 	ldw	fp,0(sp)
 800f08c:	dec00104 	addi	sp,sp,4
 800f090:	f800283a 	ret

0800f094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f094:	defffe04 	addi	sp,sp,-8
 800f098:	dfc00115 	stw	ra,4(sp)
 800f09c:	df000015 	stw	fp,0(sp)
 800f0a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f0a4:	d0a00d17 	ldw	r2,-32716(gp)
 800f0a8:	10000326 	beq	r2,zero,800f0b8 <alt_get_errno+0x24>
 800f0ac:	d0a00d17 	ldw	r2,-32716(gp)
 800f0b0:	103ee83a 	callr	r2
 800f0b4:	00000106 	br	800f0bc <alt_get_errno+0x28>
 800f0b8:	d0a6d504 	addi	r2,gp,-25772
}
 800f0bc:	e037883a 	mov	sp,fp
 800f0c0:	dfc00117 	ldw	ra,4(sp)
 800f0c4:	df000017 	ldw	fp,0(sp)
 800f0c8:	dec00204 	addi	sp,sp,8
 800f0cc:	f800283a 	ret

0800f0d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800f0d0:	defffa04 	addi	sp,sp,-24
 800f0d4:	dfc00515 	stw	ra,20(sp)
 800f0d8:	df000415 	stw	fp,16(sp)
 800f0dc:	df000404 	addi	fp,sp,16
 800f0e0:	e13ffe15 	stw	r4,-8(fp)
 800f0e4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800f0e8:	e0bffe17 	ldw	r2,-8(fp)
 800f0ec:	10000326 	beq	r2,zero,800f0fc <alt_dev_llist_insert+0x2c>
 800f0f0:	e0bffe17 	ldw	r2,-8(fp)
 800f0f4:	10800217 	ldw	r2,8(r2)
 800f0f8:	1000061e 	bne	r2,zero,800f114 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800f0fc:	800f0940 	call	800f094 <alt_get_errno>
 800f100:	1007883a 	mov	r3,r2
 800f104:	00800584 	movi	r2,22
 800f108:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800f10c:	00bffa84 	movi	r2,-22
 800f110:	00001306 	br	800f160 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800f114:	e0bffe17 	ldw	r2,-8(fp)
 800f118:	e0ffff17 	ldw	r3,-4(fp)
 800f11c:	e0fffc15 	stw	r3,-16(fp)
 800f120:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800f124:	e0bffd17 	ldw	r2,-12(fp)
 800f128:	e0fffc17 	ldw	r3,-16(fp)
 800f12c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800f130:	e0bffc17 	ldw	r2,-16(fp)
 800f134:	10c00017 	ldw	r3,0(r2)
 800f138:	e0bffd17 	ldw	r2,-12(fp)
 800f13c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800f140:	e0bffc17 	ldw	r2,-16(fp)
 800f144:	10800017 	ldw	r2,0(r2)
 800f148:	e0fffd17 	ldw	r3,-12(fp)
 800f14c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800f150:	e0bffc17 	ldw	r2,-16(fp)
 800f154:	e0fffd17 	ldw	r3,-12(fp)
 800f158:	10c00015 	stw	r3,0(r2)

  return 0;  
 800f15c:	0005883a 	mov	r2,zero
}
 800f160:	e037883a 	mov	sp,fp
 800f164:	dfc00117 	ldw	ra,4(sp)
 800f168:	df000017 	ldw	fp,0(sp)
 800f16c:	dec00204 	addi	sp,sp,8
 800f170:	f800283a 	ret

0800f174 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800f174:	defffd04 	addi	sp,sp,-12
 800f178:	dfc00215 	stw	ra,8(sp)
 800f17c:	df000115 	stw	fp,4(sp)
 800f180:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800f184:	00820074 	movhi	r2,2049
 800f188:	10804a04 	addi	r2,r2,296
 800f18c:	e0bfff15 	stw	r2,-4(fp)
 800f190:	00000606 	br	800f1ac <_do_ctors+0x38>
        (*ctor) (); 
 800f194:	e0bfff17 	ldw	r2,-4(fp)
 800f198:	10800017 	ldw	r2,0(r2)
 800f19c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800f1a0:	e0bfff17 	ldw	r2,-4(fp)
 800f1a4:	10bfff04 	addi	r2,r2,-4
 800f1a8:	e0bfff15 	stw	r2,-4(fp)
 800f1ac:	e0ffff17 	ldw	r3,-4(fp)
 800f1b0:	00820074 	movhi	r2,2049
 800f1b4:	10804b04 	addi	r2,r2,300
 800f1b8:	18bff62e 	bgeu	r3,r2,800f194 <__alt_data_end+0xfc00f194>
        (*ctor) (); 
}
 800f1bc:	0001883a 	nop
 800f1c0:	e037883a 	mov	sp,fp
 800f1c4:	dfc00117 	ldw	ra,4(sp)
 800f1c8:	df000017 	ldw	fp,0(sp)
 800f1cc:	dec00204 	addi	sp,sp,8
 800f1d0:	f800283a 	ret

0800f1d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800f1d4:	defffd04 	addi	sp,sp,-12
 800f1d8:	dfc00215 	stw	ra,8(sp)
 800f1dc:	df000115 	stw	fp,4(sp)
 800f1e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800f1e4:	00820074 	movhi	r2,2049
 800f1e8:	10804a04 	addi	r2,r2,296
 800f1ec:	e0bfff15 	stw	r2,-4(fp)
 800f1f0:	00000606 	br	800f20c <_do_dtors+0x38>
        (*dtor) (); 
 800f1f4:	e0bfff17 	ldw	r2,-4(fp)
 800f1f8:	10800017 	ldw	r2,0(r2)
 800f1fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800f200:	e0bfff17 	ldw	r2,-4(fp)
 800f204:	10bfff04 	addi	r2,r2,-4
 800f208:	e0bfff15 	stw	r2,-4(fp)
 800f20c:	e0ffff17 	ldw	r3,-4(fp)
 800f210:	00820074 	movhi	r2,2049
 800f214:	10804b04 	addi	r2,r2,300
 800f218:	18bff62e 	bgeu	r3,r2,800f1f4 <__alt_data_end+0xfc00f1f4>
        (*dtor) (); 
}
 800f21c:	0001883a 	nop
 800f220:	e037883a 	mov	sp,fp
 800f224:	dfc00117 	ldw	ra,4(sp)
 800f228:	df000017 	ldw	fp,0(sp)
 800f22c:	dec00204 	addi	sp,sp,8
 800f230:	f800283a 	ret

0800f234 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800f234:	deffff04 	addi	sp,sp,-4
 800f238:	df000015 	stw	fp,0(sp)
 800f23c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800f240:	0001883a 	nop
 800f244:	e037883a 	mov	sp,fp
 800f248:	df000017 	ldw	fp,0(sp)
 800f24c:	dec00104 	addi	sp,sp,4
 800f250:	f800283a 	ret

0800f254 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800f254:	defff904 	addi	sp,sp,-28
 800f258:	dfc00615 	stw	ra,24(sp)
 800f25c:	df000515 	stw	fp,20(sp)
 800f260:	df000504 	addi	fp,sp,20
 800f264:	e13ffc15 	stw	r4,-16(fp)
 800f268:	e17ffd15 	stw	r5,-12(fp)
 800f26c:	e1bffe15 	stw	r6,-8(fp)
 800f270:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800f274:	e0800217 	ldw	r2,8(fp)
 800f278:	d8800015 	stw	r2,0(sp)
 800f27c:	e1ffff17 	ldw	r7,-4(fp)
 800f280:	e1bffe17 	ldw	r6,-8(fp)
 800f284:	e17ffd17 	ldw	r5,-12(fp)
 800f288:	e13ffc17 	ldw	r4,-16(fp)
 800f28c:	800f4040 	call	800f404 <alt_iic_isr_register>
}  
 800f290:	e037883a 	mov	sp,fp
 800f294:	dfc00117 	ldw	ra,4(sp)
 800f298:	df000017 	ldw	fp,0(sp)
 800f29c:	dec00204 	addi	sp,sp,8
 800f2a0:	f800283a 	ret

0800f2a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800f2a4:	defff904 	addi	sp,sp,-28
 800f2a8:	df000615 	stw	fp,24(sp)
 800f2ac:	df000604 	addi	fp,sp,24
 800f2b0:	e13ffe15 	stw	r4,-8(fp)
 800f2b4:	e17fff15 	stw	r5,-4(fp)
 800f2b8:	e0bfff17 	ldw	r2,-4(fp)
 800f2bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f2c0:	0005303a 	rdctl	r2,status
 800f2c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f2c8:	e0fffb17 	ldw	r3,-20(fp)
 800f2cc:	00bfff84 	movi	r2,-2
 800f2d0:	1884703a 	and	r2,r3,r2
 800f2d4:	1001703a 	wrctl	status,r2
  
  return context;
 800f2d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f2dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800f2e0:	00c00044 	movi	r3,1
 800f2e4:	e0bffa17 	ldw	r2,-24(fp)
 800f2e8:	1884983a 	sll	r2,r3,r2
 800f2ec:	1007883a 	mov	r3,r2
 800f2f0:	d0a6d917 	ldw	r2,-25756(gp)
 800f2f4:	1884b03a 	or	r2,r3,r2
 800f2f8:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f2fc:	d0a6d917 	ldw	r2,-25756(gp)
 800f300:	100170fa 	wrctl	ienable,r2
 800f304:	e0bffc17 	ldw	r2,-16(fp)
 800f308:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f30c:	e0bffd17 	ldw	r2,-12(fp)
 800f310:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f314:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800f318:	0001883a 	nop
}
 800f31c:	e037883a 	mov	sp,fp
 800f320:	df000017 	ldw	fp,0(sp)
 800f324:	dec00104 	addi	sp,sp,4
 800f328:	f800283a 	ret

0800f32c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800f32c:	defff904 	addi	sp,sp,-28
 800f330:	df000615 	stw	fp,24(sp)
 800f334:	df000604 	addi	fp,sp,24
 800f338:	e13ffe15 	stw	r4,-8(fp)
 800f33c:	e17fff15 	stw	r5,-4(fp)
 800f340:	e0bfff17 	ldw	r2,-4(fp)
 800f344:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f348:	0005303a 	rdctl	r2,status
 800f34c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f350:	e0fffb17 	ldw	r3,-20(fp)
 800f354:	00bfff84 	movi	r2,-2
 800f358:	1884703a 	and	r2,r3,r2
 800f35c:	1001703a 	wrctl	status,r2
  
  return context;
 800f360:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f364:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800f368:	00c00044 	movi	r3,1
 800f36c:	e0bffa17 	ldw	r2,-24(fp)
 800f370:	1884983a 	sll	r2,r3,r2
 800f374:	0084303a 	nor	r2,zero,r2
 800f378:	1007883a 	mov	r3,r2
 800f37c:	d0a6d917 	ldw	r2,-25756(gp)
 800f380:	1884703a 	and	r2,r3,r2
 800f384:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f388:	d0a6d917 	ldw	r2,-25756(gp)
 800f38c:	100170fa 	wrctl	ienable,r2
 800f390:	e0bffc17 	ldw	r2,-16(fp)
 800f394:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f398:	e0bffd17 	ldw	r2,-12(fp)
 800f39c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f3a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800f3a4:	0001883a 	nop
}
 800f3a8:	e037883a 	mov	sp,fp
 800f3ac:	df000017 	ldw	fp,0(sp)
 800f3b0:	dec00104 	addi	sp,sp,4
 800f3b4:	f800283a 	ret

0800f3b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800f3b8:	defffc04 	addi	sp,sp,-16
 800f3bc:	df000315 	stw	fp,12(sp)
 800f3c0:	df000304 	addi	fp,sp,12
 800f3c4:	e13ffe15 	stw	r4,-8(fp)
 800f3c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800f3cc:	000530fa 	rdctl	r2,ienable
 800f3d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800f3d4:	00c00044 	movi	r3,1
 800f3d8:	e0bfff17 	ldw	r2,-4(fp)
 800f3dc:	1884983a 	sll	r2,r3,r2
 800f3e0:	1007883a 	mov	r3,r2
 800f3e4:	e0bffd17 	ldw	r2,-12(fp)
 800f3e8:	1884703a 	and	r2,r3,r2
 800f3ec:	1004c03a 	cmpne	r2,r2,zero
 800f3f0:	10803fcc 	andi	r2,r2,255
}
 800f3f4:	e037883a 	mov	sp,fp
 800f3f8:	df000017 	ldw	fp,0(sp)
 800f3fc:	dec00104 	addi	sp,sp,4
 800f400:	f800283a 	ret

0800f404 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800f404:	defff504 	addi	sp,sp,-44
 800f408:	dfc00a15 	stw	ra,40(sp)
 800f40c:	df000915 	stw	fp,36(sp)
 800f410:	df000904 	addi	fp,sp,36
 800f414:	e13ffc15 	stw	r4,-16(fp)
 800f418:	e17ffd15 	stw	r5,-12(fp)
 800f41c:	e1bffe15 	stw	r6,-8(fp)
 800f420:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800f424:	00bffa84 	movi	r2,-22
 800f428:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800f42c:	e0bffd17 	ldw	r2,-12(fp)
 800f430:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800f434:	e0bff817 	ldw	r2,-32(fp)
 800f438:	10800808 	cmpgei	r2,r2,32
 800f43c:	1000271e 	bne	r2,zero,800f4dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f440:	0005303a 	rdctl	r2,status
 800f444:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f448:	e0fffb17 	ldw	r3,-20(fp)
 800f44c:	00bfff84 	movi	r2,-2
 800f450:	1884703a 	and	r2,r3,r2
 800f454:	1001703a 	wrctl	status,r2
  
  return context;
 800f458:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800f45c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800f460:	00820074 	movhi	r2,2049
 800f464:	108ee104 	addi	r2,r2,15236
 800f468:	e0fff817 	ldw	r3,-32(fp)
 800f46c:	180690fa 	slli	r3,r3,3
 800f470:	10c5883a 	add	r2,r2,r3
 800f474:	e0fffe17 	ldw	r3,-8(fp)
 800f478:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800f47c:	00820074 	movhi	r2,2049
 800f480:	108ee104 	addi	r2,r2,15236
 800f484:	e0fff817 	ldw	r3,-32(fp)
 800f488:	180690fa 	slli	r3,r3,3
 800f48c:	10c5883a 	add	r2,r2,r3
 800f490:	10800104 	addi	r2,r2,4
 800f494:	e0ffff17 	ldw	r3,-4(fp)
 800f498:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800f49c:	e0bffe17 	ldw	r2,-8(fp)
 800f4a0:	10000526 	beq	r2,zero,800f4b8 <alt_iic_isr_register+0xb4>
 800f4a4:	e0bff817 	ldw	r2,-32(fp)
 800f4a8:	100b883a 	mov	r5,r2
 800f4ac:	e13ffc17 	ldw	r4,-16(fp)
 800f4b0:	800f2a40 	call	800f2a4 <alt_ic_irq_enable>
 800f4b4:	00000406 	br	800f4c8 <alt_iic_isr_register+0xc4>
 800f4b8:	e0bff817 	ldw	r2,-32(fp)
 800f4bc:	100b883a 	mov	r5,r2
 800f4c0:	e13ffc17 	ldw	r4,-16(fp)
 800f4c4:	800f32c0 	call	800f32c <alt_ic_irq_disable>
 800f4c8:	e0bff715 	stw	r2,-36(fp)
 800f4cc:	e0bffa17 	ldw	r2,-24(fp)
 800f4d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f4d4:	e0bff917 	ldw	r2,-28(fp)
 800f4d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800f4dc:	e0bff717 	ldw	r2,-36(fp)
}
 800f4e0:	e037883a 	mov	sp,fp
 800f4e4:	dfc00117 	ldw	ra,4(sp)
 800f4e8:	df000017 	ldw	fp,0(sp)
 800f4ec:	dec00204 	addi	sp,sp,8
 800f4f0:	f800283a 	ret

0800f4f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800f4f4:	defff804 	addi	sp,sp,-32
 800f4f8:	dfc00715 	stw	ra,28(sp)
 800f4fc:	df000615 	stw	fp,24(sp)
 800f500:	dc000515 	stw	r16,20(sp)
 800f504:	df000604 	addi	fp,sp,24
 800f508:	e13ffb15 	stw	r4,-20(fp)
 800f50c:	e17ffc15 	stw	r5,-16(fp)
 800f510:	e1bffd15 	stw	r6,-12(fp)
 800f514:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800f518:	e1bffe17 	ldw	r6,-8(fp)
 800f51c:	e17ffd17 	ldw	r5,-12(fp)
 800f520:	e13ffc17 	ldw	r4,-16(fp)
 800f524:	800f77c0 	call	800f77c <open>
 800f528:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800f52c:	e0bffa17 	ldw	r2,-24(fp)
 800f530:	10002216 	blt	r2,zero,800f5bc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800f534:	04020074 	movhi	r16,2049
 800f538:	84038204 	addi	r16,r16,3592
 800f53c:	e0bffa17 	ldw	r2,-24(fp)
 800f540:	01400304 	movi	r5,12
 800f544:	1009883a 	mov	r4,r2
 800f548:	80009940 	call	8000994 <__mulsi3>
 800f54c:	8085883a 	add	r2,r16,r2
 800f550:	10c00017 	ldw	r3,0(r2)
 800f554:	e0bffb17 	ldw	r2,-20(fp)
 800f558:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800f55c:	04020074 	movhi	r16,2049
 800f560:	84038204 	addi	r16,r16,3592
 800f564:	e0bffa17 	ldw	r2,-24(fp)
 800f568:	01400304 	movi	r5,12
 800f56c:	1009883a 	mov	r4,r2
 800f570:	80009940 	call	8000994 <__mulsi3>
 800f574:	8085883a 	add	r2,r16,r2
 800f578:	10800104 	addi	r2,r2,4
 800f57c:	10c00017 	ldw	r3,0(r2)
 800f580:	e0bffb17 	ldw	r2,-20(fp)
 800f584:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800f588:	04020074 	movhi	r16,2049
 800f58c:	84038204 	addi	r16,r16,3592
 800f590:	e0bffa17 	ldw	r2,-24(fp)
 800f594:	01400304 	movi	r5,12
 800f598:	1009883a 	mov	r4,r2
 800f59c:	80009940 	call	8000994 <__mulsi3>
 800f5a0:	8085883a 	add	r2,r16,r2
 800f5a4:	10800204 	addi	r2,r2,8
 800f5a8:	10c00017 	ldw	r3,0(r2)
 800f5ac:	e0bffb17 	ldw	r2,-20(fp)
 800f5b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800f5b4:	e13ffa17 	ldw	r4,-24(fp)
 800f5b8:	800df240 	call	800df24 <alt_release_fd>
  }
} 
 800f5bc:	0001883a 	nop
 800f5c0:	e6ffff04 	addi	sp,fp,-4
 800f5c4:	dfc00217 	ldw	ra,8(sp)
 800f5c8:	df000117 	ldw	fp,4(sp)
 800f5cc:	dc000017 	ldw	r16,0(sp)
 800f5d0:	dec00304 	addi	sp,sp,12
 800f5d4:	f800283a 	ret

0800f5d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800f5d8:	defffb04 	addi	sp,sp,-20
 800f5dc:	dfc00415 	stw	ra,16(sp)
 800f5e0:	df000315 	stw	fp,12(sp)
 800f5e4:	df000304 	addi	fp,sp,12
 800f5e8:	e13ffd15 	stw	r4,-12(fp)
 800f5ec:	e17ffe15 	stw	r5,-8(fp)
 800f5f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800f5f4:	01c07fc4 	movi	r7,511
 800f5f8:	01800044 	movi	r6,1
 800f5fc:	e17ffd17 	ldw	r5,-12(fp)
 800f600:	01020074 	movhi	r4,2049
 800f604:	21038504 	addi	r4,r4,3604
 800f608:	800f4f40 	call	800f4f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800f60c:	01c07fc4 	movi	r7,511
 800f610:	000d883a 	mov	r6,zero
 800f614:	e17ffe17 	ldw	r5,-8(fp)
 800f618:	01020074 	movhi	r4,2049
 800f61c:	21038204 	addi	r4,r4,3592
 800f620:	800f4f40 	call	800f4f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800f624:	01c07fc4 	movi	r7,511
 800f628:	01800044 	movi	r6,1
 800f62c:	e17fff17 	ldw	r5,-4(fp)
 800f630:	01020074 	movhi	r4,2049
 800f634:	21038804 	addi	r4,r4,3616
 800f638:	800f4f40 	call	800f4f4 <alt_open_fd>
}  
 800f63c:	0001883a 	nop
 800f640:	e037883a 	mov	sp,fp
 800f644:	dfc00117 	ldw	ra,4(sp)
 800f648:	df000017 	ldw	fp,0(sp)
 800f64c:	dec00204 	addi	sp,sp,8
 800f650:	f800283a 	ret

0800f654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f654:	defffe04 	addi	sp,sp,-8
 800f658:	dfc00115 	stw	ra,4(sp)
 800f65c:	df000015 	stw	fp,0(sp)
 800f660:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f664:	d0a00d17 	ldw	r2,-32716(gp)
 800f668:	10000326 	beq	r2,zero,800f678 <alt_get_errno+0x24>
 800f66c:	d0a00d17 	ldw	r2,-32716(gp)
 800f670:	103ee83a 	callr	r2
 800f674:	00000106 	br	800f67c <alt_get_errno+0x28>
 800f678:	d0a6d504 	addi	r2,gp,-25772
}
 800f67c:	e037883a 	mov	sp,fp
 800f680:	dfc00117 	ldw	ra,4(sp)
 800f684:	df000017 	ldw	fp,0(sp)
 800f688:	dec00204 	addi	sp,sp,8
 800f68c:	f800283a 	ret

0800f690 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800f690:	defffb04 	addi	sp,sp,-20
 800f694:	dfc00415 	stw	ra,16(sp)
 800f698:	df000315 	stw	fp,12(sp)
 800f69c:	dc000215 	stw	r16,8(sp)
 800f6a0:	df000304 	addi	fp,sp,12
 800f6a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800f6a8:	e0bffe17 	ldw	r2,-8(fp)
 800f6ac:	10800217 	ldw	r2,8(r2)
 800f6b0:	10d00034 	orhi	r3,r2,16384
 800f6b4:	e0bffe17 	ldw	r2,-8(fp)
 800f6b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f6bc:	e03ffd15 	stw	zero,-12(fp)
 800f6c0:	00002306 	br	800f750 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f6c4:	04020074 	movhi	r16,2049
 800f6c8:	84038204 	addi	r16,r16,3592
 800f6cc:	e0bffd17 	ldw	r2,-12(fp)
 800f6d0:	01400304 	movi	r5,12
 800f6d4:	1009883a 	mov	r4,r2
 800f6d8:	80009940 	call	8000994 <__mulsi3>
 800f6dc:	8085883a 	add	r2,r16,r2
 800f6e0:	10c00017 	ldw	r3,0(r2)
 800f6e4:	e0bffe17 	ldw	r2,-8(fp)
 800f6e8:	10800017 	ldw	r2,0(r2)
 800f6ec:	1880151e 	bne	r3,r2,800f744 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f6f0:	04020074 	movhi	r16,2049
 800f6f4:	84038204 	addi	r16,r16,3592
 800f6f8:	e0bffd17 	ldw	r2,-12(fp)
 800f6fc:	01400304 	movi	r5,12
 800f700:	1009883a 	mov	r4,r2
 800f704:	80009940 	call	8000994 <__mulsi3>
 800f708:	8085883a 	add	r2,r16,r2
 800f70c:	10800204 	addi	r2,r2,8
 800f710:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f714:	10000b0e 	bge	r2,zero,800f744 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800f718:	01400304 	movi	r5,12
 800f71c:	e13ffd17 	ldw	r4,-12(fp)
 800f720:	80009940 	call	8000994 <__mulsi3>
 800f724:	1007883a 	mov	r3,r2
 800f728:	00820074 	movhi	r2,2049
 800f72c:	10838204 	addi	r2,r2,3592
 800f730:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f734:	e0bffe17 	ldw	r2,-8(fp)
 800f738:	18800226 	beq	r3,r2,800f744 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800f73c:	00bffcc4 	movi	r2,-13
 800f740:	00000806 	br	800f764 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f744:	e0bffd17 	ldw	r2,-12(fp)
 800f748:	10800044 	addi	r2,r2,1
 800f74c:	e0bffd15 	stw	r2,-12(fp)
 800f750:	d0a00c17 	ldw	r2,-32720(gp)
 800f754:	1007883a 	mov	r3,r2
 800f758:	e0bffd17 	ldw	r2,-12(fp)
 800f75c:	18bfd92e 	bgeu	r3,r2,800f6c4 <__alt_data_end+0xfc00f6c4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800f760:	0005883a 	mov	r2,zero
}
 800f764:	e6ffff04 	addi	sp,fp,-4
 800f768:	dfc00217 	ldw	ra,8(sp)
 800f76c:	df000117 	ldw	fp,4(sp)
 800f770:	dc000017 	ldw	r16,0(sp)
 800f774:	dec00304 	addi	sp,sp,12
 800f778:	f800283a 	ret

0800f77c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800f77c:	defff604 	addi	sp,sp,-40
 800f780:	dfc00915 	stw	ra,36(sp)
 800f784:	df000815 	stw	fp,32(sp)
 800f788:	df000804 	addi	fp,sp,32
 800f78c:	e13ffd15 	stw	r4,-12(fp)
 800f790:	e17ffe15 	stw	r5,-8(fp)
 800f794:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800f798:	00bfffc4 	movi	r2,-1
 800f79c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800f7a0:	00bffb44 	movi	r2,-19
 800f7a4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800f7a8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800f7ac:	d1600a04 	addi	r5,gp,-32728
 800f7b0:	e13ffd17 	ldw	r4,-12(fp)
 800f7b4:	800faa00 	call	800faa0 <alt_find_dev>
 800f7b8:	e0bff815 	stw	r2,-32(fp)
 800f7bc:	e0bff817 	ldw	r2,-32(fp)
 800f7c0:	1000051e 	bne	r2,zero,800f7d8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800f7c4:	e13ffd17 	ldw	r4,-12(fp)
 800f7c8:	800fb300 	call	800fb30 <alt_find_file>
 800f7cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800f7d0:	00800044 	movi	r2,1
 800f7d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800f7d8:	e0bff817 	ldw	r2,-32(fp)
 800f7dc:	10002b26 	beq	r2,zero,800f88c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800f7e0:	e13ff817 	ldw	r4,-32(fp)
 800f7e4:	800fc380 	call	800fc38 <alt_get_fd>
 800f7e8:	e0bff915 	stw	r2,-28(fp)
 800f7ec:	e0bff917 	ldw	r2,-28(fp)
 800f7f0:	1000030e 	bge	r2,zero,800f800 <open+0x84>
    {
      status = index;
 800f7f4:	e0bff917 	ldw	r2,-28(fp)
 800f7f8:	e0bffa15 	stw	r2,-24(fp)
 800f7fc:	00002506 	br	800f894 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800f800:	01400304 	movi	r5,12
 800f804:	e13ff917 	ldw	r4,-28(fp)
 800f808:	80009940 	call	8000994 <__mulsi3>
 800f80c:	1007883a 	mov	r3,r2
 800f810:	00820074 	movhi	r2,2049
 800f814:	10838204 	addi	r2,r2,3592
 800f818:	1885883a 	add	r2,r3,r2
 800f81c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800f820:	e0fffe17 	ldw	r3,-8(fp)
 800f824:	00900034 	movhi	r2,16384
 800f828:	10bfffc4 	addi	r2,r2,-1
 800f82c:	1886703a 	and	r3,r3,r2
 800f830:	e0bffc17 	ldw	r2,-16(fp)
 800f834:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800f838:	e0bffb17 	ldw	r2,-20(fp)
 800f83c:	1000051e 	bne	r2,zero,800f854 <open+0xd8>
 800f840:	e13ffc17 	ldw	r4,-16(fp)
 800f844:	800f6900 	call	800f690 <alt_file_locked>
 800f848:	e0bffa15 	stw	r2,-24(fp)
 800f84c:	e0bffa17 	ldw	r2,-24(fp)
 800f850:	10001016 	blt	r2,zero,800f894 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800f854:	e0bff817 	ldw	r2,-32(fp)
 800f858:	10800317 	ldw	r2,12(r2)
 800f85c:	10000826 	beq	r2,zero,800f880 <open+0x104>
 800f860:	e0bff817 	ldw	r2,-32(fp)
 800f864:	10800317 	ldw	r2,12(r2)
 800f868:	e1ffff17 	ldw	r7,-4(fp)
 800f86c:	e1bffe17 	ldw	r6,-8(fp)
 800f870:	e17ffd17 	ldw	r5,-12(fp)
 800f874:	e13ffc17 	ldw	r4,-16(fp)
 800f878:	103ee83a 	callr	r2
 800f87c:	00000106 	br	800f884 <open+0x108>
 800f880:	0005883a 	mov	r2,zero
 800f884:	e0bffa15 	stw	r2,-24(fp)
 800f888:	00000206 	br	800f894 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800f88c:	00bffb44 	movi	r2,-19
 800f890:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800f894:	e0bffa17 	ldw	r2,-24(fp)
 800f898:	1000090e 	bge	r2,zero,800f8c0 <open+0x144>
  {
    alt_release_fd (index);  
 800f89c:	e13ff917 	ldw	r4,-28(fp)
 800f8a0:	800df240 	call	800df24 <alt_release_fd>
    ALT_ERRNO = -status;
 800f8a4:	800f6540 	call	800f654 <alt_get_errno>
 800f8a8:	1007883a 	mov	r3,r2
 800f8ac:	e0bffa17 	ldw	r2,-24(fp)
 800f8b0:	0085c83a 	sub	r2,zero,r2
 800f8b4:	18800015 	stw	r2,0(r3)
    return -1;
 800f8b8:	00bfffc4 	movi	r2,-1
 800f8bc:	00000106 	br	800f8c4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800f8c0:	e0bff917 	ldw	r2,-28(fp)
}
 800f8c4:	e037883a 	mov	sp,fp
 800f8c8:	dfc00117 	ldw	ra,4(sp)
 800f8cc:	df000017 	ldw	fp,0(sp)
 800f8d0:	dec00204 	addi	sp,sp,8
 800f8d4:	f800283a 	ret

0800f8d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800f8d8:	defffa04 	addi	sp,sp,-24
 800f8dc:	df000515 	stw	fp,20(sp)
 800f8e0:	df000504 	addi	fp,sp,20
 800f8e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f8e8:	0005303a 	rdctl	r2,status
 800f8ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f8f0:	e0fffc17 	ldw	r3,-16(fp)
 800f8f4:	00bfff84 	movi	r2,-2
 800f8f8:	1884703a 	and	r2,r3,r2
 800f8fc:	1001703a 	wrctl	status,r2
  
  return context;
 800f900:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800f904:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800f908:	e0bfff17 	ldw	r2,-4(fp)
 800f90c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800f910:	e0bffd17 	ldw	r2,-12(fp)
 800f914:	10800017 	ldw	r2,0(r2)
 800f918:	e0fffd17 	ldw	r3,-12(fp)
 800f91c:	18c00117 	ldw	r3,4(r3)
 800f920:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800f924:	e0bffd17 	ldw	r2,-12(fp)
 800f928:	10800117 	ldw	r2,4(r2)
 800f92c:	e0fffd17 	ldw	r3,-12(fp)
 800f930:	18c00017 	ldw	r3,0(r3)
 800f934:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800f938:	e0bffd17 	ldw	r2,-12(fp)
 800f93c:	e0fffd17 	ldw	r3,-12(fp)
 800f940:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800f944:	e0bffd17 	ldw	r2,-12(fp)
 800f948:	e0fffd17 	ldw	r3,-12(fp)
 800f94c:	10c00015 	stw	r3,0(r2)
 800f950:	e0bffb17 	ldw	r2,-20(fp)
 800f954:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f958:	e0bffe17 	ldw	r2,-8(fp)
 800f95c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800f960:	0001883a 	nop
 800f964:	e037883a 	mov	sp,fp
 800f968:	df000017 	ldw	fp,0(sp)
 800f96c:	dec00104 	addi	sp,sp,4
 800f970:	f800283a 	ret

0800f974 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800f974:	defffb04 	addi	sp,sp,-20
 800f978:	dfc00415 	stw	ra,16(sp)
 800f97c:	df000315 	stw	fp,12(sp)
 800f980:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800f984:	d0a01017 	ldw	r2,-32704(gp)
 800f988:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800f98c:	d0a6db17 	ldw	r2,-25748(gp)
 800f990:	10800044 	addi	r2,r2,1
 800f994:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f998:	00002e06 	br	800fa54 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800f99c:	e0bffd17 	ldw	r2,-12(fp)
 800f9a0:	10800017 	ldw	r2,0(r2)
 800f9a4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800f9a8:	e0bffd17 	ldw	r2,-12(fp)
 800f9ac:	10800403 	ldbu	r2,16(r2)
 800f9b0:	10803fcc 	andi	r2,r2,255
 800f9b4:	10000426 	beq	r2,zero,800f9c8 <alt_tick+0x54>
 800f9b8:	d0a6db17 	ldw	r2,-25748(gp)
 800f9bc:	1000021e 	bne	r2,zero,800f9c8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800f9c0:	e0bffd17 	ldw	r2,-12(fp)
 800f9c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800f9c8:	e0bffd17 	ldw	r2,-12(fp)
 800f9cc:	10800217 	ldw	r2,8(r2)
 800f9d0:	d0e6db17 	ldw	r3,-25748(gp)
 800f9d4:	18801d36 	bltu	r3,r2,800fa4c <alt_tick+0xd8>
 800f9d8:	e0bffd17 	ldw	r2,-12(fp)
 800f9dc:	10800403 	ldbu	r2,16(r2)
 800f9e0:	10803fcc 	andi	r2,r2,255
 800f9e4:	1000191e 	bne	r2,zero,800fa4c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800f9e8:	e0bffd17 	ldw	r2,-12(fp)
 800f9ec:	10800317 	ldw	r2,12(r2)
 800f9f0:	e0fffd17 	ldw	r3,-12(fp)
 800f9f4:	18c00517 	ldw	r3,20(r3)
 800f9f8:	1809883a 	mov	r4,r3
 800f9fc:	103ee83a 	callr	r2
 800fa00:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800fa04:	e0bfff17 	ldw	r2,-4(fp)
 800fa08:	1000031e 	bne	r2,zero,800fa18 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800fa0c:	e13ffd17 	ldw	r4,-12(fp)
 800fa10:	800f8d80 	call	800f8d8 <alt_alarm_stop>
 800fa14:	00000d06 	br	800fa4c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800fa18:	e0bffd17 	ldw	r2,-12(fp)
 800fa1c:	10c00217 	ldw	r3,8(r2)
 800fa20:	e0bfff17 	ldw	r2,-4(fp)
 800fa24:	1887883a 	add	r3,r3,r2
 800fa28:	e0bffd17 	ldw	r2,-12(fp)
 800fa2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800fa30:	e0bffd17 	ldw	r2,-12(fp)
 800fa34:	10c00217 	ldw	r3,8(r2)
 800fa38:	d0a6db17 	ldw	r2,-25748(gp)
 800fa3c:	1880032e 	bgeu	r3,r2,800fa4c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800fa40:	e0bffd17 	ldw	r2,-12(fp)
 800fa44:	00c00044 	movi	r3,1
 800fa48:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800fa4c:	e0bffe17 	ldw	r2,-8(fp)
 800fa50:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800fa54:	e0fffd17 	ldw	r3,-12(fp)
 800fa58:	d0a01004 	addi	r2,gp,-32704
 800fa5c:	18bfcf1e 	bne	r3,r2,800f99c <__alt_data_end+0xfc00f99c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800fa60:	0001883a 	nop
}
 800fa64:	0001883a 	nop
 800fa68:	e037883a 	mov	sp,fp
 800fa6c:	dfc00117 	ldw	ra,4(sp)
 800fa70:	df000017 	ldw	fp,0(sp)
 800fa74:	dec00204 	addi	sp,sp,8
 800fa78:	f800283a 	ret

0800fa7c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800fa7c:	deffff04 	addi	sp,sp,-4
 800fa80:	df000015 	stw	fp,0(sp)
 800fa84:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800fa88:	000170fa 	wrctl	ienable,zero
}
 800fa8c:	0001883a 	nop
 800fa90:	e037883a 	mov	sp,fp
 800fa94:	df000017 	ldw	fp,0(sp)
 800fa98:	dec00104 	addi	sp,sp,4
 800fa9c:	f800283a 	ret

0800faa0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800faa0:	defffa04 	addi	sp,sp,-24
 800faa4:	dfc00515 	stw	ra,20(sp)
 800faa8:	df000415 	stw	fp,16(sp)
 800faac:	df000404 	addi	fp,sp,16
 800fab0:	e13ffe15 	stw	r4,-8(fp)
 800fab4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800fab8:	e0bfff17 	ldw	r2,-4(fp)
 800fabc:	10800017 	ldw	r2,0(r2)
 800fac0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800fac4:	e13ffe17 	ldw	r4,-8(fp)
 800fac8:	80075840 	call	8007584 <strlen>
 800facc:	10800044 	addi	r2,r2,1
 800fad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800fad4:	00000d06 	br	800fb0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800fad8:	e0bffc17 	ldw	r2,-16(fp)
 800fadc:	10800217 	ldw	r2,8(r2)
 800fae0:	e0fffd17 	ldw	r3,-12(fp)
 800fae4:	180d883a 	mov	r6,r3
 800fae8:	e17ffe17 	ldw	r5,-8(fp)
 800faec:	1009883a 	mov	r4,r2
 800faf0:	800fde40 	call	800fde4 <memcmp>
 800faf4:	1000021e 	bne	r2,zero,800fb00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800faf8:	e0bffc17 	ldw	r2,-16(fp)
 800fafc:	00000706 	br	800fb1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800fb00:	e0bffc17 	ldw	r2,-16(fp)
 800fb04:	10800017 	ldw	r2,0(r2)
 800fb08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800fb0c:	e0fffc17 	ldw	r3,-16(fp)
 800fb10:	e0bfff17 	ldw	r2,-4(fp)
 800fb14:	18bff01e 	bne	r3,r2,800fad8 <__alt_data_end+0xfc00fad8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800fb18:	0005883a 	mov	r2,zero
}
 800fb1c:	e037883a 	mov	sp,fp
 800fb20:	dfc00117 	ldw	ra,4(sp)
 800fb24:	df000017 	ldw	fp,0(sp)
 800fb28:	dec00204 	addi	sp,sp,8
 800fb2c:	f800283a 	ret

0800fb30 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800fb30:	defffb04 	addi	sp,sp,-20
 800fb34:	dfc00415 	stw	ra,16(sp)
 800fb38:	df000315 	stw	fp,12(sp)
 800fb3c:	df000304 	addi	fp,sp,12
 800fb40:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800fb44:	d0a00817 	ldw	r2,-32736(gp)
 800fb48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800fb4c:	00003106 	br	800fc14 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800fb50:	e0bffd17 	ldw	r2,-12(fp)
 800fb54:	10800217 	ldw	r2,8(r2)
 800fb58:	1009883a 	mov	r4,r2
 800fb5c:	80075840 	call	8007584 <strlen>
 800fb60:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800fb64:	e0bffd17 	ldw	r2,-12(fp)
 800fb68:	10c00217 	ldw	r3,8(r2)
 800fb6c:	e0bffe17 	ldw	r2,-8(fp)
 800fb70:	10bfffc4 	addi	r2,r2,-1
 800fb74:	1885883a 	add	r2,r3,r2
 800fb78:	10800003 	ldbu	r2,0(r2)
 800fb7c:	10803fcc 	andi	r2,r2,255
 800fb80:	1080201c 	xori	r2,r2,128
 800fb84:	10bfe004 	addi	r2,r2,-128
 800fb88:	10800bd8 	cmpnei	r2,r2,47
 800fb8c:	1000031e 	bne	r2,zero,800fb9c <alt_find_file+0x6c>
    {
      len -= 1;
 800fb90:	e0bffe17 	ldw	r2,-8(fp)
 800fb94:	10bfffc4 	addi	r2,r2,-1
 800fb98:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800fb9c:	e0bffe17 	ldw	r2,-8(fp)
 800fba0:	e0ffff17 	ldw	r3,-4(fp)
 800fba4:	1885883a 	add	r2,r3,r2
 800fba8:	10800003 	ldbu	r2,0(r2)
 800fbac:	10803fcc 	andi	r2,r2,255
 800fbb0:	1080201c 	xori	r2,r2,128
 800fbb4:	10bfe004 	addi	r2,r2,-128
 800fbb8:	10800be0 	cmpeqi	r2,r2,47
 800fbbc:	1000081e 	bne	r2,zero,800fbe0 <alt_find_file+0xb0>
 800fbc0:	e0bffe17 	ldw	r2,-8(fp)
 800fbc4:	e0ffff17 	ldw	r3,-4(fp)
 800fbc8:	1885883a 	add	r2,r3,r2
 800fbcc:	10800003 	ldbu	r2,0(r2)
 800fbd0:	10803fcc 	andi	r2,r2,255
 800fbd4:	1080201c 	xori	r2,r2,128
 800fbd8:	10bfe004 	addi	r2,r2,-128
 800fbdc:	10000a1e 	bne	r2,zero,800fc08 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800fbe0:	e0bffd17 	ldw	r2,-12(fp)
 800fbe4:	10800217 	ldw	r2,8(r2)
 800fbe8:	e0fffe17 	ldw	r3,-8(fp)
 800fbec:	180d883a 	mov	r6,r3
 800fbf0:	e17fff17 	ldw	r5,-4(fp)
 800fbf4:	1009883a 	mov	r4,r2
 800fbf8:	800fde40 	call	800fde4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800fbfc:	1000021e 	bne	r2,zero,800fc08 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800fc00:	e0bffd17 	ldw	r2,-12(fp)
 800fc04:	00000706 	br	800fc24 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800fc08:	e0bffd17 	ldw	r2,-12(fp)
 800fc0c:	10800017 	ldw	r2,0(r2)
 800fc10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800fc14:	e0fffd17 	ldw	r3,-12(fp)
 800fc18:	d0a00804 	addi	r2,gp,-32736
 800fc1c:	18bfcc1e 	bne	r3,r2,800fb50 <__alt_data_end+0xfc00fb50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800fc20:	0005883a 	mov	r2,zero
}
 800fc24:	e037883a 	mov	sp,fp
 800fc28:	dfc00117 	ldw	ra,4(sp)
 800fc2c:	df000017 	ldw	fp,0(sp)
 800fc30:	dec00204 	addi	sp,sp,8
 800fc34:	f800283a 	ret

0800fc38 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800fc38:	defffa04 	addi	sp,sp,-24
 800fc3c:	dfc00515 	stw	ra,20(sp)
 800fc40:	df000415 	stw	fp,16(sp)
 800fc44:	dc000315 	stw	r16,12(sp)
 800fc48:	df000404 	addi	fp,sp,16
 800fc4c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800fc50:	00bffa04 	movi	r2,-24
 800fc54:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800fc58:	e03ffc15 	stw	zero,-16(fp)
 800fc5c:	00001d06 	br	800fcd4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800fc60:	04020074 	movhi	r16,2049
 800fc64:	84038204 	addi	r16,r16,3592
 800fc68:	e0bffc17 	ldw	r2,-16(fp)
 800fc6c:	01400304 	movi	r5,12
 800fc70:	1009883a 	mov	r4,r2
 800fc74:	80009940 	call	8000994 <__mulsi3>
 800fc78:	8085883a 	add	r2,r16,r2
 800fc7c:	10800017 	ldw	r2,0(r2)
 800fc80:	1000111e 	bne	r2,zero,800fcc8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 800fc84:	04020074 	movhi	r16,2049
 800fc88:	84038204 	addi	r16,r16,3592
 800fc8c:	e0bffc17 	ldw	r2,-16(fp)
 800fc90:	01400304 	movi	r5,12
 800fc94:	1009883a 	mov	r4,r2
 800fc98:	80009940 	call	8000994 <__mulsi3>
 800fc9c:	8085883a 	add	r2,r16,r2
 800fca0:	e0fffe17 	ldw	r3,-8(fp)
 800fca4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800fca8:	d0e00c17 	ldw	r3,-32720(gp)
 800fcac:	e0bffc17 	ldw	r2,-16(fp)
 800fcb0:	1880020e 	bge	r3,r2,800fcbc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 800fcb4:	e0bffc17 	ldw	r2,-16(fp)
 800fcb8:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 800fcbc:	e0bffc17 	ldw	r2,-16(fp)
 800fcc0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800fcc4:	00000606 	br	800fce0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800fcc8:	e0bffc17 	ldw	r2,-16(fp)
 800fccc:	10800044 	addi	r2,r2,1
 800fcd0:	e0bffc15 	stw	r2,-16(fp)
 800fcd4:	e0bffc17 	ldw	r2,-16(fp)
 800fcd8:	10800810 	cmplti	r2,r2,32
 800fcdc:	103fe01e 	bne	r2,zero,800fc60 <__alt_data_end+0xfc00fc60>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800fce0:	e0bffd17 	ldw	r2,-12(fp)
}
 800fce4:	e6ffff04 	addi	sp,fp,-4
 800fce8:	dfc00217 	ldw	ra,8(sp)
 800fcec:	df000117 	ldw	fp,4(sp)
 800fcf0:	dc000017 	ldw	r16,0(sp)
 800fcf4:	dec00304 	addi	sp,sp,12
 800fcf8:	f800283a 	ret

0800fcfc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800fcfc:	defffe04 	addi	sp,sp,-8
 800fd00:	df000115 	stw	fp,4(sp)
 800fd04:	df000104 	addi	fp,sp,4
 800fd08:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800fd0c:	e0bfff17 	ldw	r2,-4(fp)
 800fd10:	10bffe84 	addi	r2,r2,-6
 800fd14:	10c00428 	cmpgeui	r3,r2,16
 800fd18:	18001a1e 	bne	r3,zero,800fd84 <alt_exception_cause_generated_bad_addr+0x88>
 800fd1c:	100690ba 	slli	r3,r2,2
 800fd20:	00820074 	movhi	r2,2049
 800fd24:	10bf4d04 	addi	r2,r2,-716
 800fd28:	1885883a 	add	r2,r3,r2
 800fd2c:	10800017 	ldw	r2,0(r2)
 800fd30:	1000683a 	jmp	r2
 800fd34:	0800fd74 	orhi	zero,at,1013
 800fd38:	0800fd74 	orhi	zero,at,1013
 800fd3c:	0800fd84 	addi	zero,at,1014
 800fd40:	0800fd84 	addi	zero,at,1014
 800fd44:	0800fd84 	addi	zero,at,1014
 800fd48:	0800fd74 	orhi	zero,at,1013
 800fd4c:	0800fd7c 	xorhi	zero,at,1013
 800fd50:	0800fd84 	addi	zero,at,1014
 800fd54:	0800fd74 	orhi	zero,at,1013
 800fd58:	0800fd74 	orhi	zero,at,1013
 800fd5c:	0800fd84 	addi	zero,at,1014
 800fd60:	0800fd74 	orhi	zero,at,1013
 800fd64:	0800fd7c 	xorhi	zero,at,1013
 800fd68:	0800fd84 	addi	zero,at,1014
 800fd6c:	0800fd84 	addi	zero,at,1014
 800fd70:	0800fd74 	orhi	zero,at,1013
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800fd74:	00800044 	movi	r2,1
 800fd78:	00000306 	br	800fd88 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800fd7c:	0005883a 	mov	r2,zero
 800fd80:	00000106 	br	800fd88 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800fd84:	0005883a 	mov	r2,zero
  }
}
 800fd88:	e037883a 	mov	sp,fp
 800fd8c:	df000017 	ldw	fp,0(sp)
 800fd90:	dec00104 	addi	sp,sp,4
 800fd94:	f800283a 	ret

0800fd98 <atexit>:
 800fd98:	200b883a 	mov	r5,r4
 800fd9c:	000f883a 	mov	r7,zero
 800fda0:	000d883a 	mov	r6,zero
 800fda4:	0009883a 	mov	r4,zero
 800fda8:	800fe601 	jmpi	800fe60 <__register_exitproc>

0800fdac <exit>:
 800fdac:	defffe04 	addi	sp,sp,-8
 800fdb0:	000b883a 	mov	r5,zero
 800fdb4:	dc000015 	stw	r16,0(sp)
 800fdb8:	dfc00115 	stw	ra,4(sp)
 800fdbc:	2021883a 	mov	r16,r4
 800fdc0:	800ff780 	call	800ff78 <__call_exitprocs>
 800fdc4:	00820074 	movhi	r2,2049
 800fdc8:	1087fc04 	addi	r2,r2,8176
 800fdcc:	11000017 	ldw	r4,0(r2)
 800fdd0:	20800f17 	ldw	r2,60(r4)
 800fdd4:	10000126 	beq	r2,zero,800fddc <exit+0x30>
 800fdd8:	103ee83a 	callr	r2
 800fddc:	8009883a 	mov	r4,r16
 800fde0:	80100f80 	call	80100f8 <_exit>

0800fde4 <memcmp>:
 800fde4:	01c000c4 	movi	r7,3
 800fde8:	3980192e 	bgeu	r7,r6,800fe50 <memcmp+0x6c>
 800fdec:	2144b03a 	or	r2,r4,r5
 800fdf0:	11c4703a 	and	r2,r2,r7
 800fdf4:	10000f26 	beq	r2,zero,800fe34 <memcmp+0x50>
 800fdf8:	20800003 	ldbu	r2,0(r4)
 800fdfc:	28c00003 	ldbu	r3,0(r5)
 800fe00:	10c0151e 	bne	r2,r3,800fe58 <memcmp+0x74>
 800fe04:	31bfff84 	addi	r6,r6,-2
 800fe08:	01ffffc4 	movi	r7,-1
 800fe0c:	00000406 	br	800fe20 <memcmp+0x3c>
 800fe10:	20800003 	ldbu	r2,0(r4)
 800fe14:	28c00003 	ldbu	r3,0(r5)
 800fe18:	31bfffc4 	addi	r6,r6,-1
 800fe1c:	10c00e1e 	bne	r2,r3,800fe58 <memcmp+0x74>
 800fe20:	21000044 	addi	r4,r4,1
 800fe24:	29400044 	addi	r5,r5,1
 800fe28:	31fff91e 	bne	r6,r7,800fe10 <__alt_data_end+0xfc00fe10>
 800fe2c:	0005883a 	mov	r2,zero
 800fe30:	f800283a 	ret
 800fe34:	20c00017 	ldw	r3,0(r4)
 800fe38:	28800017 	ldw	r2,0(r5)
 800fe3c:	18bfee1e 	bne	r3,r2,800fdf8 <__alt_data_end+0xfc00fdf8>
 800fe40:	31bfff04 	addi	r6,r6,-4
 800fe44:	21000104 	addi	r4,r4,4
 800fe48:	29400104 	addi	r5,r5,4
 800fe4c:	39bff936 	bltu	r7,r6,800fe34 <__alt_data_end+0xfc00fe34>
 800fe50:	303fe91e 	bne	r6,zero,800fdf8 <__alt_data_end+0xfc00fdf8>
 800fe54:	003ff506 	br	800fe2c <__alt_data_end+0xfc00fe2c>
 800fe58:	10c5c83a 	sub	r2,r2,r3
 800fe5c:	f800283a 	ret

0800fe60 <__register_exitproc>:
 800fe60:	defffa04 	addi	sp,sp,-24
 800fe64:	dc000315 	stw	r16,12(sp)
 800fe68:	04020074 	movhi	r16,2049
 800fe6c:	8407fc04 	addi	r16,r16,8176
 800fe70:	80c00017 	ldw	r3,0(r16)
 800fe74:	dc400415 	stw	r17,16(sp)
 800fe78:	dfc00515 	stw	ra,20(sp)
 800fe7c:	18805217 	ldw	r2,328(r3)
 800fe80:	2023883a 	mov	r17,r4
 800fe84:	10003726 	beq	r2,zero,800ff64 <__register_exitproc+0x104>
 800fe88:	10c00117 	ldw	r3,4(r2)
 800fe8c:	010007c4 	movi	r4,31
 800fe90:	20c00e16 	blt	r4,r3,800fecc <__register_exitproc+0x6c>
 800fe94:	1a000044 	addi	r8,r3,1
 800fe98:	8800221e 	bne	r17,zero,800ff24 <__register_exitproc+0xc4>
 800fe9c:	18c00084 	addi	r3,r3,2
 800fea0:	18c7883a 	add	r3,r3,r3
 800fea4:	18c7883a 	add	r3,r3,r3
 800fea8:	12000115 	stw	r8,4(r2)
 800feac:	10c7883a 	add	r3,r2,r3
 800feb0:	19400015 	stw	r5,0(r3)
 800feb4:	0005883a 	mov	r2,zero
 800feb8:	dfc00517 	ldw	ra,20(sp)
 800febc:	dc400417 	ldw	r17,16(sp)
 800fec0:	dc000317 	ldw	r16,12(sp)
 800fec4:	dec00604 	addi	sp,sp,24
 800fec8:	f800283a 	ret
 800fecc:	00800034 	movhi	r2,0
 800fed0:	10800004 	addi	r2,r2,0
 800fed4:	10002626 	beq	r2,zero,800ff70 <__register_exitproc+0x110>
 800fed8:	01006404 	movi	r4,400
 800fedc:	d9400015 	stw	r5,0(sp)
 800fee0:	d9800115 	stw	r6,4(sp)
 800fee4:	d9c00215 	stw	r7,8(sp)
 800fee8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800feec:	d9400017 	ldw	r5,0(sp)
 800fef0:	d9800117 	ldw	r6,4(sp)
 800fef4:	d9c00217 	ldw	r7,8(sp)
 800fef8:	10001d26 	beq	r2,zero,800ff70 <__register_exitproc+0x110>
 800fefc:	81000017 	ldw	r4,0(r16)
 800ff00:	10000115 	stw	zero,4(r2)
 800ff04:	02000044 	movi	r8,1
 800ff08:	22405217 	ldw	r9,328(r4)
 800ff0c:	0007883a 	mov	r3,zero
 800ff10:	12400015 	stw	r9,0(r2)
 800ff14:	20805215 	stw	r2,328(r4)
 800ff18:	10006215 	stw	zero,392(r2)
 800ff1c:	10006315 	stw	zero,396(r2)
 800ff20:	883fde26 	beq	r17,zero,800fe9c <__alt_data_end+0xfc00fe9c>
 800ff24:	18c9883a 	add	r4,r3,r3
 800ff28:	2109883a 	add	r4,r4,r4
 800ff2c:	1109883a 	add	r4,r2,r4
 800ff30:	21802215 	stw	r6,136(r4)
 800ff34:	01800044 	movi	r6,1
 800ff38:	12406217 	ldw	r9,392(r2)
 800ff3c:	30cc983a 	sll	r6,r6,r3
 800ff40:	4992b03a 	or	r9,r9,r6
 800ff44:	12406215 	stw	r9,392(r2)
 800ff48:	21c04215 	stw	r7,264(r4)
 800ff4c:	01000084 	movi	r4,2
 800ff50:	893fd21e 	bne	r17,r4,800fe9c <__alt_data_end+0xfc00fe9c>
 800ff54:	11006317 	ldw	r4,396(r2)
 800ff58:	218cb03a 	or	r6,r4,r6
 800ff5c:	11806315 	stw	r6,396(r2)
 800ff60:	003fce06 	br	800fe9c <__alt_data_end+0xfc00fe9c>
 800ff64:	18805304 	addi	r2,r3,332
 800ff68:	18805215 	stw	r2,328(r3)
 800ff6c:	003fc606 	br	800fe88 <__alt_data_end+0xfc00fe88>
 800ff70:	00bfffc4 	movi	r2,-1
 800ff74:	003fd006 	br	800feb8 <__alt_data_end+0xfc00feb8>

0800ff78 <__call_exitprocs>:
 800ff78:	defff504 	addi	sp,sp,-44
 800ff7c:	df000915 	stw	fp,36(sp)
 800ff80:	dd400615 	stw	r21,24(sp)
 800ff84:	dc800315 	stw	r18,12(sp)
 800ff88:	dfc00a15 	stw	ra,40(sp)
 800ff8c:	ddc00815 	stw	r23,32(sp)
 800ff90:	dd800715 	stw	r22,28(sp)
 800ff94:	dd000515 	stw	r20,20(sp)
 800ff98:	dcc00415 	stw	r19,16(sp)
 800ff9c:	dc400215 	stw	r17,8(sp)
 800ffa0:	dc000115 	stw	r16,4(sp)
 800ffa4:	d9000015 	stw	r4,0(sp)
 800ffa8:	2839883a 	mov	fp,r5
 800ffac:	04800044 	movi	r18,1
 800ffb0:	057fffc4 	movi	r21,-1
 800ffb4:	00820074 	movhi	r2,2049
 800ffb8:	1087fc04 	addi	r2,r2,8176
 800ffbc:	12000017 	ldw	r8,0(r2)
 800ffc0:	45005217 	ldw	r20,328(r8)
 800ffc4:	44c05204 	addi	r19,r8,328
 800ffc8:	a0001c26 	beq	r20,zero,801003c <__call_exitprocs+0xc4>
 800ffcc:	a0800117 	ldw	r2,4(r20)
 800ffd0:	15ffffc4 	addi	r23,r2,-1
 800ffd4:	b8000d16 	blt	r23,zero,801000c <__call_exitprocs+0x94>
 800ffd8:	14000044 	addi	r16,r2,1
 800ffdc:	8421883a 	add	r16,r16,r16
 800ffe0:	8421883a 	add	r16,r16,r16
 800ffe4:	84402004 	addi	r17,r16,128
 800ffe8:	a463883a 	add	r17,r20,r17
 800ffec:	a421883a 	add	r16,r20,r16
 800fff0:	e0001e26 	beq	fp,zero,801006c <__call_exitprocs+0xf4>
 800fff4:	80804017 	ldw	r2,256(r16)
 800fff8:	e0801c26 	beq	fp,r2,801006c <__call_exitprocs+0xf4>
 800fffc:	bdffffc4 	addi	r23,r23,-1
 8010000:	843fff04 	addi	r16,r16,-4
 8010004:	8c7fff04 	addi	r17,r17,-4
 8010008:	bd7ff91e 	bne	r23,r21,800fff0 <__alt_data_end+0xfc00fff0>
 801000c:	00800034 	movhi	r2,0
 8010010:	10800004 	addi	r2,r2,0
 8010014:	10000926 	beq	r2,zero,801003c <__call_exitprocs+0xc4>
 8010018:	a0800117 	ldw	r2,4(r20)
 801001c:	1000301e 	bne	r2,zero,80100e0 <__call_exitprocs+0x168>
 8010020:	a0800017 	ldw	r2,0(r20)
 8010024:	10003226 	beq	r2,zero,80100f0 <__call_exitprocs+0x178>
 8010028:	a009883a 	mov	r4,r20
 801002c:	98800015 	stw	r2,0(r19)
 8010030:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8010034:	9d000017 	ldw	r20,0(r19)
 8010038:	a03fe41e 	bne	r20,zero,800ffcc <__alt_data_end+0xfc00ffcc>
 801003c:	dfc00a17 	ldw	ra,40(sp)
 8010040:	df000917 	ldw	fp,36(sp)
 8010044:	ddc00817 	ldw	r23,32(sp)
 8010048:	dd800717 	ldw	r22,28(sp)
 801004c:	dd400617 	ldw	r21,24(sp)
 8010050:	dd000517 	ldw	r20,20(sp)
 8010054:	dcc00417 	ldw	r19,16(sp)
 8010058:	dc800317 	ldw	r18,12(sp)
 801005c:	dc400217 	ldw	r17,8(sp)
 8010060:	dc000117 	ldw	r16,4(sp)
 8010064:	dec00b04 	addi	sp,sp,44
 8010068:	f800283a 	ret
 801006c:	a0800117 	ldw	r2,4(r20)
 8010070:	80c00017 	ldw	r3,0(r16)
 8010074:	10bfffc4 	addi	r2,r2,-1
 8010078:	15c01426 	beq	r2,r23,80100cc <__call_exitprocs+0x154>
 801007c:	80000015 	stw	zero,0(r16)
 8010080:	183fde26 	beq	r3,zero,800fffc <__alt_data_end+0xfc00fffc>
 8010084:	95c8983a 	sll	r4,r18,r23
 8010088:	a0806217 	ldw	r2,392(r20)
 801008c:	a5800117 	ldw	r22,4(r20)
 8010090:	2084703a 	and	r2,r4,r2
 8010094:	10000b26 	beq	r2,zero,80100c4 <__call_exitprocs+0x14c>
 8010098:	a0806317 	ldw	r2,396(r20)
 801009c:	2088703a 	and	r4,r4,r2
 80100a0:	20000c1e 	bne	r4,zero,80100d4 <__call_exitprocs+0x15c>
 80100a4:	89400017 	ldw	r5,0(r17)
 80100a8:	d9000017 	ldw	r4,0(sp)
 80100ac:	183ee83a 	callr	r3
 80100b0:	a0800117 	ldw	r2,4(r20)
 80100b4:	15bfbf1e 	bne	r2,r22,800ffb4 <__alt_data_end+0xfc00ffb4>
 80100b8:	98800017 	ldw	r2,0(r19)
 80100bc:	153fcf26 	beq	r2,r20,800fffc <__alt_data_end+0xfc00fffc>
 80100c0:	003fbc06 	br	800ffb4 <__alt_data_end+0xfc00ffb4>
 80100c4:	183ee83a 	callr	r3
 80100c8:	003ff906 	br	80100b0 <__alt_data_end+0xfc0100b0>
 80100cc:	a5c00115 	stw	r23,4(r20)
 80100d0:	003feb06 	br	8010080 <__alt_data_end+0xfc010080>
 80100d4:	89000017 	ldw	r4,0(r17)
 80100d8:	183ee83a 	callr	r3
 80100dc:	003ff406 	br	80100b0 <__alt_data_end+0xfc0100b0>
 80100e0:	a0800017 	ldw	r2,0(r20)
 80100e4:	a027883a 	mov	r19,r20
 80100e8:	1029883a 	mov	r20,r2
 80100ec:	003fb606 	br	800ffc8 <__alt_data_end+0xfc00ffc8>
 80100f0:	0005883a 	mov	r2,zero
 80100f4:	003ffb06 	br	80100e4 <__alt_data_end+0xfc0100e4>

080100f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80100f8:	defffd04 	addi	sp,sp,-12
 80100fc:	df000215 	stw	fp,8(sp)
 8010100:	df000204 	addi	fp,sp,8
 8010104:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8010108:	0001883a 	nop
 801010c:	e0bfff17 	ldw	r2,-4(fp)
 8010110:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8010114:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8010118:	10000226 	beq	r2,zero,8010124 <_exit+0x2c>
    ALT_SIM_FAIL();
 801011c:	002af070 	cmpltui	zero,zero,43969
 8010120:	00000106 	br	8010128 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8010124:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8010128:	003fff06 	br	8010128 <__alt_data_end+0xfc010128>
